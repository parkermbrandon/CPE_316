
CPE 316 A7 FFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e60  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013048  08001fe8  08001fe8  00011fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015030  08015030  0003000c  2**0
                  CONTENTS
  4 .ARM          00000000  08015030  08015030  0003000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08015030  08015030  0003000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015030  08015030  00025030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015034  08015034  00025034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08015038  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  08015044  0003000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08015044  0003007c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003000c  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  0003003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000877a  00000000  00000000  000300f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001525  00000000  00000000  0003886e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000600  00000000  00000000  00039d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000040e  00000000  00000000  0003a398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002560c  00000000  00000000  0003a7a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006060  00000000  00000000  0005fdb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e87d2  00000000  00000000  00065e12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001714  00000000  00000000  0014e5e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0014fcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000067f  00000000  00000000  0014fd62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000050  00000000  00000000  001503e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001fd0 	.word	0x08001fd0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001fd0 	.word	0x08001fd0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__gedf2>:
 8000540:	f04f 3cff 	mov.w	ip, #4294967295
 8000544:	e006      	b.n	8000554 <__cmpdf2+0x4>
 8000546:	bf00      	nop

08000548 <__ledf2>:
 8000548:	f04f 0c01 	mov.w	ip, #1
 800054c:	e002      	b.n	8000554 <__cmpdf2+0x4>
 800054e:	bf00      	nop

08000550 <__cmpdf2>:
 8000550:	f04f 0c01 	mov.w	ip, #1
 8000554:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000558:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800055c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000560:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000564:	bf18      	it	ne
 8000566:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800056a:	d01b      	beq.n	80005a4 <__cmpdf2+0x54>
 800056c:	b001      	add	sp, #4
 800056e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000572:	bf0c      	ite	eq
 8000574:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000578:	ea91 0f03 	teqne	r1, r3
 800057c:	bf02      	ittt	eq
 800057e:	ea90 0f02 	teqeq	r0, r2
 8000582:	2000      	moveq	r0, #0
 8000584:	4770      	bxeq	lr
 8000586:	f110 0f00 	cmn.w	r0, #0
 800058a:	ea91 0f03 	teq	r1, r3
 800058e:	bf58      	it	pl
 8000590:	4299      	cmppl	r1, r3
 8000592:	bf08      	it	eq
 8000594:	4290      	cmpeq	r0, r2
 8000596:	bf2c      	ite	cs
 8000598:	17d8      	asrcs	r0, r3, #31
 800059a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800059e:	f040 0001 	orr.w	r0, r0, #1
 80005a2:	4770      	bx	lr
 80005a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005ac:	d102      	bne.n	80005b4 <__cmpdf2+0x64>
 80005ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005b2:	d107      	bne.n	80005c4 <__cmpdf2+0x74>
 80005b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005bc:	d1d6      	bne.n	800056c <__cmpdf2+0x1c>
 80005be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005c2:	d0d3      	beq.n	800056c <__cmpdf2+0x1c>
 80005c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <__aeabi_cdrcmple>:
 80005cc:	4684      	mov	ip, r0
 80005ce:	4610      	mov	r0, r2
 80005d0:	4662      	mov	r2, ip
 80005d2:	468c      	mov	ip, r1
 80005d4:	4619      	mov	r1, r3
 80005d6:	4663      	mov	r3, ip
 80005d8:	e000      	b.n	80005dc <__aeabi_cdcmpeq>
 80005da:	bf00      	nop

080005dc <__aeabi_cdcmpeq>:
 80005dc:	b501      	push	{r0, lr}
 80005de:	f7ff ffb7 	bl	8000550 <__cmpdf2>
 80005e2:	2800      	cmp	r0, #0
 80005e4:	bf48      	it	mi
 80005e6:	f110 0f00 	cmnmi.w	r0, #0
 80005ea:	bd01      	pop	{r0, pc}

080005ec <__aeabi_dcmpeq>:
 80005ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f0:	f7ff fff4 	bl	80005dc <__aeabi_cdcmpeq>
 80005f4:	bf0c      	ite	eq
 80005f6:	2001      	moveq	r0, #1
 80005f8:	2000      	movne	r0, #0
 80005fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fe:	bf00      	nop

08000600 <__aeabi_dcmplt>:
 8000600:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000604:	f7ff ffea 	bl	80005dc <__aeabi_cdcmpeq>
 8000608:	bf34      	ite	cc
 800060a:	2001      	movcc	r0, #1
 800060c:	2000      	movcs	r0, #0
 800060e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000612:	bf00      	nop

08000614 <__aeabi_dcmple>:
 8000614:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000618:	f7ff ffe0 	bl	80005dc <__aeabi_cdcmpeq>
 800061c:	bf94      	ite	ls
 800061e:	2001      	movls	r0, #1
 8000620:	2000      	movhi	r0, #0
 8000622:	f85d fb08 	ldr.w	pc, [sp], #8
 8000626:	bf00      	nop

08000628 <__aeabi_dcmpge>:
 8000628:	f84d ed08 	str.w	lr, [sp, #-8]!
 800062c:	f7ff ffce 	bl	80005cc <__aeabi_cdrcmple>
 8000630:	bf94      	ite	ls
 8000632:	2001      	movls	r0, #1
 8000634:	2000      	movhi	r0, #0
 8000636:	f85d fb08 	ldr.w	pc, [sp], #8
 800063a:	bf00      	nop

0800063c <__aeabi_dcmpgt>:
 800063c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000640:	f7ff ffc4 	bl	80005cc <__aeabi_cdrcmple>
 8000644:	bf34      	ite	cc
 8000646:	2001      	movcc	r0, #1
 8000648:	2000      	movcs	r0, #0
 800064a:	f85d fb08 	ldr.w	pc, [sp], #8
 800064e:	bf00      	nop

08000650 <__aeabi_d2uiz>:
 8000650:	004a      	lsls	r2, r1, #1
 8000652:	d211      	bcs.n	8000678 <__aeabi_d2uiz+0x28>
 8000654:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000658:	d211      	bcs.n	800067e <__aeabi_d2uiz+0x2e>
 800065a:	d50d      	bpl.n	8000678 <__aeabi_d2uiz+0x28>
 800065c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000660:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000664:	d40e      	bmi.n	8000684 <__aeabi_d2uiz+0x34>
 8000666:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800066a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800066e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000672:	fa23 f002 	lsr.w	r0, r3, r2
 8000676:	4770      	bx	lr
 8000678:	f04f 0000 	mov.w	r0, #0
 800067c:	4770      	bx	lr
 800067e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000682:	d102      	bne.n	800068a <__aeabi_d2uiz+0x3a>
 8000684:	f04f 30ff 	mov.w	r0, #4294967295
 8000688:	4770      	bx	lr
 800068a:	f04f 0000 	mov.w	r0, #0
 800068e:	4770      	bx	lr

08000690 <main>:
void Process_ADC_Values(void);
void Start_ADC_Conversion(void);
void ApplyCalibration(uint32_t *value);

/* Main function -------------------------------------------------------------*/
int main(void) {
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  HAL_Init();
 8000694:	f000 fbc2 	bl	8000e1c <HAL_Init>
  SystemClock_Config();
 8000698:	f000 faea 	bl	8000c70 <SystemClock_Config>
  UART_init();
 800069c:	f000 fa70 	bl	8000b80 <UART_init>
  ADC_init();
 80006a0:	f000 f9b4 	bl	8000a0c <ADC_init>

  // Initialize FFT
  arm_rfft_fast_init_f32(&fftHandler, FFT_BUFFER_SIZE);
 80006a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006a8:	4821      	ldr	r0, [pc, #132]	; (8000730 <main+0xa0>)
 80006aa:	f001 fc31 	bl	8001f10 <arm_rfft_fast_init_f32>

  while (1) {
    if (ADC_ready == 1) {
 80006ae:	4b21      	ldr	r3, [pc, #132]	; (8000734 <main+0xa4>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d136      	bne.n	8000726 <main+0x96>
      ADC_ready = 0; // Reset the flag
 80006b8:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <main+0xa4>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]
      ADC1->CR |= ADC_CR_ADSTART; // Start next ADC conversion
 80006be:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <main+0xa8>)
 80006c0:	689b      	ldr	r3, [r3, #8]
 80006c2:	4a1d      	ldr	r2, [pc, #116]	; (8000738 <main+0xa8>)
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	6093      	str	r3, [r2, #8]
//            Frequency = (i * SAMPLING_RATE) / FFT_BUFFER_SIZE;
//
//            sample_index = 0; // Reset the sample index for next round of sampling
//          }

      if (sample_index >= SAMPLES_COUNT) {
 80006ca:	4b1c      	ldr	r3, [pc, #112]	; (800073c <main+0xac>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	2b13      	cmp	r3, #19
 80006d2:	d928      	bls.n	8000726 <main+0x96>
        Process_ADC_Values(); // Process the collected samples
 80006d4:	f000 f8f6 	bl	80008c4 <Process_ADC_Values>
        USART_Print("Min: ");
 80006d8:	4819      	ldr	r0, [pc, #100]	; (8000740 <main+0xb0>)
 80006da:	f000 f86d 	bl	80007b8 <USART_Print>
        USART_SendNumber(min_val); // Send min value
 80006de:	4b19      	ldr	r3, [pc, #100]	; (8000744 <main+0xb4>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 f890 	bl	8000808 <USART_SendNumber>
        USART_Print("mV ");
 80006e8:	4817      	ldr	r0, [pc, #92]	; (8000748 <main+0xb8>)
 80006ea:	f000 f865 	bl	80007b8 <USART_Print>
        USART_Print("  Max: ");
 80006ee:	4817      	ldr	r0, [pc, #92]	; (800074c <main+0xbc>)
 80006f0:	f000 f862 	bl	80007b8 <USART_Print>
        USART_SendNumber(max_val); // Send max value
 80006f4:	4b16      	ldr	r3, [pc, #88]	; (8000750 <main+0xc0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f000 f885 	bl	8000808 <USART_SendNumber>
        USART_Print("mV ");
 80006fe:	4812      	ldr	r0, [pc, #72]	; (8000748 <main+0xb8>)
 8000700:	f000 f85a 	bl	80007b8 <USART_Print>
        USART_Print("  Avg: ");
 8000704:	4813      	ldr	r0, [pc, #76]	; (8000754 <main+0xc4>)
 8000706:	f000 f857 	bl	80007b8 <USART_Print>
        USART_SendNumber(avg_val); // Send average value
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <main+0xc8>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4618      	mov	r0, r3
 8000710:	f000 f87a 	bl	8000808 <USART_SendNumber>
        USART_Print("mV ");
 8000714:	480c      	ldr	r0, [pc, #48]	; (8000748 <main+0xb8>)
 8000716:	f000 f84f 	bl	80007b8 <USART_Print>
        USART_Print("\r\n");
 800071a:	4810      	ldr	r0, [pc, #64]	; (800075c <main+0xcc>)
 800071c:	f000 f84c 	bl	80007b8 <USART_Print>
        sample_index = 0; // Reset the sample index
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <main+0xac>)
 8000722:	2200      	movs	r2, #0
 8000724:	701a      	strb	r2, [r3, #0]
      }
      //HAL_Delay(25);
    }
    HAL_Delay(20);
 8000726:	2014      	movs	r0, #20
 8000728:	f000 fbf4 	bl	8000f14 <HAL_Delay>
    if (ADC_ready == 1) {
 800072c:	e7bf      	b.n	80006ae <main+0x1e>
 800072e:	bf00      	nop
 8000730:	20000028 	.word	0x20000028
 8000734:	20000069 	.word	0x20000069
 8000738:	50040000 	.word	0x50040000
 800073c:	20000068 	.word	0x20000068
 8000740:	08001fe8 	.word	0x08001fe8
 8000744:	2000006c 	.word	0x2000006c
 8000748:	08001ff0 	.word	0x08001ff0
 800074c:	08001ff4 	.word	0x08001ff4
 8000750:	20000070 	.word	0x20000070
 8000754:	08001ffc 	.word	0x08001ffc
 8000758:	20000074 	.word	0x20000074
 800075c:	08002004 	.word	0x08002004

08000760 <ADC1_2_IRQHandler>:
  }
}

/* ADC Interrupt Handler */
void ADC1_2_IRQHandler(void) {
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  if (ADC1->ISR & ADC_ISR_EOC) {
 8000764:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <ADC1_2_IRQHandler+0x48>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f003 0304 	and.w	r3, r3, #4
 800076c:	2b00      	cmp	r3, #0
 800076e:	d016      	beq.n	800079e <ADC1_2_IRQHandler+0x3e>
    ADC_values[sample_index++] = ADC1->DR; // Save ADC value
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <ADC1_2_IRQHandler+0x48>)
 8000772:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000774:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <ADC1_2_IRQHandler+0x4c>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	b2db      	uxtb	r3, r3
 800077a:	1c5a      	adds	r2, r3, #1
 800077c:	b2d0      	uxtb	r0, r2
 800077e:	4a0b      	ldr	r2, [pc, #44]	; (80007ac <ADC1_2_IRQHandler+0x4c>)
 8000780:	7010      	strb	r0, [r2, #0]
 8000782:	461a      	mov	r2, r3
 8000784:	b289      	uxth	r1, r1
 8000786:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <ADC1_2_IRQHandler+0x50>)
 8000788:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	//ADC_val = ADC1->DR;
    ADC_ready = 1; // Set the flag
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <ADC1_2_IRQHandler+0x54>)
 800078e:	2201      	movs	r2, #1
 8000790:	701a      	strb	r2, [r3, #0]
    ADC1->ISR |= ADC_ISR_EOC; // Clear the EOC flag
 8000792:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <ADC1_2_IRQHandler+0x48>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <ADC1_2_IRQHandler+0x48>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	6013      	str	r3, [r2, #0]
  }
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	50040000 	.word	0x50040000
 80007ac:	20000068 	.word	0x20000068
 80007b0:	20000040 	.word	0x20000040
 80007b4:	20000069 	.word	0x20000069

080007b8 <USART_Print>:
//    ADC_ready = 1; // Set the flag
//    ADC1->ISR |= ADC_ISR_EOC; // Clear the EOC flag
//  }
//}

void USART_Print(const char* message) {
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for(i=0; message[i] != 0; i++){				// check for terminating NULL character
 80007c0:	2300      	movs	r3, #0
 80007c2:	73fb      	strb	r3, [r7, #15]
 80007c4:	e010      	b.n	80007e8 <USART_Print+0x30>
		while(!(USART2->ISR & USART_ISR_TXE));	// wait for transmit buffer to be empty
 80007c6:	bf00      	nop
 80007c8:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <USART_Print+0x4c>)
 80007ca:	69db      	ldr	r3, [r3, #28]
 80007cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d0f9      	beq.n	80007c8 <USART_Print+0x10>
		USART2->TDR = message[i];				// transmit character to USART
 80007d4:	7bfb      	ldrb	r3, [r7, #15]
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	4413      	add	r3, r2
 80007da:	781a      	ldrb	r2, [r3, #0]
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <USART_Print+0x4c>)
 80007de:	b292      	uxth	r2, r2
 80007e0:	851a      	strh	r2, [r3, #40]	; 0x28
	for(i=0; message[i] != 0; i++){				// check for terminating NULL character
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	3301      	adds	r3, #1
 80007e6:	73fb      	strb	r3, [r7, #15]
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	4413      	add	r3, r2
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d1e8      	bne.n	80007c6 <USART_Print+0xe>
	}
}
 80007f4:	bf00      	nop
 80007f6:	bf00      	nop
 80007f8:	3714      	adds	r7, #20
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40004400 	.word	0x40004400

08000808 <USART_SendNumber>:

void USART_SendNumber(uint32_t num) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b088      	sub	sp, #32
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  char numStr[11]; // Increased size for null terminator
  uint8_t idx = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	77fb      	strb	r3, [r7, #31]

  // Convert number to string (reverse order)
  do {
    numStr[idx++] = (num % 10) + '0';
 8000814:	6879      	ldr	r1, [r7, #4]
 8000816:	4b2a      	ldr	r3, [pc, #168]	; (80008c0 <USART_SendNumber+0xb8>)
 8000818:	fba3 2301 	umull	r2, r3, r3, r1
 800081c:	08da      	lsrs	r2, r3, #3
 800081e:	4613      	mov	r3, r2
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	4413      	add	r3, r2
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	1aca      	subs	r2, r1, r3
 8000828:	b2d2      	uxtb	r2, r2
 800082a:	7ffb      	ldrb	r3, [r7, #31]
 800082c:	1c59      	adds	r1, r3, #1
 800082e:	77f9      	strb	r1, [r7, #31]
 8000830:	3230      	adds	r2, #48	; 0x30
 8000832:	b2d2      	uxtb	r2, r2
 8000834:	3320      	adds	r3, #32
 8000836:	443b      	add	r3, r7
 8000838:	f803 2c14 	strb.w	r2, [r3, #-20]
    num /= 10;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4a20      	ldr	r2, [pc, #128]	; (80008c0 <USART_SendNumber+0xb8>)
 8000840:	fba2 2303 	umull	r2, r3, r2, r3
 8000844:	08db      	lsrs	r3, r3, #3
 8000846:	607b      	str	r3, [r7, #4]
  } while (num > 0);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d1e2      	bne.n	8000814 <USART_SendNumber+0xc>

  numStr[idx] = '\0'; // Null terminate the string
 800084e:	7ffb      	ldrb	r3, [r7, #31]
 8000850:	3320      	adds	r3, #32
 8000852:	443b      	add	r3, r7
 8000854:	2200      	movs	r2, #0
 8000856:	f803 2c14 	strb.w	r2, [r3, #-20]

  // Reverse the string to correct the order
  for (int i = 0; i < idx / 2; i++) {
 800085a:	2300      	movs	r3, #0
 800085c:	61bb      	str	r3, [r7, #24]
 800085e:	e01f      	b.n	80008a0 <USART_SendNumber+0x98>
    char temp = numStr[i];
 8000860:	f107 020c 	add.w	r2, r7, #12
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	4413      	add	r3, r2
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	75fb      	strb	r3, [r7, #23]
    numStr[i] = numStr[idx - 1 - i];
 800086c:	7ffb      	ldrb	r3, [r7, #31]
 800086e:	1e5a      	subs	r2, r3, #1
 8000870:	69bb      	ldr	r3, [r7, #24]
 8000872:	1ad3      	subs	r3, r2, r3
 8000874:	3320      	adds	r3, #32
 8000876:	443b      	add	r3, r7
 8000878:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 800087c:	f107 020c 	add.w	r2, r7, #12
 8000880:	69bb      	ldr	r3, [r7, #24]
 8000882:	4413      	add	r3, r2
 8000884:	460a      	mov	r2, r1
 8000886:	701a      	strb	r2, [r3, #0]
    numStr[idx - 1 - i] = temp;
 8000888:	7ffb      	ldrb	r3, [r7, #31]
 800088a:	1e5a      	subs	r2, r3, #1
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	1ad3      	subs	r3, r2, r3
 8000890:	3320      	adds	r3, #32
 8000892:	443b      	add	r3, r7
 8000894:	7dfa      	ldrb	r2, [r7, #23]
 8000896:	f803 2c14 	strb.w	r2, [r3, #-20]
  for (int i = 0; i < idx / 2; i++) {
 800089a:	69bb      	ldr	r3, [r7, #24]
 800089c:	3301      	adds	r3, #1
 800089e:	61bb      	str	r3, [r7, #24]
 80008a0:	7ffb      	ldrb	r3, [r7, #31]
 80008a2:	085b      	lsrs	r3, r3, #1
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	461a      	mov	r2, r3
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	4293      	cmp	r3, r2
 80008ac:	dbd8      	blt.n	8000860 <USART_SendNumber+0x58>
  }

  // Send the number string
  USART_Print(numStr);
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff ff80 	bl	80007b8 <USART_Print>
}
 80008b8:	bf00      	nop
 80008ba:	3720      	adds	r7, #32
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	cccccccd 	.word	0xcccccccd

080008c4 <Process_ADC_Values>:

/* Process ADC Values to find Min, Max, and Average */
void Process_ADC_Values(void) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
  uint32_t sum = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
  min_val = ADC_MAX;
 80008ce:	4b35      	ldr	r3, [pc, #212]	; (80009a4 <Process_ADC_Values+0xe0>)
 80008d0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80008d4:	601a      	str	r2, [r3, #0]
  max_val = 0;
 80008d6:	4b34      	ldr	r3, [pc, #208]	; (80009a8 <Process_ADC_Values+0xe4>)
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]

  for (uint8_t i = 0; i < SAMPLES_COUNT; i++) {
 80008dc:	2300      	movs	r3, #0
 80008de:	72fb      	strb	r3, [r7, #11]
 80008e0:	e01c      	b.n	800091c <Process_ADC_Values+0x58>
    uint32_t val = ADC_values[i];
 80008e2:	7afb      	ldrb	r3, [r7, #11]
 80008e4:	4a31      	ldr	r2, [pc, #196]	; (80009ac <Process_ADC_Values+0xe8>)
 80008e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	607b      	str	r3, [r7, #4]
    sum += val;
 80008ee:	68fa      	ldr	r2, [r7, #12]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4413      	add	r3, r2
 80008f4:	60fb      	str	r3, [r7, #12]
    if (val < min_val) min_val = val;
 80008f6:	4b2b      	ldr	r3, [pc, #172]	; (80009a4 <Process_ADC_Values+0xe0>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d202      	bcs.n	8000906 <Process_ADC_Values+0x42>
 8000900:	4a28      	ldr	r2, [pc, #160]	; (80009a4 <Process_ADC_Values+0xe0>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6013      	str	r3, [r2, #0]
    if (val > max_val) max_val = val;
 8000906:	4b28      	ldr	r3, [pc, #160]	; (80009a8 <Process_ADC_Values+0xe4>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	429a      	cmp	r2, r3
 800090e:	d902      	bls.n	8000916 <Process_ADC_Values+0x52>
 8000910:	4a25      	ldr	r2, [pc, #148]	; (80009a8 <Process_ADC_Values+0xe4>)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6013      	str	r3, [r2, #0]
  for (uint8_t i = 0; i < SAMPLES_COUNT; i++) {
 8000916:	7afb      	ldrb	r3, [r7, #11]
 8000918:	3301      	adds	r3, #1
 800091a:	72fb      	strb	r3, [r7, #11]
 800091c:	7afb      	ldrb	r3, [r7, #11]
 800091e:	2b13      	cmp	r3, #19
 8000920:	d9df      	bls.n	80008e2 <Process_ADC_Values+0x1e>
  }

  avg_val = sum / SAMPLES_COUNT;
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	4a22      	ldr	r2, [pc, #136]	; (80009b0 <Process_ADC_Values+0xec>)
 8000926:	fba2 2303 	umull	r2, r3, r2, r3
 800092a:	091b      	lsrs	r3, r3, #4
 800092c:	4a21      	ldr	r2, [pc, #132]	; (80009b4 <Process_ADC_Values+0xf0>)
 800092e:	6013      	str	r3, [r2, #0]

  // Convert to mV
  min_val = (min_val * V_REF) / ADC_MAX;
 8000930:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <Process_ADC_Values+0xe0>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f640 42f2 	movw	r2, #3314	; 0xcf2
 8000938:	fb03 f202 	mul.w	r2, r3, r2
 800093c:	4b1e      	ldr	r3, [pc, #120]	; (80009b8 <Process_ADC_Values+0xf4>)
 800093e:	fba3 1302 	umull	r1, r3, r3, r2
 8000942:	1ad2      	subs	r2, r2, r3
 8000944:	0852      	lsrs	r2, r2, #1
 8000946:	4413      	add	r3, r2
 8000948:	0adb      	lsrs	r3, r3, #11
 800094a:	4a16      	ldr	r2, [pc, #88]	; (80009a4 <Process_ADC_Values+0xe0>)
 800094c:	6013      	str	r3, [r2, #0]
  max_val = (max_val * V_REF) / ADC_MAX;
 800094e:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <Process_ADC_Values+0xe4>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f640 42f2 	movw	r2, #3314	; 0xcf2
 8000956:	fb03 f202 	mul.w	r2, r3, r2
 800095a:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <Process_ADC_Values+0xf4>)
 800095c:	fba3 1302 	umull	r1, r3, r3, r2
 8000960:	1ad2      	subs	r2, r2, r3
 8000962:	0852      	lsrs	r2, r2, #1
 8000964:	4413      	add	r3, r2
 8000966:	0adb      	lsrs	r3, r3, #11
 8000968:	4a0f      	ldr	r2, [pc, #60]	; (80009a8 <Process_ADC_Values+0xe4>)
 800096a:	6013      	str	r3, [r2, #0]
  avg_val = (avg_val * V_REF) / ADC_MAX;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <Process_ADC_Values+0xf0>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f640 42f2 	movw	r2, #3314	; 0xcf2
 8000974:	fb03 f202 	mul.w	r2, r3, r2
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <Process_ADC_Values+0xf4>)
 800097a:	fba3 1302 	umull	r1, r3, r3, r2
 800097e:	1ad2      	subs	r2, r2, r3
 8000980:	0852      	lsrs	r2, r2, #1
 8000982:	4413      	add	r3, r2
 8000984:	0adb      	lsrs	r3, r3, #11
 8000986:	4a0b      	ldr	r2, [pc, #44]	; (80009b4 <Process_ADC_Values+0xf0>)
 8000988:	6013      	str	r3, [r2, #0]

  // Apply linear regression calibration
  ApplyCalibration(&min_val);
 800098a:	4806      	ldr	r0, [pc, #24]	; (80009a4 <Process_ADC_Values+0xe0>)
 800098c:	f000 f816 	bl	80009bc <ApplyCalibration>
  ApplyCalibration(&max_val);
 8000990:	4805      	ldr	r0, [pc, #20]	; (80009a8 <Process_ADC_Values+0xe4>)
 8000992:	f000 f813 	bl	80009bc <ApplyCalibration>
  ApplyCalibration(&avg_val);
 8000996:	4807      	ldr	r0, [pc, #28]	; (80009b4 <Process_ADC_Values+0xf0>)
 8000998:	f000 f810 	bl	80009bc <ApplyCalibration>
}
 800099c:	bf00      	nop
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	2000006c 	.word	0x2000006c
 80009a8:	20000070 	.word	0x20000070
 80009ac:	20000040 	.word	0x20000040
 80009b0:	cccccccd 	.word	0xcccccccd
 80009b4:	20000074 	.word	0x20000074
 80009b8:	00100101 	.word	0x00100101

080009bc <ApplyCalibration>:

void ApplyCalibration(uint32_t *value) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
    double calibratedValue = LINEAR_REGRESSION_SLOPE * (*value) + LINEAR_REGRESSION_INTERCEPT * 1000; // Intercept scaled to mV
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff fd3f 	bl	800044c <__aeabi_ui2d>
 80009ce:	4602      	mov	r2, r0
 80009d0:	460b      	mov	r3, r1
 80009d2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    if (calibratedValue < 0) {
 80009d6:	f04f 0200 	mov.w	r2, #0
 80009da:	f04f 0300 	mov.w	r3, #0
 80009de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80009e2:	f7ff fe0d 	bl	8000600 <__aeabi_dcmplt>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d003      	beq.n	80009f4 <ApplyCalibration+0x38>
        *value = 0; // Avoid underflow
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
    } else {
        *value = (uint32_t)calibratedValue;
    }
}
 80009f2:	e006      	b.n	8000a02 <ApplyCalibration+0x46>
        *value = (uint32_t)calibratedValue;
 80009f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80009f8:	f7ff fe2a 	bl	8000650 <__aeabi_d2uiz>
 80009fc:	4602      	mov	r2, r0
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	601a      	str	r2, [r3, #0]
}
 8000a02:	bf00      	nop
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <ADC_init>:
void Start_ADC_Conversion(void) {
  ADC1->CR |= ADC_CR_ADSTART; // Start ADC conversion
}

void ADC_init()
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
	 RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;
 8000a12:	4b57      	ldr	r3, [pc, #348]	; (8000b70 <ADC_init+0x164>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	4a56      	ldr	r2, [pc, #344]	; (8000b70 <ADC_init+0x164>)
 8000a18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a1c:	64d3      	str	r3, [r2, #76]	; 0x4c

	  ADC123_COMMON->CCR = ((ADC123_COMMON->CCR & ~(ADC_CCR_CKMODE)) | ADC_CCR_CKMODE_0);
 8000a1e:	4b55      	ldr	r3, [pc, #340]	; (8000b74 <ADC_init+0x168>)
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000a26:	4a53      	ldr	r2, [pc, #332]	; (8000b74 <ADC_init+0x168>)
 8000a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a2c:	6093      	str	r3, [r2, #8]
	  ADC1->CR &= ~(ADC_CR_DEEPPWD); // take the ADC out of deep power down mode
 8000a2e:	4b52      	ldr	r3, [pc, #328]	; (8000b78 <ADC_init+0x16c>)
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	4a51      	ldr	r2, [pc, #324]	; (8000b78 <ADC_init+0x16c>)
 8000a34:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000a38:	6093      	str	r3, [r2, #8]
	  ADC1->CR |= (ADC_CR_ADVREGEN);  // enable to voltage regulator gaurds the voltage
 8000a3a:	4b4f      	ldr	r3, [pc, #316]	; (8000b78 <ADC_init+0x16c>)
 8000a3c:	689b      	ldr	r3, [r3, #8]
 8000a3e:	4a4e      	ldr	r2, [pc, #312]	; (8000b78 <ADC_init+0x16c>)
 8000a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a44:	6093      	str	r3, [r2, #8]
	  for(uint16_t i =0; i<1000; i++)
 8000a46:	2300      	movs	r3, #0
 8000a48:	80fb      	strh	r3, [r7, #6]
 8000a4a:	e00b      	b.n	8000a64 <ADC_init+0x58>
		  for(uint16_t j = 0;  j<100; j++); //delay at least 20us
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	80bb      	strh	r3, [r7, #4]
 8000a50:	e002      	b.n	8000a58 <ADC_init+0x4c>
 8000a52:	88bb      	ldrh	r3, [r7, #4]
 8000a54:	3301      	adds	r3, #1
 8000a56:	80bb      	strh	r3, [r7, #4]
 8000a58:	88bb      	ldrh	r3, [r7, #4]
 8000a5a:	2b63      	cmp	r3, #99	; 0x63
 8000a5c:	d9f9      	bls.n	8000a52 <ADC_init+0x46>
	  for(uint16_t i =0; i<1000; i++)
 8000a5e:	88fb      	ldrh	r3, [r7, #6]
 8000a60:	3301      	adds	r3, #1
 8000a62:	80fb      	strh	r3, [r7, #6]
 8000a64:	88fb      	ldrh	r3, [r7, #6]
 8000a66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a6a:	d3ef      	bcc.n	8000a4c <ADC_init+0x40>
	  //calibrate, you need to digital calibrate
	  ADC1->CR &= ~(ADC_CR_ADEN | ADC_CR_ADCALDIF); //ensure adc is not enabled, single ended calibration
 8000a6c:	4b42      	ldr	r3, [pc, #264]	; (8000b78 <ADC_init+0x16c>)
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	4a41      	ldr	r2, [pc, #260]	; (8000b78 <ADC_init+0x16c>)
 8000a72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000a76:	f023 0301 	bic.w	r3, r3, #1
 8000a7a:	6093      	str	r3, [r2, #8]
	  ADC1->CR |= ADC_CR_ADCAL;       // start calinration
 8000a7c:	4b3e      	ldr	r3, [pc, #248]	; (8000b78 <ADC_init+0x16c>)
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	4a3d      	ldr	r2, [pc, #244]	; (8000b78 <ADC_init+0x16c>)
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	6093      	str	r3, [r2, #8]
	  while(ADC1->CR & ADC_CR_ADCAL); // waiat for calibration
 8000a88:	bf00      	nop
 8000a8a:	4b3b      	ldr	r3, [pc, #236]	; (8000b78 <ADC_init+0x16c>)
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	dbfb      	blt.n	8000a8a <ADC_init+0x7e>

	  //configure single ended mode before enabling ADC
	  ADC1->DIFSEL &= ~(ADC_DIFSEL_DIFSEL_5); // PA0 is ADC1_IN5, single endede mode
 8000a92:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <ADC_init+0x16c>)
 8000a94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000a98:	4a37      	ldr	r2, [pc, #220]	; (8000b78 <ADC_init+0x16c>)
 8000a9a:	f023 0320 	bic.w	r3, r3, #32
 8000a9e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

	  //enable ADC

	  ADC1->ISR |= (ADC_ISR_ADRDY);
 8000aa2:	4b35      	ldr	r3, [pc, #212]	; (8000b78 <ADC_init+0x16c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a34      	ldr	r2, [pc, #208]	; (8000b78 <ADC_init+0x16c>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6013      	str	r3, [r2, #0]
	  ADC1->CR |= ADC_CR_ADEN;
 8000aae:	4b32      	ldr	r3, [pc, #200]	; (8000b78 <ADC_init+0x16c>)
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	4a31      	ldr	r2, [pc, #196]	; (8000b78 <ADC_init+0x16c>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6093      	str	r3, [r2, #8]
	  while(!(ADC1->ISR & ADC_ISR_ADRDY));
 8000aba:	bf00      	nop
 8000abc:	4b2e      	ldr	r3, [pc, #184]	; (8000b78 <ADC_init+0x16c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f003 0301 	and.w	r3, r3, #1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d0f9      	beq.n	8000abc <ADC_init+0xb0>
	  ADC1->ISR |= (ADC_ISR_ADRDY);
 8000ac8:	4b2b      	ldr	r3, [pc, #172]	; (8000b78 <ADC_init+0x16c>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a2a      	ldr	r2, [pc, #168]	; (8000b78 <ADC_init+0x16c>)
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	6013      	str	r3, [r2, #0]


	  //configure ADC
	  ADC1->SQR1 = (ADC1->SQR1 & ~(ADC_SQR1_SQ1_Msk | ADC_SQR1_L_Msk)) |(5 << ADC_SQR1_SQ1_Pos);
 8000ad4:	4b28      	ldr	r3, [pc, #160]	; (8000b78 <ADC_init+0x16c>)
 8000ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad8:	f423 63f9 	bic.w	r3, r3, #1992	; 0x7c8
 8000adc:	f023 0307 	bic.w	r3, r3, #7
 8000ae0:	4a25      	ldr	r2, [pc, #148]	; (8000b78 <ADC_init+0x16c>)
 8000ae2:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8000ae6:	6313      	str	r3, [r2, #48]	; 0x30

	  // Set sample time for channel 5 to 47.5 ADC clock cycles
	  //ADC1->SMPR1 = (ADC1->SMPR1 & ~(ADC_SMPR1_SMP5)) | (0x4 << ADC_SMPR1_SMP5_Pos);

	   // Set sample time for channel 5 to 640.5 ADC clock cycles
	   ADC1->SMPR1 = (ADC1->SMPR1 & ~(ADC_SMPR1_SMP5)) | (0x7 << ADC_SMPR1_SMP5_Pos);
 8000ae8:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <ADC_init+0x16c>)
 8000aea:	695b      	ldr	r3, [r3, #20]
 8000aec:	4a22      	ldr	r2, [pc, #136]	; (8000b78 <ADC_init+0x16c>)
 8000aee:	f443 3360 	orr.w	r3, r3, #229376	; 0x38000
 8000af2:	6153      	str	r3, [r2, #20]


	  //ADC1->CFGR |= ADC_CFGR_CONT;
	  ADC1->IER |= (ADC_IER_EOC);
 8000af4:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <ADC_init+0x16c>)
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	4a1f      	ldr	r2, [pc, #124]	; (8000b78 <ADC_init+0x16c>)
 8000afa:	f043 0304 	orr.w	r3, r3, #4
 8000afe:	6053      	str	r3, [r2, #4]
	  ADC1->ISR &= ~(ADC_ISR_EOC);
 8000b00:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <ADC_init+0x16c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a1c      	ldr	r2, [pc, #112]	; (8000b78 <ADC_init+0x16c>)
 8000b06:	f023 0304 	bic.w	r3, r3, #4
 8000b0a:	6013      	str	r3, [r2, #0]
	  NVIC->ISER[0] = (1 << (ADC1_2_IRQn & 0x1F));
 8000b0c:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <ADC_init+0x170>)
 8000b0e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b12:	601a      	str	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000b14:	b662      	cpsie	i
}
 8000b16:	bf00      	nop
	  __enable_irq();

	  //configure GPIO pin PA0
	  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
 8000b18:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <ADC_init+0x164>)
 8000b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1c:	4a14      	ldr	r2, [pc, #80]	; (8000b70 <ADC_init+0x164>)
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	64d3      	str	r3, [r2, #76]	; 0x4c
	  GPIOA->AFR[0] = (GPIOA->AFR[0] & ~(GPIO_AFRL_AFSEL0)) | (7 << GPIO_AFRL_AFSEL0_Pos);
 8000b24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b28:	6a1b      	ldr	r3, [r3, #32]
 8000b2a:	f023 030f 	bic.w	r3, r3, #15
 8000b2e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b32:	f043 0307 	orr.w	r3, r3, #7
 8000b36:	6213      	str	r3, [r2, #32]
	  GPIOA->MODER |= (GPIO_MODER_MODE0); // analog mode for Pa0
 8000b38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b42:	f043 0303 	orr.w	r3, r3, #3
 8000b46:	6013      	str	r3, [r2, #0]
	  GPIOA->ASCR |= GPIO_ASCR_ASC0; //set Pa0 to analog
 8000b48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b4e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	62d3      	str	r3, [r2, #44]	; 0x2c

	  ADC1->CR |= ADC_CR_ADSTART; // start conversion
 8000b58:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <ADC_init+0x16c>)
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	4a06      	ldr	r2, [pc, #24]	; (8000b78 <ADC_init+0x16c>)
 8000b5e:	f043 0304 	orr.w	r3, r3, #4
 8000b62:	6093      	str	r3, [r2, #8]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	40021000 	.word	0x40021000
 8000b74:	50040300 	.word	0x50040300
 8000b78:	50040000 	.word	0x50040000
 8000b7c:	e000e100 	.word	0xe000e100

08000b80 <UART_init>:

void UART_init(void){
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
 8000b84:	4b37      	ldr	r3, [pc, #220]	; (8000c64 <UART_init+0xe4>)
 8000b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b88:	4a36      	ldr	r2, [pc, #216]	; (8000c64 <UART_init+0xe4>)
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL2 | GPIO_AFRL_AFSEL3);// mask AF selection
 8000b90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b94:	6a1b      	ldr	r3, [r3, #32]
 8000b96:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000b9e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= ((7 << GPIO_AFRL_AFSEL2_Pos ) |// select USART2 (AF7)
 8000ba0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ba4:	6a1b      	ldr	r3, [r3, #32]
 8000ba6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000baa:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000bae:	6213      	str	r3, [r2, #32]
			   (7 << GPIO_AFRL_AFSEL3_Pos));// for PA2 and PA3
	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3);// push-pull output for PA2, PA3
 8000bb0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bba:	f023 030c 	bic.w	r3, r3, #12
 8000bbe:	6053      	str	r3, [r2, #4]
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3);// no pull ups on PA2, PA3
 8000bc0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bc4:	68db      	ldr	r3, [r3, #12]
 8000bc6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000bce:	60d3      	str	r3, [r2, #12]
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED2 | GPIO_OSPEEDR_OSPEED2);// low speed
 8000bd0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bda:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000bde:	6093      	str	r3, [r2, #8]
	GPIOA->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3);	// enable alternate function
 8000be0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000bee:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);// for PA2 and PA3
 8000bf0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bfa:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000bfe:	6013      	str	r3, [r2, #0]

	// Configure USART2 connected to the debugger virtual COM port
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;// enable USART by turning on system clock
 8000c00:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <UART_init+0xe4>)
 8000c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c04:	4a17      	ldr	r2, [pc, #92]	; (8000c64 <UART_init+0xe4>)
 8000c06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c0a:	6593      	str	r3, [r2, #88]	; 0x58
	USART2->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0);//set data to 8 bits
 8000c0c:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <UART_init+0xe8>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a15      	ldr	r2, [pc, #84]	; (8000c68 <UART_init+0xe8>)
 8000c12:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8000c16:	6013      	str	r3, [r2, #0]
	USART2->BRR = F_CLK / 115200;// baudrate for 115200
 8000c18:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <UART_init+0xe8>)
 8000c1a:	22d0      	movs	r2, #208	; 0xd0
 8000c1c:	60da      	str	r2, [r3, #12]
	USART2->CR1 |= USART_CR1_UE;// enable USART
 8000c1e:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <UART_init+0xe8>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a11      	ldr	r2, [pc, #68]	; (8000c68 <UART_init+0xe8>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6013      	str	r3, [r2, #0]
	USART2->CR1 |= (USART_CR1_TE | USART_CR1_RE);// enable transmit and receive for USART
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <UART_init+0xe8>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a0e      	ldr	r2, [pc, #56]	; (8000c68 <UART_init+0xe8>)
 8000c30:	f043 030c 	orr.w	r3, r3, #12
 8000c34:	6013      	str	r3, [r2, #0]

	// enable interrupts for USART2 receive
	USART2->CR1 |= USART_CR1_RXNEIE;// enable RXNE interrupt on USART2
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <UART_init+0xe8>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a0b      	ldr	r2, [pc, #44]	; (8000c68 <UART_init+0xe8>)
 8000c3c:	f043 0320 	orr.w	r3, r3, #32
 8000c40:	6013      	str	r3, [r2, #0]
	USART2->ISR &= ~(USART_ISR_RXNE);// clear interrupt flagwhile (message[i] != 0)
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <UART_init+0xe8>)
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	4a08      	ldr	r2, [pc, #32]	; (8000c68 <UART_init+0xe8>)
 8000c48:	f023 0320 	bic.w	r3, r3, #32
 8000c4c:	61d3      	str	r3, [r2, #28]

	NVIC->ISER[1] = (1 << (USART2_IRQn & 0x1F));// enable USART2 ISR
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <UART_init+0xec>)
 8000c50:	2240      	movs	r2, #64	; 0x40
 8000c52:	605a      	str	r2, [r3, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8000c54:	b662      	cpsie	i
}
 8000c56:	bf00      	nop
	__enable_irq();
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40004400 	.word	0x40004400
 8000c6c:	e000e100 	.word	0xe000e100

08000c70 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b096      	sub	sp, #88	; 0x58
 8000c74:	af00      	add	r7, sp, #0
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	2244      	movs	r2, #68	; 0x44
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f001 f97a 	bl	8001f78 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c84:	463b      	mov	r3, r7
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
 8000c90:	611a      	str	r2, [r3, #16]

	  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c92:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c96:	f000 fa55 	bl	8001144 <HAL_PWREx_ControlVoltageScaling>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <SystemClock_Config+0x34>
	  {
	    Error_Handler();
 8000ca0:	f000 f82c 	bl	8000cfc <Error_Handler>
	  }

	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ca4:	2310      	movs	r3, #16
 8000ca6:	617b      	str	r3, [r7, #20]
	  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	633b      	str	r3, [r7, #48]	; 0x30
	  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8000cac:	2390      	movs	r3, #144	; 0x90
 8000cae:	637b      	str	r3, [r7, #52]	; 0x34
	  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 fa97 	bl	80011f0 <HAL_RCC_OscConfig>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <SystemClock_Config+0x5c>
	  {
	    Error_Handler();
 8000cc8:	f000 f818 	bl	8000cfc <Error_Handler>
	  }
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ccc:	230f      	movs	r3, #15
 8000cce:	603b      	str	r3, [r7, #0]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	607b      	str	r3, [r7, #4]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60bb      	str	r3, [r7, #8]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	613b      	str	r3, [r7, #16]

	  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 fe5f 	bl	80019a8 <HAL_RCC_ClockConfig>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <SystemClock_Config+0x84>
	  {
	    Error_Handler();
 8000cf0:	f000 f804 	bl	8000cfc <Error_Handler>
	  }
}
 8000cf4:	bf00      	nop
 8000cf6:	3758      	adds	r7, #88	; 0x58
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <Error_Handler>:


void Error_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d00:	b672      	cpsid	i
}
 8000d02:	bf00      	nop
  __disable_irq();
  while (1){}
 8000d04:	e7fe      	b.n	8000d04 <Error_Handler+0x8>
	...

08000d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <HAL_MspInit+0x44>)
 8000d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d12:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <HAL_MspInit+0x44>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6613      	str	r3, [r2, #96]	; 0x60
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <HAL_MspInit+0x44>)
 8000d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <HAL_MspInit+0x44>)
 8000d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2a:	4a08      	ldr	r2, [pc, #32]	; (8000d4c <HAL_MspInit+0x44>)
 8000d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d30:	6593      	str	r3, [r2, #88]	; 0x58
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_MspInit+0x44>)
 8000d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	40021000 	.word	0x40021000

08000d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <NMI_Handler+0x4>

08000d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <HardFault_Handler+0x4>

08000d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <MemManage_Handler+0x4>

08000d62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d66:	e7fe      	b.n	8000d66 <BusFault_Handler+0x4>

08000d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <UsageFault_Handler+0x4>

08000d6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d9c:	f000 f89a 	bl	8000ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <SystemInit+0x20>)
 8000daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dae:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <SystemInit+0x20>)
 8000db0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000dc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e00 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dcc:	f7ff ffea 	bl	8000da4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dd0:	480c      	ldr	r0, [pc, #48]	; (8000e04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dd2:	490d      	ldr	r1, [pc, #52]	; (8000e08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	; (8000e0c <LoopForever+0xe>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd8:	e002      	b.n	8000de0 <LoopCopyDataInit>

08000dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dde:	3304      	adds	r3, #4

08000de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de4:	d3f9      	bcc.n	8000dda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de6:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000de8:	4c0a      	ldr	r4, [pc, #40]	; (8000e14 <LoopForever+0x16>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dec:	e001      	b.n	8000df2 <LoopFillZerobss>

08000dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df0:	3204      	adds	r2, #4

08000df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df4:	d3fb      	bcc.n	8000dee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000df6:	f001 f8c7 	bl	8001f88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dfa:	f7ff fc49 	bl	8000690 <main>

08000dfe <LoopForever>:

LoopForever:
    b LoopForever
 8000dfe:	e7fe      	b.n	8000dfe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e00:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e0c:	08015038 	.word	0x08015038
  ldr r2, =_sbss
 8000e10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e14:	2000007c 	.word	0x2000007c

08000e18 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e18:	e7fe      	b.n	8000e18 <ADC3_IRQHandler>
	...

08000e1c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e26:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <HAL_Init+0x3c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a0b      	ldr	r2, [pc, #44]	; (8000e58 <HAL_Init+0x3c>)
 8000e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e30:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e32:	2003      	movs	r0, #3
 8000e34:	f000 f944 	bl	80010c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f000 f80f 	bl	8000e5c <HAL_InitTick>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d002      	beq.n	8000e4a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	71fb      	strb	r3, [r7, #7]
 8000e48:	e001      	b.n	8000e4e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e4a:	f7ff ff5d 	bl	8000d08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40022000 	.word	0x40022000

08000e5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e64:	2300      	movs	r3, #0
 8000e66:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e68:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <HAL_InitTick+0x6c>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d023      	beq.n	8000eb8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e70:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <HAL_InitTick+0x70>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <HAL_InitTick+0x6c>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 f941 	bl	800110e <HAL_SYSTICK_Config>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d10f      	bne.n	8000eb2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b0f      	cmp	r3, #15
 8000e96:	d809      	bhi.n	8000eac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	6879      	ldr	r1, [r7, #4]
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea0:	f000 f919 	bl	80010d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ea4:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <HAL_InitTick+0x74>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6013      	str	r3, [r2, #0]
 8000eaa:	e007      	b.n	8000ebc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	73fb      	strb	r3, [r7, #15]
 8000eb0:	e004      	b.n	8000ebc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	73fb      	strb	r3, [r7, #15]
 8000eb6:	e001      	b.n	8000ebc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000008 	.word	0x20000008
 8000ecc:	20000000 	.word	0x20000000
 8000ed0:	20000004 	.word	0x20000004

08000ed4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_IncTick+0x20>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_IncTick+0x24>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <HAL_IncTick+0x24>)
 8000ee6:	6013      	str	r3, [r2, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	20000078 	.word	0x20000078

08000efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return uwTick;
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <HAL_GetTick+0x14>)
 8000f02:	681b      	ldr	r3, [r3, #0]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000078 	.word	0x20000078

08000f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f1c:	f7ff ffee 	bl	8000efc <HAL_GetTick>
 8000f20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f2c:	d005      	beq.n	8000f3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <HAL_Delay+0x44>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	461a      	mov	r2, r3
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4413      	add	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f3a:	bf00      	nop
 8000f3c:	f7ff ffde 	bl	8000efc <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	68fa      	ldr	r2, [r7, #12]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d8f7      	bhi.n	8000f3c <HAL_Delay+0x28>
  {
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000008 	.word	0x20000008

08000f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f78:	4013      	ands	r3, r2
 8000f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8e:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	60d3      	str	r3, [r2, #12]
}
 8000f94:	bf00      	nop
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <__NVIC_GetPriorityGrouping+0x18>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	0a1b      	lsrs	r3, r3, #8
 8000fae:	f003 0307 	and.w	r3, r3, #7
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	db0a      	blt.n	8000fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	490c      	ldr	r1, [pc, #48]	; (800100c <__NVIC_SetPriority+0x4c>)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	0112      	lsls	r2, r2, #4
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe8:	e00a      	b.n	8001000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4908      	ldr	r1, [pc, #32]	; (8001010 <__NVIC_SetPriority+0x50>)
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	f003 030f 	and.w	r3, r3, #15
 8000ff6:	3b04      	subs	r3, #4
 8000ff8:	0112      	lsls	r2, r2, #4
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	761a      	strb	r2, [r3, #24]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000e100 	.word	0xe000e100
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001014:	b480      	push	{r7}
 8001016:	b089      	sub	sp, #36	; 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f1c3 0307 	rsb	r3, r3, #7
 800102e:	2b04      	cmp	r3, #4
 8001030:	bf28      	it	cs
 8001032:	2304      	movcs	r3, #4
 8001034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3304      	adds	r3, #4
 800103a:	2b06      	cmp	r3, #6
 800103c:	d902      	bls.n	8001044 <NVIC_EncodePriority+0x30>
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3b03      	subs	r3, #3
 8001042:	e000      	b.n	8001046 <NVIC_EncodePriority+0x32>
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	f04f 32ff 	mov.w	r2, #4294967295
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43da      	mvns	r2, r3
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	401a      	ands	r2, r3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800105c:	f04f 31ff 	mov.w	r1, #4294967295
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	fa01 f303 	lsl.w	r3, r1, r3
 8001066:	43d9      	mvns	r1, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	4313      	orrs	r3, r2
         );
}
 800106e:	4618      	mov	r0, r3
 8001070:	3724      	adds	r7, #36	; 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
	...

0800107c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3b01      	subs	r3, #1
 8001088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800108c:	d301      	bcc.n	8001092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108e:	2301      	movs	r3, #1
 8001090:	e00f      	b.n	80010b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001092:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <SysTick_Config+0x40>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109a:	210f      	movs	r1, #15
 800109c:	f04f 30ff 	mov.w	r0, #4294967295
 80010a0:	f7ff ff8e 	bl	8000fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a4:	4b05      	ldr	r3, [pc, #20]	; (80010bc <SysTick_Config+0x40>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010aa:	4b04      	ldr	r3, [pc, #16]	; (80010bc <SysTick_Config+0x40>)
 80010ac:	2207      	movs	r2, #7
 80010ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	e000e010 	.word	0xe000e010

080010c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff47 	bl	8000f5c <__NVIC_SetPriorityGrouping>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b086      	sub	sp, #24
 80010da:	af00      	add	r7, sp, #0
 80010dc:	4603      	mov	r3, r0
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
 80010e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010e8:	f7ff ff5c 	bl	8000fa4 <__NVIC_GetPriorityGrouping>
 80010ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	68b9      	ldr	r1, [r7, #8]
 80010f2:	6978      	ldr	r0, [r7, #20]
 80010f4:	f7ff ff8e 	bl	8001014 <NVIC_EncodePriority>
 80010f8:	4602      	mov	r2, r0
 80010fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fe:	4611      	mov	r1, r2
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff5d 	bl	8000fc0 <__NVIC_SetPriority>
}
 8001106:	bf00      	nop
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff ffb0 	bl	800107c <SysTick_Config>
 800111c:	4603      	mov	r3, r0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <HAL_PWREx_GetVoltageRange+0x18>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001134:	4618      	mov	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	40007000 	.word	0x40007000

08001144 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001152:	d130      	bne.n	80011b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001154:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800115c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001160:	d038      	beq.n	80011d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001162:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800116a:	4a1e      	ldr	r2, [pc, #120]	; (80011e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800116c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001170:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001172:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2232      	movs	r2, #50	; 0x32
 8001178:	fb02 f303 	mul.w	r3, r2, r3
 800117c:	4a1b      	ldr	r2, [pc, #108]	; (80011ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800117e:	fba2 2303 	umull	r2, r3, r2, r3
 8001182:	0c9b      	lsrs	r3, r3, #18
 8001184:	3301      	adds	r3, #1
 8001186:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001188:	e002      	b.n	8001190 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	3b01      	subs	r3, #1
 800118e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800119c:	d102      	bne.n	80011a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1f2      	bne.n	800118a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011a4:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a6:	695b      	ldr	r3, [r3, #20]
 80011a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011b0:	d110      	bne.n	80011d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e00f      	b.n	80011d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011c2:	d007      	beq.n	80011d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011cc:	4a05      	ldr	r2, [pc, #20]	; (80011e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3714      	adds	r7, #20
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40007000 	.word	0x40007000
 80011e8:	20000000 	.word	0x20000000
 80011ec:	431bde83 	.word	0x431bde83

080011f0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e3ca      	b.n	8001998 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001202:	4b97      	ldr	r3, [pc, #604]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 030c 	and.w	r3, r3, #12
 800120a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800120c:	4b94      	ldr	r3, [pc, #592]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	f003 0303 	and.w	r3, r3, #3
 8001214:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0310 	and.w	r3, r3, #16
 800121e:	2b00      	cmp	r3, #0
 8001220:	f000 80e4 	beq.w	80013ec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d007      	beq.n	800123a <HAL_RCC_OscConfig+0x4a>
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	2b0c      	cmp	r3, #12
 800122e:	f040 808b 	bne.w	8001348 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	2b01      	cmp	r3, #1
 8001236:	f040 8087 	bne.w	8001348 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800123a:	4b89      	ldr	r3, [pc, #548]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d005      	beq.n	8001252 <HAL_RCC_OscConfig+0x62>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	699b      	ldr	r3, [r3, #24]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e3a2      	b.n	8001998 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a1a      	ldr	r2, [r3, #32]
 8001256:	4b82      	ldr	r3, [pc, #520]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0308 	and.w	r3, r3, #8
 800125e:	2b00      	cmp	r3, #0
 8001260:	d004      	beq.n	800126c <HAL_RCC_OscConfig+0x7c>
 8001262:	4b7f      	ldr	r3, [pc, #508]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800126a:	e005      	b.n	8001278 <HAL_RCC_OscConfig+0x88>
 800126c:	4b7c      	ldr	r3, [pc, #496]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 800126e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001272:	091b      	lsrs	r3, r3, #4
 8001274:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001278:	4293      	cmp	r3, r2
 800127a:	d223      	bcs.n	80012c4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a1b      	ldr	r3, [r3, #32]
 8001280:	4618      	mov	r0, r3
 8001282:	f000 fd1d 	bl	8001cc0 <RCC_SetFlashLatencyFromMSIRange>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e383      	b.n	8001998 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001290:	4b73      	ldr	r3, [pc, #460]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a72      	ldr	r2, [pc, #456]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 8001296:	f043 0308 	orr.w	r3, r3, #8
 800129a:	6013      	str	r3, [r2, #0]
 800129c:	4b70      	ldr	r3, [pc, #448]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a1b      	ldr	r3, [r3, #32]
 80012a8:	496d      	ldr	r1, [pc, #436]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 80012aa:	4313      	orrs	r3, r2
 80012ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ae:	4b6c      	ldr	r3, [pc, #432]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	4968      	ldr	r1, [pc, #416]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 80012be:	4313      	orrs	r3, r2
 80012c0:	604b      	str	r3, [r1, #4]
 80012c2:	e025      	b.n	8001310 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012c4:	4b66      	ldr	r3, [pc, #408]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a65      	ldr	r2, [pc, #404]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 80012ca:	f043 0308 	orr.w	r3, r3, #8
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	4b63      	ldr	r3, [pc, #396]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a1b      	ldr	r3, [r3, #32]
 80012dc:	4960      	ldr	r1, [pc, #384]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012e2:	4b5f      	ldr	r3, [pc, #380]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	021b      	lsls	r3, r3, #8
 80012f0:	495b      	ldr	r1, [pc, #364]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d109      	bne.n	8001310 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a1b      	ldr	r3, [r3, #32]
 8001300:	4618      	mov	r0, r3
 8001302:	f000 fcdd 	bl	8001cc0 <RCC_SetFlashLatencyFromMSIRange>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e343      	b.n	8001998 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001310:	f000 fc4a 	bl	8001ba8 <HAL_RCC_GetSysClockFreq>
 8001314:	4602      	mov	r2, r0
 8001316:	4b52      	ldr	r3, [pc, #328]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	091b      	lsrs	r3, r3, #4
 800131c:	f003 030f 	and.w	r3, r3, #15
 8001320:	4950      	ldr	r1, [pc, #320]	; (8001464 <HAL_RCC_OscConfig+0x274>)
 8001322:	5ccb      	ldrb	r3, [r1, r3]
 8001324:	f003 031f 	and.w	r3, r3, #31
 8001328:	fa22 f303 	lsr.w	r3, r2, r3
 800132c:	4a4e      	ldr	r2, [pc, #312]	; (8001468 <HAL_RCC_OscConfig+0x278>)
 800132e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001330:	4b4e      	ldr	r3, [pc, #312]	; (800146c <HAL_RCC_OscConfig+0x27c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fd91 	bl	8000e5c <HAL_InitTick>
 800133a:	4603      	mov	r3, r0
 800133c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800133e:	7bfb      	ldrb	r3, [r7, #15]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d052      	beq.n	80013ea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001344:	7bfb      	ldrb	r3, [r7, #15]
 8001346:	e327      	b.n	8001998 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d032      	beq.n	80013b6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001350:	4b43      	ldr	r3, [pc, #268]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a42      	ldr	r2, [pc, #264]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800135c:	f7ff fdce 	bl	8000efc <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001364:	f7ff fdca 	bl	8000efc <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e310      	b.n	8001998 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001376:	4b3a      	ldr	r3, [pc, #232]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0f0      	beq.n	8001364 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001382:	4b37      	ldr	r3, [pc, #220]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a36      	ldr	r2, [pc, #216]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 8001388:	f043 0308 	orr.w	r3, r3, #8
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	4b34      	ldr	r3, [pc, #208]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a1b      	ldr	r3, [r3, #32]
 800139a:	4931      	ldr	r1, [pc, #196]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 800139c:	4313      	orrs	r3, r2
 800139e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013a0:	4b2f      	ldr	r3, [pc, #188]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	69db      	ldr	r3, [r3, #28]
 80013ac:	021b      	lsls	r3, r3, #8
 80013ae:	492c      	ldr	r1, [pc, #176]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	604b      	str	r3, [r1, #4]
 80013b4:	e01a      	b.n	80013ec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013b6:	4b2a      	ldr	r3, [pc, #168]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a29      	ldr	r2, [pc, #164]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 80013bc:	f023 0301 	bic.w	r3, r3, #1
 80013c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013c2:	f7ff fd9b 	bl	8000efc <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013ca:	f7ff fd97 	bl	8000efc <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e2dd      	b.n	8001998 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013dc:	4b20      	ldr	r3, [pc, #128]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1f0      	bne.n	80013ca <HAL_RCC_OscConfig+0x1da>
 80013e8:	e000      	b.n	80013ec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d074      	beq.n	80014e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	2b08      	cmp	r3, #8
 80013fc:	d005      	beq.n	800140a <HAL_RCC_OscConfig+0x21a>
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	2b0c      	cmp	r3, #12
 8001402:	d10e      	bne.n	8001422 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	2b03      	cmp	r3, #3
 8001408:	d10b      	bne.n	8001422 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d064      	beq.n	80014e0 <HAL_RCC_OscConfig+0x2f0>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d160      	bne.n	80014e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e2ba      	b.n	8001998 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800142a:	d106      	bne.n	800143a <HAL_RCC_OscConfig+0x24a>
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a0b      	ldr	r2, [pc, #44]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 8001432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001436:	6013      	str	r3, [r2, #0]
 8001438:	e026      	b.n	8001488 <HAL_RCC_OscConfig+0x298>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001442:	d115      	bne.n	8001470 <HAL_RCC_OscConfig+0x280>
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a05      	ldr	r2, [pc, #20]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 800144a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800144e:	6013      	str	r3, [r2, #0]
 8001450:	4b03      	ldr	r3, [pc, #12]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a02      	ldr	r2, [pc, #8]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 8001456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	e014      	b.n	8001488 <HAL_RCC_OscConfig+0x298>
 800145e:	bf00      	nop
 8001460:	40021000 	.word	0x40021000
 8001464:	08002008 	.word	0x08002008
 8001468:	20000000 	.word	0x20000000
 800146c:	20000004 	.word	0x20000004
 8001470:	4ba0      	ldr	r3, [pc, #640]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a9f      	ldr	r2, [pc, #636]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 8001476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	4b9d      	ldr	r3, [pc, #628]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a9c      	ldr	r2, [pc, #624]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 8001482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d013      	beq.n	80014b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001490:	f7ff fd34 	bl	8000efc <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001498:	f7ff fd30 	bl	8000efc <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b64      	cmp	r3, #100	; 0x64
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e276      	b.n	8001998 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014aa:	4b92      	ldr	r3, [pc, #584]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f0      	beq.n	8001498 <HAL_RCC_OscConfig+0x2a8>
 80014b6:	e014      	b.n	80014e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b8:	f7ff fd20 	bl	8000efc <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c0:	f7ff fd1c 	bl	8000efc <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b64      	cmp	r3, #100	; 0x64
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e262      	b.n	8001998 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014d2:	4b88      	ldr	r3, [pc, #544]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1f0      	bne.n	80014c0 <HAL_RCC_OscConfig+0x2d0>
 80014de:	e000      	b.n	80014e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d060      	beq.n	80015b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	2b04      	cmp	r3, #4
 80014f2:	d005      	beq.n	8001500 <HAL_RCC_OscConfig+0x310>
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	2b0c      	cmp	r3, #12
 80014f8:	d119      	bne.n	800152e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d116      	bne.n	800152e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001500:	4b7c      	ldr	r3, [pc, #496]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001508:	2b00      	cmp	r3, #0
 800150a:	d005      	beq.n	8001518 <HAL_RCC_OscConfig+0x328>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d101      	bne.n	8001518 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e23f      	b.n	8001998 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001518:	4b76      	ldr	r3, [pc, #472]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	061b      	lsls	r3, r3, #24
 8001526:	4973      	ldr	r1, [pc, #460]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 8001528:	4313      	orrs	r3, r2
 800152a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800152c:	e040      	b.n	80015b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d023      	beq.n	800157e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001536:	4b6f      	ldr	r3, [pc, #444]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a6e      	ldr	r2, [pc, #440]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 800153c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001540:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001542:	f7ff fcdb 	bl	8000efc <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800154a:	f7ff fcd7 	bl	8000efc <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e21d      	b.n	8001998 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800155c:	4b65      	ldr	r3, [pc, #404]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0f0      	beq.n	800154a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001568:	4b62      	ldr	r3, [pc, #392]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	061b      	lsls	r3, r3, #24
 8001576:	495f      	ldr	r1, [pc, #380]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 8001578:	4313      	orrs	r3, r2
 800157a:	604b      	str	r3, [r1, #4]
 800157c:	e018      	b.n	80015b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800157e:	4b5d      	ldr	r3, [pc, #372]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a5c      	ldr	r2, [pc, #368]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 8001584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001588:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158a:	f7ff fcb7 	bl	8000efc <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001592:	f7ff fcb3 	bl	8000efc <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e1f9      	b.n	8001998 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015a4:	4b53      	ldr	r3, [pc, #332]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1f0      	bne.n	8001592 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0308 	and.w	r3, r3, #8
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d03c      	beq.n	8001636 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d01c      	beq.n	80015fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015c4:	4b4b      	ldr	r3, [pc, #300]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 80015c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ca:	4a4a      	ldr	r2, [pc, #296]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d4:	f7ff fc92 	bl	8000efc <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015dc:	f7ff fc8e 	bl	8000efc <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e1d4      	b.n	8001998 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ee:	4b41      	ldr	r3, [pc, #260]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 80015f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0ef      	beq.n	80015dc <HAL_RCC_OscConfig+0x3ec>
 80015fc:	e01b      	b.n	8001636 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015fe:	4b3d      	ldr	r3, [pc, #244]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 8001600:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001604:	4a3b      	ldr	r2, [pc, #236]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 8001606:	f023 0301 	bic.w	r3, r3, #1
 800160a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160e:	f7ff fc75 	bl	8000efc <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001616:	f7ff fc71 	bl	8000efc <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e1b7      	b.n	8001998 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001628:	4b32      	ldr	r3, [pc, #200]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 800162a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1ef      	bne.n	8001616 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0304 	and.w	r3, r3, #4
 800163e:	2b00      	cmp	r3, #0
 8001640:	f000 80a6 	beq.w	8001790 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001644:	2300      	movs	r3, #0
 8001646:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001648:	4b2a      	ldr	r3, [pc, #168]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 800164a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d10d      	bne.n	8001670 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001654:	4b27      	ldr	r3, [pc, #156]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 8001656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001658:	4a26      	ldr	r2, [pc, #152]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 800165a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800165e:	6593      	str	r3, [r2, #88]	; 0x58
 8001660:	4b24      	ldr	r3, [pc, #144]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 8001662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800166c:	2301      	movs	r3, #1
 800166e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001670:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <HAL_RCC_OscConfig+0x508>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001678:	2b00      	cmp	r3, #0
 800167a:	d118      	bne.n	80016ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800167c:	4b1e      	ldr	r3, [pc, #120]	; (80016f8 <HAL_RCC_OscConfig+0x508>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a1d      	ldr	r2, [pc, #116]	; (80016f8 <HAL_RCC_OscConfig+0x508>)
 8001682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001686:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001688:	f7ff fc38 	bl	8000efc <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001690:	f7ff fc34 	bl	8000efc <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e17a      	b.n	8001998 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <HAL_RCC_OscConfig+0x508>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0f0      	beq.n	8001690 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d108      	bne.n	80016c8 <HAL_RCC_OscConfig+0x4d8>
 80016b6:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 80016b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016bc:	4a0d      	ldr	r2, [pc, #52]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016c6:	e029      	b.n	800171c <HAL_RCC_OscConfig+0x52c>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	2b05      	cmp	r3, #5
 80016ce:	d115      	bne.n	80016fc <HAL_RCC_OscConfig+0x50c>
 80016d0:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 80016d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d6:	4a07      	ldr	r2, [pc, #28]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016e0:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 80016e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016e6:	4a03      	ldr	r2, [pc, #12]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016f0:	e014      	b.n	800171c <HAL_RCC_OscConfig+0x52c>
 80016f2:	bf00      	nop
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40007000 	.word	0x40007000
 80016fc:	4b9c      	ldr	r3, [pc, #624]	; (8001970 <HAL_RCC_OscConfig+0x780>)
 80016fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001702:	4a9b      	ldr	r2, [pc, #620]	; (8001970 <HAL_RCC_OscConfig+0x780>)
 8001704:	f023 0301 	bic.w	r3, r3, #1
 8001708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800170c:	4b98      	ldr	r3, [pc, #608]	; (8001970 <HAL_RCC_OscConfig+0x780>)
 800170e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001712:	4a97      	ldr	r2, [pc, #604]	; (8001970 <HAL_RCC_OscConfig+0x780>)
 8001714:	f023 0304 	bic.w	r3, r3, #4
 8001718:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d016      	beq.n	8001752 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001724:	f7ff fbea 	bl	8000efc <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800172a:	e00a      	b.n	8001742 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800172c:	f7ff fbe6 	bl	8000efc <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	f241 3288 	movw	r2, #5000	; 0x1388
 800173a:	4293      	cmp	r3, r2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e12a      	b.n	8001998 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001742:	4b8b      	ldr	r3, [pc, #556]	; (8001970 <HAL_RCC_OscConfig+0x780>)
 8001744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0ed      	beq.n	800172c <HAL_RCC_OscConfig+0x53c>
 8001750:	e015      	b.n	800177e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001752:	f7ff fbd3 	bl	8000efc <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001758:	e00a      	b.n	8001770 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800175a:	f7ff fbcf 	bl	8000efc <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	f241 3288 	movw	r2, #5000	; 0x1388
 8001768:	4293      	cmp	r3, r2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e113      	b.n	8001998 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001770:	4b7f      	ldr	r3, [pc, #508]	; (8001970 <HAL_RCC_OscConfig+0x780>)
 8001772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1ed      	bne.n	800175a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800177e:	7ffb      	ldrb	r3, [r7, #31]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d105      	bne.n	8001790 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001784:	4b7a      	ldr	r3, [pc, #488]	; (8001970 <HAL_RCC_OscConfig+0x780>)
 8001786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001788:	4a79      	ldr	r2, [pc, #484]	; (8001970 <HAL_RCC_OscConfig+0x780>)
 800178a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800178e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001794:	2b00      	cmp	r3, #0
 8001796:	f000 80fe 	beq.w	8001996 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179e:	2b02      	cmp	r3, #2
 80017a0:	f040 80d0 	bne.w	8001944 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017a4:	4b72      	ldr	r3, [pc, #456]	; (8001970 <HAL_RCC_OscConfig+0x780>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f003 0203 	and.w	r2, r3, #3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d130      	bne.n	800181a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	3b01      	subs	r3, #1
 80017c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d127      	bne.n	800181a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d11f      	bne.n	800181a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017e4:	2a07      	cmp	r2, #7
 80017e6:	bf14      	ite	ne
 80017e8:	2201      	movne	r2, #1
 80017ea:	2200      	moveq	r2, #0
 80017ec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d113      	bne.n	800181a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017fc:	085b      	lsrs	r3, r3, #1
 80017fe:	3b01      	subs	r3, #1
 8001800:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001802:	429a      	cmp	r2, r3
 8001804:	d109      	bne.n	800181a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	085b      	lsrs	r3, r3, #1
 8001812:	3b01      	subs	r3, #1
 8001814:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001816:	429a      	cmp	r2, r3
 8001818:	d06e      	beq.n	80018f8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	2b0c      	cmp	r3, #12
 800181e:	d069      	beq.n	80018f4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001820:	4b53      	ldr	r3, [pc, #332]	; (8001970 <HAL_RCC_OscConfig+0x780>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d105      	bne.n	8001838 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800182c:	4b50      	ldr	r3, [pc, #320]	; (8001970 <HAL_RCC_OscConfig+0x780>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e0ad      	b.n	8001998 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800183c:	4b4c      	ldr	r3, [pc, #304]	; (8001970 <HAL_RCC_OscConfig+0x780>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a4b      	ldr	r2, [pc, #300]	; (8001970 <HAL_RCC_OscConfig+0x780>)
 8001842:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001846:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001848:	f7ff fb58 	bl	8000efc <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001850:	f7ff fb54 	bl	8000efc <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e09a      	b.n	8001998 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001862:	4b43      	ldr	r3, [pc, #268]	; (8001970 <HAL_RCC_OscConfig+0x780>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f0      	bne.n	8001850 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800186e:	4b40      	ldr	r3, [pc, #256]	; (8001970 <HAL_RCC_OscConfig+0x780>)
 8001870:	68da      	ldr	r2, [r3, #12]
 8001872:	4b40      	ldr	r3, [pc, #256]	; (8001974 <HAL_RCC_OscConfig+0x784>)
 8001874:	4013      	ands	r3, r2
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800187e:	3a01      	subs	r2, #1
 8001880:	0112      	lsls	r2, r2, #4
 8001882:	4311      	orrs	r1, r2
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001888:	0212      	lsls	r2, r2, #8
 800188a:	4311      	orrs	r1, r2
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001890:	0852      	lsrs	r2, r2, #1
 8001892:	3a01      	subs	r2, #1
 8001894:	0552      	lsls	r2, r2, #21
 8001896:	4311      	orrs	r1, r2
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800189c:	0852      	lsrs	r2, r2, #1
 800189e:	3a01      	subs	r2, #1
 80018a0:	0652      	lsls	r2, r2, #25
 80018a2:	4311      	orrs	r1, r2
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018a8:	0912      	lsrs	r2, r2, #4
 80018aa:	0452      	lsls	r2, r2, #17
 80018ac:	430a      	orrs	r2, r1
 80018ae:	4930      	ldr	r1, [pc, #192]	; (8001970 <HAL_RCC_OscConfig+0x780>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018b4:	4b2e      	ldr	r3, [pc, #184]	; (8001970 <HAL_RCC_OscConfig+0x780>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a2d      	ldr	r2, [pc, #180]	; (8001970 <HAL_RCC_OscConfig+0x780>)
 80018ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018c0:	4b2b      	ldr	r3, [pc, #172]	; (8001970 <HAL_RCC_OscConfig+0x780>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	4a2a      	ldr	r2, [pc, #168]	; (8001970 <HAL_RCC_OscConfig+0x780>)
 80018c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018cc:	f7ff fb16 	bl	8000efc <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d4:	f7ff fb12 	bl	8000efc <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e058      	b.n	8001998 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018e6:	4b22      	ldr	r3, [pc, #136]	; (8001970 <HAL_RCC_OscConfig+0x780>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018f2:	e050      	b.n	8001996 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e04f      	b.n	8001998 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018f8:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <HAL_RCC_OscConfig+0x780>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d148      	bne.n	8001996 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001904:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <HAL_RCC_OscConfig+0x780>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a19      	ldr	r2, [pc, #100]	; (8001970 <HAL_RCC_OscConfig+0x780>)
 800190a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800190e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001910:	4b17      	ldr	r3, [pc, #92]	; (8001970 <HAL_RCC_OscConfig+0x780>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	4a16      	ldr	r2, [pc, #88]	; (8001970 <HAL_RCC_OscConfig+0x780>)
 8001916:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800191a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800191c:	f7ff faee 	bl	8000efc <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001924:	f7ff faea 	bl	8000efc <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e030      	b.n	8001998 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001936:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <HAL_RCC_OscConfig+0x780>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0x734>
 8001942:	e028      	b.n	8001996 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	2b0c      	cmp	r3, #12
 8001948:	d023      	beq.n	8001992 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800194a:	4b09      	ldr	r3, [pc, #36]	; (8001970 <HAL_RCC_OscConfig+0x780>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a08      	ldr	r2, [pc, #32]	; (8001970 <HAL_RCC_OscConfig+0x780>)
 8001950:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001954:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001956:	f7ff fad1 	bl	8000efc <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800195c:	e00c      	b.n	8001978 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195e:	f7ff facd 	bl	8000efc <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d905      	bls.n	8001978 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e013      	b.n	8001998 <HAL_RCC_OscConfig+0x7a8>
 8001970:	40021000 	.word	0x40021000
 8001974:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <HAL_RCC_OscConfig+0x7b0>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1ec      	bne.n	800195e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_RCC_OscConfig+0x7b0>)
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	4905      	ldr	r1, [pc, #20]	; (80019a0 <HAL_RCC_OscConfig+0x7b0>)
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_RCC_OscConfig+0x7b4>)
 800198c:	4013      	ands	r3, r2
 800198e:	60cb      	str	r3, [r1, #12]
 8001990:	e001      	b.n	8001996 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	3720      	adds	r7, #32
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40021000 	.word	0x40021000
 80019a4:	feeefffc 	.word	0xfeeefffc

080019a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e0e7      	b.n	8001b8c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019bc:	4b75      	ldr	r3, [pc, #468]	; (8001b94 <HAL_RCC_ClockConfig+0x1ec>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d910      	bls.n	80019ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ca:	4b72      	ldr	r3, [pc, #456]	; (8001b94 <HAL_RCC_ClockConfig+0x1ec>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 0207 	bic.w	r2, r3, #7
 80019d2:	4970      	ldr	r1, [pc, #448]	; (8001b94 <HAL_RCC_ClockConfig+0x1ec>)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019da:	4b6e      	ldr	r3, [pc, #440]	; (8001b94 <HAL_RCC_ClockConfig+0x1ec>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0cf      	b.n	8001b8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d010      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	4b66      	ldr	r3, [pc, #408]	; (8001b98 <HAL_RCC_ClockConfig+0x1f0>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d908      	bls.n	8001a1a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a08:	4b63      	ldr	r3, [pc, #396]	; (8001b98 <HAL_RCC_ClockConfig+0x1f0>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4960      	ldr	r1, [pc, #384]	; (8001b98 <HAL_RCC_ClockConfig+0x1f0>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d04c      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d107      	bne.n	8001a3e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a2e:	4b5a      	ldr	r3, [pc, #360]	; (8001b98 <HAL_RCC_ClockConfig+0x1f0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d121      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e0a6      	b.n	8001b8c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d107      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a46:	4b54      	ldr	r3, [pc, #336]	; (8001b98 <HAL_RCC_ClockConfig+0x1f0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d115      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e09a      	b.n	8001b8c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d107      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a5e:	4b4e      	ldr	r3, [pc, #312]	; (8001b98 <HAL_RCC_ClockConfig+0x1f0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d109      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e08e      	b.n	8001b8c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a6e:	4b4a      	ldr	r3, [pc, #296]	; (8001b98 <HAL_RCC_ClockConfig+0x1f0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e086      	b.n	8001b8c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a7e:	4b46      	ldr	r3, [pc, #280]	; (8001b98 <HAL_RCC_ClockConfig+0x1f0>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f023 0203 	bic.w	r2, r3, #3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	4943      	ldr	r1, [pc, #268]	; (8001b98 <HAL_RCC_ClockConfig+0x1f0>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a90:	f7ff fa34 	bl	8000efc <HAL_GetTick>
 8001a94:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a96:	e00a      	b.n	8001aae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a98:	f7ff fa30 	bl	8000efc <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e06e      	b.n	8001b8c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aae:	4b3a      	ldr	r3, [pc, #232]	; (8001b98 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 020c 	and.w	r2, r3, #12
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d1eb      	bne.n	8001a98 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d010      	beq.n	8001aee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	4b31      	ldr	r3, [pc, #196]	; (8001b98 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d208      	bcs.n	8001aee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001adc:	4b2e      	ldr	r3, [pc, #184]	; (8001b98 <HAL_RCC_ClockConfig+0x1f0>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	492b      	ldr	r1, [pc, #172]	; (8001b98 <HAL_RCC_ClockConfig+0x1f0>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aee:	4b29      	ldr	r3, [pc, #164]	; (8001b94 <HAL_RCC_ClockConfig+0x1ec>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d210      	bcs.n	8001b1e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afc:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <HAL_RCC_ClockConfig+0x1ec>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f023 0207 	bic.w	r2, r3, #7
 8001b04:	4923      	ldr	r1, [pc, #140]	; (8001b94 <HAL_RCC_ClockConfig+0x1ec>)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0c:	4b21      	ldr	r3, [pc, #132]	; (8001b94 <HAL_RCC_ClockConfig+0x1ec>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d001      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e036      	b.n	8001b8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0304 	and.w	r3, r3, #4
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d008      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b2a:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <HAL_RCC_ClockConfig+0x1f0>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	4918      	ldr	r1, [pc, #96]	; (8001b98 <HAL_RCC_ClockConfig+0x1f0>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0308 	and.w	r3, r3, #8
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d009      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b48:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <HAL_RCC_ClockConfig+0x1f0>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	4910      	ldr	r1, [pc, #64]	; (8001b98 <HAL_RCC_ClockConfig+0x1f0>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b5c:	f000 f824 	bl	8001ba8 <HAL_RCC_GetSysClockFreq>
 8001b60:	4602      	mov	r2, r0
 8001b62:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <HAL_RCC_ClockConfig+0x1f0>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	091b      	lsrs	r3, r3, #4
 8001b68:	f003 030f 	and.w	r3, r3, #15
 8001b6c:	490b      	ldr	r1, [pc, #44]	; (8001b9c <HAL_RCC_ClockConfig+0x1f4>)
 8001b6e:	5ccb      	ldrb	r3, [r1, r3]
 8001b70:	f003 031f 	and.w	r3, r3, #31
 8001b74:	fa22 f303 	lsr.w	r3, r2, r3
 8001b78:	4a09      	ldr	r2, [pc, #36]	; (8001ba0 <HAL_RCC_ClockConfig+0x1f8>)
 8001b7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b7c:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <HAL_RCC_ClockConfig+0x1fc>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff f96b 	bl	8000e5c <HAL_InitTick>
 8001b86:	4603      	mov	r3, r0
 8001b88:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b8a:	7afb      	ldrb	r3, [r7, #11]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40022000 	.word	0x40022000
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	08002008 	.word	0x08002008
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	20000004 	.word	0x20000004

08001ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b089      	sub	sp, #36	; 0x24
 8001bac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bb6:	4b3e      	ldr	r3, [pc, #248]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 030c 	and.w	r3, r3, #12
 8001bbe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bc0:	4b3b      	ldr	r3, [pc, #236]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d005      	beq.n	8001bdc <HAL_RCC_GetSysClockFreq+0x34>
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	2b0c      	cmp	r3, #12
 8001bd4:	d121      	bne.n	8001c1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d11e      	bne.n	8001c1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001bdc:	4b34      	ldr	r3, [pc, #208]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0308 	and.w	r3, r3, #8
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d107      	bne.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001be8:	4b31      	ldr	r3, [pc, #196]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bee:	0a1b      	lsrs	r3, r3, #8
 8001bf0:	f003 030f 	and.w	r3, r3, #15
 8001bf4:	61fb      	str	r3, [r7, #28]
 8001bf6:	e005      	b.n	8001c04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001bf8:	4b2d      	ldr	r3, [pc, #180]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	091b      	lsrs	r3, r3, #4
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c04:	4a2b      	ldr	r2, [pc, #172]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d10d      	bne.n	8001c30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c18:	e00a      	b.n	8001c30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	d102      	bne.n	8001c26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c20:	4b25      	ldr	r3, [pc, #148]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c22:	61bb      	str	r3, [r7, #24]
 8001c24:	e004      	b.n	8001c30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d101      	bne.n	8001c30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c2c:	4b23      	ldr	r3, [pc, #140]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x114>)
 8001c2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	2b0c      	cmp	r3, #12
 8001c34:	d134      	bne.n	8001ca0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c36:	4b1e      	ldr	r3, [pc, #120]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d003      	beq.n	8001c4e <HAL_RCC_GetSysClockFreq+0xa6>
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	2b03      	cmp	r3, #3
 8001c4a:	d003      	beq.n	8001c54 <HAL_RCC_GetSysClockFreq+0xac>
 8001c4c:	e005      	b.n	8001c5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c4e:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c50:	617b      	str	r3, [r7, #20]
      break;
 8001c52:	e005      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c54:	4b19      	ldr	r3, [pc, #100]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x114>)
 8001c56:	617b      	str	r3, [r7, #20]
      break;
 8001c58:	e002      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	617b      	str	r3, [r7, #20]
      break;
 8001c5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	091b      	lsrs	r3, r3, #4
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	0a1b      	lsrs	r3, r3, #8
 8001c74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	fb03 f202 	mul.w	r2, r3, r2
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c86:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	0e5b      	lsrs	r3, r3, #25
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	3301      	adds	r3, #1
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ca0:	69bb      	ldr	r3, [r7, #24]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3724      	adds	r7, #36	; 0x24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	08002018 	.word	0x08002018
 8001cb8:	00f42400 	.word	0x00f42400
 8001cbc:	007a1200 	.word	0x007a1200

08001cc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001cc8:	2300      	movs	r3, #0
 8001cca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ccc:	4b2a      	ldr	r3, [pc, #168]	; (8001d78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001cd8:	f7ff fa26 	bl	8001128 <HAL_PWREx_GetVoltageRange>
 8001cdc:	6178      	str	r0, [r7, #20]
 8001cde:	e014      	b.n	8001d0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ce0:	4b25      	ldr	r3, [pc, #148]	; (8001d78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce4:	4a24      	ldr	r2, [pc, #144]	; (8001d78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cea:	6593      	str	r3, [r2, #88]	; 0x58
 8001cec:	4b22      	ldr	r3, [pc, #136]	; (8001d78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001cf8:	f7ff fa16 	bl	8001128 <HAL_PWREx_GetVoltageRange>
 8001cfc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001cfe:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d02:	4a1d      	ldr	r2, [pc, #116]	; (8001d78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d08:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d10:	d10b      	bne.n	8001d2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b80      	cmp	r3, #128	; 0x80
 8001d16:	d919      	bls.n	8001d4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2ba0      	cmp	r3, #160	; 0xa0
 8001d1c:	d902      	bls.n	8001d24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d1e:	2302      	movs	r3, #2
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	e013      	b.n	8001d4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d24:	2301      	movs	r3, #1
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	e010      	b.n	8001d4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b80      	cmp	r3, #128	; 0x80
 8001d2e:	d902      	bls.n	8001d36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d30:	2303      	movs	r3, #3
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	e00a      	b.n	8001d4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b80      	cmp	r3, #128	; 0x80
 8001d3a:	d102      	bne.n	8001d42 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	e004      	b.n	8001d4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b70      	cmp	r3, #112	; 0x70
 8001d46:	d101      	bne.n	8001d4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d48:	2301      	movs	r3, #1
 8001d4a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f023 0207 	bic.w	r2, r3, #7
 8001d54:	4909      	ldr	r1, [pc, #36]	; (8001d7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d5c:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d001      	beq.n	8001d6e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40022000 	.word	0x40022000

08001d80 <arm_rfft_32_fast_init_f32>:
 8001d80:	b178      	cbz	r0, 8001da2 <arm_rfft_32_fast_init_f32+0x22>
 8001d82:	b430      	push	{r4, r5}
 8001d84:	4908      	ldr	r1, [pc, #32]	; (8001da8 <arm_rfft_32_fast_init_f32+0x28>)
 8001d86:	4a09      	ldr	r2, [pc, #36]	; (8001dac <arm_rfft_32_fast_init_f32+0x2c>)
 8001d88:	2310      	movs	r3, #16
 8001d8a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8001d8e:	8003      	strh	r3, [r0, #0]
 8001d90:	2520      	movs	r5, #32
 8001d92:	2414      	movs	r4, #20
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <arm_rfft_32_fast_init_f32+0x30>)
 8001d96:	8205      	strh	r5, [r0, #16]
 8001d98:	8184      	strh	r4, [r0, #12]
 8001d9a:	6143      	str	r3, [r0, #20]
 8001d9c:	bc30      	pop	{r4, r5}
 8001d9e:	2000      	movs	r0, #0
 8001da0:	4770      	bx	lr
 8001da2:	f04f 30ff 	mov.w	r0, #4294967295
 8001da6:	4770      	bx	lr
 8001da8:	08002ff8 	.word	0x08002ff8
 8001dac:	08007930 	.word	0x08007930
 8001db0:	080106b0 	.word	0x080106b0

08001db4 <arm_rfft_64_fast_init_f32>:
 8001db4:	b178      	cbz	r0, 8001dd6 <arm_rfft_64_fast_init_f32+0x22>
 8001db6:	b430      	push	{r4, r5}
 8001db8:	4908      	ldr	r1, [pc, #32]	; (8001ddc <arm_rfft_64_fast_init_f32+0x28>)
 8001dba:	4a09      	ldr	r2, [pc, #36]	; (8001de0 <arm_rfft_64_fast_init_f32+0x2c>)
 8001dbc:	2320      	movs	r3, #32
 8001dbe:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8001dc2:	8003      	strh	r3, [r0, #0]
 8001dc4:	2540      	movs	r5, #64	; 0x40
 8001dc6:	2430      	movs	r4, #48	; 0x30
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <arm_rfft_64_fast_init_f32+0x30>)
 8001dca:	8205      	strh	r5, [r0, #16]
 8001dcc:	8184      	strh	r4, [r0, #12]
 8001dce:	6143      	str	r3, [r0, #20]
 8001dd0:	bc30      	pop	{r4, r5}
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	4770      	bx	lr
 8001dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8001dda:	4770      	bx	lr
 8001ddc:	08005150 	.word	0x08005150
 8001de0:	0800c1b0 	.word	0x0800c1b0
 8001de4:	08014f30 	.word	0x08014f30

08001de8 <arm_rfft_256_fast_init_f32>:
 8001de8:	b180      	cbz	r0, 8001e0c <arm_rfft_256_fast_init_f32+0x24>
 8001dea:	b430      	push	{r4, r5}
 8001dec:	4909      	ldr	r1, [pc, #36]	; (8001e14 <arm_rfft_256_fast_init_f32+0x2c>)
 8001dee:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <arm_rfft_256_fast_init_f32+0x30>)
 8001df0:	2380      	movs	r3, #128	; 0x80
 8001df2:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8001df6:	8003      	strh	r3, [r0, #0]
 8001df8:	f44f 7580 	mov.w	r5, #256	; 0x100
 8001dfc:	24d0      	movs	r4, #208	; 0xd0
 8001dfe:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <arm_rfft_256_fast_init_f32+0x34>)
 8001e00:	8205      	strh	r5, [r0, #16]
 8001e02:	8184      	strh	r4, [r0, #12]
 8001e04:	6143      	str	r3, [r0, #20]
 8001e06:	bc30      	pop	{r4, r5}
 8001e08:	2000      	movs	r0, #0
 8001e0a:	4770      	bx	lr
 8001e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	08002e58 	.word	0x08002e58
 8001e18:	08007530 	.word	0x08007530
 8001e1c:	080102b0 	.word	0x080102b0

08001e20 <arm_rfft_512_fast_init_f32>:
 8001e20:	b190      	cbz	r0, 8001e48 <arm_rfft_512_fast_init_f32+0x28>
 8001e22:	b430      	push	{r4, r5}
 8001e24:	490a      	ldr	r1, [pc, #40]	; (8001e50 <arm_rfft_512_fast_init_f32+0x30>)
 8001e26:	4a0b      	ldr	r2, [pc, #44]	; (8001e54 <arm_rfft_512_fast_init_f32+0x34>)
 8001e28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e2c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8001e30:	8003      	strh	r3, [r0, #0]
 8001e32:	f44f 7500 	mov.w	r5, #512	; 0x200
 8001e36:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8001e3a:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <arm_rfft_512_fast_init_f32+0x38>)
 8001e3c:	8205      	strh	r5, [r0, #16]
 8001e3e:	8184      	strh	r4, [r0, #12]
 8001e40:	6143      	str	r3, [r0, #20]
 8001e42:	bc30      	pop	{r4, r5}
 8001e44:	2000      	movs	r0, #0
 8001e46:	4770      	bx	lr
 8001e48:	f04f 30ff 	mov.w	r0, #4294967295
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	08004de0 	.word	0x08004de0
 8001e54:	0800b9b0 	.word	0x0800b9b0
 8001e58:	08014730 	.word	0x08014730

08001e5c <arm_rfft_1024_fast_init_f32>:
 8001e5c:	b190      	cbz	r0, 8001e84 <arm_rfft_1024_fast_init_f32+0x28>
 8001e5e:	b430      	push	{r4, r5}
 8001e60:	490a      	ldr	r1, [pc, #40]	; (8001e8c <arm_rfft_1024_fast_init_f32+0x30>)
 8001e62:	4a0b      	ldr	r2, [pc, #44]	; (8001e90 <arm_rfft_1024_fast_init_f32+0x34>)
 8001e64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e68:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8001e6c:	8003      	strh	r3, [r0, #0]
 8001e6e:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8001e72:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8001e76:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <arm_rfft_1024_fast_init_f32+0x38>)
 8001e78:	8205      	strh	r5, [r0, #16]
 8001e7a:	8184      	strh	r4, [r0, #12]
 8001e7c:	6143      	str	r3, [r0, #20]
 8001e7e:	bc30      	pop	{r4, r5}
 8001e80:	2000      	movs	r0, #0
 8001e82:	4770      	bx	lr
 8001e84:	f04f 30ff 	mov.w	r0, #4294967295
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	080051b0 	.word	0x080051b0
 8001e90:	0800c2b0 	.word	0x0800c2b0
 8001e94:	0800d2b0 	.word	0x0800d2b0

08001e98 <arm_rfft_2048_fast_init_f32>:
 8001e98:	b190      	cbz	r0, 8001ec0 <arm_rfft_2048_fast_init_f32+0x28>
 8001e9a:	b430      	push	{r4, r5}
 8001e9c:	490a      	ldr	r1, [pc, #40]	; (8001ec8 <arm_rfft_2048_fast_init_f32+0x30>)
 8001e9e:	4a0b      	ldr	r2, [pc, #44]	; (8001ecc <arm_rfft_2048_fast_init_f32+0x34>)
 8001ea0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ea4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8001ea8:	8003      	strh	r3, [r0, #0]
 8001eaa:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8001eae:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8001eb2:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <arm_rfft_2048_fast_init_f32+0x38>)
 8001eb4:	8205      	strh	r5, [r0, #16]
 8001eb6:	8184      	strh	r4, [r0, #12]
 8001eb8:	6143      	str	r3, [r0, #20]
 8001eba:	bc30      	pop	{r4, r5}
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	4770      	bx	lr
 8001ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	08002048 	.word	0x08002048
 8001ecc:	08005530 	.word	0x08005530
 8001ed0:	0800e2b0 	.word	0x0800e2b0

08001ed4 <arm_rfft_4096_fast_init_f32>:
 8001ed4:	b190      	cbz	r0, 8001efc <arm_rfft_4096_fast_init_f32+0x28>
 8001ed6:	b430      	push	{r4, r5}
 8001ed8:	490a      	ldr	r1, [pc, #40]	; (8001f04 <arm_rfft_4096_fast_init_f32+0x30>)
 8001eda:	4a0b      	ldr	r2, [pc, #44]	; (8001f08 <arm_rfft_4096_fast_init_f32+0x34>)
 8001edc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ee0:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8001ee4:	8003      	strh	r3, [r0, #0]
 8001ee6:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8001eea:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8001eee:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <arm_rfft_4096_fast_init_f32+0x38>)
 8001ef0:	8205      	strh	r5, [r0, #16]
 8001ef2:	8184      	strh	r4, [r0, #12]
 8001ef4:	6143      	str	r3, [r0, #20]
 8001ef6:	bc30      	pop	{r4, r5}
 8001ef8:	2000      	movs	r0, #0
 8001efa:	4770      	bx	lr
 8001efc:	f04f 30ff 	mov.w	r0, #4294967295
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	08003020 	.word	0x08003020
 8001f08:	080079b0 	.word	0x080079b0
 8001f0c:	08010730 	.word	0x08010730

08001f10 <arm_rfft_fast_init_f32>:
 8001f10:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001f14:	d01f      	beq.n	8001f56 <arm_rfft_fast_init_f32+0x46>
 8001f16:	d90b      	bls.n	8001f30 <arm_rfft_fast_init_f32+0x20>
 8001f18:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8001f1c:	d019      	beq.n	8001f52 <arm_rfft_fast_init_f32+0x42>
 8001f1e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001f22:	d012      	beq.n	8001f4a <arm_rfft_fast_init_f32+0x3a>
 8001f24:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8001f28:	d00d      	beq.n	8001f46 <arm_rfft_fast_init_f32+0x36>
 8001f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8001f2e:	4770      	bx	lr
 8001f30:	2940      	cmp	r1, #64	; 0x40
 8001f32:	d00c      	beq.n	8001f4e <arm_rfft_fast_init_f32+0x3e>
 8001f34:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001f38:	d003      	beq.n	8001f42 <arm_rfft_fast_init_f32+0x32>
 8001f3a:	2920      	cmp	r1, #32
 8001f3c:	d1f5      	bne.n	8001f2a <arm_rfft_fast_init_f32+0x1a>
 8001f3e:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <arm_rfft_fast_init_f32+0x4c>)
 8001f40:	4718      	bx	r3
 8001f42:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <arm_rfft_fast_init_f32+0x50>)
 8001f44:	4718      	bx	r3
 8001f46:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <arm_rfft_fast_init_f32+0x54>)
 8001f48:	4718      	bx	r3
 8001f4a:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <arm_rfft_fast_init_f32+0x58>)
 8001f4c:	4718      	bx	r3
 8001f4e:	4b07      	ldr	r3, [pc, #28]	; (8001f6c <arm_rfft_fast_init_f32+0x5c>)
 8001f50:	e7f6      	b.n	8001f40 <arm_rfft_fast_init_f32+0x30>
 8001f52:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <arm_rfft_fast_init_f32+0x60>)
 8001f54:	e7f4      	b.n	8001f40 <arm_rfft_fast_init_f32+0x30>
 8001f56:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <arm_rfft_fast_init_f32+0x64>)
 8001f58:	e7f2      	b.n	8001f40 <arm_rfft_fast_init_f32+0x30>
 8001f5a:	bf00      	nop
 8001f5c:	08001d81 	.word	0x08001d81
 8001f60:	08001de9 	.word	0x08001de9
 8001f64:	08001e5d 	.word	0x08001e5d
 8001f68:	08001ed5 	.word	0x08001ed5
 8001f6c:	08001db5 	.word	0x08001db5
 8001f70:	08001e99 	.word	0x08001e99
 8001f74:	08001e21 	.word	0x08001e21

08001f78 <memset>:
 8001f78:	4402      	add	r2, r0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d100      	bne.n	8001f82 <memset+0xa>
 8001f80:	4770      	bx	lr
 8001f82:	f803 1b01 	strb.w	r1, [r3], #1
 8001f86:	e7f9      	b.n	8001f7c <memset+0x4>

08001f88 <__libc_init_array>:
 8001f88:	b570      	push	{r4, r5, r6, lr}
 8001f8a:	4d0d      	ldr	r5, [pc, #52]	; (8001fc0 <__libc_init_array+0x38>)
 8001f8c:	4c0d      	ldr	r4, [pc, #52]	; (8001fc4 <__libc_init_array+0x3c>)
 8001f8e:	1b64      	subs	r4, r4, r5
 8001f90:	10a4      	asrs	r4, r4, #2
 8001f92:	2600      	movs	r6, #0
 8001f94:	42a6      	cmp	r6, r4
 8001f96:	d109      	bne.n	8001fac <__libc_init_array+0x24>
 8001f98:	4d0b      	ldr	r5, [pc, #44]	; (8001fc8 <__libc_init_array+0x40>)
 8001f9a:	4c0c      	ldr	r4, [pc, #48]	; (8001fcc <__libc_init_array+0x44>)
 8001f9c:	f000 f818 	bl	8001fd0 <_init>
 8001fa0:	1b64      	subs	r4, r4, r5
 8001fa2:	10a4      	asrs	r4, r4, #2
 8001fa4:	2600      	movs	r6, #0
 8001fa6:	42a6      	cmp	r6, r4
 8001fa8:	d105      	bne.n	8001fb6 <__libc_init_array+0x2e>
 8001faa:	bd70      	pop	{r4, r5, r6, pc}
 8001fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fb0:	4798      	blx	r3
 8001fb2:	3601      	adds	r6, #1
 8001fb4:	e7ee      	b.n	8001f94 <__libc_init_array+0xc>
 8001fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fba:	4798      	blx	r3
 8001fbc:	3601      	adds	r6, #1
 8001fbe:	e7f2      	b.n	8001fa6 <__libc_init_array+0x1e>
 8001fc0:	08015030 	.word	0x08015030
 8001fc4:	08015030 	.word	0x08015030
 8001fc8:	08015030 	.word	0x08015030
 8001fcc:	08015034 	.word	0x08015034

08001fd0 <_init>:
 8001fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fd2:	bf00      	nop
 8001fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fd6:	bc08      	pop	{r3}
 8001fd8:	469e      	mov	lr, r3
 8001fda:	4770      	bx	lr

08001fdc <_fini>:
 8001fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fde:	bf00      	nop
 8001fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fe2:	bc08      	pop	{r3}
 8001fe4:	469e      	mov	lr, r3
 8001fe6:	4770      	bx	lr
