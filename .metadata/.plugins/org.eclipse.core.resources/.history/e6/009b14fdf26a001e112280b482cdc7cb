#include "main.h"
#include "ExternalDAC.h"

void SystemClock_Config(void);
void testWaveforms(External_DAC& dac);

void testWaveforms(External_DAC& dac) {
    int arraySize = 256;  // Replace with the actual size of your waveform arrays
    int delayTime = 1;  // Delay time in milliseconds, adjust as needed

    // Test Sine Wave
    for(int i = 0; i < 5; i++){
    for (int i = 0; i < arraySize; ++i) {
        dac.DAC_write(sine_wave[i]);
        HAL_Delay(delayTime);
    }
    }

    // Test Square Wave
    for(int i = 0; i < 5; i++){
    for (int i = 0; i < arraySize; ++i) {
    	dac.DAC_write(square_wave[i]);
        HAL_Delay(delayTime);
    }
    }

    // Test Triangle Wave
    for(int i = 0; i < 5; i++){
    for (int i = 0; i < arraySize; ++i) {
    	dac.DAC_write(triangle_wave[i]);
        HAL_Delay(delayTime);
    }
    }

    // Test Sawtooth Wave
    for(int i = 0; i < 5; i++){
    for (int i = 0; i < arraySize; ++i) {
    	dac.DAC_write(sawtooth_wave[i]);
        HAL_Delay(delayTime);
    }
    }
}

int main()
{

	HAL_Init();
	External_DAC dac;
	dac.DAC_init();

	while(1)
	{
		testWaveforms(dac);
	}

	return 0;
}

void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 10;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

void Error_Handler(void)
{
  __disable_irq();
  while (1)
  {
  }

}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
