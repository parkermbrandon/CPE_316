#include "main.h"
#include "ExternalDAC.h"
#include "Keypad.h"

void ISR_init();
void testWaveforms(External_DAC& dac);

External_DAC dac;
Keypad keys;

void ISR_init()
{
    // Enable clock - TIM2
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;

    // Set up TIM2
    TIM2->PSC = 0;  // No prescaling
    TIM2->ARR = 799;  // Auto-reload value for 5 kHz
    TIM2->CCR1 = 199;  // 25% duty cycle
    TIM2->DIER |= TIM_DIER_CC1IE;  // Enable Capture/Compare 1 interrupt

    // Enable TIM2
    TIM2->CR1 |= TIM_CR1_CEN;

    // Enable TIM2 interrupt
    NVIC_EnableIRQ(TIM2_IRQn);

    // Enable global interrupts
    __enable_irq();
}

void testWaveforms(External_DAC& dac) {
    int arraySize = 256;  // Replace with the actual size of your waveform arrays
    int delayTime = 1;  // Delay time in milliseconds, adjust as needed

    // Test Sine Wave
    for(int i = 0; i < 3; i++){
    for (int i = 0; i < arraySize; ++i) {
        dac.DAC_write(sine_wave[i]);
        HAL_Delay(delayTime);
    }
    }

    // Test Square Wave
    for(int i = 0; i < 3; i++){
    for (int i = 0; i < arraySize; ++i) {
    	dac.DAC_write(square_wave[i]);
        HAL_Delay(delayTime);
    }
    }

    // Test Triangle Wave
    for(int i = 0; i < 3; i++){
    for (int i = 0; i < arraySize; ++i) {
    	dac.DAC_write(triangle_wave[i]);
        HAL_Delay(delayTime);
    }
    }

    // Test Sawtooth Wave
    for(int i = 0; i < 3; i++){
    for (int i = 0; i < arraySize; ++i) {
    	dac.DAC_write(sawtooth_wave[i]);
        HAL_Delay(delayTime);
    }
    }
}

void

int main()
{

	HAL_Init();

	Keypad keys;
	keys.Keypad_init();


	dac.DAC_init();

	while(1)
	{
		testWaveforms(dac);
		keys.tick();
	}

	return 0;
}
