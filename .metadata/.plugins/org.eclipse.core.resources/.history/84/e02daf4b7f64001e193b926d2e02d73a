#include "main.h"

void TIM2_IRQHandler(void);

int main(void)
{
    // Enable clock for GPIOA and TIM2
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;

    // Configure PA0 as alternate function (TIM2_CH1)
    GPIOA->MODER &= ~GPIO_MODER_MODE0;  // Clear existing bits for PA0
    GPIOA->MODER |= GPIO_MODER_MODE0_1;  // Set PA0 to alternate function
    GPIOA->AFR[0] &= ~GPIO_AFRL_AFSEL0;  // Clear alternate function for PA0
    GPIOA->AFR[0] |= 1;  // Set alternate function as AF1 for TIM2_CH1

    // Set up TIM2
    TIM2->PSC = 0;  // No prescaling
    TIM2->ARR = 800;  // Auto-reload value for 5 kHz (4 MHz / 801 = 4993.75 Hz)
    TIM2->CCR1 = 200;  // 25% of 801 (200/801 = 0.2497 or 24.97% duty cycle)
    TIM2->CCMR1 &= ~TIM_CCMR1_OC1M;  // Clear Output Compare mode bits
    TIM2->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;  // Set to PWM mode 1
    TIM2->CCER |= TIM_CCER_CC1E;  // Enable the output for channel 1
    TIM2->CR1 |= TIM_CR1_CEN;  // Enable the counter

    while (1)
    {
        HAL_Delay(1000);
    }
}

// TIM2 Interrupt Service Routine (ISR)
void TIM2_IRQHandler(void)
{
    // Check if the Capture/Compare 1 interrupt flag is set
    if (TIM2->SR & TIM_SR_CC1IF)
    {
        // Clear the Capture/Compare 1 interrupt flag
        TIM2->SR &= ~TIM_SR_CC1IF;
    }
}
