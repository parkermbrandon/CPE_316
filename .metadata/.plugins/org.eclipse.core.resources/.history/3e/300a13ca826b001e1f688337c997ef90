#include "main.h"
#include "ExternalDAC.h"
#include "Keypad.h"

void SystemClock_Config(void);
void testWaveforms(External_DAC& dac);
void TIM2_init();
extern "C" void TIM2_IRQHandler(void);

volatile uint8_t flagA2outpu = 0;

#define ARRAY_SIZE 256

External_DAC dac;
Keypad keys;

// Global variables for waveform and frequency
int waveform = 0;  // 0 for square, 1 for sine, 2 for triangle, 3 for sawtooth
int frequency = 100;  // Frequency in Hz
int i = 0;  // Index for waveform array
int dutyCycle = 50;  // Duty cycle for square wave

// Initialize TIM2 for 16 Âµs interval
void TIM2_init() {
	// Enable clock for GPIOA and TIM2
	    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
	    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;

	    // Configure PA0 as output
	    GPIOB->MODER &= ~GPIO_MODER_MODE0;
	    GPIOC->MODER |= GPIO_MODER_MODE0_0;

	    // Set up TIM2
	    TIM2->PSC = 0;  // No prescaling
	    TIM2->ARR = 799;  // Auto-reload value for 5 kHz
	    TIM2->CCR1 = 199;  // 25% duty cycle
	    TIM2->DIER |= TIM_DIER_CC1IE;  // Enable Capture/Compare 1 interrupt

	    // Enable TIM2
	    TIM2->CR1 |= TIM_CR1_CEN;

	    // Enable TIM2 interrupt
	    NVIC_EnableIRQ(TIM2_IRQn);

	    // Enable global interrupts
	    __enable_irq();
}

extern "C" void TIM2_IRQHandler(void) {
	 // Check if the Capture/Compare 1 interrupt flag is set
	    if (TIM2->SR & TIM_SR_CC1IF)
	    {
	        // Clear the Capture/Compare 1 interrupt flag
	        TIM2->SR &= ~TIM_SR_CC1IF;

	        if (flagA2outpu == 0)
	        {
	            // Set PA0 high
	            GPIOA->BSRR = GPIO_BSRR_BS0;
	            TIM2->CCR1 = 199;  // 25% of the period
	            flagA2outpu = 1;
	        }
	        else
	        {
	            // Set PA0 low
	            GPIOA->BSRR = GPIO_BSRR_BR0;
	            TIM2->CCR1 = 799;  // Reset to 100% of the period
	            flagA2outpu = 0;
	        }
	    }
}

void testWaveforms(External_DAC& dac) {
    int arraySize = 256;  // Replace with the actual size of your waveform arrays
    int delayTime = 1;  // Delay time in milliseconds, adjust as needed

    // Test Sine Wave
    for(int i = 0; i < 3; i++)
    {
		for (int i = 0; i < arraySize; ++i)
		{
			dac.DAC_write(sine_wave[i]);
			HAL_Delay(delayTime);
		}
    }

    // Test Square Wave
    for(int i = 0; i < 3; i++)
    {
		for (int i = 0; i < arraySize; ++i)
		{
			dac.DAC_write(square_wave[i]);
			HAL_Delay(delayTime);
		}
    }

    // Test Triangle Wave
    for(int i = 0; i < 3; i++)
    {
		for (int i = 0; i < arraySize; ++i)
		{
			dac.DAC_write(triangle_wave[i]);
			HAL_Delay(delayTime);
		}
    }

    // Test Sawtooth Wave
    for(int i = 0; i < 3; i++)
    {
		for (int i = 0; i < arraySize; ++i)
		{
			dac.DAC_write(sawtooth_wave[i]);
			HAL_Delay(delayTime);
		}
    }
}

int main()
{

	HAL_Init();
	TIM2_init();
	keys.Keypad_init();
	dac.DAC_init();

	while(1)
	{
		testWaveforms(dac);
		keys.tick();
	}

	return 0;
}
