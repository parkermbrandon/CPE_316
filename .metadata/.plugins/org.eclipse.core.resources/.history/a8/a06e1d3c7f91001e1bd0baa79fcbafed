/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>   // For snprintf and vsnprintf
#include <string.h>  // For strlen
#include <stdarg.h>  // For va_list, va_start, and va_end
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define AUDIO_BUFFER_SIZE  128  // Adjust the size as needed

uint32_t audioBuffer1[AUDIO_BUFFER_SIZE];
uint32_t audioBuffer2[AUDIO_BUFFER_SIZE];
uint32_t *currentBuffer;
uint32_t *processingBuffer;

void ProcessAudioData(uint32_t* buffer, uint32_t size);
void TransmitDataOverUART(const char* data);
void DebugPrint(const char* format, ...);
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai);
void PrintDMAandSAIState();
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SAI_HandleTypeDef hsai_BlockA2;
DMA_HandleTypeDef hdma_sai2_a;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_SAI2_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Callback function for completed DMA transfer
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
//    DebugPrint("Before Swap - Current Buffer: %s, Processing Buffer: %s\n",
//               (currentBuffer == audioBuffer1) ? "Buffer1" : "Buffer2",
//               (processingBuffer == audioBuffer1) ? "Buffer1" : "Buffer2");
//
//    DebugPrint("CpltCallback - DMA Counter Before Swap: %lu\n",
//                   __HAL_DMA_GET_COUNTER(&hdma_sai2_a));

    // Buffer swap logic
    uint32_t *temp = processingBuffer;
    processingBuffer = currentBuffer;
    currentBuffer = temp;
//
//    DebugPrint("After Swap - Current Buffer: %s, Processing Buffer: %s\n",
//               (currentBuffer == audioBuffer1) ? "Buffer1" : "Buffer2",
//               (processingBuffer == audioBuffer1) ? "Buffer1" : "Buffer2");
//
//    DebugPrint("CpltCallback - DMA Counter After Swap: %lu\n",
//                __HAL_DMA_GET_COUNTER(&hdma_sai2_a));

    // Start receiving into the new currentBuffer
    HAL_SAI_Receive_DMA(&hsai_BlockA2, (uint8_t*)currentBuffer, AUDIO_BUFFER_SIZE);
    //PrintDMAandSAIState();

    // Signal or start processing data in processingBuffer
    ProcessAudioData(processingBuffer, AUDIO_BUFFER_SIZE);
}

// Callback function for half completed DMA transfer
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
    // Handle the half completed part of the buffer
//	DebugPrint("Half Buffer Complete - Current Buffer: %s\n",
//	               (currentBuffer == audioBuffer1) ? "Buffer1" : "Buffer2");
//
//	DebugPrint("HalfCpltCallback - DMA Counter: %lu\n",
//	               __HAL_DMA_GET_COUNTER(&hdma_sai2_a));
//
//	PrintDMAandSAIState();
}

void ProcessAudioData(uint32_t* buffer, uint32_t size)
{
    // Process the data in the buffer
    // Example: Copy to another buffer, send over UART, perform audio analysis, etc.
    // Make sure this processing completes before the next buffer swap
//	 uint32_t sum = 0;
//
//	    // Calculate the average of the audio samples
//	    for (uint16_t i = 0; i < size; ++i)
//	    {
//	        sum += buffer[i];
//	    }
//	    uint32_t average = sum / size;
//
//	    // Prepare a string to send over UART
//	    char uartBuffer[50];
//	    snprintf(uartBuffer, sizeof(uartBuffer), "Average Audio Level: %lu\r\n", average);
//
//	    // Transmit the data over UART
//	    TransmitDataOverUART(uartBuffer);

	    // Limit the number of samples to print to avoid too much data
	       const uint16_t numSamplesToPrint = 10;

	       // Print the first few samples of the buffer for inspection
	       for (uint16_t i = 0; i < numSamplesToPrint; ++i)
	       {
	           char uartBuffer[50];
	           snprintf(uartBuffer, sizeof(uartBuffer), "Sample %d: %lu\r\n", i, buffer[i]);
	           TransmitDataOverUART(uartBuffer);
	       }
}

void DebugPrint(const char* format, ...) {
    char debugBuffer[128];  // Adjust size as needed
    va_list args;
    va_start(args, format);
    vsnprintf(debugBuffer, sizeof(debugBuffer), format, args);
    va_end(args);

    TransmitDataOverUART(debugBuffer);
}

void TransmitDataOverUART(const char* data)
{
    HAL_UART_Transmit(&huart2, (uint8_t*)data, strlen(data), 1000);
}

void PrintBufferContents(uint32_t* buffer, uint32_t size) {
    DebugPrint("Buffer Contents: ");
    char temp[10]; // Temporary string for individual numbers
    for (uint16_t i = 0; i < size && i < 10; ++i) { // Print first 10 samples
        snprintf(temp, sizeof(temp), "%hu ", buffer[i]);
        TransmitDataOverUART(temp);
    }
    TransmitDataOverUART("\n");
}

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai) {
    uint32_t saiError = HAL_SAI_GetError(hsai);
    DebugPrint("SAI Error: %lu\n", saiError);
}

void PrintDMAandSAIState() {
    HAL_DMA_StateTypeDef dmaState = HAL_DMA_GetState(&hdma_sai2_a);
    DebugPrint("DMA State: %d\n", dmaState);

    uint32_t dmaError = HAL_DMA_GetError(&hdma_sai2_a);
    DebugPrint("DMA Error: %lu\n", dmaError);

    HAL_SAI_StateTypeDef saiState = HAL_SAI_GetState(&hsai_BlockA2);
    DebugPrint("SAI State: %d\n", saiState);
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART2_UART_Init();
  MX_SAI2_Init();
  /* USER CODE BEGIN 2 */

  currentBuffer = audioBuffer1;
  processingBuffer = audioBuffer2;

  HAL_SAI_Receive_DMA(&hsai_BlockA2, (uint8_t*)audioBuffer1, AUDIO_BUFFER_SIZE);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 5;
  RCC_OscInitStruct.PLL.PLLN = 37;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV17;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
}

/**
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{

  /* USER CODE BEGIN SAI2_Init 0 */

  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_RX;
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA2.Init.MonoStereoMode = SAI_MONOMODE;
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  // Configure the DMA handler for reception process
  hdma_sai2_a.Instance                 = DMA1_Channel6;
  hdma_sai2_a.Init.Direction           = DMA_PERIPH_TO_MEMORY;
  hdma_sai2_a.Init.PeriphInc           = DMA_PINC_DISABLE;
  hdma_sai2_a.Init.MemInc              = DMA_MINC_ENABLE;
  hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  hdma_sai2_a.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  hdma_sai2_a.Init.Mode                = DMA_CIRCULAR;
  hdma_sai2_a.Init.Priority            = DMA_PRIORITY_HIGH;

  HAL_DMA_Init(&hdma_sai2_a);

  // Associate the initialized DMA handle to the SAI handle
  __HAL_LINKDMA(&hsai_BlockA2, hdmarx, hdma_sai2_a);

  /* USER CODE END SAI2_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
