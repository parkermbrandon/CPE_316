#include "main.h"

// Forward declaration of TIM2 interrupt handler
void TIM2_IRQHandler(void);

int main(void)
{
    // Enable clock for GPIOA and TIM2
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;

    // Configure PA0 as output
    GPIOA->MODER &= ~GPIO_MODER_MODE0;
    GPIOA->MODER |= GPIO_MODER_MODE0_0;

    // Configure PA1 as output for ISR timing
    GPIOA->MODER &= ~GPIO_MODER_MODE1;
    GPIOA->MODER |= GPIO_MODER_MODE1_0;

    // Set up TIM2
    TIM2->PSC = 0;  // No prescaling
    TIM2->ARR = 0xFFFFFFFF;  // Run continuously
    TIM2->CCR1 = 400;  // Trigger interrupt at this value
    TIM2->DIER |= TIM_DIER_CC1IE;  // Enable Capture/Compare 1 interrupt
    TIM2->DIER |= TIM_DIER_UIE;  // Enable Update (overflow) interrupt
    TIM2->CR1 |= TIM_CR1_CEN;  // Enable the counter

    // Enable TIM2 interrupt
    NVIC_EnableIRQ(TIM2_IRQn);

    while (1)
    {
        // Do nothing, let ISR handle everything
    }
}

void TIM2_IRQHandler(void)
{
    // Set PA1 high at ISR entry
    GPIOA->BSRR = GPIO_BSRR_BS1;

    // Check if the Capture/Compare 1 interrupt flag is set
    if (TIM2->SR & TIM_SR_CC1IF)
    {
        // Clear the Capture/Compare 1 interrupt flag
        TIM2->SR &= ~TIM_SR_CC1IF;

        // Toggle PA0
        GPIOA->ODR ^= GPIO_ODR_OD0;
    }

    // Check if the Update (overflow) interrupt flag is set
    if (TIM2->SR & TIM_SR_UIF)
    {
        // Clear the Update (overflow) interrupt flag
        TIM2->SR &= ~TIM_SR_UIF;

        // Toggle PA0
        GPIOA->ODR ^= GPIO_ODR_OD0;
    }

    // Set PA1 low at ISR exit
    GPIOA->BSRR = GPIO_BSRR_BR1;
}
