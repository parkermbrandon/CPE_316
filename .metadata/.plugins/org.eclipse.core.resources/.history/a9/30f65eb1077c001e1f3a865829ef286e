#include "main.h"

void SystemClock_Config(void);
void ADC_init(void);
void UART_init();
void UART_print(const char * message);

volatile uint16_t adc_val;
volatile uint8_t adc_flag = 0;
uint16_t adc_samples[20];

// Function to initialize USART1
void USART1_init() {

    // Enable USART1 clock
    RCC->APB1ENR2 |= RCC_APB1ENR1_USART2EN;

    // Enable GPIOG clock
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;

    // Configure PA2 as USART1_TX and PA3 as USART1_RX
    GPIOA->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE2);
    GPIOA->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);

    // Set Alternate Function for PG7 (USART1_TX)
    GPIOG->AFR[0] |= (8U << GPIO_AFRL_AFSEL7_Pos);

    // Set Alternate Function for PG8 (USART1_RX)
    GPIOG->AFR[1] |= (8U << GPIO_AFRH_AFSEL8_Pos);

    // Configure for 8 data bits
	USART2->CR1 &= ~(USART_CR1_M);

    // Set Baud Rate Divisor
    USART2->BRR = 0x2B671;  // 90Mhz * 256 / 115200 (desired baud) = 0x2B671

    // Configure for 1 stop bit
	USART2->CR2 &= ~(USART_CR2_STOP);

    // Enable USART, Transmitter and Receiver
    USART2->CR1 |= (USART_CR1_UE | USART_CR1_TE | USART_CR1_RE);
}

// Function to print a string via USART1
void USART_print(const char *str) {
    while (*str) {
        // Wait for Transmit Data Register Empty
        while (!(USART2->ISR & USART_ISR_TXE));

        // Write data to TDR
        USART1->TDR = *str;

        // Wait for Transmission Complete
        while (!(USART2->ISR & USART_ISR_TC));

        str++;
    }
}

void ADC_init(void) {
    // Enable GPIOA clock
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;

    // Set PA4 as analog mode
    GPIOA->MODER |= GPIO_MODER_MODE4;

    // Enable the ADC interface clock
    RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;

    // Configure the ADC clock source
    RCC->CCIPR &= ~RCC_CCIPR_ADCSEL;   // Clear the ADC clock selection bits
    RCC->CCIPR |= RCC_CCIPR_ADCSEL_0;  // Select HSI16 (16 MHz RC oscillator) as ADC clock

    // ADC configuration
    ADC1->CFGR &= ~ADC_CFGR_RES; // 12-bit resolution
    ADC1->CFGR &= ~ADC_CFGR_ALIGN; // Right alignment
    ADC1->CFGR &= ~ADC_CFGR_CONT; // Disable continuous conversion

    // ADC Sampling Time Configuration for Channel 9
    ADC1->SMPR1 &= ~ADC_SMPR1_SMP9; // Clear previous settings
    ADC1->SMPR1 |= ADC_SMPR1_SMP9_0; // Sampling time: 2.5 ADC clock cycles

    // ADC Regular Channel Configuration
    ADC1->SQR1 &= ~ADC_SQR1_SQ1; // Reset channel
    ADC1->SQR1 |= ADC_SQR1_SQ1_0 | ADC_SQR1_SQ1_3; // Set channel 9 to rank 1

    // Disable ADC deep power-down mode
    ADC1->CR &= ~ADC_CR_DEEPPWD;

    // Enable ADC internal voltage regulator
    ADC1->CR |= ADC_CR_ADVREGEN;

    // Delay for ADC voltage regulator stabilization (time is dependent on the system clock)
    // Assuming a delay of 10us is sufficient, you can adjust based on your clock settings
    for (volatile uint32_t delay = 0; delay < 640; delay++);  // Assuming 64MHz system clock

    // Start ADC self-calibration
    ADC1->CR |= ADC_CR_ADCAL;

    // Wait for calibration to complete
    while (ADC1->CR & ADC_CR_ADCAL);

    // Enable ADC1
    ADC1->CR |= ADC_CR_ADEN;
    while(!(ADC1->ISR & ADC_ISR_ADRDY)); // Wait for ADC ready
}



void ADC1_2_IRQHandler(void) {
    // Check if ADC conversion is complete
    if (ADC1->ISR & ADC_ISR_EOC) {
        adc_val = ADC1->DR;  // Save conversion result
        adc_flag = 1;  // Set flag
    }
}

uint32_t ADC_Read(void) {
    ADC1->CR |= ADC_CR_ADSTART;
    while(adc_flag == 0);  // Wait for ADC conversion to complete
    adc_flag = 0;  // Clear flag
    return adc_val;
}

int main(void){
	ADC_init();
	    uint16_t min, max;
	    uint32_t avg;

	    while(1) {
	        for (int i = 0; i < 20; i++) {
	            adc_samples[i] = ADC_Read();
	        }
		    USART_print("Hello World");
	        //process_samples(adc_samples, &min, &max, &avg);

	        // Convert min, max, and avg to calibrated voltage values and send to USART
//	        send_to_USART(min);
//	        send_to_USART(max);
//	        send_to_USART(avg);
	    }
}

void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 10;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
