#include "main.h"
#include "ExternalDAC.h"
#include "Keypad.h"

void SystemClock_Config(void);
void testWaveforms(External_DAC& dac);
void TIM2_init();
extern "C" void TIM2_IRQHandler(void);

#define ARRAY_SIZE 256

External_DAC dac;
Keypad keys;

// Global variables for waveform and frequency
int waveform = 0;  // 0 for square, 1 for sine, 2 for triangle, 3 for sawtooth
int frequency = 100;  // Frequency in Hz
int index = 0;  // Index for waveform array
int dutyCycle = 50;  // Duty cycle for square wave

// Initialize TIM2 for 16 µs interval
void TIM2_init() {
    // Enable clock for TIM2
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;


    TIM2->PSC = 0; // Set prescaler to 0
    TIM2->ARR = 63;	// Set auto-reload register for 16 µs

    TIM2->DIER |= TIM_DIER_UIE; // Enable TIM2 interrupt
    TIM2->CR1 |= TIM_CR1_CEN;

    // Enable TIM2 IRQ in NVIC
    NVIC_EnableIRQ(TIM2_IRQn);

    //Enable Global Interrupts
    __enable_irq();
}

extern "C" void TIM2_IRQHandler(void) {
    // Clear interrupt flag
    TIM2->SR &= ~TIM_SR_UIF;

    static int index = 0;
    dac.DAC_write(sine_wave[index]);
    index = (index + 1) % ARRAY_SIZE;

}

void testWaveforms(External_DAC& dac) {
    int arraySize = 256;  // Replace with the actual size of your waveform arrays
    int delayTime = 1;  // Delay time in milliseconds, adjust as needed

    // Test Sine Wave
    for(int i = 0; i < 3; i++)
    {
		for (int i = 0; i < arraySize; ++i)
		{
			dac.DAC_write(sine_wave[i]);
			HAL_Delay(delayTime);
		}
    }

    // Test Square Wave
    for(int i = 0; i < 3; i++)
    {
		for (int i = 0; i < arraySize; ++i)
		{
			dac.DAC_write(square_wave[i]);
			HAL_Delay(delayTime);
		}
    }

    // Test Triangle Wave
    for(int i = 0; i < 3; i++)
    {
		for (int i = 0; i < arraySize; ++i)
		{
			dac.DAC_write(triangle_wave[i]);
			HAL_Delay(delayTime);
		}
    }

    // Test Sawtooth Wave
    for(int i = 0; i < 3; i++)
    {
		for (int i = 0; i < arraySize; ++i)
		{
			dac.DAC_write(sawtooth_wave[i]);
			HAL_Delay(delayTime);
		}
    }
}

int main()
{

	HAL_Init();
	TIM2_init();
	keys.Keypad_init();
	dac.DAC_init();

	while(1)
	{
		//testWaveforms(dac);
		//keys.tick();
	}

	return 0;
}
