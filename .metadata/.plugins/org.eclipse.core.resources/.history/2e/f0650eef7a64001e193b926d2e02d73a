#include "main.h"

void TIM2_IRQHandler(void);

int main(void)
{
    // Enable clock for GPIOA and TIM2
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;  // GPIOA clock enable
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;  // TIM2 clock enable

    // Configure PA0 as alternate function for TIM2_CH1
    GPIOA->MODER &= ~GPIO_MODER_MODE0;  // Clear mode bits for PA0
    GPIOA->MODER |= GPIO_MODER_MODE0_0;  // Set mode bits for alternate function

    // Set up TIM2
    TIM2->PSC = 0;  // No prescaling
    TIM2->ARR = 799;  // Auto-reload value for 5 kHz
    TIM2->CCR1 = 199;  // Capture/Compare value for 25% duty cycle
    TIM2->DIER |= TIM_DIER_CC1IE;  // Enable CC1 interrupt
    TIM2->DIER &= ~TIM_DIER_UIE;  // Disable Update interrupt
    TIM2->CR1 |= TIM_CR1_CEN;  // Enable the counter

    // Enable TIM2 interrupt in NVIC
    NVIC_EnableIRQ(TIM2_IRQn);

    while (1)
    {
        // Main loop
        HAL_Delay(1000);  // HAL used only for delay
    }
}

void TIM2_IRQHandler(void)
{
    if (TIM2->SR & TIM_SR_CC1IF)
    {
        // Toggle PA0
        GPIOA->ODR ^= GPIO_ODR_OD0;

        // Clear interrupt flag
        TIM2->SR &= ~TIM_SR_CC1IF;
    }
}
