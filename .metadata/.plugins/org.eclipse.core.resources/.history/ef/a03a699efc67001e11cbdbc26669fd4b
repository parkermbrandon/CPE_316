#include "main.h"

void TIM2_IRQHandler(void);

int main(void)
{
    // Enable clock for GPIOA and TIM2
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;

    // Configure PA0 as output
    GPIOA->MODER &= ~GPIO_MODER_MODE0;
    GPIOA->MODER |= GPIO_MODER_MODE0_0;

    // Disable TIM2
    TIM2->CR1 &= ~TIM_CR1_CEN;

    // Reset counter
    TIM2->CNT = 0;

    // Set up TIM2
    TIM2->PSC = 0;  // No prescaling
    TIM2->ARR = 799;  // Auto-reload value for 5 kHz
    TIM2->CCR1 = 200;  // 25% duty cycle
    TIM2->DIER |= TIM_DIER_CC1IE;  // Enable Capture/Compare 1 interrupt

    // Enable TIM2
    TIM2->CR1 |= TIM_CR1_CEN;

    // Enable TIM2 interrupt
    NVIC_EnableIRQ(TIM2_IRQn);

    // Enable global interrupts
    __enable_irq();

    while (1)
    {
        // Do nothing, let ISR handle everything
    }
}

void TIM2_IRQHandler(void)
{
    // Check if the Capture/Compare 1 interrupt flag is set
    if (TIM2->SR & TIM_SR_CC1IF)
    {
        // Clear the Capture/Compare 1 interrupt flag
        TIM2->SR &= ~TIM_SR_CC1IF;

        // Toggle PA0
        GPIOA->ODR ^= GPIO_ODR_OD0;
    }
}
