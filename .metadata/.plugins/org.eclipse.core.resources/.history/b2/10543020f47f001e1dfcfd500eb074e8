/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include <stdio.h>
#define F_CLK 24000000 // bus clock is 4 MHz
#define SAMPLES_COUNT 20 // number of samples to collect
#define ADC_MAX 0xFFF // 12-bit ADC max value
#define V_REF 3000 // reference voltage in mV

// Global variables
volatile uint16_t ADC_val = 0;
volatile uint16_t ADC_values[SAMPLES_COUNT];
volatile uint8_t sample_index = 0;
volatile uint8_t ADC_ready = 0;
uint32_t min_val, max_val, avg_val;

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void ADC_init(void);
void ADC1_2_IRQHandler(void);
void UART_init(void);
void USART_Print(const char* message);
void USART_SendNumber(uint32_t num);
void Process_ADC_Values(void);
void Start_ADC_Conversion(void);

/* Main function -------------------------------------------------------------*/
int main(void) {
  HAL_Init();
  SystemClock_Config();
  UART_init();
  ADC_init();

  while (1) {
    if (ADC_ready == 1) {
      ADC_ready = 0; // Reset the flag
      ADC1->CR |= ADC_CR_ADSTART; // Start next ADC conversion

      	 USART_SendNumber(ADC_val);

//      if (sample_index >= SAMPLES_COUNT) {
//        Process_ADC_Values(); // Process the collected samples
//        USART_SendNumber(min_val); // Send min value
//        USART_SendNumber(max_val); // Send max value
//        USART_SendNumber(avg_val); // Send average value
//        sample_index = 0; // Reset the sample index
//      }
      HAL_Delay(100);
    }
  }
}

void ADC_init(void){
	//enable system clk to the adc
	RCC->CCIPR &= ~RCC_CCIPR_ADCSEL_Msk;
	RCC->CCIPR |= (0x01U << RCC_CCIPR_ADCSEL_Pos);
	RCC->AHB2ENR = RCC_AHB2ENR_ADCEN;

	//ADC will run at the same speed as CPU (HCLK / 1) since AHB prescaler is 1
	ADC123_COMMON->CCR = ((ADC123_COMMON->CCR & ~(ADC_CCR_CKMODE)) | ADC_CCR_CKMODE_0);

	//power on ADC and voltage regulator
	ADC1->CR &= ~ADC_CR_DEEPPWD;
	ADC1->CR |= ADC_CR_ADVREGEN;
	//delay to allow for regulator power up
	for(uint16_t i = 0; i < 1000; i++)
		for(uint16_t j = 0; j < 100; j++)

	//set resolution to 12 bits
	ADC1->CFGR &= ~ADC_CFGR_RES;

	//calibrate ADC
	ADC1->CR &= ~(ADC_CR_ADEN | ADC_CR_ADCALDIF); //disable ADC before calibration
	ADC1->CR |= ADC_CR_ADCAL; // begin calibration process
	while(ADC1->CR & ADC_CR_ADCAL); //wait until calibration process is finished

	//configure single ended mode
	ADC1->DIFSEL &= ~ADC_DIFSEL_DIFSEL_5;

	//enable ADC
	ADC1->ISR |= ADC_ISR_ADRDY;
	ADC1->CR |= ADC_CR_ADEN;
	while(!(ADC1->ISR & ADC_ISR_ADRDY));
	ADC1->ISR |= ADC_ISR_ADRDY;

	//configure ADC
	ADC1->SQR1 = (ADC1->SQR1 & ~(ADC_SQR1_SQ1_Msk | ADC_SQR1_L_Msk)) | (5 << ADC_SQR1_L_Msk);

	//enable ADC interrupts
	ADC1->IER |= ADC_IER_EOC;
	ADC1->ISR &= ~ADC_ISR_EOC;
	NVIC->ISER[0] = (1 << (ADC1_2_IRQn & 0x1F));
	__enable_irq();

	//configure GPIO pin PA0
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
	GPIOA->AFR[0] = (GPIOA->AFR[0] & ~GPIO_AFRL_AFSEL0) | (7 << GPIO_AFRL_AFSEL0_Pos);
	GPIOA->MODER |= GPIO_MODER_MODE0;
	GPIOA->ASCR |= GPIO_ASCR_ASC0;

	//start conversion
	ADC1->CR |= ADC_CR_ADSTART;
}

/* ADC Interrupt Handler */
void ADC1_2_IRQHandler(void) {
  if (ADC1->ISR & ADC_ISR_EOC) {
    //ADC_values[sample_index++] = ADC1->DR; // Save ADC value
	ADC_val = ADC1->DR;
    ADC_ready = 1; // Set the flag
  }
}

void UART_init(void){
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL2 | GPIO_AFRL_AFSEL3);// mask AF selection
	GPIOA->AFR[0] |= ((7 << GPIO_AFRL_AFSEL2_Pos ) |// select USART2 (AF7)
			   (7 << GPIO_AFRL_AFSEL3_Pos));// for PA2 and PA3
	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3);// push-pull output for PA2, PA3
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3);// no pull ups on PA2, PA3
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED2 | GPIO_OSPEEDR_OSPEED2);// low speed
	GPIOA->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3);	// enable alternate function
	GPIOA->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);// for PA2 and PA3

	// Configure USART2 connected to the debugger virtual COM port
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;// enable USART by turning on system clock
	USART2->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0);//set data to 8 bits
	USART2->BRR = F_CLK / 115200;// baudrate for 115200
	USART2->CR1 |= USART_CR1_UE;// enable USART
	USART2->CR1 |= (USART_CR1_TE | USART_CR1_RE);// enable transmit and receive for USART

	// enable interrupts for USART2 receive
	USART2->CR1 |= USART_CR1_RXNEIE;// enable RXNE interrupt on USART2
	USART2->ISR &= ~(USART_ISR_RXNE);// clear interrupt flagwhile (message[i] != 0)

	NVIC->ISER[1] = (1 << (USART2_IRQn & 0x1F));// enable USART2 ISR
	__enable_irq();
}

void USART_Print(const char* message) {
	uint8_t i;
	for(i=0; message[i] != 0; i++){				// check for terminating NULL character
		while(!(USART2->ISR & USART_ISR_TXE));	// wait for transmit buffer to be empty
		USART2->TDR = message[i];				// transmit character to USART
	}
}

/* USART Send Number Function */
void USART_SendNumber(uint32_t num) {
  char numStr[10];
  uint8_t idx = 0;

  // Convert number to string (reverse order)
  do {
    numStr[idx++] = (num % 10) + '0';
    num /= 10;
  } while (num > 0);

  // Send number string in correct order
  while (idx > 0) {
    USART_Print(&(numStr[--idx]));
  }
  USART_Print("\r\n"); // New line after number
}

/* Process ADC Values to find Min, Max, and Average */
void Process_ADC_Values(void) {
  uint32_t sum = 0;
  min_val = ADC_MAX;
  max_val = 0;

  for (uint8_t i = 0; i < SAMPLES_COUNT; i++) {
    uint32_t val = ADC_values[i];
    sum += val;
    if (val < min_val) min_val = val;
    if (val > max_val) max_val = val;
  }

  avg_val = sum / SAMPLES_COUNT;

  // Calibrate and convert to mV (avoiding floats)
  min_val = (min_val * V_REF) / ADC_MAX;
  max_val = (max_val * V_REF) / ADC_MAX;
  avg_val = (avg_val * V_REF) / ADC_MAX;
}

/* Start ADC Conversion */
void Start_ADC_Conversion(void) {
  ADC1->CR |= ADC_CR_ADSTART; // Start ADC conversion
}

void SystemClock_Config(void)
{
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

	  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
	  {
	    Error_Handler();
	  }

	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
	  RCC_OscInitStruct.MSICalibrationValue = 0;
	  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
	  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
	  {
	    Error_Handler();
	  }
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
	  {
	    Error_Handler();
	  }
}


void Error_Handler(void)
{
  __disable_irq();
  while (1){}
}

#ifdef  USE_FULL_ASSERT
void assert_failed(uint8_t *file, uint32_t line){}
#endif
