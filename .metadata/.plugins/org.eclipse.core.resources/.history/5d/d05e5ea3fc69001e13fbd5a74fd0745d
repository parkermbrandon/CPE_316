#include "main.h"

int main(void)
{
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /*
   * Configure SPI Pins		PA4 - SPI_1_NSS		PA5 - SPI_1_SCK
   * 						PA6 - SPI_1_MISO	PA7 - SPI_1_MOSI
   * follow order of configuring registers AFR, OTYPER, PUPDR, OSPEEDR, MODDER
   * to avoid a glitch is created on the output pin
   */
  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
  GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL4 | GPIO_AFRL_AFSEL5 |		// mask AF selection
		  	  	  	  GPIO_AFRL_AFSEL6 | GPIO_AFRL_AFSEL7);
  GPIOA->AFR[0] |= ((5 << GPIO_AFRL_AFSEL4_Pos) |				// select SPI_1 (AF5)
  		  	  	    (5 << GPIO_AFRL_AFSEL5_Pos) |
				    (5 << GPIO_AFRL_AFSEL6_Pos) |
				    (5 << GPIO_AFRL_AFSEL7_Pos));
  GPIOA->OTYPER &= ~(GPIO_OTYPER_OT4 | GPIO_OTYPER_OT5 |		// push-pull output
		  	  	  	  GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7);

  GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD4 | GPIO_PUPDR_PUPD5 |		// no pull ups or pull downs
		  	  	  	GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7);
  GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED4 | 					// low speed
		  	  	  	  GPIO_OSPEEDR_OSPEED5 |
					  GPIO_OSPEEDR_OSPEED6 |
					  GPIO_OSPEEDR_OSPEED7);
  GPIOA->MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 |		// mask function
		  	  	  	GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
  GPIOA->MODER |= (GPIO_MODER_MODE4_1 | GPIO_MODER_MODE5_1 |	// enable alternate function
		  	  	   GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1);

  // configure SPI 1
  RCC->APB2ENR |= (RCC_APB2ENR_SPI1EN);		// enable SPI1 clock
  SPI1->CR1 = (SPI_CR1_MSTR);				// enable master mode, fck/2, hardware CS, MSB first, full duplex
  SPI1->CR2 = (SPI_CR2_SSOE |				// enable CS output
		  	   SPI_CR2_NSSP |				// create CS pulse
			   (0xF << SPI_CR2_DS_Pos));	// 16-bit data frames
  SPI1->CR1 |= (SPI_CR1_SPE);				// enable SPI

  uint16_t spi_data0 = 0x3555;
  uint16_t spi_data1 = 0x30F0;
  uint16_t temp;

  while (1)
  {
	  while(!(SPI1->SR & SPI_SR_TXE));		// ensure room in TXFIFO before writing
	  SPI1->DR = spi_data0;

	  while(!(SPI1->SR & SPI_SR_RXNE)); 	// wait to receive 16-bits
	  temp = SPI1->DR;						// clear RX FIFO

	  while(!(SPI1->SR & SPI_SR_TXE));		// ensure room in TXFIFO before writing
	  SPI1->DR = spi_data1;

	  while(!(SPI1->SR & SPI_SR_RXNE));
	  //while(((SPI1->SR & SPI_SR_FRLVL_Msk) >> SPI_SR_FRLVL_Pos) != 0x02 ); // wait to receive 16-bits
	  temp = SPI1->DR;						// clear RX FIFO

  }
}
