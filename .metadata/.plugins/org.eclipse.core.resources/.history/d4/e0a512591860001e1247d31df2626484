#include "main.h"
#include <stdio.h>

void SystemClock_Config(void);
uint8_t readKeypad(void);

uint8_t readKeypad(void)
{
    uint8_t key = 0xFF;
    uint16_t rows[] = {GPIO_PIN_2, GPIO_PIN_10, GPIO_PIN_4, GPIO_PIN_3};
    GPIO_TypeDef* row_ports[] = {GPIOA, GPIOB, GPIOB, GPIOB};
    uint16_t cols[] = {GPIO_PIN_10, GPIO_PIN_3, GPIO_PIN_5};
    GPIO_TypeDef* col_ports[] = {GPIOA, GPIOB, GPIOB};

    for(uint8_t c = 0; c < 3; c++) {
        col_ports[c]->ODR |= cols[c];
    }

    for (uint8_t r = 0; r < 4; r++) {
        if (row_ports[r]->IDR & rows[r]) {
            key = 0;
            break;
        }
    }

    if (key == 0) {
        for (uint8_t c = 0; c < 3; c++) {
            col_ports[c]->ODR &= ~cols[c];
            for (uint8_t r = 0; r < 4; r++) {
                if (row_ports[r]->IDR & rows[r]) {
                    key = r * 3 + c + 1;
                    break;
                }
            }
            col_ports[c]->ODR |= cols[c];
            if (key != 0) {
                break;
            }
        }
    }

    return key;
}

int main(void)
{
  HAL_Init();
  SystemClock_Config();

  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN | RCC_AHB2ENR_GPIOCEN | RCC_AHB2ENR_GPIOAEN;

  GPIOB->MODER &= ~GPIO_MODER_MODER6;
  GPIOC->MODER &= ~GPIO_MODER_MODER7;
  GPIOA->MODER &= ~(GPIO_MODER_MODER9 | GPIO_MODER_MODER8);

  GPIOB->MODER |= GPIO_MODER_MODER6_0;
  GPIOC->MODER |= GPIO_MODER_MODER7_0;
  GPIOA->MODER |= GPIO_MODER_MODER9_0 | GPIO_MODER_MODER8_0;

  // Configure ROWs as input with pull-up
  GPIOA->MODER &= ~(GPIO_MODER_MODER2);
  GPIOB->MODER &= ~(GPIO_MODER_MODER10 | GPIO_MODER_MODER4 | GPIO_MODER_MODER3);

  GPIOA->PUPDR |= GPIO_PUPDR_PUPDR2_0;
  GPIOB->PUPDR |= (GPIO_PUPDR_PUPDR10_0 | GPIO_PUPDR_PUPDR4_0 | GPIO_PUPDR_PUPDR3_0);

  // Configure COLs as output
  GPIOA->MODER |= GPIO_MODER_MODER10_0;
  GPIOB->MODER |= (GPIO_MODER_MODER3_0 | GPIO_MODER_MODER5_0);


  while (1)
  {
    uint8_t key = readKeypad();

    GPIOB->ODR &= ~GPIO_PIN_6;
    GPIOC->ODR &= ~GPIO_PIN_7;
    GPIOA->ODR &= ~(GPIO_PIN_9 | GPIO_PIN_8);

    if (key != 0xFF) {
        GPIOB->ODR |= (key & 0x01) ? GPIO_PIN_6 : 0;
        GPIOC->ODR |= (key & 0x02) ? GPIO_PIN_7 : 0;
        GPIOA->ODR |= (key & 0x04) ? GPIO_PIN_9 : 0;
        GPIOA->ODR |= (key & 0x08) ? GPIO_PIN_8 : 0;
    }
  }
}

void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 10;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

void Error_Handler(void)
{
  __disable_irq();
  while (1)
  {
  }

}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
