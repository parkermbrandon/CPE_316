#include "DAC.h"

uint16_t sine_wave[256] =
{
    2048, 2098, 2148, 2199, 2249, 2299, 2349, 2399, 2448, 2498, 2547, 2596, 2644, 2692, 2740, 2787,
    2834, 2880, 2926, 2971, 3016, 3060, 3104, 3147, 3189, 3230, 3271, 3311, 3351, 3389, 3427, 3464,
    3500, 3535, 3569, 3602, 3635, 3666, 3697, 3726, 3754, 3782, 3808, 3833, 3857, 3880, 3902, 3923,
    3943, 3961, 3979, 3995, 4010, 4024, 4036, 4048, 4058, 4067, 4074, 4081, 4086, 4090, 4093, 4095,
    4095, 4094, 4092, 4088, 4084, 4078, 4071, 4062, 4053, 4042, 4030, 4017, 4002, 3987, 3970, 3952,
    3933, 3913, 3891, 3869, 3845, 3821, 3795, 3768, 3740, 3711, 3681, 3651, 3619, 3586, 3552, 3517,
    3482, 3445, 3408, 3370, 3331, 3291, 3251, 3210, 3168, 3125, 3082, 3038, 2994, 2949, 2903, 2857,
    2811, 2764, 2716, 2668, 2620, 2571, 2522, 2473, 2424, 2374, 2324, 2274, 2224, 2174, 2123, 2073,
    2022, 1972, 1921, 1871, 1821, 1771, 1721, 1671, 1622, 1573, 1524, 1475, 1427, 1379, 1331, 1284,
    1238, 1192, 1146, 1101, 1057, 1013, 970, 927, 885, 844, 804, 764, 725, 687, 650, 613,
    578, 543, 509, 476, 444, 414, 384, 355, 327, 300, 274, 250, 226, 204, 182, 162,
    143, 125, 108, 93, 78, 65, 53, 42, 33, 24, 17, 11, 7, 3, 1, 0,
    0, 2, 5, 9, 14, 21, 28, 37, 47, 59, 71, 85, 100, 116, 134, 152,
    172, 193, 215, 238, 262, 287, 313, 341, 369, 398, 429, 460, 493, 526, 560, 595,
    631, 668, 706, 744, 784, 824, 865, 906, 948, 991, 1035, 1079, 1124, 1169, 1215, 1261,
    1308, 1355, 1403, 1451, 1499, 1548, 1597, 1647, 1696, 1746, 1796, 1846, 1896, 1947, 1997, 2047,
};
uint16_t square_wave[256] =
{
    4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095,
    4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095,
    4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095,
    4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095,
    4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095,
    4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095,
    4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095,
    4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095,
    -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095,
    -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095,
    -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095,
    -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095,
    -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095,
    -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095,
    -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095,
    -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, -4095, 4095,
};
uint16_t sawtooth_wave[256] =
{
    -4095, -4063, -4031, -3999, -3967, -3934, -3902, -3870, -3838, -3806, -3774, -3742, -3710, -3677, -3645, -3613,
    -3581, -3549, -3517, -3485, -3453, -3421, -3388, -3356, -3324, -3292, -3260, -3228, -3196, -3164, -3131, -3099,
    -3067, -3035, -3003, -2971, -2939, -2907, -2875, -2842, -2810, -2778, -2746, -2714, -2682, -2650, -2618, -2585,
    -2553, -2521, -2489, -2457, -2425, -2393, -2361, -2329, -2296, -2264, -2232, -2200, -2168, -2136, -2104, -2072,
    -2039, -2007, -1975, -1943, -1911, -1879, -1847, -1815, -1783, -1750, -1718, -1686, -1654, -1622, -1590, -1558,
    -1526, -1493, -1461, -1429, -1397, -1365, -1333, -1301, -1269, -1237, -1204, -1172, -1140, -1108, -1076, -1044,
    -1012, -980, -947, -915, -883, -851, -819, -787, -755, -723, -691, -658, -626, -594, -562, -530,
    -498, -466, -434, -401, -369, -337, -305, -273, -241, -209, -177, -145, -112, -80, -48, -16,
    16, 48, 80, 112, 145, 177, 209, 241, 273, 305, 337, 369, 401, 434, 466, 498,
    530, 562, 594, 626, 658, 691, 723, 755, 787, 819, 851, 883, 915, 947, 980, 1012,
    1044, 1076, 1108, 1140, 1172, 1204, 1237, 1269, 1301, 1333, 1365, 1397, 1429, 1461, 1493, 1526,
    1558, 1590, 1622, 1654, 1686, 1718, 1750, 1783, 1815, 1847, 1879, 1911, 1943, 1975, 2007, 2039,
    2072, 2104, 2136, 2168, 2200, 2232, 2264, 2296, 2329, 2361, 2393, 2425, 2457, 2489, 2521, 2553,
    2585, 2618, 2650, 2682, 2714, 2746, 2778, 2810, 2842, 2875, 2907, 2939, 2971, 3003, 3035, 3067,
    3099, 3131, 3164, 3196, 3228, 3260, 3292, 3324, 3356, 3388, 3421, 3453, 3485, 3517, 3549, 3581,
    3613, 3645, 3677, 3710, 3742, 3774, 3806, 3838, 3870, 3902, 3934, 3967, 3999, 4031, 4063, -4095,
};
uint16_t triangle_wave[256] =
{
    -4095, -4031, -3967, -3902, -3838, -3774, -3710, -3645, -3581, -3517, -3453, -3388, -3324, -3260, -3196, -3131,
    -3067, -3003, -2939, -2875, -2810, -2746, -2682, -2618, -2553, -2489, -2425, -2361, -2296, -2232, -2168, -2104,
    -2039, -1975, -1911, -1847, -1783, -1718, -1654, -1590, -1526, -1461, -1397, -1333, -1269, -1204, -1140, -1076,
    -1012, -947, -883, -819, -755, -691, -626, -562, -498, -434, -369, -305, -241, -177, -112, -48,
    16, 80, 145, 209, 273, 337, 401, 466, 530, 594, 658, 723, 787, 851, 915, 980,
    1044, 1108, 1172, 1237, 1301, 1365, 1429, 1493, 1558, 1622, 1686, 1750, 1815, 1879, 1943, 2007,
    2072, 2136, 2200, 2264, 2329, 2393, 2457, 2521, 2585, 2650, 2714, 2778, 2842, 2907, 2971, 3035,
    3099, 3164, 3228, 3292, 3356, 3421, 3485, 3549, 3613, 3677, 3742, 3806, 3870, 3934, 3999, 4063,
    4063, 3999, 3934, 3870, 3806, 3742, 3677, 3613, 3549, 3485, 3421, 3356, 3292, 3228, 3164, 3099,
    3035, 2971, 2907, 2842, 2778, 2714, 2650, 2585, 2521, 2457, 2393, 2329, 2264, 2200, 2136, 2072,
    2007, 1943, 1879, 1815, 1750, 1686, 1622, 1558, 1493, 1429, 1365, 1301, 1237, 1172, 1108, 1044,
    980, 915, 851, 787, 723, 658, 594, 530, 466, 401, 337, 273, 209, 145, 80, 16,
    -48, -112, -177, -241, -305, -369, -434, -498, -562, -626, -691, -755, -819, -883, -947, -1012,
    -1076, -1140, -1204, -1269, -1333, -1397, -1461, -1526, -1590, -1654, -1718, -1783, -1847, -1911, -1975, -2039,
    -2104, -2168, -2232, -2296, -2361, -2425, -2489, -2553, -2618, -2682, -2746, -2810, -2875, -2939, -3003, -3067,
    -3131, -3196, -3260, -3324, -3388, -3453, -3517, -3581, -3645, -3710, -3774, -3838, -3902, -3967, -4031, -4095,
};

DAC::DAC() {

}

DAC::~DAC() {
}

void DAC_init(void)
{
	  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);

	  GPIOA->MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 |		// mask function
						GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
	  GPIOA->MODER |= (GPIO_MODER_MODE4_1 | GPIO_MODER_MODE5_1 |	// enable alternate function
					   GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1);

	  GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL4 | GPIO_AFRL_AFSEL5 |		// mask AF selection
						  GPIO_AFRL_AFSEL6 | GPIO_AFRL_AFSEL7);
	  GPIOA->AFR[0] |= ((5 << GPIO_AFRL_AFSEL4_Pos) |				// select SPI_1 (AF5)
						(5 << GPIO_AFRL_AFSEL5_Pos) |
						(5 << GPIO_AFRL_AFSEL6_Pos) |
						(5 << GPIO_AFRL_AFSEL7_Pos));

	  GPIOA->OTYPER &= ~(GPIO_OTYPER_OT4 | GPIO_OTYPER_OT5 |		// push-pull output
						  GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7);

	  GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD4 | GPIO_PUPDR_PUPD5 |		// no pull ups or pull downs
						GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7);

	  GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED4 | 					// low speed
						  GPIO_OSPEEDR_OSPEED5 |
						  GPIO_OSPEEDR_OSPEED6 |
						  GPIO_OSPEEDR_OSPEED7);

	  // configure SPI 1
	  RCC->APB2ENR |= (RCC_APB2ENR_SPI1EN);		// enable SPI1 clock
	  SPI1->CR1 = (SPI_CR1_MSTR);				// enable master mode, fck/2, hardware CS, MSB first, full duplex
	  SPI1->CR2 = (SPI_CR2_SSOE |				// enable CS output
				   SPI_CR2_NSSP |				// create CS pulse
				   (0xF << SPI_CR2_DS_Pos));	// 16-bit data frames
	  SPI1->CR1 |= (SPI_CR1_SPE);				// enable SPI
}

// Write a 12-bit value to the DAC
void DAC_write(uint16_t value) {
    uint16_t spi_data = (value & 0x0FFF) | 0x3000;  // 12-bit value, OR 0x3000 sets the Gain and buffer in the DAC see page 18 of datasheet
    while(!(SPI1->SR & SPI_SR_TXE));  // Wait for TXE (Transmit buffer empty)
    SPI1->DR = spi_data;  // Send the data
}

// Convert a voltage value into a 12-bit value to control the DAC
uint16_t DAC_mvolt_convert(float mvoltage) {
	return (mvoltage * 4095) / 3300;


