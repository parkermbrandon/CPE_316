#include "main.h"
#include "ExternalDAC.h"
#include "Keypad.h"

void IRQ_init();
int max();
int min();
void testWaveforms(External_DAC& dac);

int waveform = 0;  // 0 for square, 1 for sine, 2 for triangle, 3 for sawtooth
int frequency = 100;  // Frequency in Hz
int index = 0;  // Index for waveform array
int dutyCycle = 50;  // Duty cycle for square wave

External_DAC dac;
Keypad keys;

int max(int a, int b) {
    return (a > b) ? a : b;
}

int min(int a, int b) {
    return (a < b) ? a : b;
}

void IRQ_init()
{
    // Enable clock - TIM2
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;

    // Set up TIM2
    TIM2->PSC = 3;  // No prescaling
    TIM2->ARR = 16;  // Auto-reload value for 5 kHz
    TIM2->DIER |= TIM_DIER_UIE;  // Enable update interrupt

    // Enable TIM2
    TIM2->CR1 |= TIM_CR1_CEN;

    // Enable TIM2 interrupt
    NVIC_EnableIRQ(TIM2_IRQn);

    // Enable global interrupts
    __enable_irq();
}

void TIM2_IRQHandler(void)
{
    // Clear the Update Interrupt Flag
    TIM2->SR &= ~TIM_SR_UIF;

    // Check keypad input
    keys.tick();
    char key = keys.getPressedKey();  // Assuming you have a method to get the pressed key

    // Update waveform and frequency based on keypad input
    if (key >= '1' && key <= '5') {
        frequency = (key - '0') * 100;
    } else if (key == '6') {
        waveform = 0;
    } else if (key == '7') {
        waveform = 1;
    } else if (key == '8') {
        waveform = 2;
    } else if (key == '9') {
        waveform = 3;
    } else if (key == '*') {
        dutyCycle = max(10, dutyCycle - 10);
    } else if (key == '#') {
        dutyCycle = min(90, dutyCycle + 10);
    } else if (key == '0') {
        dutyCycle = 50;
    }

    // Send data to DAC based on waveform
    switch (waveform) {
        case 0:  // Square wave
        	dac.DAC_write(square_wave[index]);
        case 1:  // Sine wave
            dac.DAC_write(sine_wave[index]);
            break;
        case 2:  // Triangle wave
            dac.DAC_write(triangle_wave[index]);
            break;
        case 3:  // Sawtooth wave
            dac.DAC_write(sawtooth_wave[index]);
            break;
    }

    // Update index based on frequency
    index = (index + 1) % (256 * 500 / frequency);
}

void testWaveforms(External_DAC& dac) {
    int arraySize = 256;  // Replace with the actual size of your waveform arrays
    int delayTime = 1;  // Delay time in milliseconds, adjust as needed

    // Test Sine Wave
    for(int i = 0; i < 3; i++){
    for (int i = 0; i < arraySize; ++i) {
        dac.DAC_write(sine_wave[i]);
        HAL_Delay(delayTime);
    }
    }

    // Test Square Wave
    for(int i = 0; i < 3; i++){
    for (int i = 0; i < arraySize; ++i) {
    	dac.DAC_write(square_wave[i]);
        HAL_Delay(delayTime);
    }
    }

    // Test Triangle Wave
    for(int i = 0; i < 3; i++){
    for (int i = 0; i < arraySize; ++i) {
    	dac.DAC_write(triangle_wave[i]);
        HAL_Delay(delayTime);
    }
    }

    // Test Sawtooth Wave
    for(int i = 0; i < 3; i++){
    for (int i = 0; i < arraySize; ++i) {
    	dac.DAC_write(sawtooth_wave[i]);
        HAL_Delay(delayTime);
    }
    }
}

int main()
{

	IRQ_init();
	keys.Keypad_init();
	dac.DAC_init();

	while(1)
	{
		testWaveforms(dac);
		keys.tick();
	}
}
