
CPE 316 A6 ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003e0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800058c  0800058c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800058c  0800058c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800058c  0800058c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800058c  0800058c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800058c  0800058c  0001058c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000590  08000590  00010590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000594  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  20000004  08000598  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000050  08000598  00020050  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001c7d  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005b1  00000000  00000000  00021cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000220  00000000  00000000  000222a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000182  00000000  00000000  000224c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029065  00000000  00000000  0002264a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000263e  00000000  00000000  0004b6af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010c41d  00000000  00000000  0004dced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000006d4  00000000  00000000  0015a10c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0015a7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000004 	.word	0x20000004
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000574 	.word	0x08000574

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000008 	.word	0x20000008
 80001e8:	08000574 	.word	0x08000574

080001ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	4603      	mov	r3, r0
 80001f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	db0b      	blt.n	8000216 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001fe:	79fb      	ldrb	r3, [r7, #7]
 8000200:	f003 021f 	and.w	r2, r3, #31
 8000204:	4907      	ldr	r1, [pc, #28]	; (8000224 <__NVIC_EnableIRQ+0x38>)
 8000206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800020a:	095b      	lsrs	r3, r3, #5
 800020c:	2001      	movs	r0, #1
 800020e:	fa00 f202 	lsl.w	r2, r0, r2
 8000212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000216:	bf00      	nop
 8000218:	370c      	adds	r7, #12
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	e000e100 	.word	0xe000e100

08000228 <ADC_init>:

volatile uint16_t adc_value = 0;
volatile uint8_t adc_flag = 0;
uint16_t adc_samples[20];

void ADC_init() {
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
    // Enable ADC1 clock
    RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;
 800022c:	4b2d      	ldr	r3, [pc, #180]	; (80002e4 <ADC_init+0xbc>)
 800022e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000230:	4a2c      	ldr	r2, [pc, #176]	; (80002e4 <ADC_init+0xbc>)
 8000232:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000236:	64d3      	str	r3, [r2, #76]	; 0x4c

    // Configure ADC clock to 24 MHz
    // Assuming system clock is 80 MHz
    RCC->CCIPR |= (0x1 << 28);
 8000238:	4b2a      	ldr	r3, [pc, #168]	; (80002e4 <ADC_init+0xbc>)
 800023a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800023e:	4a29      	ldr	r2, [pc, #164]	; (80002e4 <ADC_init+0xbc>)
 8000240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000244:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    // 12-bit resolution
    ADC1->CFGR &= ~ADC_CFGR_RES;
 8000248:	4b27      	ldr	r3, [pc, #156]	; (80002e8 <ADC_init+0xc0>)
 800024a:	68db      	ldr	r3, [r3, #12]
 800024c:	4a26      	ldr	r2, [pc, #152]	; (80002e8 <ADC_init+0xc0>)
 800024e:	f023 0318 	bic.w	r3, r3, #24
 8000252:	60d3      	str	r3, [r2, #12]

    // Single conversion, not repeated
    ADC1->CFGR &= ~ADC_CFGR_CONT;
 8000254:	4b24      	ldr	r3, [pc, #144]	; (80002e8 <ADC_init+0xc0>)
 8000256:	68db      	ldr	r3, [r3, #12]
 8000258:	4a23      	ldr	r2, [pc, #140]	; (80002e8 <ADC_init+0xc0>)
 800025a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800025e:	60d3      	str	r3, [r2, #12]

    // Sample time of 2.5 ADC clock cycles
    ADC1->SMPR1 |= (0x2 << 3);
 8000260:	4b21      	ldr	r3, [pc, #132]	; (80002e8 <ADC_init+0xc0>)
 8000262:	695b      	ldr	r3, [r3, #20]
 8000264:	4a20      	ldr	r2, [pc, #128]	; (80002e8 <ADC_init+0xc0>)
 8000266:	f043 0310 	orr.w	r3, r3, #16
 800026a:	6153      	str	r3, [r2, #20]

    // Configure to use channel 1 (ADC123_IN1)
    ADC1->SQR1 &= ~ADC_SQR1_SQ1;
 800026c:	4b1e      	ldr	r3, [pc, #120]	; (80002e8 <ADC_init+0xc0>)
 800026e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000270:	4a1d      	ldr	r2, [pc, #116]	; (80002e8 <ADC_init+0xc0>)
 8000272:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 8000276:	6313      	str	r3, [r2, #48]	; 0x30
    ADC1->SQR1 |= (1 << 6);  // 1 shifted by 6 positions
 8000278:	4b1b      	ldr	r3, [pc, #108]	; (80002e8 <ADC_init+0xc0>)
 800027a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800027c:	4a1a      	ldr	r2, [pc, #104]	; (80002e8 <ADC_init+0xc0>)
 800027e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000282:	6313      	str	r3, [r2, #48]	; 0x30

    // Use 3.3V reference
    ADC1->CR &= ~ADC_CR_DEEPPWD;
 8000284:	4b18      	ldr	r3, [pc, #96]	; (80002e8 <ADC_init+0xc0>)
 8000286:	689b      	ldr	r3, [r3, #8]
 8000288:	4a17      	ldr	r2, [pc, #92]	; (80002e8 <ADC_init+0xc0>)
 800028a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800028e:	6093      	str	r3, [r2, #8]
    ADC1->CR |= ADC_CR_ADVREGEN;
 8000290:	4b15      	ldr	r3, [pc, #84]	; (80002e8 <ADC_init+0xc0>)
 8000292:	689b      	ldr	r3, [r3, #8]
 8000294:	4a14      	ldr	r2, [pc, #80]	; (80002e8 <ADC_init+0xc0>)
 8000296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800029a:	6093      	str	r3, [r2, #8]

    ADC1->IER |= ADC_IER_EOCIE;
 800029c:	4b12      	ldr	r3, [pc, #72]	; (80002e8 <ADC_init+0xc0>)
 800029e:	685b      	ldr	r3, [r3, #4]
 80002a0:	4a11      	ldr	r2, [pc, #68]	; (80002e8 <ADC_init+0xc0>)
 80002a2:	f043 0304 	orr.w	r3, r3, #4
 80002a6:	6053      	str	r3, [r2, #4]

    if (ADC1->ISR & ADC_ISR_ADRDY) {
 80002a8:	4b0f      	ldr	r3, [pc, #60]	; (80002e8 <ADC_init+0xc0>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	f003 0301 	and.w	r3, r3, #1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d005      	beq.n	80002c0 <ADC_init+0x98>
        ADC1->ISR |= ADC_ISR_ADRDY;  // Clear the flag by writing 1
 80002b4:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <ADC_init+0xc0>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a0b      	ldr	r2, [pc, #44]	; (80002e8 <ADC_init+0xc0>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6013      	str	r3, [r2, #0]
    }

    // Enable ADC
    ADC1->CR |= ADC_CR_ADEN;
 80002c0:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <ADC_init+0xc0>)
 80002c2:	689b      	ldr	r3, [r3, #8]
 80002c4:	4a08      	ldr	r2, [pc, #32]	; (80002e8 <ADC_init+0xc0>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	6093      	str	r3, [r2, #8]
    while (!(ADC1->ISR & ADC_ISR_ADRDY));
 80002cc:	bf00      	nop
 80002ce:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <ADC_init+0xc0>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d0f9      	beq.n	80002ce <ADC_init+0xa6>

    // Enable ADC interrupt
    NVIC_EnableIRQ(ADC1_2_IRQn);
 80002da:	2012      	movs	r0, #18
 80002dc:	f7ff ff86 	bl	80001ec <__NVIC_EnableIRQ>


}
 80002e0:	bf00      	nop
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	40021000 	.word	0x40021000
 80002e8:	50040000 	.word	0x50040000

080002ec <GPIO_Config>:

void GPIO_Config() {
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
    // Enable GPIOC clock
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 80002f0:	4b08      	ldr	r3, [pc, #32]	; (8000314 <GPIO_Config+0x28>)
 80002f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002f4:	4a07      	ldr	r2, [pc, #28]	; (8000314 <GPIO_Config+0x28>)
 80002f6:	f043 0304 	orr.w	r3, r3, #4
 80002fa:	64d3      	str	r3, [r2, #76]	; 0x4c

    // Set PC0 as analog mode
    GPIOC->MODER |= (0x3 << (0 * 2));
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <GPIO_Config+0x2c>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a05      	ldr	r2, [pc, #20]	; (8000318 <GPIO_Config+0x2c>)
 8000302:	f043 0303 	orr.w	r3, r3, #3
 8000306:	6013      	str	r3, [r2, #0]
}
 8000308:	bf00      	nop
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	40021000 	.word	0x40021000
 8000318:	48000800 	.word	0x48000800

0800031c <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler() {
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
    if (ADC1->ISR & ADC_ISR_EOC) {
 8000320:	4b0c      	ldr	r3, [pc, #48]	; (8000354 <ADC1_2_IRQHandler+0x38>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	f003 0304 	and.w	r3, r3, #4
 8000328:	2b00      	cmp	r3, #0
 800032a:	d00d      	beq.n	8000348 <ADC1_2_IRQHandler+0x2c>
        adc_value = ADC1->DR;
 800032c:	4b09      	ldr	r3, [pc, #36]	; (8000354 <ADC1_2_IRQHandler+0x38>)
 800032e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000330:	b29a      	uxth	r2, r3
 8000332:	4b09      	ldr	r3, [pc, #36]	; (8000358 <ADC1_2_IRQHandler+0x3c>)
 8000334:	801a      	strh	r2, [r3, #0]
        adc_flag = 1;
 8000336:	4b09      	ldr	r3, [pc, #36]	; (800035c <ADC1_2_IRQHandler+0x40>)
 8000338:	2201      	movs	r2, #1
 800033a:	701a      	strb	r2, [r3, #0]
        ADC1->ISR |= ADC_ISR_EOC;  // Clear the flag
 800033c:	4b05      	ldr	r3, [pc, #20]	; (8000354 <ADC1_2_IRQHandler+0x38>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a04      	ldr	r2, [pc, #16]	; (8000354 <ADC1_2_IRQHandler+0x38>)
 8000342:	f043 0304 	orr.w	r3, r3, #4
 8000346:	6013      	str	r3, [r2, #0]
    }
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	50040000 	.word	0x50040000
 8000358:	20000020 	.word	0x20000020
 800035c:	20000022 	.word	0x20000022

08000360 <main>:

int main() {
 8000360:	b580      	push	{r7, lr}
 8000362:	b086      	sub	sp, #24
 8000364:	af00      	add	r7, sp, #0
    uint16_t min, max, sum;
    uint32_t avg;
    int i = 0;
 8000366:	2300      	movs	r3, #0
 8000368:	60fb      	str	r3, [r7, #12]

    GPIO_Config();
 800036a:	f7ff ffbf 	bl	80002ec <GPIO_Config>
    ADC_init();
 800036e:	f7ff ff5b 	bl	8000228 <ADC_init>

    // Start firsty conversion
    ADC1->CR |= ADC_CR_ADSTART;
 8000372:	4b2c      	ldr	r3, [pc, #176]	; (8000424 <main+0xc4>)
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	4a2b      	ldr	r2, [pc, #172]	; (8000424 <main+0xc4>)
 8000378:	f043 0304 	orr.w	r3, r3, #4
 800037c:	6093      	str	r3, [r2, #8]

    while (1) {
        if (adc_flag) {
 800037e:	4b2a      	ldr	r3, [pc, #168]	; (8000428 <main+0xc8>)
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	b2db      	uxtb	r3, r3
 8000384:	2b00      	cmp	r3, #0
 8000386:	d0fa      	beq.n	800037e <main+0x1e>
            adc_samples[i++] = adc_value;
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	1c5a      	adds	r2, r3, #1
 800038c:	60fa      	str	r2, [r7, #12]
 800038e:	4a27      	ldr	r2, [pc, #156]	; (800042c <main+0xcc>)
 8000390:	8812      	ldrh	r2, [r2, #0]
 8000392:	b291      	uxth	r1, r2
 8000394:	4a26      	ldr	r2, [pc, #152]	; (8000430 <main+0xd0>)
 8000396:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            adc_flag = 0;
 800039a:	4b23      	ldr	r3, [pc, #140]	; (8000428 <main+0xc8>)
 800039c:	2200      	movs	r2, #0
 800039e:	701a      	strb	r2, [r3, #0]

            // Start another conversion
            ADC1->CR |= ADC_CR_ADSTART;
 80003a0:	4b20      	ldr	r3, [pc, #128]	; (8000424 <main+0xc4>)
 80003a2:	689b      	ldr	r3, [r3, #8]
 80003a4:	4a1f      	ldr	r2, [pc, #124]	; (8000424 <main+0xc4>)
 80003a6:	f043 0304 	orr.w	r3, r3, #4
 80003aa:	6093      	str	r3, [r2, #8]

            if (i >= 20) {
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	2b13      	cmp	r3, #19
 80003b0:	dde5      	ble.n	800037e <main+0x1e>
                // Reset counter
                i = 0;
 80003b2:	2300      	movs	r3, #0
 80003b4:	60fb      	str	r3, [r7, #12]

                // Calculate min, max, and avg
                min = max = adc_samples[0];
 80003b6:	4b1e      	ldr	r3, [pc, #120]	; (8000430 <main+0xd0>)
 80003b8:	881b      	ldrh	r3, [r3, #0]
 80003ba:	82bb      	strh	r3, [r7, #20]
 80003bc:	8abb      	ldrh	r3, [r7, #20]
 80003be:	82fb      	strh	r3, [r7, #22]
                sum = 0;
 80003c0:	2300      	movs	r3, #0
 80003c2:	827b      	strh	r3, [r7, #18]

                for (int j = 0; j < 20; j++) {
 80003c4:	2300      	movs	r3, #0
 80003c6:	60bb      	str	r3, [r7, #8]
 80003c8:	e021      	b.n	800040e <main+0xae>
                    if (adc_samples[j] < min) min = adc_samples[j];
 80003ca:	4a19      	ldr	r2, [pc, #100]	; (8000430 <main+0xd0>)
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003d2:	8afa      	ldrh	r2, [r7, #22]
 80003d4:	429a      	cmp	r2, r3
 80003d6:	d904      	bls.n	80003e2 <main+0x82>
 80003d8:	4a15      	ldr	r2, [pc, #84]	; (8000430 <main+0xd0>)
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003e0:	82fb      	strh	r3, [r7, #22]
                    if (adc_samples[j] > max) max = adc_samples[j];
 80003e2:	4a13      	ldr	r2, [pc, #76]	; (8000430 <main+0xd0>)
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003ea:	8aba      	ldrh	r2, [r7, #20]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d204      	bcs.n	80003fa <main+0x9a>
 80003f0:	4a0f      	ldr	r2, [pc, #60]	; (8000430 <main+0xd0>)
 80003f2:	68bb      	ldr	r3, [r7, #8]
 80003f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003f8:	82bb      	strh	r3, [r7, #20]
                    sum += adc_samples[j];
 80003fa:	4a0d      	ldr	r2, [pc, #52]	; (8000430 <main+0xd0>)
 80003fc:	68bb      	ldr	r3, [r7, #8]
 80003fe:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000402:	8a7b      	ldrh	r3, [r7, #18]
 8000404:	4413      	add	r3, r2
 8000406:	827b      	strh	r3, [r7, #18]
                for (int j = 0; j < 20; j++) {
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	3301      	adds	r3, #1
 800040c:	60bb      	str	r3, [r7, #8]
 800040e:	68bb      	ldr	r3, [r7, #8]
 8000410:	2b13      	cmp	r3, #19
 8000412:	ddda      	ble.n	80003ca <main+0x6a>
                }

                avg = sum / 20;
 8000414:	8a7b      	ldrh	r3, [r7, #18]
 8000416:	4a07      	ldr	r2, [pc, #28]	; (8000434 <main+0xd4>)
 8000418:	fba2 2303 	umull	r2, r3, r2, r3
 800041c:	091b      	lsrs	r3, r3, #4
 800041e:	b29b      	uxth	r3, r3
 8000420:	607b      	str	r3, [r7, #4]
        if (adc_flag) {
 8000422:	e7ac      	b.n	800037e <main+0x1e>
 8000424:	50040000 	.word	0x50040000
 8000428:	20000022 	.word	0x20000022
 800042c:	20000020 	.word	0x20000020
 8000430:	20000024 	.word	0x20000024
 8000434:	cccccccd 	.word	0xcccccccd

08000438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800043c:	e7fe      	b.n	800043c <NMI_Handler+0x4>

0800043e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800043e:	b480      	push	{r7}
 8000440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000442:	e7fe      	b.n	8000442 <HardFault_Handler+0x4>

08000444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000448:	e7fe      	b.n	8000448 <MemManage_Handler+0x4>

0800044a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800044a:	b480      	push	{r7}
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800044e:	e7fe      	b.n	800044e <BusFault_Handler+0x4>

08000450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000454:	e7fe      	b.n	8000454 <UsageFault_Handler+0x4>

08000456 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000456:	b480      	push	{r7}
 8000458:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800045a:	bf00      	nop
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr

08000464 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000468:	bf00      	nop
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr

08000472 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000472:	b480      	push	{r7}
 8000474:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000476:	bf00      	nop
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr

08000480 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000484:	f000 f83e 	bl	8000504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000488:	bf00      	nop
 800048a:	bd80      	pop	{r7, pc}

0800048c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000490:	4b06      	ldr	r3, [pc, #24]	; (80004ac <SystemInit+0x20>)
 8000492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000496:	4a05      	ldr	r2, [pc, #20]	; (80004ac <SystemInit+0x20>)
 8000498:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800049c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	e000ed00 	.word	0xe000ed00

080004b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80004b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004b4:	f7ff ffea 	bl	800048c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004b8:	480c      	ldr	r0, [pc, #48]	; (80004ec <LoopForever+0x6>)
  ldr r1, =_edata
 80004ba:	490d      	ldr	r1, [pc, #52]	; (80004f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004bc:	4a0d      	ldr	r2, [pc, #52]	; (80004f4 <LoopForever+0xe>)
  movs r3, #0
 80004be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004c0:	e002      	b.n	80004c8 <LoopCopyDataInit>

080004c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004c6:	3304      	adds	r3, #4

080004c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004cc:	d3f9      	bcc.n	80004c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ce:	4a0a      	ldr	r2, [pc, #40]	; (80004f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004d0:	4c0a      	ldr	r4, [pc, #40]	; (80004fc <LoopForever+0x16>)
  movs r3, #0
 80004d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004d4:	e001      	b.n	80004da <LoopFillZerobss>

080004d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004d8:	3204      	adds	r2, #4

080004da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004dc:	d3fb      	bcc.n	80004d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004de:	f000 f825 	bl	800052c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80004e2:	f7ff ff3d 	bl	8000360 <main>

080004e6 <LoopForever>:

LoopForever:
    b LoopForever
 80004e6:	e7fe      	b.n	80004e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80004e8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80004ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004f0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004f4:	08000594 	.word	0x08000594
  ldr r2, =_sbss
 80004f8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004fc:	20000050 	.word	0x20000050

08000500 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000500:	e7fe      	b.n	8000500 <ADC3_IRQHandler>
	...

08000504 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <HAL_IncTick+0x20>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	461a      	mov	r2, r3
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <HAL_IncTick+0x24>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4413      	add	r3, r2
 8000514:	4a04      	ldr	r2, [pc, #16]	; (8000528 <HAL_IncTick+0x24>)
 8000516:	6013      	str	r3, [r2, #0]
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	20000000 	.word	0x20000000
 8000528:	2000004c 	.word	0x2000004c

0800052c <__libc_init_array>:
 800052c:	b570      	push	{r4, r5, r6, lr}
 800052e:	4d0d      	ldr	r5, [pc, #52]	; (8000564 <__libc_init_array+0x38>)
 8000530:	4c0d      	ldr	r4, [pc, #52]	; (8000568 <__libc_init_array+0x3c>)
 8000532:	1b64      	subs	r4, r4, r5
 8000534:	10a4      	asrs	r4, r4, #2
 8000536:	2600      	movs	r6, #0
 8000538:	42a6      	cmp	r6, r4
 800053a:	d109      	bne.n	8000550 <__libc_init_array+0x24>
 800053c:	4d0b      	ldr	r5, [pc, #44]	; (800056c <__libc_init_array+0x40>)
 800053e:	4c0c      	ldr	r4, [pc, #48]	; (8000570 <__libc_init_array+0x44>)
 8000540:	f000 f818 	bl	8000574 <_init>
 8000544:	1b64      	subs	r4, r4, r5
 8000546:	10a4      	asrs	r4, r4, #2
 8000548:	2600      	movs	r6, #0
 800054a:	42a6      	cmp	r6, r4
 800054c:	d105      	bne.n	800055a <__libc_init_array+0x2e>
 800054e:	bd70      	pop	{r4, r5, r6, pc}
 8000550:	f855 3b04 	ldr.w	r3, [r5], #4
 8000554:	4798      	blx	r3
 8000556:	3601      	adds	r6, #1
 8000558:	e7ee      	b.n	8000538 <__libc_init_array+0xc>
 800055a:	f855 3b04 	ldr.w	r3, [r5], #4
 800055e:	4798      	blx	r3
 8000560:	3601      	adds	r6, #1
 8000562:	e7f2      	b.n	800054a <__libc_init_array+0x1e>
 8000564:	0800058c 	.word	0x0800058c
 8000568:	0800058c 	.word	0x0800058c
 800056c:	0800058c 	.word	0x0800058c
 8000570:	08000590 	.word	0x08000590

08000574 <_init>:
 8000574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000576:	bf00      	nop
 8000578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800057a:	bc08      	pop	{r3}
 800057c:	469e      	mov	lr, r3
 800057e:	4770      	bx	lr

08000580 <_fini>:
 8000580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000582:	bf00      	nop
 8000584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000586:	bc08      	pop	{r3}
 8000588:	469e      	mov	lr, r3
 800058a:	4770      	bx	lr
