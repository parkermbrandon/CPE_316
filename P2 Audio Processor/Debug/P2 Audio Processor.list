
P2 Audio Processor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005780  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08005910  08005910  00015910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a00  08005a00  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005a00  08005a00  00015a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a08  08005a08  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a08  08005a08  00015a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a0c  08005a0c  00015a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005a10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042cc  2000005c  08005a6c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004328  08005a6c  00024328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d4a1  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fec  00000000  00000000  0002d570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bb0  00000000  00000000  0002f560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000900  00000000  00000000  00030110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002644c  00000000  00000000  00030a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e1b9  00000000  00000000  00056e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea62d  00000000  00000000  00065015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000034bc  00000000  00000000  0014f644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00152b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080058f8 	.word	0x080058f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080058f8 	.word	0x080058f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_SAI_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Callback function for completed DMA transfer
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
//
//    DebugPrint("CpltCallback - DMA Counter Before Swap: %lu\n",
//                   __HAL_DMA_GET_COUNTER(&hdma_sai2_a));

    // Buffer swap logic
    uint32_t *temp = processingBuffer;
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_SAI_RxCpltCallback+0x44>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	60fb      	str	r3, [r7, #12]
    processingBuffer = currentBuffer;
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <HAL_SAI_RxCpltCallback+0x48>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a0c      	ldr	r2, [pc, #48]	; (80005c0 <HAL_SAI_RxCpltCallback+0x44>)
 8000590:	6013      	str	r3, [r2, #0]
    currentBuffer = temp;
 8000592:	4a0c      	ldr	r2, [pc, #48]	; (80005c4 <HAL_SAI_RxCpltCallback+0x48>)
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	6013      	str	r3, [r2, #0]
//
//    DebugPrint("CpltCallback - DMA Counter After Swap: %lu\n",
//                __HAL_DMA_GET_COUNTER(&hdma_sai2_a));

    // Start receiving into the new currentBuffer
    HAL_SAI_Receive_DMA(&hsai_BlockA2, (uint8_t*)currentBuffer, AUDIO_BUFFER_SIZE);
 8000598:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <HAL_SAI_RxCpltCallback+0x48>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005a0:	4619      	mov	r1, r3
 80005a2:	4809      	ldr	r0, [pc, #36]	; (80005c8 <HAL_SAI_RxCpltCallback+0x4c>)
 80005a4:	f003 fc68 	bl	8003e78 <HAL_SAI_Receive_DMA>
    //PrintDMAandSAIState();

    // Signal or start processing data in processingBuffer
    ProcessAudioData(processingBuffer, AUDIO_BUFFER_SIZE);
 80005a8:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <HAL_SAI_RxCpltCallback+0x44>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 f815 	bl	80005e0 <ProcessAudioData>
}
 80005b6:	bf00      	nop
 80005b8:	3710      	adds	r7, #16
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	2000407c 	.word	0x2000407c
 80005c4:	20004078 	.word	0x20004078
 80005c8:	20004080 	.word	0x20004080

080005cc <HAL_SAI_RxHalfCpltCallback>:

// Callback function for half completed DMA transfer
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
//
//	DebugPrint("HalfCpltCallback - DMA Counter: %lu\n",
//	               __HAL_DMA_GET_COUNTER(&hdma_sai2_a));
//
//	PrintDMAandSAIState();
}
 80005d4:	bf00      	nop
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <ProcessAudioData>:

void ProcessAudioData(uint32_t* buffer, uint32_t size)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b092      	sub	sp, #72	; 0x48
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
//
//	    // Transmit the data over UART
//	    TransmitDataOverUART(uartBuffer);

	    // Limit the number of samples to print to avoid too much data
	       const uint16_t numSamplesToPrint = 10;
 80005ea:	230a      	movs	r3, #10
 80005ec:	87bb      	strh	r3, [r7, #60]	; 0x3c

	       // Print the first few samples of the buffer for inspection
	       for (uint16_t i = 0; i < numSamplesToPrint; ++i)
 80005ee:	2300      	movs	r3, #0
 80005f0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80005f2:	e015      	b.n	8000620 <ProcessAudioData+0x40>
	       {
	           char uartBuffer[50];
	           snprintf(uartBuffer, sizeof(uartBuffer), "Sample %d: %lu\r\n", i, buffer[i]);
 80005f4:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 80005f6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	4413      	add	r3, r2
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f107 0008 	add.w	r0, r7, #8
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	460b      	mov	r3, r1
 8000608:	4a0a      	ldr	r2, [pc, #40]	; (8000634 <ProcessAudioData+0x54>)
 800060a:	2132      	movs	r1, #50	; 0x32
 800060c:	f004 fc82 	bl	8004f14 <sniprintf>
	           TransmitDataOverUART(uartBuffer);
 8000610:	f107 0308 	add.w	r3, r7, #8
 8000614:	4618      	mov	r0, r3
 8000616:	f000 f82b 	bl	8000670 <TransmitDataOverUART>
	       for (uint16_t i = 0; i < numSamplesToPrint; ++i)
 800061a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800061c:	3301      	adds	r3, #1
 800061e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8000620:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8000622:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000624:	429a      	cmp	r2, r3
 8000626:	d3e5      	bcc.n	80005f4 <ProcessAudioData+0x14>
	       }
}
 8000628:	bf00      	nop
 800062a:	bf00      	nop
 800062c:	3740      	adds	r7, #64	; 0x40
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	08005910 	.word	0x08005910

08000638 <DebugPrint>:

void DebugPrint(const char* format, ...) {
 8000638:	b40f      	push	{r0, r1, r2, r3}
 800063a:	b580      	push	{r7, lr}
 800063c:	b0a2      	sub	sp, #136	; 0x88
 800063e:	af00      	add	r7, sp, #0
    char debugBuffer[128];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 8000640:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000644:	607b      	str	r3, [r7, #4]
    vsnprintf(debugBuffer, sizeof(debugBuffer), format, args);
 8000646:	f107 0008 	add.w	r0, r7, #8
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000650:	2180      	movs	r1, #128	; 0x80
 8000652:	f004 fcbf 	bl	8004fd4 <vsniprintf>
    va_end(args);

    TransmitDataOverUART(debugBuffer);
 8000656:	f107 0308 	add.w	r3, r7, #8
 800065a:	4618      	mov	r0, r3
 800065c:	f000 f808 	bl	8000670 <TransmitDataOverUART>
}
 8000660:	bf00      	nop
 8000662:	3788      	adds	r7, #136	; 0x88
 8000664:	46bd      	mov	sp, r7
 8000666:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800066a:	b004      	add	sp, #16
 800066c:	4770      	bx	lr
	...

08000670 <TransmitDataOverUART>:

void TransmitDataOverUART(const char* data)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)data, strlen(data), 1000);
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f7ff fda9 	bl	80001d0 <strlen>
 800067e:	4603      	mov	r3, r0
 8000680:	b29a      	uxth	r2, r3
 8000682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000686:	6879      	ldr	r1, [r7, #4]
 8000688:	4803      	ldr	r0, [pc, #12]	; (8000698 <TransmitDataOverUART+0x28>)
 800068a:	f003 feeb 	bl	8004464 <HAL_UART_Transmit>
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	2000414c 	.word	0x2000414c

0800069c <HAL_SAI_ErrorCallback>:
        TransmitDataOverUART(temp);
    }
    TransmitDataOverUART("\n");
}

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
    uint32_t saiError = HAL_SAI_GetError(hsai);
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f003 fc75 	bl	8003f94 <HAL_SAI_GetError>
 80006aa:	60f8      	str	r0, [r7, #12]
    DebugPrint("SAI Error: %lu\n", saiError);
 80006ac:	68f9      	ldr	r1, [r7, #12]
 80006ae:	4803      	ldr	r0, [pc, #12]	; (80006bc <HAL_SAI_ErrorCallback+0x20>)
 80006b0:	f7ff ffc2 	bl	8000638 <DebugPrint>
}
 80006b4:	bf00      	nop
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	08005944 	.word	0x08005944

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c4:	f000 fb4e 	bl	8000d64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c8:	f000 f820 	bl	800070c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006cc:	f000 f92a 	bl	8000924 <MX_GPIO_Init>
  MX_DMA_Init();
 80006d0:	f000 f90a 	bl	80008e8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80006d4:	f000 f8d8 	bl	8000888 <MX_USART2_UART_Init>
  MX_SAI2_Init();
 80006d8:	f000 f87a 	bl	80007d0 <MX_SAI2_Init>
  /* USER CODE BEGIN 2 */

  currentBuffer = audioBuffer1;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <main+0x38>)
 80006de:	4a07      	ldr	r2, [pc, #28]	; (80006fc <main+0x3c>)
 80006e0:	601a      	str	r2, [r3, #0]
  processingBuffer = audioBuffer2;
 80006e2:	4b07      	ldr	r3, [pc, #28]	; (8000700 <main+0x40>)
 80006e4:	4a07      	ldr	r2, [pc, #28]	; (8000704 <main+0x44>)
 80006e6:	601a      	str	r2, [r3, #0]

  HAL_SAI_Receive_DMA(&hsai_BlockA2, (uint8_t*)audioBuffer1, AUDIO_BUFFER_SIZE);
 80006e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006ec:	4903      	ldr	r1, [pc, #12]	; (80006fc <main+0x3c>)
 80006ee:	4806      	ldr	r0, [pc, #24]	; (8000708 <main+0x48>)
 80006f0:	f003 fbc2 	bl	8003e78 <HAL_SAI_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <main+0x34>
 80006f6:	bf00      	nop
 80006f8:	20004078 	.word	0x20004078
 80006fc:	20000078 	.word	0x20000078
 8000700:	2000407c 	.word	0x2000407c
 8000704:	20002078 	.word	0x20002078
 8000708:	20004080 	.word	0x20004080

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b096      	sub	sp, #88	; 0x58
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	2244      	movs	r2, #68	; 0x44
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f004 fc68 	bl	8004ff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	463b      	mov	r3, r7
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800072e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000732:	f001 f87d 	bl	8001830 <HAL_PWREx_ControlVoltageScaling>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800073c:	f000 f958 	bl	80009f0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000740:	f001 f858 	bl	80017f4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000744:	4b21      	ldr	r3, [pc, #132]	; (80007cc <SystemClock_Config+0xc0>)
 8000746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800074a:	4a20      	ldr	r2, [pc, #128]	; (80007cc <SystemClock_Config+0xc0>)
 800074c:	f023 0318 	bic.w	r3, r3, #24
 8000750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000754:	2314      	movs	r3, #20
 8000756:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000758:	2301      	movs	r3, #1
 800075a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800075c:	2301      	movs	r3, #1
 800075e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000764:	23a0      	movs	r3, #160	; 0xa0
 8000766:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000768:	2302      	movs	r3, #2
 800076a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800076c:	2301      	movs	r3, #1
 800076e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000770:	2305      	movs	r3, #5
 8000772:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 37;
 8000774:	2325      	movs	r3, #37	; 0x25
 8000776:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV17;
 8000778:	2311      	movs	r3, #17
 800077a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800077c:	2302      	movs	r3, #2
 800077e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000780:	2304      	movs	r3, #4
 8000782:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4618      	mov	r0, r3
 800078a:	f001 f8a7 	bl	80018dc <HAL_RCC_OscConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000794:	f000 f92c 	bl	80009f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000798:	230f      	movs	r3, #15
 800079a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079c:	2303      	movs	r3, #3
 800079e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007ac:	463b      	mov	r3, r7
 80007ae:	2103      	movs	r1, #3
 80007b0:	4618      	mov	r0, r3
 80007b2:	f001 fc6f 	bl	8002094 <HAL_RCC_ClockConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007bc:	f000 f918 	bl	80009f0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007c0:	f002 fee4 	bl	800358c <HAL_RCCEx_EnableMSIPLLMode>
}
 80007c4:	bf00      	nop
 80007c6:	3758      	adds	r7, #88	; 0x58
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40021000 	.word	0x40021000

080007d0 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80007d4:	4b28      	ldr	r3, [pc, #160]	; (8000878 <MX_SAI2_Init+0xa8>)
 80007d6:	4a29      	ldr	r2, [pc, #164]	; (800087c <MX_SAI2_Init+0xac>)
 80007d8:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_RX;
 80007da:	4b27      	ldr	r3, [pc, #156]	; (8000878 <MX_SAI2_Init+0xa8>)
 80007dc:	2201      	movs	r2, #1
 80007de:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80007e0:	4b25      	ldr	r3, [pc, #148]	; (8000878 <MX_SAI2_Init+0xa8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80007e6:	4b24      	ldr	r3, [pc, #144]	; (8000878 <MX_SAI2_Init+0xa8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80007ec:	4b22      	ldr	r3, [pc, #136]	; (8000878 <MX_SAI2_Init+0xa8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80007f2:	4b21      	ldr	r3, [pc, #132]	; (8000878 <MX_SAI2_Init+0xa8>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80007f8:	4b1f      	ldr	r3, [pc, #124]	; (8000878 <MX_SAI2_Init+0xa8>)
 80007fa:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80007fe:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000800:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <MX_SAI2_Init+0xa8>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_MONOMODE;
 8000806:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <MX_SAI2_Init+0xa8>)
 8000808:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800080c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <MX_SAI2_Init+0xa8>)
 8000810:	2200      	movs	r2, #0
 8000812:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 8000814:	2302      	movs	r3, #2
 8000816:	2203      	movs	r2, #3
 8000818:	2100      	movs	r1, #0
 800081a:	4817      	ldr	r0, [pc, #92]	; (8000878 <MX_SAI2_Init+0xa8>)
 800081c:	f003 f988 	bl	8003b30 <HAL_SAI_InitProtocol>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_SAI2_Init+0x5a>
  {
    Error_Handler();
 8000826:	f000 f8e3 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  // Configure the DMA handler for reception process
  hdma_sai2_a.Instance                 = DMA1_Channel6;
 800082a:	4b15      	ldr	r3, [pc, #84]	; (8000880 <MX_SAI2_Init+0xb0>)
 800082c:	4a15      	ldr	r2, [pc, #84]	; (8000884 <MX_SAI2_Init+0xb4>)
 800082e:	601a      	str	r2, [r3, #0]
  hdma_sai2_a.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8000830:	4b13      	ldr	r3, [pc, #76]	; (8000880 <MX_SAI2_Init+0xb0>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  hdma_sai2_a.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000836:	4b12      	ldr	r3, [pc, #72]	; (8000880 <MX_SAI2_Init+0xb0>)
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
  hdma_sai2_a.Init.MemInc              = DMA_MINC_ENABLE;
 800083c:	4b10      	ldr	r3, [pc, #64]	; (8000880 <MX_SAI2_Init+0xb0>)
 800083e:	2280      	movs	r2, #128	; 0x80
 8000840:	611a      	str	r2, [r3, #16]
  hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_SAI2_Init+0xb0>)
 8000844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000848:	615a      	str	r2, [r3, #20]
  hdma_sai2_a.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <MX_SAI2_Init+0xb0>)
 800084c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000850:	619a      	str	r2, [r3, #24]
  hdma_sai2_a.Init.Mode                = DMA_CIRCULAR;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MX_SAI2_Init+0xb0>)
 8000854:	2220      	movs	r2, #32
 8000856:	61da      	str	r2, [r3, #28]
  hdma_sai2_a.Init.Priority            = DMA_PRIORITY_HIGH;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_SAI2_Init+0xb0>)
 800085a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800085e:	621a      	str	r2, [r3, #32]

  HAL_DMA_Init(&hdma_sai2_a);
 8000860:	4807      	ldr	r0, [pc, #28]	; (8000880 <MX_SAI2_Init+0xb0>)
 8000862:	f000 fc0d 	bl	8001080 <HAL_DMA_Init>

  // Associate the initialized DMA handle to the SAI handle
  __HAL_LINKDMA(&hsai_BlockA2, hdmarx, hdma_sai2_a);
 8000866:	4b04      	ldr	r3, [pc, #16]	; (8000878 <MX_SAI2_Init+0xa8>)
 8000868:	4a05      	ldr	r2, [pc, #20]	; (8000880 <MX_SAI2_Init+0xb0>)
 800086a:	671a      	str	r2, [r3, #112]	; 0x70
 800086c:	4b04      	ldr	r3, [pc, #16]	; (8000880 <MX_SAI2_Init+0xb0>)
 800086e:	4a02      	ldr	r2, [pc, #8]	; (8000878 <MX_SAI2_Init+0xa8>)
 8000870:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE END SAI2_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20004080 	.word	0x20004080
 800087c:	40015804 	.word	0x40015804
 8000880:	20004104 	.word	0x20004104
 8000884:	4002006c 	.word	0x4002006c

08000888 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 800088e:	4a15      	ldr	r2, [pc, #84]	; (80008e4 <MX_USART2_UART_Init+0x5c>)
 8000890:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 8000894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000898:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008cc:	f003 fd7c 	bl	80043c8 <HAL_UART_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008d6:	f000 f88b 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	2000414c 	.word	0x2000414c
 80008e4:	40004400 	.word	0x40004400

080008e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_DMA_Init+0x38>)
 80008f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008f2:	4a0b      	ldr	r2, [pc, #44]	; (8000920 <MX_DMA_Init+0x38>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6493      	str	r3, [r2, #72]	; 0x48
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_DMA_Init+0x38>)
 80008fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2100      	movs	r1, #0
 800090a:	2010      	movs	r0, #16
 800090c:	f000 fb81 	bl	8001012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000910:	2010      	movs	r0, #16
 8000912:	f000 fb9a 	bl	800104a <HAL_NVIC_EnableIRQ>

}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40021000 	.word	0x40021000

08000924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093a:	4b2b      	ldr	r3, [pc, #172]	; (80009e8 <MX_GPIO_Init+0xc4>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	4a2a      	ldr	r2, [pc, #168]	; (80009e8 <MX_GPIO_Init+0xc4>)
 8000940:	f043 0304 	orr.w	r3, r3, #4
 8000944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000946:	4b28      	ldr	r3, [pc, #160]	; (80009e8 <MX_GPIO_Init+0xc4>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094a:	f003 0304 	and.w	r3, r3, #4
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000952:	4b25      	ldr	r3, [pc, #148]	; (80009e8 <MX_GPIO_Init+0xc4>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000956:	4a24      	ldr	r2, [pc, #144]	; (80009e8 <MX_GPIO_Init+0xc4>)
 8000958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800095c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095e:	4b22      	ldr	r3, [pc, #136]	; (80009e8 <MX_GPIO_Init+0xc4>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	4b1f      	ldr	r3, [pc, #124]	; (80009e8 <MX_GPIO_Init+0xc4>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	4a1e      	ldr	r2, [pc, #120]	; (80009e8 <MX_GPIO_Init+0xc4>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000976:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <MX_GPIO_Init+0xc4>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <MX_GPIO_Init+0xc4>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	4a18      	ldr	r2, [pc, #96]	; (80009e8 <MX_GPIO_Init+0xc4>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098e:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <MX_GPIO_Init+0xc4>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	2120      	movs	r1, #32
 800099e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a2:	f000 ff0f 	bl	80017c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009ac:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	4619      	mov	r1, r3
 80009bc:	480b      	ldr	r0, [pc, #44]	; (80009ec <MX_GPIO_Init+0xc8>)
 80009be:	f000 fd57 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009c2:	2320      	movs	r3, #32
 80009c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c6:	2301      	movs	r3, #1
 80009c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	4619      	mov	r1, r3
 80009d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009dc:	f000 fd48 	bl	8001470 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009e0:	bf00      	nop
 80009e2:	3728      	adds	r7, #40	; 0x28
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40021000 	.word	0x40021000
 80009ec:	48000800 	.word	0x48000800

080009f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f4:	b672      	cpsid	i
}
 80009f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <Error_Handler+0x8>
	...

080009fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <HAL_MspInit+0x44>)
 8000a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a06:	4a0e      	ldr	r2, [pc, #56]	; (8000a40 <HAL_MspInit+0x44>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <HAL_MspInit+0x44>)
 8000a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <HAL_MspInit+0x44>)
 8000a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a1e:	4a08      	ldr	r2, [pc, #32]	; (8000a40 <HAL_MspInit+0x44>)
 8000a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a24:	6593      	str	r3, [r2, #88]	; 0x58
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_MspInit+0x44>)
 8000a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	40021000 	.word	0x40021000

08000a44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b0ac      	sub	sp, #176	; 0xb0
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2288      	movs	r2, #136	; 0x88
 8000a62:	2100      	movs	r1, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f004 fac3 	bl	8004ff0 <memset>
  if(huart->Instance==USART2)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a21      	ldr	r2, [pc, #132]	; (8000af4 <HAL_UART_MspInit+0xb0>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d13b      	bne.n	8000aec <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a74:	2302      	movs	r3, #2
 8000a76:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4618      	mov	r0, r3
 8000a82:	f001 fd2b 	bl	80024dc <HAL_RCCEx_PeriphCLKConfig>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a8c:	f7ff ffb0 	bl	80009f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a90:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <HAL_UART_MspInit+0xb4>)
 8000a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a94:	4a18      	ldr	r2, [pc, #96]	; (8000af8 <HAL_UART_MspInit+0xb4>)
 8000a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a9a:	6593      	str	r3, [r2, #88]	; 0x58
 8000a9c:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <HAL_UART_MspInit+0xb4>)
 8000a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa4:	613b      	str	r3, [r7, #16]
 8000aa6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa8:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <HAL_UART_MspInit+0xb4>)
 8000aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aac:	4a12      	ldr	r2, [pc, #72]	; (8000af8 <HAL_UART_MspInit+0xb4>)
 8000aae:	f043 0301 	orr.w	r3, r3, #1
 8000ab2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab4:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <HAL_UART_MspInit+0xb4>)
 8000ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ac0:	230c      	movs	r3, #12
 8000ac2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ad8:	2307      	movs	r3, #7
 8000ada:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ade:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae8:	f000 fcc2 	bl	8001470 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aec:	bf00      	nop
 8000aee:	37b0      	adds	r7, #176	; 0xb0
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40004400 	.word	0x40004400
 8000af8:	40021000 	.word	0x40021000

08000afc <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_a;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b0aa      	sub	sp, #168	; 0xa8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	2288      	movs	r2, #136	; 0x88
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f004 fa6f 	bl	8004ff0 <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a3a      	ldr	r2, [pc, #232]	; (8000c00 <HAL_SAI_MspInit+0x104>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d16c      	bne.n	8000bf6 <HAL_SAI_MspInit+0xfa>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000b1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b20:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLL;
 8000b22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b26:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b28:	f107 030c 	add.w	r3, r7, #12
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f001 fcd5 	bl	80024dc <HAL_RCCEx_PeriphCLKConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <HAL_SAI_MspInit+0x40>
    {
      Error_Handler();
 8000b38:	f7ff ff5a 	bl	80009f0 <Error_Handler>
    }

    if (SAI2_client == 0)
 8000b3c:	4b31      	ldr	r3, [pc, #196]	; (8000c04 <HAL_SAI_MspInit+0x108>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d10b      	bne.n	8000b5c <HAL_SAI_MspInit+0x60>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000b44:	4b30      	ldr	r3, [pc, #192]	; (8000c08 <HAL_SAI_MspInit+0x10c>)
 8000b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b48:	4a2f      	ldr	r2, [pc, #188]	; (8000c08 <HAL_SAI_MspInit+0x10c>)
 8000b4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b4e:	6613      	str	r3, [r2, #96]	; 0x60
 8000b50:	4b2d      	ldr	r3, [pc, #180]	; (8000c08 <HAL_SAI_MspInit+0x10c>)
 8000b52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 8000b5c:	4b29      	ldr	r3, [pc, #164]	; (8000c04 <HAL_SAI_MspInit+0x108>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	3301      	adds	r3, #1
 8000b62:	4a28      	ldr	r2, [pc, #160]	; (8000c04 <HAL_SAI_MspInit+0x108>)
 8000b64:	6013      	str	r3, [r2, #0]
    /**SAI2_A_Block_A GPIO Configuration
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000b66:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000b6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000b80:	230d      	movs	r3, #13
 8000b82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b86:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	481f      	ldr	r0, [pc, #124]	; (8000c0c <HAL_SAI_MspInit+0x110>)
 8000b8e:	f000 fc6f 	bl	8001470 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 8000b92:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <HAL_SAI_MspInit+0x114>)
 8000b94:	4a1f      	ldr	r2, [pc, #124]	; (8000c14 <HAL_SAI_MspInit+0x118>)
 8000b96:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8000b98:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <HAL_SAI_MspInit+0x114>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b9e:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <HAL_SAI_MspInit+0x114>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ba4:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <HAL_SAI_MspInit+0x114>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8000baa:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <HAL_SAI_MspInit+0x114>)
 8000bac:	2280      	movs	r2, #128	; 0x80
 8000bae:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000bb0:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <HAL_SAI_MspInit+0x114>)
 8000bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bb6:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bb8:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <HAL_SAI_MspInit+0x114>)
 8000bba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bbe:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8000bc0:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <HAL_SAI_MspInit+0x114>)
 8000bc2:	2220      	movs	r2, #32
 8000bc4:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000bc6:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_SAI_MspInit+0x114>)
 8000bc8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000bcc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8000bce:	4810      	ldr	r0, [pc, #64]	; (8000c10 <HAL_SAI_MspInit+0x114>)
 8000bd0:	f000 fa56 	bl	8001080 <HAL_DMA_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <HAL_SAI_MspInit+0xe2>
    {
      Error_Handler();
 8000bda:	f7ff ff09 	bl	80009f0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a0b      	ldr	r2, [pc, #44]	; (8000c10 <HAL_SAI_MspInit+0x114>)
 8000be2:	671a      	str	r2, [r3, #112]	; 0x70
 8000be4:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <HAL_SAI_MspInit+0x114>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6293      	str	r3, [r2, #40]	; 0x28

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a08      	ldr	r2, [pc, #32]	; (8000c10 <HAL_SAI_MspInit+0x114>)
 8000bee:	66da      	str	r2, [r3, #108]	; 0x6c
 8000bf0:	4a07      	ldr	r2, [pc, #28]	; (8000c10 <HAL_SAI_MspInit+0x114>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6293      	str	r3, [r2, #40]	; 0x28

    }
}
 8000bf6:	bf00      	nop
 8000bf8:	37a8      	adds	r7, #168	; 0xa8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40015804 	.word	0x40015804
 8000c04:	200041d4 	.word	0x200041d4
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	48000400 	.word	0x48000400
 8000c10:	20004104 	.word	0x20004104
 8000c14:	4002006c 	.word	0x4002006c

08000c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <NMI_Handler+0x4>

08000c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <HardFault_Handler+0x4>

08000c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <MemManage_Handler+0x4>

08000c2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <BusFault_Handler+0x4>

08000c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <UsageFault_Handler+0x4>

08000c36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c64:	f000 f8da 	bl	8000e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8000c70:	4802      	ldr	r0, [pc, #8]	; (8000c7c <DMA1_Channel6_IRQHandler+0x10>)
 8000c72:	f000 fb1d 	bl	80012b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20004104 	.word	0x20004104

08000c80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c88:	4a14      	ldr	r2, [pc, #80]	; (8000cdc <_sbrk+0x5c>)
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <_sbrk+0x60>)
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c94:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d102      	bne.n	8000ca2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <_sbrk+0x64>)
 8000c9e:	4a12      	ldr	r2, [pc, #72]	; (8000ce8 <_sbrk+0x68>)
 8000ca0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <_sbrk+0x64>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4413      	add	r3, r2
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d207      	bcs.n	8000cc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb0:	f004 f9a6 	bl	8005000 <__errno>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbe:	e009      	b.n	8000cd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <_sbrk+0x64>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cc6:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <_sbrk+0x64>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	4a05      	ldr	r2, [pc, #20]	; (8000ce4 <_sbrk+0x64>)
 8000cd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20018000 	.word	0x20018000
 8000ce0:	00000400 	.word	0x00000400
 8000ce4:	200041d8 	.word	0x200041d8
 8000ce8:	20004328 	.word	0x20004328

08000cec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <SystemInit+0x20>)
 8000cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cf6:	4a05      	ldr	r2, [pc, #20]	; (8000d0c <SystemInit+0x20>)
 8000cf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d14:	f7ff ffea 	bl	8000cec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d18:	480c      	ldr	r0, [pc, #48]	; (8000d4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d1a:	490d      	ldr	r1, [pc, #52]	; (8000d50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	; (8000d54 <LoopForever+0xe>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d20:	e002      	b.n	8000d28 <LoopCopyDataInit>

08000d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d26:	3304      	adds	r3, #4

08000d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d2c:	d3f9      	bcc.n	8000d22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d30:	4c0a      	ldr	r4, [pc, #40]	; (8000d5c <LoopForever+0x16>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d34:	e001      	b.n	8000d3a <LoopFillZerobss>

08000d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d38:	3204      	adds	r2, #4

08000d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d3c:	d3fb      	bcc.n	8000d36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d3e:	f004 f965 	bl	800500c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d42:	f7ff fcbd 	bl	80006c0 <main>

08000d46 <LoopForever>:

LoopForever:
    b LoopForever
 8000d46:	e7fe      	b.n	8000d46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d48:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d50:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d54:	08005a10 	.word	0x08005a10
  ldr r2, =_sbss
 8000d58:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d5c:	20004328 	.word	0x20004328

08000d60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d60:	e7fe      	b.n	8000d60 <ADC1_2_IRQHandler>
	...

08000d64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <HAL_Init+0x3c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a0b      	ldr	r2, [pc, #44]	; (8000da0 <HAL_Init+0x3c>)
 8000d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d78:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d7a:	2003      	movs	r0, #3
 8000d7c:	f000 f93e 	bl	8000ffc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d80:	2000      	movs	r0, #0
 8000d82:	f000 f80f 	bl	8000da4 <HAL_InitTick>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d002      	beq.n	8000d92 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	71fb      	strb	r3, [r7, #7]
 8000d90:	e001      	b.n	8000d96 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d92:	f7ff fe33 	bl	80009fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d96:	79fb      	ldrb	r3, [r7, #7]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40022000 	.word	0x40022000

08000da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dac:	2300      	movs	r3, #0
 8000dae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000db0:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <HAL_InitTick+0x6c>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d023      	beq.n	8000e00 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000db8:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <HAL_InitTick+0x70>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <HAL_InitTick+0x6c>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 f949 	bl	8001066 <HAL_SYSTICK_Config>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d10f      	bne.n	8000dfa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b0f      	cmp	r3, #15
 8000dde:	d809      	bhi.n	8000df4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de0:	2200      	movs	r2, #0
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	f04f 30ff 	mov.w	r0, #4294967295
 8000de8:	f000 f913 	bl	8001012 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dec:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <HAL_InitTick+0x74>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6013      	str	r3, [r2, #0]
 8000df2:	e007      	b.n	8000e04 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	73fb      	strb	r3, [r7, #15]
 8000df8:	e004      	b.n	8000e04 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	73fb      	strb	r3, [r7, #15]
 8000dfe:	e001      	b.n	8000e04 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000008 	.word	0x20000008
 8000e14:	20000000 	.word	0x20000000
 8000e18:	20000004 	.word	0x20000004

08000e1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_IncTick+0x20>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_IncTick+0x24>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <HAL_IncTick+0x24>)
 8000e2e:	6013      	str	r3, [r2, #0]
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20000008 	.word	0x20000008
 8000e40:	200041dc 	.word	0x200041dc

08000e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return uwTick;
 8000e48:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <HAL_GetTick+0x14>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	200041dc 	.word	0x200041dc

08000e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8e:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	60d3      	str	r3, [r2, #12]
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <__NVIC_GetPriorityGrouping+0x18>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	0a1b      	lsrs	r3, r3, #8
 8000eae:	f003 0307 	and.w	r3, r3, #7
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	db0b      	blt.n	8000eea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	f003 021f 	and.w	r2, r3, #31
 8000ed8:	4907      	ldr	r1, [pc, #28]	; (8000ef8 <__NVIC_EnableIRQ+0x38>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	095b      	lsrs	r3, r3, #5
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000e100 	.word	0xe000e100

08000efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	6039      	str	r1, [r7, #0]
 8000f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	db0a      	blt.n	8000f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	490c      	ldr	r1, [pc, #48]	; (8000f48 <__NVIC_SetPriority+0x4c>)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	0112      	lsls	r2, r2, #4
 8000f1c:	b2d2      	uxtb	r2, r2
 8000f1e:	440b      	add	r3, r1
 8000f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f24:	e00a      	b.n	8000f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4908      	ldr	r1, [pc, #32]	; (8000f4c <__NVIC_SetPriority+0x50>)
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	f003 030f 	and.w	r3, r3, #15
 8000f32:	3b04      	subs	r3, #4
 8000f34:	0112      	lsls	r2, r2, #4
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	440b      	add	r3, r1
 8000f3a:	761a      	strb	r2, [r3, #24]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000e100 	.word	0xe000e100
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b089      	sub	sp, #36	; 0x24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	f1c3 0307 	rsb	r3, r3, #7
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	bf28      	it	cs
 8000f6e:	2304      	movcs	r3, #4
 8000f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3304      	adds	r3, #4
 8000f76:	2b06      	cmp	r3, #6
 8000f78:	d902      	bls.n	8000f80 <NVIC_EncodePriority+0x30>
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3b03      	subs	r3, #3
 8000f7e:	e000      	b.n	8000f82 <NVIC_EncodePriority+0x32>
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	f04f 32ff 	mov.w	r2, #4294967295
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43da      	mvns	r2, r3
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	401a      	ands	r2, r3
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f98:	f04f 31ff 	mov.w	r1, #4294967295
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa2:	43d9      	mvns	r1, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	4313      	orrs	r3, r2
         );
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3724      	adds	r7, #36	; 0x24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fc8:	d301      	bcc.n	8000fce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00f      	b.n	8000fee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fce:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <SysTick_Config+0x40>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fd6:	210f      	movs	r1, #15
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fdc:	f7ff ff8e 	bl	8000efc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <SysTick_Config+0x40>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fe6:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <SysTick_Config+0x40>)
 8000fe8:	2207      	movs	r2, #7
 8000fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	e000e010 	.word	0xe000e010

08000ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ff29 	bl	8000e5c <__NVIC_SetPriorityGrouping>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b086      	sub	sp, #24
 8001016:	af00      	add	r7, sp, #0
 8001018:	4603      	mov	r3, r0
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
 800101e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001024:	f7ff ff3e 	bl	8000ea4 <__NVIC_GetPriorityGrouping>
 8001028:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	68b9      	ldr	r1, [r7, #8]
 800102e:	6978      	ldr	r0, [r7, #20]
 8001030:	f7ff ff8e 	bl	8000f50 <NVIC_EncodePriority>
 8001034:	4602      	mov	r2, r0
 8001036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103a:	4611      	mov	r1, r2
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff5d 	bl	8000efc <__NVIC_SetPriority>
}
 8001042:	bf00      	nop
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff31 	bl	8000ec0 <__NVIC_EnableIRQ>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff ffa2 	bl	8000fb8 <SysTick_Config>
 8001074:	4603      	mov	r3, r0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d101      	bne.n	8001092 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e098      	b.n	80011c4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	461a      	mov	r2, r3
 8001098:	4b4d      	ldr	r3, [pc, #308]	; (80011d0 <HAL_DMA_Init+0x150>)
 800109a:	429a      	cmp	r2, r3
 800109c:	d80f      	bhi.n	80010be <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	461a      	mov	r2, r3
 80010a4:	4b4b      	ldr	r3, [pc, #300]	; (80011d4 <HAL_DMA_Init+0x154>)
 80010a6:	4413      	add	r3, r2
 80010a8:	4a4b      	ldr	r2, [pc, #300]	; (80011d8 <HAL_DMA_Init+0x158>)
 80010aa:	fba2 2303 	umull	r2, r3, r2, r3
 80010ae:	091b      	lsrs	r3, r3, #4
 80010b0:	009a      	lsls	r2, r3, #2
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a48      	ldr	r2, [pc, #288]	; (80011dc <HAL_DMA_Init+0x15c>)
 80010ba:	641a      	str	r2, [r3, #64]	; 0x40
 80010bc:	e00e      	b.n	80010dc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	461a      	mov	r2, r3
 80010c4:	4b46      	ldr	r3, [pc, #280]	; (80011e0 <HAL_DMA_Init+0x160>)
 80010c6:	4413      	add	r3, r2
 80010c8:	4a43      	ldr	r2, [pc, #268]	; (80011d8 <HAL_DMA_Init+0x158>)
 80010ca:	fba2 2303 	umull	r2, r3, r2, r3
 80010ce:	091b      	lsrs	r3, r3, #4
 80010d0:	009a      	lsls	r2, r3, #2
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a42      	ldr	r2, [pc, #264]	; (80011e4 <HAL_DMA_Init+0x164>)
 80010da:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2202      	movs	r2, #2
 80010e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80010f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001100:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	691b      	ldr	r3, [r3, #16]
 8001106:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800110c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001118:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a1b      	ldr	r3, [r3, #32]
 800111e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001120:	68fa      	ldr	r2, [r7, #12]
 8001122:	4313      	orrs	r3, r2
 8001124:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001136:	d039      	beq.n	80011ac <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	4a27      	ldr	r2, [pc, #156]	; (80011dc <HAL_DMA_Init+0x15c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d11a      	bne.n	8001178 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001142:	4b29      	ldr	r3, [pc, #164]	; (80011e8 <HAL_DMA_Init+0x168>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	f003 031c 	and.w	r3, r3, #28
 800114e:	210f      	movs	r1, #15
 8001150:	fa01 f303 	lsl.w	r3, r1, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	4924      	ldr	r1, [pc, #144]	; (80011e8 <HAL_DMA_Init+0x168>)
 8001158:	4013      	ands	r3, r2
 800115a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800115c:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <HAL_DMA_Init+0x168>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6859      	ldr	r1, [r3, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001168:	f003 031c 	and.w	r3, r3, #28
 800116c:	fa01 f303 	lsl.w	r3, r1, r3
 8001170:	491d      	ldr	r1, [pc, #116]	; (80011e8 <HAL_DMA_Init+0x168>)
 8001172:	4313      	orrs	r3, r2
 8001174:	600b      	str	r3, [r1, #0]
 8001176:	e019      	b.n	80011ac <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001178:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <HAL_DMA_Init+0x16c>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001180:	f003 031c 	and.w	r3, r3, #28
 8001184:	210f      	movs	r1, #15
 8001186:	fa01 f303 	lsl.w	r3, r1, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	4917      	ldr	r1, [pc, #92]	; (80011ec <HAL_DMA_Init+0x16c>)
 800118e:	4013      	ands	r3, r2
 8001190:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001192:	4b16      	ldr	r3, [pc, #88]	; (80011ec <HAL_DMA_Init+0x16c>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6859      	ldr	r1, [r3, #4]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	f003 031c 	and.w	r3, r3, #28
 80011a2:	fa01 f303 	lsl.w	r3, r1, r3
 80011a6:	4911      	ldr	r1, [pc, #68]	; (80011ec <HAL_DMA_Init+0x16c>)
 80011a8:	4313      	orrs	r3, r2
 80011aa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2201      	movs	r2, #1
 80011b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	40020407 	.word	0x40020407
 80011d4:	bffdfff8 	.word	0xbffdfff8
 80011d8:	cccccccd 	.word	0xcccccccd
 80011dc:	40020000 	.word	0x40020000
 80011e0:	bffdfbf8 	.word	0xbffdfbf8
 80011e4:	40020400 	.word	0x40020400
 80011e8:	400200a8 	.word	0x400200a8
 80011ec:	400204a8 	.word	0x400204a8

080011f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
 80011fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001208:	2b01      	cmp	r3, #1
 800120a:	d101      	bne.n	8001210 <HAL_DMA_Start_IT+0x20>
 800120c:	2302      	movs	r3, #2
 800120e:	e04b      	b.n	80012a8 <HAL_DMA_Start_IT+0xb8>
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2201      	movs	r2, #1
 8001214:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2b01      	cmp	r3, #1
 8001222:	d13a      	bne.n	800129a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2202      	movs	r2, #2
 8001228:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2200      	movs	r2, #0
 8001230:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f022 0201 	bic.w	r2, r2, #1
 8001240:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	68b9      	ldr	r1, [r7, #8]
 8001248:	68f8      	ldr	r0, [r7, #12]
 800124a:	f000 f8e0 	bl	800140e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	2b00      	cmp	r3, #0
 8001254:	d008      	beq.n	8001268 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f042 020e 	orr.w	r2, r2, #14
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	e00f      	b.n	8001288 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 0204 	bic.w	r2, r2, #4
 8001276:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f042 020a 	orr.w	r2, r2, #10
 8001286:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f042 0201 	orr.w	r2, r2, #1
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	e005      	b.n	80012a6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80012a2:	2302      	movs	r3, #2
 80012a4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80012a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012cc:	f003 031c 	and.w	r3, r3, #28
 80012d0:	2204      	movs	r2, #4
 80012d2:	409a      	lsls	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4013      	ands	r3, r2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d026      	beq.n	800132a <HAL_DMA_IRQHandler+0x7a>
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d021      	beq.n	800132a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0320 	and.w	r3, r3, #32
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d107      	bne.n	8001304 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 0204 	bic.w	r2, r2, #4
 8001302:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001308:	f003 021c 	and.w	r2, r3, #28
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	2104      	movs	r1, #4
 8001312:	fa01 f202 	lsl.w	r2, r1, r2
 8001316:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131c:	2b00      	cmp	r3, #0
 800131e:	d071      	beq.n	8001404 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001328:	e06c      	b.n	8001404 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	f003 031c 	and.w	r3, r3, #28
 8001332:	2202      	movs	r2, #2
 8001334:	409a      	lsls	r2, r3
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	4013      	ands	r3, r2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d02e      	beq.n	800139c <HAL_DMA_IRQHandler+0xec>
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d029      	beq.n	800139c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0320 	and.w	r3, r3, #32
 8001352:	2b00      	cmp	r3, #0
 8001354:	d10b      	bne.n	800136e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 020a 	bic.w	r2, r2, #10
 8001364:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2201      	movs	r2, #1
 800136a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	f003 021c 	and.w	r2, r3, #28
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	2102      	movs	r1, #2
 800137c:	fa01 f202 	lsl.w	r2, r1, r2
 8001380:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138e:	2b00      	cmp	r3, #0
 8001390:	d038      	beq.n	8001404 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800139a:	e033      	b.n	8001404 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a0:	f003 031c 	and.w	r3, r3, #28
 80013a4:	2208      	movs	r2, #8
 80013a6:	409a      	lsls	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	4013      	ands	r3, r2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d02a      	beq.n	8001406 <HAL_DMA_IRQHandler+0x156>
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d025      	beq.n	8001406 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f022 020e 	bic.w	r2, r2, #14
 80013c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	f003 021c 	and.w	r2, r3, #28
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	2101      	movs	r1, #1
 80013d8:	fa01 f202 	lsl.w	r2, r1, r2
 80013dc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2201      	movs	r2, #1
 80013e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d004      	beq.n	8001406 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001404:	bf00      	nop
 8001406:	bf00      	nop
}
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800140e:	b480      	push	{r7}
 8001410:	b085      	sub	sp, #20
 8001412:	af00      	add	r7, sp, #0
 8001414:	60f8      	str	r0, [r7, #12]
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
 800141a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001420:	f003 021c 	and.w	r2, r3, #28
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	2101      	movs	r1, #1
 800142a:	fa01 f202 	lsl.w	r2, r1, r2
 800142e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	2b10      	cmp	r3, #16
 800143e:	d108      	bne.n	8001452 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68ba      	ldr	r2, [r7, #8]
 800144e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001450:	e007      	b.n	8001462 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	60da      	str	r2, [r3, #12]
}
 8001462:	bf00      	nop
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001470:	b480      	push	{r7}
 8001472:	b087      	sub	sp, #28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800147e:	e17f      	b.n	8001780 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	2101      	movs	r1, #1
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	fa01 f303 	lsl.w	r3, r1, r3
 800148c:	4013      	ands	r3, r2
 800148e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 8171 	beq.w	800177a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 0303 	and.w	r3, r3, #3
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d005      	beq.n	80014b0 <HAL_GPIO_Init+0x40>
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 0303 	and.w	r3, r3, #3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d130      	bne.n	8001512 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	2203      	movs	r2, #3
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	68da      	ldr	r2, [r3, #12]
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014e6:	2201      	movs	r2, #1
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	091b      	lsrs	r3, r3, #4
 80014fc:	f003 0201 	and.w	r2, r3, #1
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	2b03      	cmp	r3, #3
 800151c:	d118      	bne.n	8001550 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001522:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001524:	2201      	movs	r2, #1
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	4013      	ands	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	08db      	lsrs	r3, r3, #3
 800153a:	f003 0201 	and.w	r2, r3, #1
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4313      	orrs	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 0303 	and.w	r3, r3, #3
 8001558:	2b03      	cmp	r3, #3
 800155a:	d017      	beq.n	800158c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	2203      	movs	r2, #3
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4013      	ands	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4313      	orrs	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 0303 	and.w	r3, r3, #3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d123      	bne.n	80015e0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	08da      	lsrs	r2, r3, #3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3208      	adds	r2, #8
 80015a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	220f      	movs	r2, #15
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	691a      	ldr	r2, [r3, #16]
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	08da      	lsrs	r2, r3, #3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3208      	adds	r2, #8
 80015da:	6939      	ldr	r1, [r7, #16]
 80015dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	2203      	movs	r2, #3
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	4013      	ands	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 0203 	and.w	r2, r3, #3
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4313      	orrs	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800161c:	2b00      	cmp	r3, #0
 800161e:	f000 80ac 	beq.w	800177a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001622:	4b5f      	ldr	r3, [pc, #380]	; (80017a0 <HAL_GPIO_Init+0x330>)
 8001624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001626:	4a5e      	ldr	r2, [pc, #376]	; (80017a0 <HAL_GPIO_Init+0x330>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6613      	str	r3, [r2, #96]	; 0x60
 800162e:	4b5c      	ldr	r3, [pc, #368]	; (80017a0 <HAL_GPIO_Init+0x330>)
 8001630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800163a:	4a5a      	ldr	r2, [pc, #360]	; (80017a4 <HAL_GPIO_Init+0x334>)
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	089b      	lsrs	r3, r3, #2
 8001640:	3302      	adds	r3, #2
 8001642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001646:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	f003 0303 	and.w	r3, r3, #3
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	220f      	movs	r2, #15
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001664:	d025      	beq.n	80016b2 <HAL_GPIO_Init+0x242>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a4f      	ldr	r2, [pc, #316]	; (80017a8 <HAL_GPIO_Init+0x338>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d01f      	beq.n	80016ae <HAL_GPIO_Init+0x23e>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a4e      	ldr	r2, [pc, #312]	; (80017ac <HAL_GPIO_Init+0x33c>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d019      	beq.n	80016aa <HAL_GPIO_Init+0x23a>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a4d      	ldr	r2, [pc, #308]	; (80017b0 <HAL_GPIO_Init+0x340>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d013      	beq.n	80016a6 <HAL_GPIO_Init+0x236>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a4c      	ldr	r2, [pc, #304]	; (80017b4 <HAL_GPIO_Init+0x344>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d00d      	beq.n	80016a2 <HAL_GPIO_Init+0x232>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a4b      	ldr	r2, [pc, #300]	; (80017b8 <HAL_GPIO_Init+0x348>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d007      	beq.n	800169e <HAL_GPIO_Init+0x22e>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a4a      	ldr	r2, [pc, #296]	; (80017bc <HAL_GPIO_Init+0x34c>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d101      	bne.n	800169a <HAL_GPIO_Init+0x22a>
 8001696:	2306      	movs	r3, #6
 8001698:	e00c      	b.n	80016b4 <HAL_GPIO_Init+0x244>
 800169a:	2307      	movs	r3, #7
 800169c:	e00a      	b.n	80016b4 <HAL_GPIO_Init+0x244>
 800169e:	2305      	movs	r3, #5
 80016a0:	e008      	b.n	80016b4 <HAL_GPIO_Init+0x244>
 80016a2:	2304      	movs	r3, #4
 80016a4:	e006      	b.n	80016b4 <HAL_GPIO_Init+0x244>
 80016a6:	2303      	movs	r3, #3
 80016a8:	e004      	b.n	80016b4 <HAL_GPIO_Init+0x244>
 80016aa:	2302      	movs	r3, #2
 80016ac:	e002      	b.n	80016b4 <HAL_GPIO_Init+0x244>
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <HAL_GPIO_Init+0x244>
 80016b2:	2300      	movs	r3, #0
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	f002 0203 	and.w	r2, r2, #3
 80016ba:	0092      	lsls	r2, r2, #2
 80016bc:	4093      	lsls	r3, r2
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016c4:	4937      	ldr	r1, [pc, #220]	; (80017a4 <HAL_GPIO_Init+0x334>)
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	089b      	lsrs	r3, r3, #2
 80016ca:	3302      	adds	r3, #2
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016d2:	4b3b      	ldr	r3, [pc, #236]	; (80017c0 <HAL_GPIO_Init+0x350>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	43db      	mvns	r3, r3
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	4013      	ands	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016f6:	4a32      	ldr	r2, [pc, #200]	; (80017c0 <HAL_GPIO_Init+0x350>)
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016fc:	4b30      	ldr	r3, [pc, #192]	; (80017c0 <HAL_GPIO_Init+0x350>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	43db      	mvns	r3, r3
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	4013      	ands	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	4313      	orrs	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001720:	4a27      	ldr	r2, [pc, #156]	; (80017c0 <HAL_GPIO_Init+0x350>)
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001726:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <HAL_GPIO_Init+0x350>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	43db      	mvns	r3, r3
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	4013      	ands	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4313      	orrs	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800174a:	4a1d      	ldr	r2, [pc, #116]	; (80017c0 <HAL_GPIO_Init+0x350>)
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001750:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <HAL_GPIO_Init+0x350>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	43db      	mvns	r3, r3
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	4013      	ands	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001774:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <HAL_GPIO_Init+0x350>)
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	3301      	adds	r3, #1
 800177e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	fa22 f303 	lsr.w	r3, r2, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	f47f ae78 	bne.w	8001480 <HAL_GPIO_Init+0x10>
  }
}
 8001790:	bf00      	nop
 8001792:	bf00      	nop
 8001794:	371c      	adds	r7, #28
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40010000 	.word	0x40010000
 80017a8:	48000400 	.word	0x48000400
 80017ac:	48000800 	.word	0x48000800
 80017b0:	48000c00 	.word	0x48000c00
 80017b4:	48001000 	.word	0x48001000
 80017b8:	48001400 	.word	0x48001400
 80017bc:	48001800 	.word	0x48001800
 80017c0:	40010400 	.word	0x40010400

080017c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	807b      	strh	r3, [r7, #2]
 80017d0:	4613      	mov	r3, r2
 80017d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017d4:	787b      	ldrb	r3, [r7, #1]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017da:	887a      	ldrh	r2, [r7, #2]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017e0:	e002      	b.n	80017e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017e2:	887a      	ldrh	r2, [r7, #2]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a04      	ldr	r2, [pc, #16]	; (8001810 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001802:	6013      	str	r3, [r2, #0]
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	40007000 	.word	0x40007000

08001814 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001818:	4b04      	ldr	r3, [pc, #16]	; (800182c <HAL_PWREx_GetVoltageRange+0x18>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001820:	4618      	mov	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	40007000 	.word	0x40007000

08001830 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800183e:	d130      	bne.n	80018a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001840:	4b23      	ldr	r3, [pc, #140]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800184c:	d038      	beq.n	80018c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800184e:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001856:	4a1e      	ldr	r2, [pc, #120]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001858:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800185c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800185e:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2232      	movs	r2, #50	; 0x32
 8001864:	fb02 f303 	mul.w	r3, r2, r3
 8001868:	4a1b      	ldr	r2, [pc, #108]	; (80018d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800186a:	fba2 2303 	umull	r2, r3, r2, r3
 800186e:	0c9b      	lsrs	r3, r3, #18
 8001870:	3301      	adds	r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001874:	e002      	b.n	800187c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	3b01      	subs	r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800187c:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800187e:	695b      	ldr	r3, [r3, #20]
 8001880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001888:	d102      	bne.n	8001890 <HAL_PWREx_ControlVoltageScaling+0x60>
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1f2      	bne.n	8001876 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001890:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800189c:	d110      	bne.n	80018c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e00f      	b.n	80018c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80018a2:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ae:	d007      	beq.n	80018c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018b0:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018b8:	4a05      	ldr	r2, [pc, #20]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	40007000 	.word	0x40007000
 80018d4:	20000000 	.word	0x20000000
 80018d8:	431bde83 	.word	0x431bde83

080018dc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b088      	sub	sp, #32
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e3ca      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ee:	4b97      	ldr	r3, [pc, #604]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 030c 	and.w	r3, r3, #12
 80018f6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018f8:	4b94      	ldr	r3, [pc, #592]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0310 	and.w	r3, r3, #16
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 80e4 	beq.w	8001ad8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d007      	beq.n	8001926 <HAL_RCC_OscConfig+0x4a>
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	2b0c      	cmp	r3, #12
 800191a:	f040 808b 	bne.w	8001a34 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	2b01      	cmp	r3, #1
 8001922:	f040 8087 	bne.w	8001a34 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001926:	4b89      	ldr	r3, [pc, #548]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d005      	beq.n	800193e <HAL_RCC_OscConfig+0x62>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e3a2      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a1a      	ldr	r2, [r3, #32]
 8001942:	4b82      	ldr	r3, [pc, #520]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	2b00      	cmp	r3, #0
 800194c:	d004      	beq.n	8001958 <HAL_RCC_OscConfig+0x7c>
 800194e:	4b7f      	ldr	r3, [pc, #508]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001956:	e005      	b.n	8001964 <HAL_RCC_OscConfig+0x88>
 8001958:	4b7c      	ldr	r3, [pc, #496]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 800195a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800195e:	091b      	lsrs	r3, r3, #4
 8001960:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001964:	4293      	cmp	r3, r2
 8001966:	d223      	bcs.n	80019b0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	4618      	mov	r0, r3
 800196e:	f000 fd55 	bl	800241c <RCC_SetFlashLatencyFromMSIRange>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e383      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800197c:	4b73      	ldr	r3, [pc, #460]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a72      	ldr	r2, [pc, #456]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001982:	f043 0308 	orr.w	r3, r3, #8
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	4b70      	ldr	r3, [pc, #448]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	496d      	ldr	r1, [pc, #436]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001996:	4313      	orrs	r3, r2
 8001998:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800199a:	4b6c      	ldr	r3, [pc, #432]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	021b      	lsls	r3, r3, #8
 80019a8:	4968      	ldr	r1, [pc, #416]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	604b      	str	r3, [r1, #4]
 80019ae:	e025      	b.n	80019fc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019b0:	4b66      	ldr	r3, [pc, #408]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a65      	ldr	r2, [pc, #404]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 80019b6:	f043 0308 	orr.w	r3, r3, #8
 80019ba:	6013      	str	r3, [r2, #0]
 80019bc:	4b63      	ldr	r3, [pc, #396]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	4960      	ldr	r1, [pc, #384]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019ce:	4b5f      	ldr	r3, [pc, #380]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	021b      	lsls	r3, r3, #8
 80019dc:	495b      	ldr	r1, [pc, #364]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d109      	bne.n	80019fc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a1b      	ldr	r3, [r3, #32]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 fd15 	bl	800241c <RCC_SetFlashLatencyFromMSIRange>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e343      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019fc:	f000 fc4a 	bl	8002294 <HAL_RCC_GetSysClockFreq>
 8001a00:	4602      	mov	r2, r0
 8001a02:	4b52      	ldr	r3, [pc, #328]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	091b      	lsrs	r3, r3, #4
 8001a08:	f003 030f 	and.w	r3, r3, #15
 8001a0c:	4950      	ldr	r1, [pc, #320]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 8001a0e:	5ccb      	ldrb	r3, [r1, r3]
 8001a10:	f003 031f 	and.w	r3, r3, #31
 8001a14:	fa22 f303 	lsr.w	r3, r2, r3
 8001a18:	4a4e      	ldr	r2, [pc, #312]	; (8001b54 <HAL_RCC_OscConfig+0x278>)
 8001a1a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a1c:	4b4e      	ldr	r3, [pc, #312]	; (8001b58 <HAL_RCC_OscConfig+0x27c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff f9bf 	bl	8000da4 <HAL_InitTick>
 8001a26:	4603      	mov	r3, r0
 8001a28:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d052      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
 8001a32:	e327      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d032      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a3c:	4b43      	ldr	r3, [pc, #268]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a42      	ldr	r2, [pc, #264]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a48:	f7ff f9fc 	bl	8000e44 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a50:	f7ff f9f8 	bl	8000e44 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e310      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a62:	4b3a      	ldr	r3, [pc, #232]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a6e:	4b37      	ldr	r3, [pc, #220]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a36      	ldr	r2, [pc, #216]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001a74:	f043 0308 	orr.w	r3, r3, #8
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	4b34      	ldr	r3, [pc, #208]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	4931      	ldr	r1, [pc, #196]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a8c:	4b2f      	ldr	r3, [pc, #188]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69db      	ldr	r3, [r3, #28]
 8001a98:	021b      	lsls	r3, r3, #8
 8001a9a:	492c      	ldr	r1, [pc, #176]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]
 8001aa0:	e01a      	b.n	8001ad8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001aa2:	4b2a      	ldr	r3, [pc, #168]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a29      	ldr	r2, [pc, #164]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001aa8:	f023 0301 	bic.w	r3, r3, #1
 8001aac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001aae:	f7ff f9c9 	bl	8000e44 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ab6:	f7ff f9c5 	bl	8000e44 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e2dd      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ac8:	4b20      	ldr	r3, [pc, #128]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1f0      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x1da>
 8001ad4:	e000      	b.n	8001ad8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ad6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d074      	beq.n	8001bce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d005      	beq.n	8001af6 <HAL_RCC_OscConfig+0x21a>
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	2b0c      	cmp	r3, #12
 8001aee:	d10e      	bne.n	8001b0e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d10b      	bne.n	8001b0e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d064      	beq.n	8001bcc <HAL_RCC_OscConfig+0x2f0>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d160      	bne.n	8001bcc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e2ba      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b16:	d106      	bne.n	8001b26 <HAL_RCC_OscConfig+0x24a>
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0b      	ldr	r2, [pc, #44]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	e026      	b.n	8001b74 <HAL_RCC_OscConfig+0x298>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b2e:	d115      	bne.n	8001b5c <HAL_RCC_OscConfig+0x280>
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a05      	ldr	r2, [pc, #20]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001b36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	4b03      	ldr	r3, [pc, #12]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a02      	ldr	r2, [pc, #8]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	e014      	b.n	8001b74 <HAL_RCC_OscConfig+0x298>
 8001b4a:	bf00      	nop
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	08005984 	.word	0x08005984
 8001b54:	20000000 	.word	0x20000000
 8001b58:	20000004 	.word	0x20000004
 8001b5c:	4ba0      	ldr	r3, [pc, #640]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a9f      	ldr	r2, [pc, #636]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	4b9d      	ldr	r3, [pc, #628]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a9c      	ldr	r2, [pc, #624]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d013      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7c:	f7ff f962 	bl	8000e44 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b84:	f7ff f95e 	bl	8000e44 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b64      	cmp	r3, #100	; 0x64
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e276      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b96:	4b92      	ldr	r3, [pc, #584]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0f0      	beq.n	8001b84 <HAL_RCC_OscConfig+0x2a8>
 8001ba2:	e014      	b.n	8001bce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba4:	f7ff f94e 	bl	8000e44 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bac:	f7ff f94a 	bl	8000e44 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b64      	cmp	r3, #100	; 0x64
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e262      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bbe:	4b88      	ldr	r3, [pc, #544]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f0      	bne.n	8001bac <HAL_RCC_OscConfig+0x2d0>
 8001bca:	e000      	b.n	8001bce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d060      	beq.n	8001c9c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d005      	beq.n	8001bec <HAL_RCC_OscConfig+0x310>
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	2b0c      	cmp	r3, #12
 8001be4:	d119      	bne.n	8001c1a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d116      	bne.n	8001c1a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bec:	4b7c      	ldr	r3, [pc, #496]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d005      	beq.n	8001c04 <HAL_RCC_OscConfig+0x328>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e23f      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c04:	4b76      	ldr	r3, [pc, #472]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	061b      	lsls	r3, r3, #24
 8001c12:	4973      	ldr	r1, [pc, #460]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c18:	e040      	b.n	8001c9c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d023      	beq.n	8001c6a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c22:	4b6f      	ldr	r3, [pc, #444]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a6e      	ldr	r2, [pc, #440]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2e:	f7ff f909 	bl	8000e44 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c36:	f7ff f905 	bl	8000e44 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e21d      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c48:	4b65      	ldr	r3, [pc, #404]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0f0      	beq.n	8001c36 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c54:	4b62      	ldr	r3, [pc, #392]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	061b      	lsls	r3, r3, #24
 8001c62:	495f      	ldr	r1, [pc, #380]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	604b      	str	r3, [r1, #4]
 8001c68:	e018      	b.n	8001c9c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c6a:	4b5d      	ldr	r3, [pc, #372]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a5c      	ldr	r2, [pc, #368]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c76:	f7ff f8e5 	bl	8000e44 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c7e:	f7ff f8e1 	bl	8000e44 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e1f9      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c90:	4b53      	ldr	r3, [pc, #332]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1f0      	bne.n	8001c7e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d03c      	beq.n	8001d22 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d01c      	beq.n	8001cea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cb0:	4b4b      	ldr	r3, [pc, #300]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cb6:	4a4a      	ldr	r2, [pc, #296]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc0:	f7ff f8c0 	bl	8000e44 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc8:	f7ff f8bc 	bl	8000e44 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e1d4      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cda:	4b41      	ldr	r3, [pc, #260]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0ef      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x3ec>
 8001ce8:	e01b      	b.n	8001d22 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cea:	4b3d      	ldr	r3, [pc, #244]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cf0:	4a3b      	ldr	r2, [pc, #236]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001cf2:	f023 0301 	bic.w	r3, r3, #1
 8001cf6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7ff f8a3 	bl	8000e44 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d02:	f7ff f89f 	bl	8000e44 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e1b7      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d14:	4b32      	ldr	r3, [pc, #200]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1ef      	bne.n	8001d02 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 80a6 	beq.w	8001e7c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d30:	2300      	movs	r3, #0
 8001d32:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d34:	4b2a      	ldr	r3, [pc, #168]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d10d      	bne.n	8001d5c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d40:	4b27      	ldr	r3, [pc, #156]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d44:	4a26      	ldr	r2, [pc, #152]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d4c:	4b24      	ldr	r3, [pc, #144]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d5c:	4b21      	ldr	r3, [pc, #132]	; (8001de4 <HAL_RCC_OscConfig+0x508>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d118      	bne.n	8001d9a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d68:	4b1e      	ldr	r3, [pc, #120]	; (8001de4 <HAL_RCC_OscConfig+0x508>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a1d      	ldr	r2, [pc, #116]	; (8001de4 <HAL_RCC_OscConfig+0x508>)
 8001d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d74:	f7ff f866 	bl	8000e44 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d7c:	f7ff f862 	bl	8000e44 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e17a      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <HAL_RCC_OscConfig+0x508>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0f0      	beq.n	8001d7c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d108      	bne.n	8001db4 <HAL_RCC_OscConfig+0x4d8>
 8001da2:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da8:	4a0d      	ldr	r2, [pc, #52]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001db2:	e029      	b.n	8001e08 <HAL_RCC_OscConfig+0x52c>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	2b05      	cmp	r3, #5
 8001dba:	d115      	bne.n	8001de8 <HAL_RCC_OscConfig+0x50c>
 8001dbc:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc2:	4a07      	ldr	r2, [pc, #28]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001dc4:	f043 0304 	orr.w	r3, r3, #4
 8001dc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dcc:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd2:	4a03      	ldr	r2, [pc, #12]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ddc:	e014      	b.n	8001e08 <HAL_RCC_OscConfig+0x52c>
 8001dde:	bf00      	nop
 8001de0:	40021000 	.word	0x40021000
 8001de4:	40007000 	.word	0x40007000
 8001de8:	4b9c      	ldr	r3, [pc, #624]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dee:	4a9b      	ldr	r2, [pc, #620]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001df0:	f023 0301 	bic.w	r3, r3, #1
 8001df4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001df8:	4b98      	ldr	r3, [pc, #608]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfe:	4a97      	ldr	r2, [pc, #604]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001e00:	f023 0304 	bic.w	r3, r3, #4
 8001e04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d016      	beq.n	8001e3e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e10:	f7ff f818 	bl	8000e44 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e16:	e00a      	b.n	8001e2e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e18:	f7ff f814 	bl	8000e44 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e12a      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e2e:	4b8b      	ldr	r3, [pc, #556]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0ed      	beq.n	8001e18 <HAL_RCC_OscConfig+0x53c>
 8001e3c:	e015      	b.n	8001e6a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e3e:	f7ff f801 	bl	8000e44 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e44:	e00a      	b.n	8001e5c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e46:	f7fe fffd 	bl	8000e44 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e113      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e5c:	4b7f      	ldr	r3, [pc, #508]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1ed      	bne.n	8001e46 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e6a:	7ffb      	ldrb	r3, [r7, #31]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d105      	bne.n	8001e7c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e70:	4b7a      	ldr	r3, [pc, #488]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e74:	4a79      	ldr	r2, [pc, #484]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001e76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e7a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 80fe 	beq.w	8002082 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	f040 80d0 	bne.w	8002030 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e90:	4b72      	ldr	r3, [pc, #456]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f003 0203 	and.w	r2, r3, #3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d130      	bne.n	8001f06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d127      	bne.n	8001f06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d11f      	bne.n	8001f06 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ed0:	2a07      	cmp	r2, #7
 8001ed2:	bf14      	ite	ne
 8001ed4:	2201      	movne	r2, #1
 8001ed6:	2200      	moveq	r2, #0
 8001ed8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d113      	bne.n	8001f06 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee8:	085b      	lsrs	r3, r3, #1
 8001eea:	3b01      	subs	r3, #1
 8001eec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d109      	bne.n	8001f06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	085b      	lsrs	r3, r3, #1
 8001efe:	3b01      	subs	r3, #1
 8001f00:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d06e      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	2b0c      	cmp	r3, #12
 8001f0a:	d069      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f0c:	4b53      	ldr	r3, [pc, #332]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d105      	bne.n	8001f24 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f18:	4b50      	ldr	r3, [pc, #320]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e0ad      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f28:	4b4c      	ldr	r3, [pc, #304]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a4b      	ldr	r2, [pc, #300]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001f2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f32:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f34:	f7fe ff86 	bl	8000e44 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f3c:	f7fe ff82 	bl	8000e44 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e09a      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f4e:	4b43      	ldr	r3, [pc, #268]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f0      	bne.n	8001f3c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f5a:	4b40      	ldr	r3, [pc, #256]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001f5c:	68da      	ldr	r2, [r3, #12]
 8001f5e:	4b40      	ldr	r3, [pc, #256]	; (8002060 <HAL_RCC_OscConfig+0x784>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f6a:	3a01      	subs	r2, #1
 8001f6c:	0112      	lsls	r2, r2, #4
 8001f6e:	4311      	orrs	r1, r2
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f74:	0212      	lsls	r2, r2, #8
 8001f76:	4311      	orrs	r1, r2
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f7c:	0852      	lsrs	r2, r2, #1
 8001f7e:	3a01      	subs	r2, #1
 8001f80:	0552      	lsls	r2, r2, #21
 8001f82:	4311      	orrs	r1, r2
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f88:	0852      	lsrs	r2, r2, #1
 8001f8a:	3a01      	subs	r2, #1
 8001f8c:	0652      	lsls	r2, r2, #25
 8001f8e:	4311      	orrs	r1, r2
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f94:	0912      	lsrs	r2, r2, #4
 8001f96:	0452      	lsls	r2, r2, #17
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	4930      	ldr	r1, [pc, #192]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001fa0:	4b2e      	ldr	r3, [pc, #184]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a2d      	ldr	r2, [pc, #180]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001fa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001faa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fac:	4b2b      	ldr	r3, [pc, #172]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	4a2a      	ldr	r2, [pc, #168]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001fb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fb6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fb8:	f7fe ff44 	bl	8000e44 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc0:	f7fe ff40 	bl	8000e44 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e058      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd2:	4b22      	ldr	r3, [pc, #136]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fde:	e050      	b.n	8002082 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e04f      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fe4:	4b1d      	ldr	r3, [pc, #116]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d148      	bne.n	8002082 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ff0:	4b1a      	ldr	r3, [pc, #104]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a19      	ldr	r2, [pc, #100]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001ff6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ffa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ffc:	4b17      	ldr	r3, [pc, #92]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	4a16      	ldr	r2, [pc, #88]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8002002:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002006:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002008:	f7fe ff1c 	bl	8000e44 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002010:	f7fe ff18 	bl	8000e44 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e030      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002022:	4b0e      	ldr	r3, [pc, #56]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0f0      	beq.n	8002010 <HAL_RCC_OscConfig+0x734>
 800202e:	e028      	b.n	8002082 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	2b0c      	cmp	r3, #12
 8002034:	d023      	beq.n	800207e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002036:	4b09      	ldr	r3, [pc, #36]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a08      	ldr	r2, [pc, #32]	; (800205c <HAL_RCC_OscConfig+0x780>)
 800203c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002040:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002042:	f7fe feff 	bl	8000e44 <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002048:	e00c      	b.n	8002064 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204a:	f7fe fefb 	bl	8000e44 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d905      	bls.n	8002064 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e013      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
 800205c:	40021000 	.word	0x40021000
 8002060:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002064:	4b09      	ldr	r3, [pc, #36]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1ec      	bne.n	800204a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	4905      	ldr	r1, [pc, #20]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8002076:	4b06      	ldr	r3, [pc, #24]	; (8002090 <HAL_RCC_OscConfig+0x7b4>)
 8002078:	4013      	ands	r3, r2
 800207a:	60cb      	str	r3, [r1, #12]
 800207c:	e001      	b.n	8002082 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3720      	adds	r7, #32
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40021000 	.word	0x40021000
 8002090:	feeefffc 	.word	0xfeeefffc

08002094 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e0e7      	b.n	8002278 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020a8:	4b75      	ldr	r3, [pc, #468]	; (8002280 <HAL_RCC_ClockConfig+0x1ec>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d910      	bls.n	80020d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b6:	4b72      	ldr	r3, [pc, #456]	; (8002280 <HAL_RCC_ClockConfig+0x1ec>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f023 0207 	bic.w	r2, r3, #7
 80020be:	4970      	ldr	r1, [pc, #448]	; (8002280 <HAL_RCC_ClockConfig+0x1ec>)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c6:	4b6e      	ldr	r3, [pc, #440]	; (8002280 <HAL_RCC_ClockConfig+0x1ec>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d001      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e0cf      	b.n	8002278 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d010      	beq.n	8002106 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	4b66      	ldr	r3, [pc, #408]	; (8002284 <HAL_RCC_ClockConfig+0x1f0>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d908      	bls.n	8002106 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f4:	4b63      	ldr	r3, [pc, #396]	; (8002284 <HAL_RCC_ClockConfig+0x1f0>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	4960      	ldr	r1, [pc, #384]	; (8002284 <HAL_RCC_ClockConfig+0x1f0>)
 8002102:	4313      	orrs	r3, r2
 8002104:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	d04c      	beq.n	80021ac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b03      	cmp	r3, #3
 8002118:	d107      	bne.n	800212a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800211a:	4b5a      	ldr	r3, [pc, #360]	; (8002284 <HAL_RCC_ClockConfig+0x1f0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d121      	bne.n	800216a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e0a6      	b.n	8002278 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b02      	cmp	r3, #2
 8002130:	d107      	bne.n	8002142 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002132:	4b54      	ldr	r3, [pc, #336]	; (8002284 <HAL_RCC_ClockConfig+0x1f0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d115      	bne.n	800216a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e09a      	b.n	8002278 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d107      	bne.n	800215a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800214a:	4b4e      	ldr	r3, [pc, #312]	; (8002284 <HAL_RCC_ClockConfig+0x1f0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d109      	bne.n	800216a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e08e      	b.n	8002278 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800215a:	4b4a      	ldr	r3, [pc, #296]	; (8002284 <HAL_RCC_ClockConfig+0x1f0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e086      	b.n	8002278 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800216a:	4b46      	ldr	r3, [pc, #280]	; (8002284 <HAL_RCC_ClockConfig+0x1f0>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f023 0203 	bic.w	r2, r3, #3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	4943      	ldr	r1, [pc, #268]	; (8002284 <HAL_RCC_ClockConfig+0x1f0>)
 8002178:	4313      	orrs	r3, r2
 800217a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800217c:	f7fe fe62 	bl	8000e44 <HAL_GetTick>
 8002180:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002182:	e00a      	b.n	800219a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002184:	f7fe fe5e 	bl	8000e44 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002192:	4293      	cmp	r3, r2
 8002194:	d901      	bls.n	800219a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e06e      	b.n	8002278 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219a:	4b3a      	ldr	r3, [pc, #232]	; (8002284 <HAL_RCC_ClockConfig+0x1f0>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 020c 	and.w	r2, r3, #12
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d1eb      	bne.n	8002184 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d010      	beq.n	80021da <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	4b31      	ldr	r3, [pc, #196]	; (8002284 <HAL_RCC_ClockConfig+0x1f0>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d208      	bcs.n	80021da <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c8:	4b2e      	ldr	r3, [pc, #184]	; (8002284 <HAL_RCC_ClockConfig+0x1f0>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	492b      	ldr	r1, [pc, #172]	; (8002284 <HAL_RCC_ClockConfig+0x1f0>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021da:	4b29      	ldr	r3, [pc, #164]	; (8002280 <HAL_RCC_ClockConfig+0x1ec>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d210      	bcs.n	800220a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e8:	4b25      	ldr	r3, [pc, #148]	; (8002280 <HAL_RCC_ClockConfig+0x1ec>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f023 0207 	bic.w	r2, r3, #7
 80021f0:	4923      	ldr	r1, [pc, #140]	; (8002280 <HAL_RCC_ClockConfig+0x1ec>)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f8:	4b21      	ldr	r3, [pc, #132]	; (8002280 <HAL_RCC_ClockConfig+0x1ec>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d001      	beq.n	800220a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e036      	b.n	8002278 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0304 	and.w	r3, r3, #4
 8002212:	2b00      	cmp	r3, #0
 8002214:	d008      	beq.n	8002228 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002216:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <HAL_RCC_ClockConfig+0x1f0>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	4918      	ldr	r1, [pc, #96]	; (8002284 <HAL_RCC_ClockConfig+0x1f0>)
 8002224:	4313      	orrs	r3, r2
 8002226:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0308 	and.w	r3, r3, #8
 8002230:	2b00      	cmp	r3, #0
 8002232:	d009      	beq.n	8002248 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002234:	4b13      	ldr	r3, [pc, #76]	; (8002284 <HAL_RCC_ClockConfig+0x1f0>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	4910      	ldr	r1, [pc, #64]	; (8002284 <HAL_RCC_ClockConfig+0x1f0>)
 8002244:	4313      	orrs	r3, r2
 8002246:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002248:	f000 f824 	bl	8002294 <HAL_RCC_GetSysClockFreq>
 800224c:	4602      	mov	r2, r0
 800224e:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <HAL_RCC_ClockConfig+0x1f0>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	091b      	lsrs	r3, r3, #4
 8002254:	f003 030f 	and.w	r3, r3, #15
 8002258:	490b      	ldr	r1, [pc, #44]	; (8002288 <HAL_RCC_ClockConfig+0x1f4>)
 800225a:	5ccb      	ldrb	r3, [r1, r3]
 800225c:	f003 031f 	and.w	r3, r3, #31
 8002260:	fa22 f303 	lsr.w	r3, r2, r3
 8002264:	4a09      	ldr	r2, [pc, #36]	; (800228c <HAL_RCC_ClockConfig+0x1f8>)
 8002266:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002268:	4b09      	ldr	r3, [pc, #36]	; (8002290 <HAL_RCC_ClockConfig+0x1fc>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f7fe fd99 	bl	8000da4 <HAL_InitTick>
 8002272:	4603      	mov	r3, r0
 8002274:	72fb      	strb	r3, [r7, #11]

  return status;
 8002276:	7afb      	ldrb	r3, [r7, #11]
}
 8002278:	4618      	mov	r0, r3
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40022000 	.word	0x40022000
 8002284:	40021000 	.word	0x40021000
 8002288:	08005984 	.word	0x08005984
 800228c:	20000000 	.word	0x20000000
 8002290:	20000004 	.word	0x20000004

08002294 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002294:	b480      	push	{r7}
 8002296:	b089      	sub	sp, #36	; 0x24
 8002298:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
 800229e:	2300      	movs	r3, #0
 80022a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022a2:	4b3e      	ldr	r3, [pc, #248]	; (800239c <HAL_RCC_GetSysClockFreq+0x108>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 030c 	and.w	r3, r3, #12
 80022aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022ac:	4b3b      	ldr	r3, [pc, #236]	; (800239c <HAL_RCC_GetSysClockFreq+0x108>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d005      	beq.n	80022c8 <HAL_RCC_GetSysClockFreq+0x34>
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	2b0c      	cmp	r3, #12
 80022c0:	d121      	bne.n	8002306 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d11e      	bne.n	8002306 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022c8:	4b34      	ldr	r3, [pc, #208]	; (800239c <HAL_RCC_GetSysClockFreq+0x108>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0308 	and.w	r3, r3, #8
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d107      	bne.n	80022e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022d4:	4b31      	ldr	r3, [pc, #196]	; (800239c <HAL_RCC_GetSysClockFreq+0x108>)
 80022d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022da:	0a1b      	lsrs	r3, r3, #8
 80022dc:	f003 030f 	and.w	r3, r3, #15
 80022e0:	61fb      	str	r3, [r7, #28]
 80022e2:	e005      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022e4:	4b2d      	ldr	r3, [pc, #180]	; (800239c <HAL_RCC_GetSysClockFreq+0x108>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	091b      	lsrs	r3, r3, #4
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022f0:	4a2b      	ldr	r2, [pc, #172]	; (80023a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d10d      	bne.n	800231c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002304:	e00a      	b.n	800231c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	2b04      	cmp	r3, #4
 800230a:	d102      	bne.n	8002312 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800230c:	4b25      	ldr	r3, [pc, #148]	; (80023a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800230e:	61bb      	str	r3, [r7, #24]
 8002310:	e004      	b.n	800231c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	2b08      	cmp	r3, #8
 8002316:	d101      	bne.n	800231c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002318:	4b23      	ldr	r3, [pc, #140]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800231a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	2b0c      	cmp	r3, #12
 8002320:	d134      	bne.n	800238c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002322:	4b1e      	ldr	r3, [pc, #120]	; (800239c <HAL_RCC_GetSysClockFreq+0x108>)
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2b02      	cmp	r3, #2
 8002330:	d003      	beq.n	800233a <HAL_RCC_GetSysClockFreq+0xa6>
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2b03      	cmp	r3, #3
 8002336:	d003      	beq.n	8002340 <HAL_RCC_GetSysClockFreq+0xac>
 8002338:	e005      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800233a:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800233c:	617b      	str	r3, [r7, #20]
      break;
 800233e:	e005      	b.n	800234c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002340:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002342:	617b      	str	r3, [r7, #20]
      break;
 8002344:	e002      	b.n	800234c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	617b      	str	r3, [r7, #20]
      break;
 800234a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800234c:	4b13      	ldr	r3, [pc, #76]	; (800239c <HAL_RCC_GetSysClockFreq+0x108>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	091b      	lsrs	r3, r3, #4
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	3301      	adds	r3, #1
 8002358:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800235a:	4b10      	ldr	r3, [pc, #64]	; (800239c <HAL_RCC_GetSysClockFreq+0x108>)
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	0a1b      	lsrs	r3, r3, #8
 8002360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	fb03 f202 	mul.w	r2, r3, r2
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002370:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002372:	4b0a      	ldr	r3, [pc, #40]	; (800239c <HAL_RCC_GetSysClockFreq+0x108>)
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	0e5b      	lsrs	r3, r3, #25
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	3301      	adds	r3, #1
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	fbb2 f3f3 	udiv	r3, r2, r3
 800238a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800238c:	69bb      	ldr	r3, [r7, #24]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3724      	adds	r7, #36	; 0x24
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40021000 	.word	0x40021000
 80023a0:	0800599c 	.word	0x0800599c
 80023a4:	00f42400 	.word	0x00f42400
 80023a8:	007a1200 	.word	0x007a1200

080023ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023b0:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80023b2:	681b      	ldr	r3, [r3, #0]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	20000000 	.word	0x20000000

080023c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023c8:	f7ff fff0 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 80023cc:	4602      	mov	r2, r0
 80023ce:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	0a1b      	lsrs	r3, r3, #8
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	4904      	ldr	r1, [pc, #16]	; (80023ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80023da:	5ccb      	ldrb	r3, [r1, r3]
 80023dc:	f003 031f 	and.w	r3, r3, #31
 80023e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40021000 	.word	0x40021000
 80023ec:	08005994 	.word	0x08005994

080023f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80023f4:	f7ff ffda 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 80023f8:	4602      	mov	r2, r0
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	0adb      	lsrs	r3, r3, #11
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	4904      	ldr	r1, [pc, #16]	; (8002418 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002406:	5ccb      	ldrb	r3, [r1, r3]
 8002408:	f003 031f 	and.w	r3, r3, #31
 800240c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002410:	4618      	mov	r0, r3
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40021000 	.word	0x40021000
 8002418:	08005994 	.word	0x08005994

0800241c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002424:	2300      	movs	r3, #0
 8002426:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002428:	4b2a      	ldr	r3, [pc, #168]	; (80024d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800242a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002434:	f7ff f9ee 	bl	8001814 <HAL_PWREx_GetVoltageRange>
 8002438:	6178      	str	r0, [r7, #20]
 800243a:	e014      	b.n	8002466 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800243c:	4b25      	ldr	r3, [pc, #148]	; (80024d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800243e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002440:	4a24      	ldr	r2, [pc, #144]	; (80024d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002446:	6593      	str	r3, [r2, #88]	; 0x58
 8002448:	4b22      	ldr	r3, [pc, #136]	; (80024d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800244a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002454:	f7ff f9de 	bl	8001814 <HAL_PWREx_GetVoltageRange>
 8002458:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800245a:	4b1e      	ldr	r3, [pc, #120]	; (80024d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800245c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245e:	4a1d      	ldr	r2, [pc, #116]	; (80024d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002460:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002464:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800246c:	d10b      	bne.n	8002486 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b80      	cmp	r3, #128	; 0x80
 8002472:	d919      	bls.n	80024a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2ba0      	cmp	r3, #160	; 0xa0
 8002478:	d902      	bls.n	8002480 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800247a:	2302      	movs	r3, #2
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	e013      	b.n	80024a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002480:	2301      	movs	r3, #1
 8002482:	613b      	str	r3, [r7, #16]
 8002484:	e010      	b.n	80024a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b80      	cmp	r3, #128	; 0x80
 800248a:	d902      	bls.n	8002492 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800248c:	2303      	movs	r3, #3
 800248e:	613b      	str	r3, [r7, #16]
 8002490:	e00a      	b.n	80024a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b80      	cmp	r3, #128	; 0x80
 8002496:	d102      	bne.n	800249e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002498:	2302      	movs	r3, #2
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	e004      	b.n	80024a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b70      	cmp	r3, #112	; 0x70
 80024a2:	d101      	bne.n	80024a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024a4:	2301      	movs	r3, #1
 80024a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024a8:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f023 0207 	bic.w	r2, r3, #7
 80024b0:	4909      	ldr	r1, [pc, #36]	; (80024d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024b8:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d001      	beq.n	80024ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40022000 	.word	0x40022000

080024dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024e4:	2300      	movs	r3, #0
 80024e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024e8:	2300      	movs	r3, #0
 80024ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d041      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002500:	d02a      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002502:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002506:	d824      	bhi.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002508:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800250c:	d008      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800250e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002512:	d81e      	bhi.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00a      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002518:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800251c:	d010      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800251e:	e018      	b.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002520:	4b86      	ldr	r3, [pc, #536]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	4a85      	ldr	r2, [pc, #532]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800252a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800252c:	e015      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3304      	adds	r3, #4
 8002532:	2100      	movs	r1, #0
 8002534:	4618      	mov	r0, r3
 8002536:	f001 f839 	bl	80035ac <RCCEx_PLLSAI1_Config>
 800253a:	4603      	mov	r3, r0
 800253c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800253e:	e00c      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3320      	adds	r3, #32
 8002544:	2100      	movs	r1, #0
 8002546:	4618      	mov	r0, r3
 8002548:	f001 f924 	bl	8003794 <RCCEx_PLLSAI2_Config>
 800254c:	4603      	mov	r3, r0
 800254e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002550:	e003      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	74fb      	strb	r3, [r7, #19]
      break;
 8002556:	e000      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002558:	bf00      	nop
    }

    if(ret == HAL_OK)
 800255a:	7cfb      	ldrb	r3, [r7, #19]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10b      	bne.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002560:	4b76      	ldr	r3, [pc, #472]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002566:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800256e:	4973      	ldr	r1, [pc, #460]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002570:	4313      	orrs	r3, r2
 8002572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002576:	e001      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002578:	7cfb      	ldrb	r3, [r7, #19]
 800257a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d041      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800258c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002590:	d02a      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002592:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002596:	d824      	bhi.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002598:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800259c:	d008      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800259e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025a2:	d81e      	bhi.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00a      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80025a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025ac:	d010      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80025ae:	e018      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025b0:	4b62      	ldr	r3, [pc, #392]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	4a61      	ldr	r2, [pc, #388]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025bc:	e015      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3304      	adds	r3, #4
 80025c2:	2100      	movs	r1, #0
 80025c4:	4618      	mov	r0, r3
 80025c6:	f000 fff1 	bl	80035ac <RCCEx_PLLSAI1_Config>
 80025ca:	4603      	mov	r3, r0
 80025cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025ce:	e00c      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3320      	adds	r3, #32
 80025d4:	2100      	movs	r1, #0
 80025d6:	4618      	mov	r0, r3
 80025d8:	f001 f8dc 	bl	8003794 <RCCEx_PLLSAI2_Config>
 80025dc:	4603      	mov	r3, r0
 80025de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025e0:	e003      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	74fb      	strb	r3, [r7, #19]
      break;
 80025e6:	e000      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80025e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025ea:	7cfb      	ldrb	r3, [r7, #19]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10b      	bne.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025f0:	4b52      	ldr	r3, [pc, #328]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025fe:	494f      	ldr	r1, [pc, #316]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002600:	4313      	orrs	r3, r2
 8002602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002606:	e001      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002608:	7cfb      	ldrb	r3, [r7, #19]
 800260a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 80a0 	beq.w	800275a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800261a:	2300      	movs	r3, #0
 800261c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800261e:	4b47      	ldr	r3, [pc, #284]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800262e:	2300      	movs	r3, #0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00d      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002634:	4b41      	ldr	r3, [pc, #260]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002638:	4a40      	ldr	r2, [pc, #256]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800263a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800263e:	6593      	str	r3, [r2, #88]	; 0x58
 8002640:	4b3e      	ldr	r3, [pc, #248]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800264c:	2301      	movs	r3, #1
 800264e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002650:	4b3b      	ldr	r3, [pc, #236]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a3a      	ldr	r2, [pc, #232]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800265a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800265c:	f7fe fbf2 	bl	8000e44 <HAL_GetTick>
 8002660:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002662:	e009      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002664:	f7fe fbee 	bl	8000e44 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d902      	bls.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	74fb      	strb	r3, [r7, #19]
        break;
 8002676:	e005      	b.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002678:	4b31      	ldr	r3, [pc, #196]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0ef      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002684:	7cfb      	ldrb	r3, [r7, #19]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d15c      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800268a:	4b2c      	ldr	r3, [pc, #176]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800268c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002690:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002694:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d01f      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d019      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026a8:	4b24      	ldr	r3, [pc, #144]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026b4:	4b21      	ldr	r3, [pc, #132]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ba:	4a20      	ldr	r2, [pc, #128]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026c4:	4b1d      	ldr	r3, [pc, #116]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ca:	4a1c      	ldr	r2, [pc, #112]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026d4:	4a19      	ldr	r2, [pc, #100]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d016      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e6:	f7fe fbad 	bl	8000e44 <HAL_GetTick>
 80026ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ec:	e00b      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ee:	f7fe fba9 	bl	8000e44 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d902      	bls.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	74fb      	strb	r3, [r7, #19]
            break;
 8002704:	e006      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002706:	4b0d      	ldr	r3, [pc, #52]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0ec      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002714:	7cfb      	ldrb	r3, [r7, #19]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10c      	bne.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800271a:	4b08      	ldr	r3, [pc, #32]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800271c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002720:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800272a:	4904      	ldr	r1, [pc, #16]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800272c:	4313      	orrs	r3, r2
 800272e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002732:	e009      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002734:	7cfb      	ldrb	r3, [r7, #19]
 8002736:	74bb      	strb	r3, [r7, #18]
 8002738:	e006      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800273a:	bf00      	nop
 800273c:	40021000 	.word	0x40021000
 8002740:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002744:	7cfb      	ldrb	r3, [r7, #19]
 8002746:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002748:	7c7b      	ldrb	r3, [r7, #17]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d105      	bne.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800274e:	4b9e      	ldr	r3, [pc, #632]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002752:	4a9d      	ldr	r2, [pc, #628]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002758:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00a      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002766:	4b98      	ldr	r3, [pc, #608]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276c:	f023 0203 	bic.w	r2, r3, #3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002774:	4994      	ldr	r1, [pc, #592]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002776:	4313      	orrs	r3, r2
 8002778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00a      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002788:	4b8f      	ldr	r3, [pc, #572]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278e:	f023 020c 	bic.w	r2, r3, #12
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002796:	498c      	ldr	r1, [pc, #560]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002798:	4313      	orrs	r3, r2
 800279a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0304 	and.w	r3, r3, #4
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00a      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027aa:	4b87      	ldr	r3, [pc, #540]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	4983      	ldr	r1, [pc, #524]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0308 	and.w	r3, r3, #8
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00a      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027cc:	4b7e      	ldr	r3, [pc, #504]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027da:	497b      	ldr	r1, [pc, #492]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0310 	and.w	r3, r3, #16
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00a      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027ee:	4b76      	ldr	r3, [pc, #472]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027fc:	4972      	ldr	r1, [pc, #456]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0320 	and.w	r3, r3, #32
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00a      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002810:	4b6d      	ldr	r3, [pc, #436]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002816:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281e:	496a      	ldr	r1, [pc, #424]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00a      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002832:	4b65      	ldr	r3, [pc, #404]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002838:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002840:	4961      	ldr	r1, [pc, #388]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00a      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002854:	4b5c      	ldr	r3, [pc, #368]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002862:	4959      	ldr	r1, [pc, #356]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002864:	4313      	orrs	r3, r2
 8002866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00a      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002876:	4b54      	ldr	r3, [pc, #336]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002884:	4950      	ldr	r1, [pc, #320]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002886:	4313      	orrs	r3, r2
 8002888:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00a      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002898:	4b4b      	ldr	r3, [pc, #300]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a6:	4948      	ldr	r1, [pc, #288]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00a      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028ba:	4b43      	ldr	r3, [pc, #268]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c8:	493f      	ldr	r1, [pc, #252]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d028      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028dc:	4b3a      	ldr	r3, [pc, #232]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ea:	4937      	ldr	r1, [pc, #220]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028fa:	d106      	bne.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028fc:	4b32      	ldr	r3, [pc, #200]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	4a31      	ldr	r2, [pc, #196]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002902:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002906:	60d3      	str	r3, [r2, #12]
 8002908:	e011      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800290e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002912:	d10c      	bne.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3304      	adds	r3, #4
 8002918:	2101      	movs	r1, #1
 800291a:	4618      	mov	r0, r3
 800291c:	f000 fe46 	bl	80035ac <RCCEx_PLLSAI1_Config>
 8002920:	4603      	mov	r3, r0
 8002922:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002924:	7cfb      	ldrb	r3, [r7, #19]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800292a:	7cfb      	ldrb	r3, [r7, #19]
 800292c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d028      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800293a:	4b23      	ldr	r3, [pc, #140]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002940:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002948:	491f      	ldr	r1, [pc, #124]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294a:	4313      	orrs	r3, r2
 800294c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002954:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002958:	d106      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800295a:	4b1b      	ldr	r3, [pc, #108]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	4a1a      	ldr	r2, [pc, #104]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002960:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002964:	60d3      	str	r3, [r2, #12]
 8002966:	e011      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002970:	d10c      	bne.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3304      	adds	r3, #4
 8002976:	2101      	movs	r1, #1
 8002978:	4618      	mov	r0, r3
 800297a:	f000 fe17 	bl	80035ac <RCCEx_PLLSAI1_Config>
 800297e:	4603      	mov	r3, r0
 8002980:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002982:	7cfb      	ldrb	r3, [r7, #19]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002988:	7cfb      	ldrb	r3, [r7, #19]
 800298a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d02b      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002998:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a6:	4908      	ldr	r1, [pc, #32]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029b6:	d109      	bne.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029b8:	4b03      	ldr	r3, [pc, #12]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	4a02      	ldr	r2, [pc, #8]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029c2:	60d3      	str	r3, [r2, #12]
 80029c4:	e014      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80029c6:	bf00      	nop
 80029c8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029d4:	d10c      	bne.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3304      	adds	r3, #4
 80029da:	2101      	movs	r1, #1
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 fde5 	bl	80035ac <RCCEx_PLLSAI1_Config>
 80029e2:	4603      	mov	r3, r0
 80029e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029e6:	7cfb      	ldrb	r3, [r7, #19]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80029ec:	7cfb      	ldrb	r3, [r7, #19]
 80029ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d02f      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029fc:	4b2b      	ldr	r3, [pc, #172]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a02:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a0a:	4928      	ldr	r1, [pc, #160]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a1a:	d10d      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3304      	adds	r3, #4
 8002a20:	2102      	movs	r1, #2
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 fdc2 	bl	80035ac <RCCEx_PLLSAI1_Config>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a2c:	7cfb      	ldrb	r3, [r7, #19]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d014      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a32:	7cfb      	ldrb	r3, [r7, #19]
 8002a34:	74bb      	strb	r3, [r7, #18]
 8002a36:	e011      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a40:	d10c      	bne.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	3320      	adds	r3, #32
 8002a46:	2102      	movs	r1, #2
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f000 fea3 	bl	8003794 <RCCEx_PLLSAI2_Config>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a52:	7cfb      	ldrb	r3, [r7, #19]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a58:	7cfb      	ldrb	r3, [r7, #19]
 8002a5a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00a      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a68:	4b10      	ldr	r3, [pc, #64]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a76:	490d      	ldr	r1, [pc, #52]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00b      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a8a:	4b08      	ldr	r3, [pc, #32]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a9a:	4904      	ldr	r1, [pc, #16]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002aa2:	7cbb      	ldrb	r3, [r7, #18]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40021000 	.word	0x40021000

08002ab0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b088      	sub	sp, #32
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ac2:	d13e      	bne.n	8002b42 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8002ac4:	4bb2      	ldr	r3, [pc, #712]	; (8002d90 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ace:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ad6:	d028      	beq.n	8002b2a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ade:	f200 8542 	bhi.w	8003566 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ae8:	d005      	beq.n	8002af6 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002af0:	d00e      	beq.n	8002b10 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8002af2:	f000 bd38 	b.w	8003566 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002af6:	4ba6      	ldr	r3, [pc, #664]	; (8002d90 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	f040 8532 	bne.w	800356a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8002b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b0a:	61fb      	str	r3, [r7, #28]
      break;
 8002b0c:	f000 bd2d 	b.w	800356a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002b10:	4b9f      	ldr	r3, [pc, #636]	; (8002d90 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	f040 8527 	bne.w	800356e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8002b20:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002b24:	61fb      	str	r3, [r7, #28]
      break;
 8002b26:	f000 bd22 	b.w	800356e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002b2a:	4b99      	ldr	r3, [pc, #612]	; (8002d90 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b36:	f040 851c 	bne.w	8003572 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 8002b3a:	4b96      	ldr	r3, [pc, #600]	; (8002d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8002b3c:	61fb      	str	r3, [r7, #28]
      break;
 8002b3e:	f000 bd18 	b.w	8003572 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b42:	4b93      	ldr	r3, [pc, #588]	; (8002d90 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	2b03      	cmp	r3, #3
 8002b50:	d036      	beq.n	8002bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d840      	bhi.n	8002bda <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d003      	beq.n	8002b66 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d020      	beq.n	8002ba6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8002b64:	e039      	b.n	8002bda <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002b66:	4b8a      	ldr	r3, [pc, #552]	; (8002d90 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d116      	bne.n	8002ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002b72:	4b87      	ldr	r3, [pc, #540]	; (8002d90 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d005      	beq.n	8002b8a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8002b7e:	4b84      	ldr	r3, [pc, #528]	; (8002d90 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	091b      	lsrs	r3, r3, #4
 8002b84:	f003 030f 	and.w	r3, r3, #15
 8002b88:	e005      	b.n	8002b96 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8002b8a:	4b81      	ldr	r3, [pc, #516]	; (8002d90 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b90:	0a1b      	lsrs	r3, r3, #8
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	4a80      	ldr	r2, [pc, #512]	; (8002d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8002b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b9c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002b9e:	e01f      	b.n	8002be0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	61bb      	str	r3, [r7, #24]
      break;
 8002ba4:	e01c      	b.n	8002be0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002ba6:	4b7a      	ldr	r3, [pc, #488]	; (8002d90 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bb2:	d102      	bne.n	8002bba <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8002bb4:	4b79      	ldr	r3, [pc, #484]	; (8002d9c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002bb6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002bb8:	e012      	b.n	8002be0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61bb      	str	r3, [r7, #24]
      break;
 8002bbe:	e00f      	b.n	8002be0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002bc0:	4b73      	ldr	r3, [pc, #460]	; (8002d90 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bcc:	d102      	bne.n	8002bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8002bce:	4b74      	ldr	r3, [pc, #464]	; (8002da0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8002bd0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002bd2:	e005      	b.n	8002be0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	61bb      	str	r3, [r7, #24]
      break;
 8002bd8:	e002      	b.n	8002be0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61bb      	str	r3, [r7, #24]
      break;
 8002bde:	bf00      	nop
    }

    switch(PeriphClk)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002be6:	f000 80dd 	beq.w	8002da4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002bf0:	f200 84c1 	bhi.w	8003576 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bfa:	f000 80d3 	beq.w	8002da4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c04:	f200 84b7 	bhi.w	8003576 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c0e:	f000 835f 	beq.w	80032d0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c18:	f200 84ad 	bhi.w	8003576 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c22:	f000 847e 	beq.w	8003522 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c2c:	f200 84a3 	bhi.w	8003576 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c36:	f000 82cd 	beq.w	80031d4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c40:	f200 8499 	bhi.w	8003576 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c4a:	f000 80ab 	beq.w	8002da4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c54:	f200 848f 	bhi.w	8003576 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c5e:	f000 8090 	beq.w	8002d82 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c68:	f200 8485 	bhi.w	8003576 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c72:	d07f      	beq.n	8002d74 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c7a:	f200 847c 	bhi.w	8003576 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c84:	f000 8403 	beq.w	800348e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c8e:	f200 8472 	bhi.w	8003576 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c98:	f000 83af 	beq.w	80033fa <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ca2:	f200 8468 	bhi.w	8003576 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cac:	f000 8379 	beq.w	80033a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cb6:	f200 845e 	bhi.w	8003576 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b80      	cmp	r3, #128	; 0x80
 8002cbe:	f000 8344 	beq.w	800334a <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b80      	cmp	r3, #128	; 0x80
 8002cc6:	f200 8456 	bhi.w	8003576 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b20      	cmp	r3, #32
 8002cce:	d84b      	bhi.n	8002d68 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 844f 	beq.w	8003576 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	2b1f      	cmp	r3, #31
 8002cde:	f200 844a 	bhi.w	8003576 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002ce2:	a201      	add	r2, pc, #4	; (adr r2, 8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8002ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce8:	08002ed1 	.word	0x08002ed1
 8002cec:	08002f3f 	.word	0x08002f3f
 8002cf0:	08003577 	.word	0x08003577
 8002cf4:	08002fd3 	.word	0x08002fd3
 8002cf8:	08003577 	.word	0x08003577
 8002cfc:	08003577 	.word	0x08003577
 8002d00:	08003577 	.word	0x08003577
 8002d04:	08003059 	.word	0x08003059
 8002d08:	08003577 	.word	0x08003577
 8002d0c:	08003577 	.word	0x08003577
 8002d10:	08003577 	.word	0x08003577
 8002d14:	08003577 	.word	0x08003577
 8002d18:	08003577 	.word	0x08003577
 8002d1c:	08003577 	.word	0x08003577
 8002d20:	08003577 	.word	0x08003577
 8002d24:	080030d1 	.word	0x080030d1
 8002d28:	08003577 	.word	0x08003577
 8002d2c:	08003577 	.word	0x08003577
 8002d30:	08003577 	.word	0x08003577
 8002d34:	08003577 	.word	0x08003577
 8002d38:	08003577 	.word	0x08003577
 8002d3c:	08003577 	.word	0x08003577
 8002d40:	08003577 	.word	0x08003577
 8002d44:	08003577 	.word	0x08003577
 8002d48:	08003577 	.word	0x08003577
 8002d4c:	08003577 	.word	0x08003577
 8002d50:	08003577 	.word	0x08003577
 8002d54:	08003577 	.word	0x08003577
 8002d58:	08003577 	.word	0x08003577
 8002d5c:	08003577 	.word	0x08003577
 8002d60:	08003577 	.word	0x08003577
 8002d64:	08003153 	.word	0x08003153
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b40      	cmp	r3, #64	; 0x40
 8002d6c:	f000 82c1 	beq.w	80032f2 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8002d70:	f000 bc01 	b.w	8003576 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8002d74:	69b9      	ldr	r1, [r7, #24]
 8002d76:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002d7a:	f000 fde9 	bl	8003950 <RCCEx_GetSAIxPeriphCLKFreq>
 8002d7e:	61f8      	str	r0, [r7, #28]
      break;
 8002d80:	e3fa      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8002d82:	69b9      	ldr	r1, [r7, #24]
 8002d84:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002d88:	f000 fde2 	bl	8003950 <RCCEx_GetSAIxPeriphCLKFreq>
 8002d8c:	61f8      	str	r0, [r7, #28]
      break;
 8002d8e:	e3f3      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8002d90:	40021000 	.word	0x40021000
 8002d94:	0003d090 	.word	0x0003d090
 8002d98:	0800599c 	.word	0x0800599c
 8002d9c:	00f42400 	.word	0x00f42400
 8002da0:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8002da4:	4ba9      	ldr	r3, [pc, #676]	; (800304c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002daa:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002db6:	d00c      	beq.n	8002dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002dbe:	d87f      	bhi.n	8002ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dc6:	d04e      	beq.n	8002e66 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dce:	d01d      	beq.n	8002e0c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8002dd0:	e076      	b.n	8002ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002dd2:	4b9e      	ldr	r3, [pc, #632]	; (800304c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d172      	bne.n	8002ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002dde:	4b9b      	ldr	r3, [pc, #620]	; (800304c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d005      	beq.n	8002df6 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8002dea:	4b98      	ldr	r3, [pc, #608]	; (800304c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	091b      	lsrs	r3, r3, #4
 8002df0:	f003 030f 	and.w	r3, r3, #15
 8002df4:	e005      	b.n	8002e02 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8002df6:	4b95      	ldr	r3, [pc, #596]	; (800304c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dfc:	0a1b      	lsrs	r3, r3, #8
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	4a93      	ldr	r2, [pc, #588]	; (8003050 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8002e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e08:	61fb      	str	r3, [r7, #28]
          break;
 8002e0a:	e05b      	b.n	8002ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8002e0c:	4b8f      	ldr	r3, [pc, #572]	; (800304c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e18:	d156      	bne.n	8002ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8002e1a:	4b8c      	ldr	r3, [pc, #560]	; (800304c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e26:	d14f      	bne.n	8002ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8002e28:	4b88      	ldr	r3, [pc, #544]	; (800304c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	0a1b      	lsrs	r3, r3, #8
 8002e2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e32:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	fb03 f202 	mul.w	r2, r3, r2
 8002e3c:	4b83      	ldr	r3, [pc, #524]	; (800304c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	091b      	lsrs	r3, r3, #4
 8002e42:	f003 0307 	and.w	r3, r3, #7
 8002e46:	3301      	adds	r3, #1
 8002e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8002e4e:	4b7f      	ldr	r3, [pc, #508]	; (800304c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	0d5b      	lsrs	r3, r3, #21
 8002e54:	f003 0303 	and.w	r3, r3, #3
 8002e58:	3301      	adds	r3, #1
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e62:	61fb      	str	r3, [r7, #28]
          break;
 8002e64:	e030      	b.n	8002ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8002e66:	4b79      	ldr	r3, [pc, #484]	; (800304c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e72:	d12b      	bne.n	8002ecc <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8002e74:	4b75      	ldr	r3, [pc, #468]	; (800304c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e80:	d124      	bne.n	8002ecc <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002e82:	4b72      	ldr	r3, [pc, #456]	; (800304c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	0a1b      	lsrs	r3, r3, #8
 8002e88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e8c:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	fb03 f202 	mul.w	r2, r3, r2
 8002e96:	4b6d      	ldr	r3, [pc, #436]	; (800304c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	091b      	lsrs	r3, r3, #4
 8002e9c:	f003 0307 	and.w	r3, r3, #7
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8002ea8:	4b68      	ldr	r3, [pc, #416]	; (800304c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	0d5b      	lsrs	r3, r3, #21
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ebc:	61fb      	str	r3, [r7, #28]
          break;
 8002ebe:	e005      	b.n	8002ecc <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8002ec0:	bf00      	nop
 8002ec2:	e359      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002ec4:	bf00      	nop
 8002ec6:	e357      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002ec8:	bf00      	nop
 8002eca:	e355      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002ecc:	bf00      	nop
        break;
 8002ece:	e353      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8002ed0:	4b5e      	ldr	r3, [pc, #376]	; (800304c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	613b      	str	r3, [r7, #16]
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	2b03      	cmp	r3, #3
 8002ee0:	d827      	bhi.n	8002f32 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8002ee2:	a201      	add	r2, pc, #4	; (adr r2, 8002ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8002ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee8:	08002ef9 	.word	0x08002ef9
 8002eec:	08002f01 	.word	0x08002f01
 8002ef0:	08002f09 	.word	0x08002f09
 8002ef4:	08002f1d 	.word	0x08002f1d
          frequency = HAL_RCC_GetPCLK2Freq();
 8002ef8:	f7ff fa7a 	bl	80023f0 <HAL_RCC_GetPCLK2Freq>
 8002efc:	61f8      	str	r0, [r7, #28]
          break;
 8002efe:	e01d      	b.n	8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8002f00:	f7ff f9c8 	bl	8002294 <HAL_RCC_GetSysClockFreq>
 8002f04:	61f8      	str	r0, [r7, #28]
          break;
 8002f06:	e019      	b.n	8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002f08:	4b50      	ldr	r3, [pc, #320]	; (800304c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f14:	d10f      	bne.n	8002f36 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8002f16:	4b4f      	ldr	r3, [pc, #316]	; (8003054 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8002f18:	61fb      	str	r3, [r7, #28]
          break;
 8002f1a:	e00c      	b.n	8002f36 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002f1c:	4b4b      	ldr	r3, [pc, #300]	; (800304c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d107      	bne.n	8002f3a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8002f2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f2e:	61fb      	str	r3, [r7, #28]
          break;
 8002f30:	e003      	b.n	8002f3a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8002f32:	bf00      	nop
 8002f34:	e320      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002f36:	bf00      	nop
 8002f38:	e31e      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002f3a:	bf00      	nop
        break;
 8002f3c:	e31c      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8002f3e:	4b43      	ldr	r3, [pc, #268]	; (800304c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f44:	f003 030c 	and.w	r3, r3, #12
 8002f48:	613b      	str	r3, [r7, #16]
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	2b0c      	cmp	r3, #12
 8002f4e:	d83a      	bhi.n	8002fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8002f50:	a201      	add	r2, pc, #4	; (adr r2, 8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8002f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f56:	bf00      	nop
 8002f58:	08002f8d 	.word	0x08002f8d
 8002f5c:	08002fc7 	.word	0x08002fc7
 8002f60:	08002fc7 	.word	0x08002fc7
 8002f64:	08002fc7 	.word	0x08002fc7
 8002f68:	08002f95 	.word	0x08002f95
 8002f6c:	08002fc7 	.word	0x08002fc7
 8002f70:	08002fc7 	.word	0x08002fc7
 8002f74:	08002fc7 	.word	0x08002fc7
 8002f78:	08002f9d 	.word	0x08002f9d
 8002f7c:	08002fc7 	.word	0x08002fc7
 8002f80:	08002fc7 	.word	0x08002fc7
 8002f84:	08002fc7 	.word	0x08002fc7
 8002f88:	08002fb1 	.word	0x08002fb1
          frequency = HAL_RCC_GetPCLK1Freq();
 8002f8c:	f7ff fa1a 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
 8002f90:	61f8      	str	r0, [r7, #28]
          break;
 8002f92:	e01d      	b.n	8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8002f94:	f7ff f97e 	bl	8002294 <HAL_RCC_GetSysClockFreq>
 8002f98:	61f8      	str	r0, [r7, #28]
          break;
 8002f9a:	e019      	b.n	8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002f9c:	4b2b      	ldr	r3, [pc, #172]	; (800304c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fa8:	d10f      	bne.n	8002fca <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8002faa:	4b2a      	ldr	r3, [pc, #168]	; (8003054 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8002fac:	61fb      	str	r3, [r7, #28]
          break;
 8002fae:	e00c      	b.n	8002fca <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002fb0:	4b26      	ldr	r3, [pc, #152]	; (800304c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d107      	bne.n	8002fce <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8002fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fc2:	61fb      	str	r3, [r7, #28]
          break;
 8002fc4:	e003      	b.n	8002fce <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8002fc6:	bf00      	nop
 8002fc8:	e2d6      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002fca:	bf00      	nop
 8002fcc:	e2d4      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002fce:	bf00      	nop
        break;
 8002fd0:	e2d2      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8002fd2:	4b1e      	ldr	r3, [pc, #120]	; (800304c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	2b30      	cmp	r3, #48	; 0x30
 8002fe2:	d021      	beq.n	8003028 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	2b30      	cmp	r3, #48	; 0x30
 8002fe8:	d829      	bhi.n	800303e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	2b20      	cmp	r3, #32
 8002fee:	d011      	beq.n	8003014 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	2b20      	cmp	r3, #32
 8002ff4:	d823      	bhi.n	800303e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	2b10      	cmp	r3, #16
 8003000:	d004      	beq.n	800300c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8003002:	e01c      	b.n	800303e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003004:	f7ff f9de 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
 8003008:	61f8      	str	r0, [r7, #28]
          break;
 800300a:	e01d      	b.n	8003048 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 800300c:	f7ff f942 	bl	8002294 <HAL_RCC_GetSysClockFreq>
 8003010:	61f8      	str	r0, [r7, #28]
          break;
 8003012:	e019      	b.n	8003048 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003014:	4b0d      	ldr	r3, [pc, #52]	; (800304c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800301c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003020:	d10f      	bne.n	8003042 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8003022:	4b0c      	ldr	r3, [pc, #48]	; (8003054 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8003024:	61fb      	str	r3, [r7, #28]
          break;
 8003026:	e00c      	b.n	8003042 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003028:	4b08      	ldr	r3, [pc, #32]	; (800304c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800302a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b02      	cmp	r3, #2
 8003034:	d107      	bne.n	8003046 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8003036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800303a:	61fb      	str	r3, [r7, #28]
          break;
 800303c:	e003      	b.n	8003046 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 800303e:	bf00      	nop
 8003040:	e29a      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003042:	bf00      	nop
 8003044:	e298      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003046:	bf00      	nop
        break;
 8003048:	e296      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800304a:	bf00      	nop
 800304c:	40021000 	.word	0x40021000
 8003050:	0800599c 	.word	0x0800599c
 8003054:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003058:	4b9b      	ldr	r3, [pc, #620]	; (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800305a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003062:	613b      	str	r3, [r7, #16]
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	2bc0      	cmp	r3, #192	; 0xc0
 8003068:	d021      	beq.n	80030ae <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	2bc0      	cmp	r3, #192	; 0xc0
 800306e:	d829      	bhi.n	80030c4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	2b80      	cmp	r3, #128	; 0x80
 8003074:	d011      	beq.n	800309a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	2b80      	cmp	r3, #128	; 0x80
 800307a:	d823      	bhi.n	80030c4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	2b40      	cmp	r3, #64	; 0x40
 8003086:	d004      	beq.n	8003092 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8003088:	e01c      	b.n	80030c4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 800308a:	f7ff f99b 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
 800308e:	61f8      	str	r0, [r7, #28]
          break;
 8003090:	e01d      	b.n	80030ce <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8003092:	f7ff f8ff 	bl	8002294 <HAL_RCC_GetSysClockFreq>
 8003096:	61f8      	str	r0, [r7, #28]
          break;
 8003098:	e019      	b.n	80030ce <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800309a:	4b8b      	ldr	r3, [pc, #556]	; (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030a6:	d10f      	bne.n	80030c8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 80030a8:	4b88      	ldr	r3, [pc, #544]	; (80032cc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80030aa:	61fb      	str	r3, [r7, #28]
          break;
 80030ac:	e00c      	b.n	80030c8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80030ae:	4b86      	ldr	r3, [pc, #536]	; (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80030b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d107      	bne.n	80030cc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 80030bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030c0:	61fb      	str	r3, [r7, #28]
          break;
 80030c2:	e003      	b.n	80030cc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 80030c4:	bf00      	nop
 80030c6:	e257      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80030c8:	bf00      	nop
 80030ca:	e255      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80030cc:	bf00      	nop
        break;
 80030ce:	e253      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80030d0:	4b7d      	ldr	r3, [pc, #500]	; (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80030d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030e2:	d025      	beq.n	8003130 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030ea:	d82c      	bhi.n	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030f2:	d013      	beq.n	800311c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030fa:	d824      	bhi.n	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d004      	beq.n	800310c <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003108:	d004      	beq.n	8003114 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 800310a:	e01c      	b.n	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 800310c:	f7ff f95a 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
 8003110:	61f8      	str	r0, [r7, #28]
          break;
 8003112:	e01d      	b.n	8003150 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003114:	f7ff f8be 	bl	8002294 <HAL_RCC_GetSysClockFreq>
 8003118:	61f8      	str	r0, [r7, #28]
          break;
 800311a:	e019      	b.n	8003150 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800311c:	4b6a      	ldr	r3, [pc, #424]	; (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003128:	d10f      	bne.n	800314a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 800312a:	4b68      	ldr	r3, [pc, #416]	; (80032cc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800312c:	61fb      	str	r3, [r7, #28]
          break;
 800312e:	e00c      	b.n	800314a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003130:	4b65      	ldr	r3, [pc, #404]	; (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b02      	cmp	r3, #2
 800313c:	d107      	bne.n	800314e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 800313e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003142:	61fb      	str	r3, [r7, #28]
          break;
 8003144:	e003      	b.n	800314e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8003146:	bf00      	nop
 8003148:	e216      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800314a:	bf00      	nop
 800314c:	e214      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800314e:	bf00      	nop
        break;
 8003150:	e212      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003152:	4b5d      	ldr	r3, [pc, #372]	; (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003158:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003164:	d025      	beq.n	80031b2 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800316c:	d82c      	bhi.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003174:	d013      	beq.n	800319e <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800317c:	d824      	bhi.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d004      	beq.n	800318e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800318a:	d004      	beq.n	8003196 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 800318c:	e01c      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 800318e:	f7ff f919 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
 8003192:	61f8      	str	r0, [r7, #28]
          break;
 8003194:	e01d      	b.n	80031d2 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8003196:	f7ff f87d 	bl	8002294 <HAL_RCC_GetSysClockFreq>
 800319a:	61f8      	str	r0, [r7, #28]
          break;
 800319c:	e019      	b.n	80031d2 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800319e:	4b4a      	ldr	r3, [pc, #296]	; (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031aa:	d10f      	bne.n	80031cc <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 80031ac:	4b47      	ldr	r3, [pc, #284]	; (80032cc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80031ae:	61fb      	str	r3, [r7, #28]
          break;
 80031b0:	e00c      	b.n	80031cc <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80031b2:	4b45      	ldr	r3, [pc, #276]	; (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80031b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d107      	bne.n	80031d0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 80031c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031c4:	61fb      	str	r3, [r7, #28]
          break;
 80031c6:	e003      	b.n	80031d0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 80031c8:	bf00      	nop
 80031ca:	e1d5      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80031cc:	bf00      	nop
 80031ce:	e1d3      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80031d0:	bf00      	nop
        break;
 80031d2:	e1d1      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80031d4:	4b3c      	ldr	r3, [pc, #240]	; (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80031d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80031e6:	d00c      	beq.n	8003202 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80031ee:	d864      	bhi.n	80032ba <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031f6:	d008      	beq.n	800320a <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031fe:	d030      	beq.n	8003262 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8003200:	e05b      	b.n	80032ba <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8003202:	f7ff f847 	bl	8002294 <HAL_RCC_GetSysClockFreq>
 8003206:	61f8      	str	r0, [r7, #28]
          break;
 8003208:	e05c      	b.n	80032c4 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800320a:	4b2f      	ldr	r3, [pc, #188]	; (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003212:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003216:	d152      	bne.n	80032be <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8003218:	4b2b      	ldr	r3, [pc, #172]	; (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d04c      	beq.n	80032be <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003224:	4b28      	ldr	r3, [pc, #160]	; (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	0a1b      	lsrs	r3, r3, #8
 800322a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800322e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	fb03 f202 	mul.w	r2, r3, r2
 8003238:	4b23      	ldr	r3, [pc, #140]	; (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	091b      	lsrs	r3, r3, #4
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	3301      	adds	r3, #1
 8003244:	fbb2 f3f3 	udiv	r3, r2, r3
 8003248:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800324a:	4b1f      	ldr	r3, [pc, #124]	; (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	0e5b      	lsrs	r3, r3, #25
 8003250:	f003 0303 	and.w	r3, r3, #3
 8003254:	3301      	adds	r3, #1
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	fbb2 f3f3 	udiv	r3, r2, r3
 800325e:	61fb      	str	r3, [r7, #28]
          break;
 8003260:	e02d      	b.n	80032be <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8003262:	4b19      	ldr	r3, [pc, #100]	; (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800326a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800326e:	d128      	bne.n	80032c2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8003270:	4b15      	ldr	r3, [pc, #84]	; (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d022      	beq.n	80032c2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800327c:	4b12      	ldr	r3, [pc, #72]	; (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	0a1b      	lsrs	r3, r3, #8
 8003282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003286:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	fb03 f202 	mul.w	r2, r3, r2
 8003290:	4b0d      	ldr	r3, [pc, #52]	; (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	091b      	lsrs	r3, r3, #4
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	3301      	adds	r3, #1
 800329c:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a0:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80032a2:	4b09      	ldr	r3, [pc, #36]	; (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	0e5b      	lsrs	r3, r3, #25
 80032a8:	f003 0303 	and.w	r3, r3, #3
 80032ac:	3301      	adds	r3, #1
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b6:	61fb      	str	r3, [r7, #28]
          break;
 80032b8:	e003      	b.n	80032c2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 80032ba:	bf00      	nop
 80032bc:	e15c      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80032be:	bf00      	nop
 80032c0:	e15a      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80032c2:	bf00      	nop
        break;
 80032c4:	e158      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80032c6:	bf00      	nop
 80032c8:	40021000 	.word	0x40021000
 80032cc:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80032d0:	4b9d      	ldr	r3, [pc, #628]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80032d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032da:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d103      	bne.n	80032ea <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 80032e2:	f7ff f885 	bl	80023f0 <HAL_RCC_GetPCLK2Freq>
 80032e6:	61f8      	str	r0, [r7, #28]
        break;
 80032e8:	e146      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 80032ea:	f7fe ffd3 	bl	8002294 <HAL_RCC_GetSysClockFreq>
 80032ee:	61f8      	str	r0, [r7, #28]
        break;
 80032f0:	e142      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80032f2:	4b95      	ldr	r3, [pc, #596]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80032f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80032fc:	613b      	str	r3, [r7, #16]
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003304:	d013      	beq.n	800332e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800330c:	d819      	bhi.n	8003342 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d004      	beq.n	800331e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800331a:	d004      	beq.n	8003326 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 800331c:	e011      	b.n	8003342 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 800331e:	f7ff f851 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
 8003322:	61f8      	str	r0, [r7, #28]
          break;
 8003324:	e010      	b.n	8003348 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8003326:	f7fe ffb5 	bl	8002294 <HAL_RCC_GetSysClockFreq>
 800332a:	61f8      	str	r0, [r7, #28]
          break;
 800332c:	e00c      	b.n	8003348 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800332e:	4b86      	ldr	r3, [pc, #536]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800333a:	d104      	bne.n	8003346 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 800333c:	4b83      	ldr	r3, [pc, #524]	; (800354c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800333e:	61fb      	str	r3, [r7, #28]
          break;
 8003340:	e001      	b.n	8003346 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8003342:	bf00      	nop
 8003344:	e118      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003346:	bf00      	nop
        break;
 8003348:	e116      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800334a:	4b7f      	ldr	r3, [pc, #508]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800334c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003350:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800335c:	d013      	beq.n	8003386 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003364:	d819      	bhi.n	800339a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d004      	beq.n	8003376 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003372:	d004      	beq.n	800337e <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8003374:	e011      	b.n	800339a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003376:	f7ff f825 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
 800337a:	61f8      	str	r0, [r7, #28]
          break;
 800337c:	e010      	b.n	80033a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800337e:	f7fe ff89 	bl	8002294 <HAL_RCC_GetSysClockFreq>
 8003382:	61f8      	str	r0, [r7, #28]
          break;
 8003384:	e00c      	b.n	80033a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003386:	4b70      	ldr	r3, [pc, #448]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800338e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003392:	d104      	bne.n	800339e <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8003394:	4b6d      	ldr	r3, [pc, #436]	; (800354c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003396:	61fb      	str	r3, [r7, #28]
          break;
 8003398:	e001      	b.n	800339e <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 800339a:	bf00      	nop
 800339c:	e0ec      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800339e:	bf00      	nop
        break;
 80033a0:	e0ea      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80033a2:	4b69      	ldr	r3, [pc, #420]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80033a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033ac:	613b      	str	r3, [r7, #16]
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033b4:	d013      	beq.n	80033de <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033bc:	d819      	bhi.n	80033f2 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d004      	beq.n	80033ce <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ca:	d004      	beq.n	80033d6 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 80033cc:	e011      	b.n	80033f2 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 80033ce:	f7fe fff9 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
 80033d2:	61f8      	str	r0, [r7, #28]
          break;
 80033d4:	e010      	b.n	80033f8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 80033d6:	f7fe ff5d 	bl	8002294 <HAL_RCC_GetSysClockFreq>
 80033da:	61f8      	str	r0, [r7, #28]
          break;
 80033dc:	e00c      	b.n	80033f8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80033de:	4b5a      	ldr	r3, [pc, #360]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ea:	d104      	bne.n	80033f6 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 80033ec:	4b57      	ldr	r3, [pc, #348]	; (800354c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80033ee:	61fb      	str	r3, [r7, #28]
          break;
 80033f0:	e001      	b.n	80033f6 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 80033f2:	bf00      	nop
 80033f4:	e0c0      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80033f6:	bf00      	nop
        break;
 80033f8:	e0be      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80033fa:	4b53      	ldr	r3, [pc, #332]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80033fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003400:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003404:	613b      	str	r3, [r7, #16]
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800340c:	d02c      	beq.n	8003468 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003414:	d833      	bhi.n	800347e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800341c:	d01a      	beq.n	8003454 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003424:	d82b      	bhi.n	800347e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d004      	beq.n	8003436 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003432:	d004      	beq.n	800343e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8003434:	e023      	b.n	800347e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003436:	f7fe ffc5 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
 800343a:	61f8      	str	r0, [r7, #28]
          break;
 800343c:	e026      	b.n	800348c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800343e:	4b42      	ldr	r3, [pc, #264]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003440:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b02      	cmp	r3, #2
 800344a:	d11a      	bne.n	8003482 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 800344c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003450:	61fb      	str	r3, [r7, #28]
          break;
 8003452:	e016      	b.n	8003482 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003454:	4b3c      	ldr	r3, [pc, #240]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800345c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003460:	d111      	bne.n	8003486 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8003462:	4b3a      	ldr	r3, [pc, #232]	; (800354c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003464:	61fb      	str	r3, [r7, #28]
          break;
 8003466:	e00e      	b.n	8003486 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003468:	4b37      	ldr	r3, [pc, #220]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800346a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b02      	cmp	r3, #2
 8003474:	d109      	bne.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8003476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800347a:	61fb      	str	r3, [r7, #28]
          break;
 800347c:	e005      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 800347e:	bf00      	nop
 8003480:	e07a      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003482:	bf00      	nop
 8003484:	e078      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003486:	bf00      	nop
 8003488:	e076      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800348a:	bf00      	nop
        break;
 800348c:	e074      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800348e:	4b2e      	ldr	r3, [pc, #184]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003494:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003498:	613b      	str	r3, [r7, #16]
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034a0:	d02c      	beq.n	80034fc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034a8:	d833      	bhi.n	8003512 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034b0:	d01a      	beq.n	80034e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034b8:	d82b      	bhi.n	8003512 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d004      	beq.n	80034ca <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034c6:	d004      	beq.n	80034d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 80034c8:	e023      	b.n	8003512 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 80034ca:	f7fe ff7b 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
 80034ce:	61f8      	str	r0, [r7, #28]
          break;
 80034d0:	e026      	b.n	8003520 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80034d2:	4b1d      	ldr	r3, [pc, #116]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80034d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d11a      	bne.n	8003516 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 80034e0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80034e4:	61fb      	str	r3, [r7, #28]
          break;
 80034e6:	e016      	b.n	8003516 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80034e8:	4b17      	ldr	r3, [pc, #92]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f4:	d111      	bne.n	800351a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 80034f6:	4b15      	ldr	r3, [pc, #84]	; (800354c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80034f8:	61fb      	str	r3, [r7, #28]
          break;
 80034fa:	e00e      	b.n	800351a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80034fc:	4b12      	ldr	r3, [pc, #72]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80034fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b02      	cmp	r3, #2
 8003508:	d109      	bne.n	800351e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 800350a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800350e:	61fb      	str	r3, [r7, #28]
          break;
 8003510:	e005      	b.n	800351e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8003512:	bf00      	nop
 8003514:	e030      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003516:	bf00      	nop
 8003518:	e02e      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800351a:	bf00      	nop
 800351c:	e02c      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800351e:	bf00      	nop
        break;
 8003520:	e02a      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8003522:	4b09      	ldr	r3, [pc, #36]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003528:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800352c:	613b      	str	r3, [r7, #16]
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d004      	beq.n	800353e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800353a:	d009      	beq.n	8003550 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 800353c:	e012      	b.n	8003564 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800353e:	f7fe ff41 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
 8003542:	61f8      	str	r0, [r7, #28]
          break;
 8003544:	e00e      	b.n	8003564 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8003546:	bf00      	nop
 8003548:	40021000 	.word	0x40021000
 800354c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003550:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800355c:	d101      	bne.n	8003562 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 800355e:	4b0a      	ldr	r3, [pc, #40]	; (8003588 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8003560:	61fb      	str	r3, [r7, #28]
          break;
 8003562:	bf00      	nop
        break;
 8003564:	e008      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003566:	bf00      	nop
 8003568:	e006      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800356a:	bf00      	nop
 800356c:	e004      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800356e:	bf00      	nop
 8003570:	e002      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003572:	bf00      	nop
 8003574:	e000      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003576:	bf00      	nop
    }
  }

  return(frequency);
 8003578:	69fb      	ldr	r3, [r7, #28]
}
 800357a:	4618      	mov	r0, r3
 800357c:	3720      	adds	r7, #32
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40021000 	.word	0x40021000
 8003588:	00f42400 	.word	0x00f42400

0800358c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003590:	4b05      	ldr	r3, [pc, #20]	; (80035a8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a04      	ldr	r2, [pc, #16]	; (80035a8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003596:	f043 0304 	orr.w	r3, r3, #4
 800359a:	6013      	str	r3, [r2, #0]
}
 800359c:	bf00      	nop
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	40021000 	.word	0x40021000

080035ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035ba:	4b75      	ldr	r3, [pc, #468]	; (8003790 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d018      	beq.n	80035f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035c6:	4b72      	ldr	r3, [pc, #456]	; (8003790 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f003 0203 	and.w	r2, r3, #3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d10d      	bne.n	80035f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
       ||
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d009      	beq.n	80035f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80035de:	4b6c      	ldr	r3, [pc, #432]	; (8003790 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	091b      	lsrs	r3, r3, #4
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
       ||
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d047      	beq.n	8003682 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	73fb      	strb	r3, [r7, #15]
 80035f6:	e044      	b.n	8003682 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b03      	cmp	r3, #3
 80035fe:	d018      	beq.n	8003632 <RCCEx_PLLSAI1_Config+0x86>
 8003600:	2b03      	cmp	r3, #3
 8003602:	d825      	bhi.n	8003650 <RCCEx_PLLSAI1_Config+0xa4>
 8003604:	2b01      	cmp	r3, #1
 8003606:	d002      	beq.n	800360e <RCCEx_PLLSAI1_Config+0x62>
 8003608:	2b02      	cmp	r3, #2
 800360a:	d009      	beq.n	8003620 <RCCEx_PLLSAI1_Config+0x74>
 800360c:	e020      	b.n	8003650 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800360e:	4b60      	ldr	r3, [pc, #384]	; (8003790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d11d      	bne.n	8003656 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800361e:	e01a      	b.n	8003656 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003620:	4b5b      	ldr	r3, [pc, #364]	; (8003790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003628:	2b00      	cmp	r3, #0
 800362a:	d116      	bne.n	800365a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003630:	e013      	b.n	800365a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003632:	4b57      	ldr	r3, [pc, #348]	; (8003790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10f      	bne.n	800365e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800363e:	4b54      	ldr	r3, [pc, #336]	; (8003790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d109      	bne.n	800365e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800364e:	e006      	b.n	800365e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	73fb      	strb	r3, [r7, #15]
      break;
 8003654:	e004      	b.n	8003660 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003656:	bf00      	nop
 8003658:	e002      	b.n	8003660 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800365a:	bf00      	nop
 800365c:	e000      	b.n	8003660 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800365e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003660:	7bfb      	ldrb	r3, [r7, #15]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10d      	bne.n	8003682 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003666:	4b4a      	ldr	r3, [pc, #296]	; (8003790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6819      	ldr	r1, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	3b01      	subs	r3, #1
 8003678:	011b      	lsls	r3, r3, #4
 800367a:	430b      	orrs	r3, r1
 800367c:	4944      	ldr	r1, [pc, #272]	; (8003790 <RCCEx_PLLSAI1_Config+0x1e4>)
 800367e:	4313      	orrs	r3, r2
 8003680:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003682:	7bfb      	ldrb	r3, [r7, #15]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d17d      	bne.n	8003784 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003688:	4b41      	ldr	r3, [pc, #260]	; (8003790 <RCCEx_PLLSAI1_Config+0x1e4>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a40      	ldr	r2, [pc, #256]	; (8003790 <RCCEx_PLLSAI1_Config+0x1e4>)
 800368e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003692:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003694:	f7fd fbd6 	bl	8000e44 <HAL_GetTick>
 8003698:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800369a:	e009      	b.n	80036b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800369c:	f7fd fbd2 	bl	8000e44 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d902      	bls.n	80036b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	73fb      	strb	r3, [r7, #15]
        break;
 80036ae:	e005      	b.n	80036bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036b0:	4b37      	ldr	r3, [pc, #220]	; (8003790 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1ef      	bne.n	800369c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d160      	bne.n	8003784 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d111      	bne.n	80036ec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036c8:	4b31      	ldr	r3, [pc, #196]	; (8003790 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80036d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6892      	ldr	r2, [r2, #8]
 80036d8:	0211      	lsls	r1, r2, #8
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	68d2      	ldr	r2, [r2, #12]
 80036de:	0912      	lsrs	r2, r2, #4
 80036e0:	0452      	lsls	r2, r2, #17
 80036e2:	430a      	orrs	r2, r1
 80036e4:	492a      	ldr	r1, [pc, #168]	; (8003790 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	610b      	str	r3, [r1, #16]
 80036ea:	e027      	b.n	800373c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d112      	bne.n	8003718 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036f2:	4b27      	ldr	r3, [pc, #156]	; (8003790 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80036fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6892      	ldr	r2, [r2, #8]
 8003702:	0211      	lsls	r1, r2, #8
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6912      	ldr	r2, [r2, #16]
 8003708:	0852      	lsrs	r2, r2, #1
 800370a:	3a01      	subs	r2, #1
 800370c:	0552      	lsls	r2, r2, #21
 800370e:	430a      	orrs	r2, r1
 8003710:	491f      	ldr	r1, [pc, #124]	; (8003790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003712:	4313      	orrs	r3, r2
 8003714:	610b      	str	r3, [r1, #16]
 8003716:	e011      	b.n	800373c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003718:	4b1d      	ldr	r3, [pc, #116]	; (8003790 <RCCEx_PLLSAI1_Config+0x1e4>)
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003720:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6892      	ldr	r2, [r2, #8]
 8003728:	0211      	lsls	r1, r2, #8
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6952      	ldr	r2, [r2, #20]
 800372e:	0852      	lsrs	r2, r2, #1
 8003730:	3a01      	subs	r2, #1
 8003732:	0652      	lsls	r2, r2, #25
 8003734:	430a      	orrs	r2, r1
 8003736:	4916      	ldr	r1, [pc, #88]	; (8003790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003738:	4313      	orrs	r3, r2
 800373a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800373c:	4b14      	ldr	r3, [pc, #80]	; (8003790 <RCCEx_PLLSAI1_Config+0x1e4>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a13      	ldr	r2, [pc, #76]	; (8003790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003742:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003746:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003748:	f7fd fb7c 	bl	8000e44 <HAL_GetTick>
 800374c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800374e:	e009      	b.n	8003764 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003750:	f7fd fb78 	bl	8000e44 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d902      	bls.n	8003764 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	73fb      	strb	r3, [r7, #15]
          break;
 8003762:	e005      	b.n	8003770 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003764:	4b0a      	ldr	r3, [pc, #40]	; (8003790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0ef      	beq.n	8003750 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003770:	7bfb      	ldrb	r3, [r7, #15]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d106      	bne.n	8003784 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003776:	4b06      	ldr	r3, [pc, #24]	; (8003790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003778:	691a      	ldr	r2, [r3, #16]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	4904      	ldr	r1, [pc, #16]	; (8003790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003780:	4313      	orrs	r3, r2
 8003782:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003784:	7bfb      	ldrb	r3, [r7, #15]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40021000 	.word	0x40021000

08003794 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800379e:	2300      	movs	r3, #0
 80037a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037a2:	4b6a      	ldr	r3, [pc, #424]	; (800394c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d018      	beq.n	80037e0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80037ae:	4b67      	ldr	r3, [pc, #412]	; (800394c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	f003 0203 	and.w	r2, r3, #3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d10d      	bne.n	80037da <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
       ||
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d009      	beq.n	80037da <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80037c6:	4b61      	ldr	r3, [pc, #388]	; (800394c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	091b      	lsrs	r3, r3, #4
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
       ||
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d047      	beq.n	800386a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	73fb      	strb	r3, [r7, #15]
 80037de:	e044      	b.n	800386a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b03      	cmp	r3, #3
 80037e6:	d018      	beq.n	800381a <RCCEx_PLLSAI2_Config+0x86>
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	d825      	bhi.n	8003838 <RCCEx_PLLSAI2_Config+0xa4>
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d002      	beq.n	80037f6 <RCCEx_PLLSAI2_Config+0x62>
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d009      	beq.n	8003808 <RCCEx_PLLSAI2_Config+0x74>
 80037f4:	e020      	b.n	8003838 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037f6:	4b55      	ldr	r3, [pc, #340]	; (800394c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d11d      	bne.n	800383e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003806:	e01a      	b.n	800383e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003808:	4b50      	ldr	r3, [pc, #320]	; (800394c <RCCEx_PLLSAI2_Config+0x1b8>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003810:	2b00      	cmp	r3, #0
 8003812:	d116      	bne.n	8003842 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003818:	e013      	b.n	8003842 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800381a:	4b4c      	ldr	r3, [pc, #304]	; (800394c <RCCEx_PLLSAI2_Config+0x1b8>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10f      	bne.n	8003846 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003826:	4b49      	ldr	r3, [pc, #292]	; (800394c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d109      	bne.n	8003846 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003836:	e006      	b.n	8003846 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	73fb      	strb	r3, [r7, #15]
      break;
 800383c:	e004      	b.n	8003848 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800383e:	bf00      	nop
 8003840:	e002      	b.n	8003848 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003842:	bf00      	nop
 8003844:	e000      	b.n	8003848 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003846:	bf00      	nop
    }

    if(status == HAL_OK)
 8003848:	7bfb      	ldrb	r3, [r7, #15]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10d      	bne.n	800386a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800384e:	4b3f      	ldr	r3, [pc, #252]	; (800394c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6819      	ldr	r1, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	3b01      	subs	r3, #1
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	430b      	orrs	r3, r1
 8003864:	4939      	ldr	r1, [pc, #228]	; (800394c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003866:	4313      	orrs	r3, r2
 8003868:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800386a:	7bfb      	ldrb	r3, [r7, #15]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d167      	bne.n	8003940 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003870:	4b36      	ldr	r3, [pc, #216]	; (800394c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a35      	ldr	r2, [pc, #212]	; (800394c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003876:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800387a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800387c:	f7fd fae2 	bl	8000e44 <HAL_GetTick>
 8003880:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003882:	e009      	b.n	8003898 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003884:	f7fd fade 	bl	8000e44 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d902      	bls.n	8003898 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	73fb      	strb	r3, [r7, #15]
        break;
 8003896:	e005      	b.n	80038a4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003898:	4b2c      	ldr	r3, [pc, #176]	; (800394c <RCCEx_PLLSAI2_Config+0x1b8>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1ef      	bne.n	8003884 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038a4:	7bfb      	ldrb	r3, [r7, #15]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d14a      	bne.n	8003940 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d111      	bne.n	80038d4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038b0:	4b26      	ldr	r3, [pc, #152]	; (800394c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6892      	ldr	r2, [r2, #8]
 80038c0:	0211      	lsls	r1, r2, #8
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	68d2      	ldr	r2, [r2, #12]
 80038c6:	0912      	lsrs	r2, r2, #4
 80038c8:	0452      	lsls	r2, r2, #17
 80038ca:	430a      	orrs	r2, r1
 80038cc:	491f      	ldr	r1, [pc, #124]	; (800394c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	614b      	str	r3, [r1, #20]
 80038d2:	e011      	b.n	80038f8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038d4:	4b1d      	ldr	r3, [pc, #116]	; (800394c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6892      	ldr	r2, [r2, #8]
 80038e4:	0211      	lsls	r1, r2, #8
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6912      	ldr	r2, [r2, #16]
 80038ea:	0852      	lsrs	r2, r2, #1
 80038ec:	3a01      	subs	r2, #1
 80038ee:	0652      	lsls	r2, r2, #25
 80038f0:	430a      	orrs	r2, r1
 80038f2:	4916      	ldr	r1, [pc, #88]	; (800394c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80038f8:	4b14      	ldr	r3, [pc, #80]	; (800394c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a13      	ldr	r2, [pc, #76]	; (800394c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003902:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003904:	f7fd fa9e 	bl	8000e44 <HAL_GetTick>
 8003908:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800390a:	e009      	b.n	8003920 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800390c:	f7fd fa9a 	bl	8000e44 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d902      	bls.n	8003920 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	73fb      	strb	r3, [r7, #15]
          break;
 800391e:	e005      	b.n	800392c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003920:	4b0a      	ldr	r3, [pc, #40]	; (800394c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d0ef      	beq.n	800390c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800392c:	7bfb      	ldrb	r3, [r7, #15]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d106      	bne.n	8003940 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003932:	4b06      	ldr	r3, [pc, #24]	; (800394c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003934:	695a      	ldr	r2, [r3, #20]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	4904      	ldr	r1, [pc, #16]	; (800394c <RCCEx_PLLSAI2_Config+0x1b8>)
 800393c:	4313      	orrs	r3, r2
 800393e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003940:	7bfb      	ldrb	r3, [r7, #15]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	40021000 	.word	0x40021000

08003950 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8003950:	b480      	push	{r7}
 8003952:	b089      	sub	sp, #36	; 0x24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800395e:	2300      	movs	r3, #0
 8003960:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8003962:	2300      	movs	r3, #0
 8003964:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800396c:	d10c      	bne.n	8003988 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800396e:	4b6e      	ldr	r3, [pc, #440]	; (8003b28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003974:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003978:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003980:	d112      	bne.n	80039a8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8003982:	4b6a      	ldr	r3, [pc, #424]	; (8003b2c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8003984:	61fb      	str	r3, [r7, #28]
 8003986:	e00f      	b.n	80039a8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800398e:	d10b      	bne.n	80039a8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8003990:	4b65      	ldr	r3, [pc, #404]	; (8003b28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003996:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800399a:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039a2:	d101      	bne.n	80039a8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80039a4:	4b61      	ldr	r3, [pc, #388]	; (8003b2c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80039a6:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f040 80b4 	bne.w	8003b18 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039ba:	d003      	beq.n	80039c4 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039c2:	d135      	bne.n	8003a30 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80039c4:	4b58      	ldr	r3, [pc, #352]	; (8003b28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039d0:	f040 80a1 	bne.w	8003b16 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 80039d4:	4b54      	ldr	r3, [pc, #336]	; (8003b28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 809a 	beq.w	8003b16 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80039e2:	4b51      	ldr	r3, [pc, #324]	; (8003b28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	091b      	lsrs	r3, r3, #4
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	3301      	adds	r3, #1
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80039f6:	4b4c      	ldr	r3, [pc, #304]	; (8003b28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	0a1b      	lsrs	r3, r3, #8
 80039fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a00:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10a      	bne.n	8003a1e <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8003a08:	4b47      	ldr	r3, [pc, #284]	; (8003b28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d002      	beq.n	8003a1a <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8003a14:	2311      	movs	r3, #17
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	e001      	b.n	8003a1e <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8003a1a:	2307      	movs	r3, #7
 8003a1c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	fb03 f202 	mul.w	r2, r3, r2
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8003a2e:	e072      	b.n	8003b16 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d133      	bne.n	8003a9e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8003a36:	4b3c      	ldr	r3, [pc, #240]	; (8003b28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a42:	d169      	bne.n	8003b18 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8003a44:	4b38      	ldr	r3, [pc, #224]	; (8003b28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d063      	beq.n	8003b18 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003a50:	4b35      	ldr	r3, [pc, #212]	; (8003b28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	091b      	lsrs	r3, r3, #4
 8003a56:	f003 0307 	and.w	r3, r3, #7
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a62:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003a64:	4b30      	ldr	r3, [pc, #192]	; (8003b28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	0a1b      	lsrs	r3, r3, #8
 8003a6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a6e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10a      	bne.n	8003a8c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8003a76:	4b2c      	ldr	r3, [pc, #176]	; (8003b28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d002      	beq.n	8003a88 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8003a82:	2311      	movs	r3, #17
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	e001      	b.n	8003a8c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8003a88:	2307      	movs	r3, #7
 8003a8a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	fb03 f202 	mul.w	r2, r3, r2
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9a:	61fb      	str	r3, [r7, #28]
 8003a9c:	e03c      	b.n	8003b18 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aa4:	d003      	beq.n	8003aae <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003aac:	d134      	bne.n	8003b18 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8003aae:	4b1e      	ldr	r3, [pc, #120]	; (8003b28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ab6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aba:	d12d      	bne.n	8003b18 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8003abc:	4b1a      	ldr	r3, [pc, #104]	; (8003b28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d027      	beq.n	8003b18 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003ac8:	4b17      	ldr	r3, [pc, #92]	; (8003b28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	091b      	lsrs	r3, r3, #4
 8003ace:	f003 0307 	and.w	r3, r3, #7
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ada:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8003adc:	4b12      	ldr	r3, [pc, #72]	; (8003b28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	0a1b      	lsrs	r3, r3, #8
 8003ae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ae6:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10a      	bne.n	8003b04 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8003aee:	4b0e      	ldr	r3, [pc, #56]	; (8003b28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d002      	beq.n	8003b00 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8003afa:	2311      	movs	r3, #17
 8003afc:	617b      	str	r3, [r7, #20]
 8003afe:	e001      	b.n	8003b04 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8003b00:	2307      	movs	r3, #7
 8003b02:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	fb03 f202 	mul.w	r2, r3, r2
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b12:	61fb      	str	r3, [r7, #28]
 8003b14:	e000      	b.n	8003b18 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8003b16:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8003b18:	69fb      	ldr	r3, [r7, #28]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3724      	adds	r7, #36	; 0x24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	001fff68 	.word	0x001fff68

08003b30 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
 8003b3c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d904      	bls.n	8003b4e <HAL_SAI_InitProtocol+0x1e>
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	3b03      	subs	r3, #3
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d812      	bhi.n	8003b72 <HAL_SAI_InitProtocol+0x42>
 8003b4c:	e008      	b.n	8003b60 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	68b9      	ldr	r1, [r7, #8]
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 fa2b 	bl	8003fb0 <SAI_InitI2S>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	75fb      	strb	r3, [r7, #23]
      break;
 8003b5e:	e00b      	b.n	8003b78 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	68b9      	ldr	r1, [r7, #8]
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 fad4 	bl	8004114 <SAI_InitPCM>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b70:	e002      	b.n	8003b78 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	75fb      	strb	r3, [r7, #23]
      break;
 8003b76:	bf00      	nop
  }

  if (status == HAL_OK)
 8003b78:	7dfb      	ldrb	r3, [r7, #23]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d104      	bne.n	8003b88 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 f808 	bl	8003b94 <HAL_SAI_Init>
 8003b84:	4603      	mov	r3, r0
 8003b86:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
	...

08003b94 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b088      	sub	sp, #32
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e155      	b.n	8003e52 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d106      	bne.n	8003bc0 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7fc ff9e 	bl	8000afc <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 fb61 	bl	8004288 <SAI_Disable>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e140      	b.n	8003e52 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d00c      	beq.n	8003bfa <HAL_SAI_Init+0x66>
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d80d      	bhi.n	8003c00 <HAL_SAI_Init+0x6c>
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d002      	beq.n	8003bee <HAL_SAI_Init+0x5a>
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d003      	beq.n	8003bf4 <HAL_SAI_Init+0x60>
 8003bec:	e008      	b.n	8003c00 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	61fb      	str	r3, [r7, #28]
      break;
 8003bf2:	e008      	b.n	8003c06 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8003bf4:	2310      	movs	r3, #16
 8003bf6:	61fb      	str	r3, [r7, #28]
      break;
 8003bf8:	e005      	b.n	8003c06 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8003bfa:	2320      	movs	r3, #32
 8003bfc:	61fb      	str	r3, [r7, #28]
      break;
 8003bfe:	e002      	b.n	8003c06 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8003c00:	2300      	movs	r3, #0
 8003c02:	61fb      	str	r3, [r7, #28]
      break;
 8003c04:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	2b03      	cmp	r3, #3
 8003c0c:	d81d      	bhi.n	8003c4a <HAL_SAI_Init+0xb6>
 8003c0e:	a201      	add	r2, pc, #4	; (adr r2, 8003c14 <HAL_SAI_Init+0x80>)
 8003c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c14:	08003c25 	.word	0x08003c25
 8003c18:	08003c2b 	.word	0x08003c2b
 8003c1c:	08003c33 	.word	0x08003c33
 8003c20:	08003c3b 	.word	0x08003c3b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8003c24:	2300      	movs	r3, #0
 8003c26:	617b      	str	r3, [r7, #20]
      break;
 8003c28:	e012      	b.n	8003c50 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8003c2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c2e:	617b      	str	r3, [r7, #20]
      break;
 8003c30:	e00e      	b.n	8003c50 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8003c32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c36:	617b      	str	r3, [r7, #20]
      break;
 8003c38:	e00a      	b.n	8003c50 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8003c3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c3e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	f043 0301 	orr.w	r3, r3, #1
 8003c46:	61fb      	str	r3, [r7, #28]
      break;
 8003c48:	e002      	b.n	8003c50 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	617b      	str	r3, [r7, #20]
      break;
 8003c4e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a81      	ldr	r2, [pc, #516]	; (8003e5c <HAL_SAI_Init+0x2c8>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d004      	beq.n	8003c64 <HAL_SAI_Init+0xd0>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a80      	ldr	r2, [pc, #512]	; (8003e60 <HAL_SAI_Init+0x2cc>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d103      	bne.n	8003c6c <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8003c64:	4a7f      	ldr	r2, [pc, #508]	; (8003e64 <HAL_SAI_Init+0x2d0>)
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	6013      	str	r3, [r2, #0]
 8003c6a:	e002      	b.n	8003c72 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8003c6c:	4a7e      	ldr	r2, [pc, #504]	; (8003e68 <HAL_SAI_Init+0x2d4>)
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d041      	beq.n	8003cfe <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a77      	ldr	r2, [pc, #476]	; (8003e5c <HAL_SAI_Init+0x2c8>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d004      	beq.n	8003c8e <HAL_SAI_Init+0xfa>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a75      	ldr	r2, [pc, #468]	; (8003e60 <HAL_SAI_Init+0x2cc>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d105      	bne.n	8003c9a <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8003c8e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003c92:	f7fe ff0d 	bl	8002ab0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003c96:	6138      	str	r0, [r7, #16]
 8003c98:	e004      	b.n	8003ca4 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8003c9a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003c9e:	f7fe ff07 	bl	8002ab0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003ca2:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	4413      	add	r3, r2
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	461a      	mov	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	69db      	ldr	r3, [r3, #28]
 8003cb4:	025b      	lsls	r3, r3, #9
 8003cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cba:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4a6b      	ldr	r2, [pc, #428]	; (8003e6c <HAL_SAI_Init+0x2d8>)
 8003cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc4:	08da      	lsrs	r2, r3, #3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8003cca:	68f9      	ldr	r1, [r7, #12]
 8003ccc:	4b67      	ldr	r3, [pc, #412]	; (8003e6c <HAL_SAI_Init+0x2d8>)
 8003cce:	fba3 2301 	umull	r2, r3, r3, r1
 8003cd2:	08da      	lsrs	r2, r3, #3
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	1aca      	subs	r2, r1, r3
 8003cde:	2a08      	cmp	r2, #8
 8003ce0:	d904      	bls.n	8003cec <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	1c5a      	adds	r2, r3, #1
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf0:	2b04      	cmp	r3, #4
 8003cf2:	d104      	bne.n	8003cfe <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	085a      	lsrs	r2, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_SAI_Init+0x17a>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d109      	bne.n	8003d22 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d101      	bne.n	8003d1a <HAL_SAI_Init+0x186>
 8003d16:	2300      	movs	r3, #0
 8003d18:	e001      	b.n	8003d1e <HAL_SAI_Init+0x18a>
 8003d1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d1e:	61bb      	str	r3, [r7, #24]
 8003d20:	e008      	b.n	8003d34 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d102      	bne.n	8003d30 <HAL_SAI_Init+0x19c>
 8003d2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d2e:	e000      	b.n	8003d32 <HAL_SAI_Init+0x19e>
 8003d30:	2300      	movs	r3, #0
 8003d32:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6819      	ldr	r1, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	4b4c      	ldr	r3, [pc, #304]	; (8003e70 <HAL_SAI_Init+0x2dc>)
 8003d40:	400b      	ands	r3, r1
 8003d42:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6819      	ldr	r1, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d52:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003d58:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8003d6c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003d78:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	051b      	lsls	r3, r3, #20
 8003d80:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6812      	ldr	r2, [r2, #0]
 8003d94:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003d98:	f023 030f 	bic.w	r3, r3, #15
 8003d9c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6859      	ldr	r1, [r3, #4]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	699a      	ldr	r2, [r3, #24]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dac:	431a      	orrs	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6899      	ldr	r1, [r3, #8]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	4b2b      	ldr	r3, [pc, #172]	; (8003e74 <HAL_SAI_Init+0x2e0>)
 8003dc8:	400b      	ands	r3, r1
 8003dca:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6899      	ldr	r1, [r3, #8]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8003ddc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8003de2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8003de8:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dee:	3b01      	subs	r3, #1
 8003df0:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8003df2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68d9      	ldr	r1, [r3, #12]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	f24f 0320 	movw	r3, #61472	; 0xf020
 8003e0a:	400b      	ands	r3, r1
 8003e0c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68d9      	ldr	r1, [r3, #12]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e22:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8003e24:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	021b      	lsls	r3, r3, #8
 8003e2e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3720      	adds	r7, #32
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40015404 	.word	0x40015404
 8003e60:	40015424 	.word	0x40015424
 8003e64:	40015400 	.word	0x40015400
 8003e68:	40015800 	.word	0x40015800
 8003e6c:	cccccccd 	.word	0xcccccccd
 8003e70:	ff05c010 	.word	0xff05c010
 8003e74:	fff88000 	.word	0xfff88000

08003e78 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	4613      	mov	r3, r2
 8003e84:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d002      	beq.n	8003e92 <HAL_SAI_Receive_DMA+0x1a>
 8003e8c:	88fb      	ldrh	r3, [r7, #6]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e074      	b.n	8003f80 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d16d      	bne.n	8003f7e <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d101      	bne.n	8003eb0 <HAL_SAI_Receive_DMA+0x38>
 8003eac:	2302      	movs	r3, #2
 8003eae:	e067      	b.n	8003f80 <HAL_SAI_Receive_DMA+0x108>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	88fa      	ldrh	r2, [r7, #6]
 8003ec2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	88fa      	ldrh	r2, [r7, #6]
 8003eca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2222      	movs	r2, #34	; 0x22
 8003eda:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee2:	4a29      	ldr	r2, [pc, #164]	; (8003f88 <HAL_SAI_Receive_DMA+0x110>)
 8003ee4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eea:	4a28      	ldr	r2, [pc, #160]	; (8003f8c <HAL_SAI_Receive_DMA+0x114>)
 8003eec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef2:	4a27      	ldr	r2, [pc, #156]	; (8003f90 <HAL_SAI_Receive_DMA+0x118>)
 8003ef4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efa:	2200      	movs	r2, #0
 8003efc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	331c      	adds	r3, #28
 8003f08:	4619      	mov	r1, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f0e:	461a      	mov	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003f16:	f7fd f96b 	bl	80011f0 <HAL_DMA_Start_IT>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d005      	beq.n	8003f2c <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e029      	b.n	8003f80 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 f972 	bl	8004218 <SAI_InterruptFlag>
 8003f34:	4601      	mov	r1, r0
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	691a      	ldr	r2, [r3, #16]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003f52:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d107      	bne.n	8003f72 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003f70:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	e000      	b.n	8003f80 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8003f7e:	2302      	movs	r3, #2
  }
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	0800435b 	.word	0x0800435b
 8003f8c:	080042fd 	.word	0x080042fd
 8003f90:	08004377 	.word	0x08004377

08003f94 <HAL_SAI_GetError>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for the specified SAI Block.
  * @retval SAI Error Code
  */
uint32_t HAL_SAI_GetError(const SAI_HandleTypeDef *hsai)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  return hsai->ErrorCode;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
	...

08003fb0 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
 8003fbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d003      	beq.n	8003fde <SAI_InitI2S+0x2e>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d103      	bne.n	8003fe6 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	63da      	str	r2, [r3, #60]	; 0x3c
 8003fe4:	e002      	b.n	8003fec <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003ff2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ffa:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	65da      	str	r2, [r3, #92]	; 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e077      	b.n	8004106 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d107      	bne.n	800402c <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004028:	651a      	str	r2, [r3, #80]	; 0x50
 800402a:	e006      	b.n	800403a <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004032:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Frame definition */
  switch (datasize)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b03      	cmp	r3, #3
 800403e:	d84f      	bhi.n	80040e0 <SAI_InitI2S+0x130>
 8004040:	a201      	add	r2, pc, #4	; (adr r2, 8004048 <SAI_InitI2S+0x98>)
 8004042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004046:	bf00      	nop
 8004048:	08004059 	.word	0x08004059
 800404c:	0800407b 	.word	0x0800407b
 8004050:	0800409d 	.word	0x0800409d
 8004054:	080040bf 	.word	0x080040bf
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2280      	movs	r2, #128	; 0x80
 800405c:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	085b      	lsrs	r3, r3, #1
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	085b      	lsrs	r3, r3, #1
 800406c:	011a      	lsls	r2, r3, #4
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2240      	movs	r2, #64	; 0x40
 8004076:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8004078:	e035      	b.n	80040e6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2280      	movs	r2, #128	; 0x80
 800407e:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	085b      	lsrs	r3, r3, #1
 8004084:	019a      	lsls	r2, r3, #6
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	085b      	lsrs	r3, r3, #1
 800408e:	015a      	lsls	r2, r3, #5
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2280      	movs	r2, #128	; 0x80
 8004098:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800409a:	e024      	b.n	80040e6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	22c0      	movs	r2, #192	; 0xc0
 80040a0:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	085b      	lsrs	r3, r3, #1
 80040a6:	019a      	lsls	r2, r3, #6
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	085b      	lsrs	r3, r3, #1
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2280      	movs	r2, #128	; 0x80
 80040ba:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80040bc:	e013      	b.n	80040e6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	22e0      	movs	r2, #224	; 0xe0
 80040c2:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	085b      	lsrs	r3, r3, #1
 80040c8:	019a      	lsls	r2, r3, #6
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	085b      	lsrs	r3, r3, #1
 80040d2:	015a      	lsls	r2, r3, #5
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2280      	movs	r2, #128	; 0x80
 80040dc:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80040de:	e002      	b.n	80040e6 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	75fb      	strb	r3, [r7, #23]
      break;
 80040e4:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d10b      	bne.n	8004104 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d102      	bne.n	80040f8 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2210      	movs	r2, #16
 80040f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d102      	bne.n	8004104 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2208      	movs	r2, #8
 8004102:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  return status;
 8004104:	7dfb      	ldrb	r3, [r7, #23]
}
 8004106:	4618      	mov	r0, r3
 8004108:	371c      	adds	r7, #28
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop

08004114 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
 8004120:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004122:	2300      	movs	r3, #0
 8004124:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <SAI_InitPCM+0x2e>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2b02      	cmp	r3, #2
 8004140:	d103      	bne.n	800414a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2201      	movs	r2, #1
 8004146:	63da      	str	r2, [r3, #60]	; 0x3c
 8004148:	e002      	b.n	8004150 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800415c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004164:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004178:	661a      	str	r2, [r3, #96]	; 0x60

  if (protocol == SAI_PCM_SHORT)
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	2b04      	cmp	r3, #4
 800417e:	d103      	bne.n	8004188 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2201      	movs	r2, #1
 8004184:	645a      	str	r2, [r3, #68]	; 0x44
 8004186:	e002      	b.n	800418e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	220d      	movs	r2, #13
 800418c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  switch (datasize)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b03      	cmp	r3, #3
 8004192:	d837      	bhi.n	8004204 <SAI_InitPCM+0xf0>
 8004194:	a201      	add	r2, pc, #4	; (adr r2, 800419c <SAI_InitPCM+0x88>)
 8004196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419a:	bf00      	nop
 800419c:	080041ad 	.word	0x080041ad
 80041a0:	080041c3 	.word	0x080041c3
 80041a4:	080041d9 	.word	0x080041d9
 80041a8:	080041ef 	.word	0x080041ef
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2280      	movs	r2, #128	; 0x80
 80041b0:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	011a      	lsls	r2, r3, #4
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2240      	movs	r2, #64	; 0x40
 80041be:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80041c0:	e023      	b.n	800420a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2280      	movs	r2, #128	; 0x80
 80041c6:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2280      	movs	r2, #128	; 0x80
 80041d4:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80041d6:	e018      	b.n	800420a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	22c0      	movs	r2, #192	; 0xc0
 80041dc:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2280      	movs	r2, #128	; 0x80
 80041ea:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80041ec:	e00d      	b.n	800420a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	22e0      	movs	r2, #224	; 0xe0
 80041f2:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	015a      	lsls	r2, r3, #5
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2280      	movs	r2, #128	; 0x80
 8004200:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8004202:	e002      	b.n	800420a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	75fb      	strb	r3, [r7, #23]
      break;
 8004208:	bf00      	nop
  }

  return status;
 800420a:	7dfb      	ldrb	r3, [r7, #23]
}
 800420c:	4618      	mov	r0, r3
 800420e:	371c      	adds	r7, #28
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	460b      	mov	r3, r1
 8004222:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8004224:	2301      	movs	r3, #1
 8004226:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8004228:	78fb      	ldrb	r3, [r7, #3]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d103      	bne.n	8004236 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f043 0308 	orr.w	r3, r3, #8
 8004234:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423a:	2b08      	cmp	r3, #8
 800423c:	d10b      	bne.n	8004256 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004242:	2b03      	cmp	r3, #3
 8004244:	d003      	beq.n	800424e <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d103      	bne.n	8004256 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f043 0310 	orr.w	r3, r3, #16
 8004254:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b03      	cmp	r3, #3
 800425c:	d003      	beq.n	8004266 <SAI_InterruptFlag+0x4e>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2b02      	cmp	r3, #2
 8004264:	d104      	bne.n	8004270 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800426c:	60fb      	str	r3, [r7, #12]
 800426e:	e003      	b.n	8004278 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f043 0304 	orr.w	r3, r3, #4
 8004276:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8004278:	68fb      	ldr	r3, [r7, #12]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
	...

08004288 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004290:	4b18      	ldr	r3, [pc, #96]	; (80042f4 <SAI_Disable+0x6c>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a18      	ldr	r2, [pc, #96]	; (80042f8 <SAI_Disable+0x70>)
 8004296:	fba2 2303 	umull	r2, r3, r2, r3
 800429a:	0b1b      	lsrs	r3, r3, #12
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80042a0:	2300      	movs	r3, #0
 80042a2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80042b2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10a      	bne.n	80042d0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	72fb      	strb	r3, [r7, #11]
      break;
 80042ce:	e009      	b.n	80042e4 <SAI_Disable+0x5c>
    }
    count--;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1e7      	bne.n	80042b4 <SAI_Disable+0x2c>

  return status;
 80042e4:	7afb      	ldrb	r3, [r7, #11]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	20000000 	.word	0x20000000
 80042f8:	95cbec1b 	.word	0x95cbec1b

080042fc <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004308:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	2b20      	cmp	r3, #32
 8004310:	d01c      	beq.n	800434c <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004320:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800432a:	2100      	movs	r1, #0
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f7ff ff73 	bl	8004218 <SAI_InterruptFlag>
 8004332:	4603      	mov	r3, r0
 8004334:	43d9      	mvns	r1, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	691a      	ldr	r2, [r3, #16]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	400a      	ands	r2, r1
 8004342:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f7fc f915 	bl	800057c <HAL_SAI_RxCpltCallback>
#endif
}
 8004352:	bf00      	nop
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b084      	sub	sp, #16
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004366:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f7fc f92f 	bl	80005cc <HAL_SAI_RxHalfCpltCallback>
#endif
}
 800436e:	bf00      	nop
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b084      	sub	sp, #16
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004382:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800438a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80043a2:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f7ff ff6f 	bl	8004288 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f7fc f96e 	bl	800069c <HAL_SAI_ErrorCallback>
#endif
}
 80043c0:	bf00      	nop
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e040      	b.n	800445c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d106      	bne.n	80043f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7fc fb2a 	bl	8000a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2224      	movs	r2, #36	; 0x24
 80043f4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0201 	bic.w	r2, r2, #1
 8004404:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	2b00      	cmp	r3, #0
 800440c:	d002      	beq.n	8004414 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 fb6a 	bl	8004ae8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 f8af 	bl	8004578 <UART_SetConfig>
 800441a:	4603      	mov	r3, r0
 800441c:	2b01      	cmp	r3, #1
 800441e:	d101      	bne.n	8004424 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e01b      	b.n	800445c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004432:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689a      	ldr	r2, [r3, #8]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004442:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 0201 	orr.w	r2, r2, #1
 8004452:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 fbe9 	bl	8004c2c <UART_CheckIdleState>
 800445a:	4603      	mov	r3, r0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08a      	sub	sp, #40	; 0x28
 8004468:	af02      	add	r7, sp, #8
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	603b      	str	r3, [r7, #0]
 8004470:	4613      	mov	r3, r2
 8004472:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004478:	2b20      	cmp	r3, #32
 800447a:	d178      	bne.n	800456e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d002      	beq.n	8004488 <HAL_UART_Transmit+0x24>
 8004482:	88fb      	ldrh	r3, [r7, #6]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d101      	bne.n	800448c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e071      	b.n	8004570 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2221      	movs	r2, #33	; 0x21
 8004498:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800449a:	f7fc fcd3 	bl	8000e44 <HAL_GetTick>
 800449e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	88fa      	ldrh	r2, [r7, #6]
 80044a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	88fa      	ldrh	r2, [r7, #6]
 80044ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b8:	d108      	bne.n	80044cc <HAL_UART_Transmit+0x68>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d104      	bne.n	80044cc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80044c2:	2300      	movs	r3, #0
 80044c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	61bb      	str	r3, [r7, #24]
 80044ca:	e003      	b.n	80044d4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044d0:	2300      	movs	r3, #0
 80044d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044d4:	e030      	b.n	8004538 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	9300      	str	r3, [sp, #0]
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2200      	movs	r2, #0
 80044de:	2180      	movs	r1, #128	; 0x80
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f000 fc4b 	bl	8004d7c <UART_WaitOnFlagUntilTimeout>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d004      	beq.n	80044f6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2220      	movs	r2, #32
 80044f0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e03c      	b.n	8004570 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10b      	bne.n	8004514 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	881a      	ldrh	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004508:	b292      	uxth	r2, r2
 800450a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	3302      	adds	r3, #2
 8004510:	61bb      	str	r3, [r7, #24]
 8004512:	e008      	b.n	8004526 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	781a      	ldrb	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	b292      	uxth	r2, r2
 800451e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	3301      	adds	r3, #1
 8004524:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800452c:	b29b      	uxth	r3, r3
 800452e:	3b01      	subs	r3, #1
 8004530:	b29a      	uxth	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800453e:	b29b      	uxth	r3, r3
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1c8      	bne.n	80044d6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	2200      	movs	r2, #0
 800454c:	2140      	movs	r1, #64	; 0x40
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 fc14 	bl	8004d7c <UART_WaitOnFlagUntilTimeout>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d004      	beq.n	8004564 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2220      	movs	r2, #32
 800455e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e005      	b.n	8004570 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2220      	movs	r2, #32
 8004568:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800456a:	2300      	movs	r3, #0
 800456c:	e000      	b.n	8004570 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800456e:	2302      	movs	r3, #2
  }
}
 8004570:	4618      	mov	r0, r3
 8004572:	3720      	adds	r7, #32
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800457c:	b08a      	sub	sp, #40	; 0x28
 800457e:	af00      	add	r7, sp, #0
 8004580:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004582:	2300      	movs	r3, #0
 8004584:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	431a      	orrs	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	431a      	orrs	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	69db      	ldr	r3, [r3, #28]
 800459c:	4313      	orrs	r3, r2
 800459e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	4ba4      	ldr	r3, [pc, #656]	; (8004838 <UART_SetConfig+0x2c0>)
 80045a8:	4013      	ands	r3, r2
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	6812      	ldr	r2, [r2, #0]
 80045ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045b0:	430b      	orrs	r3, r1
 80045b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	68da      	ldr	r2, [r3, #12]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a99      	ldr	r2, [pc, #612]	; (800483c <UART_SetConfig+0x2c4>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d004      	beq.n	80045e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045e0:	4313      	orrs	r3, r2
 80045e2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f4:	430a      	orrs	r2, r1
 80045f6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a90      	ldr	r2, [pc, #576]	; (8004840 <UART_SetConfig+0x2c8>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d126      	bne.n	8004650 <UART_SetConfig+0xd8>
 8004602:	4b90      	ldr	r3, [pc, #576]	; (8004844 <UART_SetConfig+0x2cc>)
 8004604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004608:	f003 0303 	and.w	r3, r3, #3
 800460c:	2b03      	cmp	r3, #3
 800460e:	d81b      	bhi.n	8004648 <UART_SetConfig+0xd0>
 8004610:	a201      	add	r2, pc, #4	; (adr r2, 8004618 <UART_SetConfig+0xa0>)
 8004612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004616:	bf00      	nop
 8004618:	08004629 	.word	0x08004629
 800461c:	08004639 	.word	0x08004639
 8004620:	08004631 	.word	0x08004631
 8004624:	08004641 	.word	0x08004641
 8004628:	2301      	movs	r3, #1
 800462a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800462e:	e116      	b.n	800485e <UART_SetConfig+0x2e6>
 8004630:	2302      	movs	r3, #2
 8004632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004636:	e112      	b.n	800485e <UART_SetConfig+0x2e6>
 8004638:	2304      	movs	r3, #4
 800463a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800463e:	e10e      	b.n	800485e <UART_SetConfig+0x2e6>
 8004640:	2308      	movs	r3, #8
 8004642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004646:	e10a      	b.n	800485e <UART_SetConfig+0x2e6>
 8004648:	2310      	movs	r3, #16
 800464a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800464e:	e106      	b.n	800485e <UART_SetConfig+0x2e6>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a7c      	ldr	r2, [pc, #496]	; (8004848 <UART_SetConfig+0x2d0>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d138      	bne.n	80046cc <UART_SetConfig+0x154>
 800465a:	4b7a      	ldr	r3, [pc, #488]	; (8004844 <UART_SetConfig+0x2cc>)
 800465c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004660:	f003 030c 	and.w	r3, r3, #12
 8004664:	2b0c      	cmp	r3, #12
 8004666:	d82d      	bhi.n	80046c4 <UART_SetConfig+0x14c>
 8004668:	a201      	add	r2, pc, #4	; (adr r2, 8004670 <UART_SetConfig+0xf8>)
 800466a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800466e:	bf00      	nop
 8004670:	080046a5 	.word	0x080046a5
 8004674:	080046c5 	.word	0x080046c5
 8004678:	080046c5 	.word	0x080046c5
 800467c:	080046c5 	.word	0x080046c5
 8004680:	080046b5 	.word	0x080046b5
 8004684:	080046c5 	.word	0x080046c5
 8004688:	080046c5 	.word	0x080046c5
 800468c:	080046c5 	.word	0x080046c5
 8004690:	080046ad 	.word	0x080046ad
 8004694:	080046c5 	.word	0x080046c5
 8004698:	080046c5 	.word	0x080046c5
 800469c:	080046c5 	.word	0x080046c5
 80046a0:	080046bd 	.word	0x080046bd
 80046a4:	2300      	movs	r3, #0
 80046a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046aa:	e0d8      	b.n	800485e <UART_SetConfig+0x2e6>
 80046ac:	2302      	movs	r3, #2
 80046ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046b2:	e0d4      	b.n	800485e <UART_SetConfig+0x2e6>
 80046b4:	2304      	movs	r3, #4
 80046b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ba:	e0d0      	b.n	800485e <UART_SetConfig+0x2e6>
 80046bc:	2308      	movs	r3, #8
 80046be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046c2:	e0cc      	b.n	800485e <UART_SetConfig+0x2e6>
 80046c4:	2310      	movs	r3, #16
 80046c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ca:	e0c8      	b.n	800485e <UART_SetConfig+0x2e6>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a5e      	ldr	r2, [pc, #376]	; (800484c <UART_SetConfig+0x2d4>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d125      	bne.n	8004722 <UART_SetConfig+0x1aa>
 80046d6:	4b5b      	ldr	r3, [pc, #364]	; (8004844 <UART_SetConfig+0x2cc>)
 80046d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80046e0:	2b30      	cmp	r3, #48	; 0x30
 80046e2:	d016      	beq.n	8004712 <UART_SetConfig+0x19a>
 80046e4:	2b30      	cmp	r3, #48	; 0x30
 80046e6:	d818      	bhi.n	800471a <UART_SetConfig+0x1a2>
 80046e8:	2b20      	cmp	r3, #32
 80046ea:	d00a      	beq.n	8004702 <UART_SetConfig+0x18a>
 80046ec:	2b20      	cmp	r3, #32
 80046ee:	d814      	bhi.n	800471a <UART_SetConfig+0x1a2>
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d002      	beq.n	80046fa <UART_SetConfig+0x182>
 80046f4:	2b10      	cmp	r3, #16
 80046f6:	d008      	beq.n	800470a <UART_SetConfig+0x192>
 80046f8:	e00f      	b.n	800471a <UART_SetConfig+0x1a2>
 80046fa:	2300      	movs	r3, #0
 80046fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004700:	e0ad      	b.n	800485e <UART_SetConfig+0x2e6>
 8004702:	2302      	movs	r3, #2
 8004704:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004708:	e0a9      	b.n	800485e <UART_SetConfig+0x2e6>
 800470a:	2304      	movs	r3, #4
 800470c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004710:	e0a5      	b.n	800485e <UART_SetConfig+0x2e6>
 8004712:	2308      	movs	r3, #8
 8004714:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004718:	e0a1      	b.n	800485e <UART_SetConfig+0x2e6>
 800471a:	2310      	movs	r3, #16
 800471c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004720:	e09d      	b.n	800485e <UART_SetConfig+0x2e6>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a4a      	ldr	r2, [pc, #296]	; (8004850 <UART_SetConfig+0x2d8>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d125      	bne.n	8004778 <UART_SetConfig+0x200>
 800472c:	4b45      	ldr	r3, [pc, #276]	; (8004844 <UART_SetConfig+0x2cc>)
 800472e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004732:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004736:	2bc0      	cmp	r3, #192	; 0xc0
 8004738:	d016      	beq.n	8004768 <UART_SetConfig+0x1f0>
 800473a:	2bc0      	cmp	r3, #192	; 0xc0
 800473c:	d818      	bhi.n	8004770 <UART_SetConfig+0x1f8>
 800473e:	2b80      	cmp	r3, #128	; 0x80
 8004740:	d00a      	beq.n	8004758 <UART_SetConfig+0x1e0>
 8004742:	2b80      	cmp	r3, #128	; 0x80
 8004744:	d814      	bhi.n	8004770 <UART_SetConfig+0x1f8>
 8004746:	2b00      	cmp	r3, #0
 8004748:	d002      	beq.n	8004750 <UART_SetConfig+0x1d8>
 800474a:	2b40      	cmp	r3, #64	; 0x40
 800474c:	d008      	beq.n	8004760 <UART_SetConfig+0x1e8>
 800474e:	e00f      	b.n	8004770 <UART_SetConfig+0x1f8>
 8004750:	2300      	movs	r3, #0
 8004752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004756:	e082      	b.n	800485e <UART_SetConfig+0x2e6>
 8004758:	2302      	movs	r3, #2
 800475a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800475e:	e07e      	b.n	800485e <UART_SetConfig+0x2e6>
 8004760:	2304      	movs	r3, #4
 8004762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004766:	e07a      	b.n	800485e <UART_SetConfig+0x2e6>
 8004768:	2308      	movs	r3, #8
 800476a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800476e:	e076      	b.n	800485e <UART_SetConfig+0x2e6>
 8004770:	2310      	movs	r3, #16
 8004772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004776:	e072      	b.n	800485e <UART_SetConfig+0x2e6>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a35      	ldr	r2, [pc, #212]	; (8004854 <UART_SetConfig+0x2dc>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d12a      	bne.n	80047d8 <UART_SetConfig+0x260>
 8004782:	4b30      	ldr	r3, [pc, #192]	; (8004844 <UART_SetConfig+0x2cc>)
 8004784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004788:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800478c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004790:	d01a      	beq.n	80047c8 <UART_SetConfig+0x250>
 8004792:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004796:	d81b      	bhi.n	80047d0 <UART_SetConfig+0x258>
 8004798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800479c:	d00c      	beq.n	80047b8 <UART_SetConfig+0x240>
 800479e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047a2:	d815      	bhi.n	80047d0 <UART_SetConfig+0x258>
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <UART_SetConfig+0x238>
 80047a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ac:	d008      	beq.n	80047c0 <UART_SetConfig+0x248>
 80047ae:	e00f      	b.n	80047d0 <UART_SetConfig+0x258>
 80047b0:	2300      	movs	r3, #0
 80047b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047b6:	e052      	b.n	800485e <UART_SetConfig+0x2e6>
 80047b8:	2302      	movs	r3, #2
 80047ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047be:	e04e      	b.n	800485e <UART_SetConfig+0x2e6>
 80047c0:	2304      	movs	r3, #4
 80047c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047c6:	e04a      	b.n	800485e <UART_SetConfig+0x2e6>
 80047c8:	2308      	movs	r3, #8
 80047ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ce:	e046      	b.n	800485e <UART_SetConfig+0x2e6>
 80047d0:	2310      	movs	r3, #16
 80047d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047d6:	e042      	b.n	800485e <UART_SetConfig+0x2e6>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a17      	ldr	r2, [pc, #92]	; (800483c <UART_SetConfig+0x2c4>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d13a      	bne.n	8004858 <UART_SetConfig+0x2e0>
 80047e2:	4b18      	ldr	r3, [pc, #96]	; (8004844 <UART_SetConfig+0x2cc>)
 80047e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80047ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047f0:	d01a      	beq.n	8004828 <UART_SetConfig+0x2b0>
 80047f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047f6:	d81b      	bhi.n	8004830 <UART_SetConfig+0x2b8>
 80047f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047fc:	d00c      	beq.n	8004818 <UART_SetConfig+0x2a0>
 80047fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004802:	d815      	bhi.n	8004830 <UART_SetConfig+0x2b8>
 8004804:	2b00      	cmp	r3, #0
 8004806:	d003      	beq.n	8004810 <UART_SetConfig+0x298>
 8004808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800480c:	d008      	beq.n	8004820 <UART_SetConfig+0x2a8>
 800480e:	e00f      	b.n	8004830 <UART_SetConfig+0x2b8>
 8004810:	2300      	movs	r3, #0
 8004812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004816:	e022      	b.n	800485e <UART_SetConfig+0x2e6>
 8004818:	2302      	movs	r3, #2
 800481a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800481e:	e01e      	b.n	800485e <UART_SetConfig+0x2e6>
 8004820:	2304      	movs	r3, #4
 8004822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004826:	e01a      	b.n	800485e <UART_SetConfig+0x2e6>
 8004828:	2308      	movs	r3, #8
 800482a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800482e:	e016      	b.n	800485e <UART_SetConfig+0x2e6>
 8004830:	2310      	movs	r3, #16
 8004832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004836:	e012      	b.n	800485e <UART_SetConfig+0x2e6>
 8004838:	efff69f3 	.word	0xefff69f3
 800483c:	40008000 	.word	0x40008000
 8004840:	40013800 	.word	0x40013800
 8004844:	40021000 	.word	0x40021000
 8004848:	40004400 	.word	0x40004400
 800484c:	40004800 	.word	0x40004800
 8004850:	40004c00 	.word	0x40004c00
 8004854:	40005000 	.word	0x40005000
 8004858:	2310      	movs	r3, #16
 800485a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a9f      	ldr	r2, [pc, #636]	; (8004ae0 <UART_SetConfig+0x568>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d17a      	bne.n	800495e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004868:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800486c:	2b08      	cmp	r3, #8
 800486e:	d824      	bhi.n	80048ba <UART_SetConfig+0x342>
 8004870:	a201      	add	r2, pc, #4	; (adr r2, 8004878 <UART_SetConfig+0x300>)
 8004872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004876:	bf00      	nop
 8004878:	0800489d 	.word	0x0800489d
 800487c:	080048bb 	.word	0x080048bb
 8004880:	080048a5 	.word	0x080048a5
 8004884:	080048bb 	.word	0x080048bb
 8004888:	080048ab 	.word	0x080048ab
 800488c:	080048bb 	.word	0x080048bb
 8004890:	080048bb 	.word	0x080048bb
 8004894:	080048bb 	.word	0x080048bb
 8004898:	080048b3 	.word	0x080048b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800489c:	f7fd fd92 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
 80048a0:	61f8      	str	r0, [r7, #28]
        break;
 80048a2:	e010      	b.n	80048c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048a4:	4b8f      	ldr	r3, [pc, #572]	; (8004ae4 <UART_SetConfig+0x56c>)
 80048a6:	61fb      	str	r3, [r7, #28]
        break;
 80048a8:	e00d      	b.n	80048c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048aa:	f7fd fcf3 	bl	8002294 <HAL_RCC_GetSysClockFreq>
 80048ae:	61f8      	str	r0, [r7, #28]
        break;
 80048b0:	e009      	b.n	80048c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048b6:	61fb      	str	r3, [r7, #28]
        break;
 80048b8:	e005      	b.n	80048c6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80048c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 80fb 	beq.w	8004ac4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	685a      	ldr	r2, [r3, #4]
 80048d2:	4613      	mov	r3, r2
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	4413      	add	r3, r2
 80048d8:	69fa      	ldr	r2, [r7, #28]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d305      	bcc.n	80048ea <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048e4:	69fa      	ldr	r2, [r7, #28]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d903      	bls.n	80048f2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80048f0:	e0e8      	b.n	8004ac4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	2200      	movs	r2, #0
 80048f6:	461c      	mov	r4, r3
 80048f8:	4615      	mov	r5, r2
 80048fa:	f04f 0200 	mov.w	r2, #0
 80048fe:	f04f 0300 	mov.w	r3, #0
 8004902:	022b      	lsls	r3, r5, #8
 8004904:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004908:	0222      	lsls	r2, r4, #8
 800490a:	68f9      	ldr	r1, [r7, #12]
 800490c:	6849      	ldr	r1, [r1, #4]
 800490e:	0849      	lsrs	r1, r1, #1
 8004910:	2000      	movs	r0, #0
 8004912:	4688      	mov	r8, r1
 8004914:	4681      	mov	r9, r0
 8004916:	eb12 0a08 	adds.w	sl, r2, r8
 800491a:	eb43 0b09 	adc.w	fp, r3, r9
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	603b      	str	r3, [r7, #0]
 8004926:	607a      	str	r2, [r7, #4]
 8004928:	e9d7 2300 	ldrd	r2, r3, [r7]
 800492c:	4650      	mov	r0, sl
 800492e:	4659      	mov	r1, fp
 8004930:	f7fb fca6 	bl	8000280 <__aeabi_uldivmod>
 8004934:	4602      	mov	r2, r0
 8004936:	460b      	mov	r3, r1
 8004938:	4613      	mov	r3, r2
 800493a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004942:	d308      	bcc.n	8004956 <UART_SetConfig+0x3de>
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800494a:	d204      	bcs.n	8004956 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	60da      	str	r2, [r3, #12]
 8004954:	e0b6      	b.n	8004ac4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800495c:	e0b2      	b.n	8004ac4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004966:	d15e      	bne.n	8004a26 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004968:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800496c:	2b08      	cmp	r3, #8
 800496e:	d828      	bhi.n	80049c2 <UART_SetConfig+0x44a>
 8004970:	a201      	add	r2, pc, #4	; (adr r2, 8004978 <UART_SetConfig+0x400>)
 8004972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004976:	bf00      	nop
 8004978:	0800499d 	.word	0x0800499d
 800497c:	080049a5 	.word	0x080049a5
 8004980:	080049ad 	.word	0x080049ad
 8004984:	080049c3 	.word	0x080049c3
 8004988:	080049b3 	.word	0x080049b3
 800498c:	080049c3 	.word	0x080049c3
 8004990:	080049c3 	.word	0x080049c3
 8004994:	080049c3 	.word	0x080049c3
 8004998:	080049bb 	.word	0x080049bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800499c:	f7fd fd12 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
 80049a0:	61f8      	str	r0, [r7, #28]
        break;
 80049a2:	e014      	b.n	80049ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049a4:	f7fd fd24 	bl	80023f0 <HAL_RCC_GetPCLK2Freq>
 80049a8:	61f8      	str	r0, [r7, #28]
        break;
 80049aa:	e010      	b.n	80049ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049ac:	4b4d      	ldr	r3, [pc, #308]	; (8004ae4 <UART_SetConfig+0x56c>)
 80049ae:	61fb      	str	r3, [r7, #28]
        break;
 80049b0:	e00d      	b.n	80049ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049b2:	f7fd fc6f 	bl	8002294 <HAL_RCC_GetSysClockFreq>
 80049b6:	61f8      	str	r0, [r7, #28]
        break;
 80049b8:	e009      	b.n	80049ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049be:	61fb      	str	r3, [r7, #28]
        break;
 80049c0:	e005      	b.n	80049ce <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80049c2:	2300      	movs	r3, #0
 80049c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80049cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d077      	beq.n	8004ac4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	005a      	lsls	r2, r3, #1
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	085b      	lsrs	r3, r3, #1
 80049de:	441a      	add	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	2b0f      	cmp	r3, #15
 80049ee:	d916      	bls.n	8004a1e <UART_SetConfig+0x4a6>
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049f6:	d212      	bcs.n	8004a1e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	f023 030f 	bic.w	r3, r3, #15
 8004a00:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	085b      	lsrs	r3, r3, #1
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	f003 0307 	and.w	r3, r3, #7
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	8afb      	ldrh	r3, [r7, #22]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	8afa      	ldrh	r2, [r7, #22]
 8004a1a:	60da      	str	r2, [r3, #12]
 8004a1c:	e052      	b.n	8004ac4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a24:	e04e      	b.n	8004ac4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a2a:	2b08      	cmp	r3, #8
 8004a2c:	d827      	bhi.n	8004a7e <UART_SetConfig+0x506>
 8004a2e:	a201      	add	r2, pc, #4	; (adr r2, 8004a34 <UART_SetConfig+0x4bc>)
 8004a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a34:	08004a59 	.word	0x08004a59
 8004a38:	08004a61 	.word	0x08004a61
 8004a3c:	08004a69 	.word	0x08004a69
 8004a40:	08004a7f 	.word	0x08004a7f
 8004a44:	08004a6f 	.word	0x08004a6f
 8004a48:	08004a7f 	.word	0x08004a7f
 8004a4c:	08004a7f 	.word	0x08004a7f
 8004a50:	08004a7f 	.word	0x08004a7f
 8004a54:	08004a77 	.word	0x08004a77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a58:	f7fd fcb4 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
 8004a5c:	61f8      	str	r0, [r7, #28]
        break;
 8004a5e:	e014      	b.n	8004a8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a60:	f7fd fcc6 	bl	80023f0 <HAL_RCC_GetPCLK2Freq>
 8004a64:	61f8      	str	r0, [r7, #28]
        break;
 8004a66:	e010      	b.n	8004a8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a68:	4b1e      	ldr	r3, [pc, #120]	; (8004ae4 <UART_SetConfig+0x56c>)
 8004a6a:	61fb      	str	r3, [r7, #28]
        break;
 8004a6c:	e00d      	b.n	8004a8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a6e:	f7fd fc11 	bl	8002294 <HAL_RCC_GetSysClockFreq>
 8004a72:	61f8      	str	r0, [r7, #28]
        break;
 8004a74:	e009      	b.n	8004a8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a7a:	61fb      	str	r3, [r7, #28]
        break;
 8004a7c:	e005      	b.n	8004a8a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a88:	bf00      	nop
    }

    if (pclk != 0U)
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d019      	beq.n	8004ac4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	085a      	lsrs	r2, r3, #1
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	441a      	add	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	2b0f      	cmp	r3, #15
 8004aa8:	d909      	bls.n	8004abe <UART_SetConfig+0x546>
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab0:	d205      	bcs.n	8004abe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	60da      	str	r2, [r3, #12]
 8004abc:	e002      	b.n	8004ac4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004ad0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3728      	adds	r7, #40	; 0x28
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ade:	bf00      	nop
 8004ae0:	40008000 	.word	0x40008000
 8004ae4:	00f42400 	.word	0x00f42400

08004ae8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00a      	beq.n	8004b12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00a      	beq.n	8004b34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b38:	f003 0302 	and.w	r3, r3, #2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00a      	beq.n	8004b56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	f003 0304 	and.w	r3, r3, #4
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	f003 0310 	and.w	r3, r3, #16
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00a      	beq.n	8004b9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	f003 0320 	and.w	r3, r3, #32
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00a      	beq.n	8004bbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d01a      	beq.n	8004bfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004be6:	d10a      	bne.n	8004bfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00a      	beq.n	8004c20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	605a      	str	r2, [r3, #4]
  }
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b098      	sub	sp, #96	; 0x60
 8004c30:	af02      	add	r7, sp, #8
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c3c:	f7fc f902 	bl	8000e44 <HAL_GetTick>
 8004c40:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0308 	and.w	r3, r3, #8
 8004c4c:	2b08      	cmp	r3, #8
 8004c4e:	d12e      	bne.n	8004cae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f88c 	bl	8004d7c <UART_WaitOnFlagUntilTimeout>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d021      	beq.n	8004cae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c72:	e853 3f00 	ldrex	r3, [r3]
 8004c76:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c7e:	653b      	str	r3, [r7, #80]	; 0x50
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	461a      	mov	r2, r3
 8004c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c88:	647b      	str	r3, [r7, #68]	; 0x44
 8004c8a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c90:	e841 2300 	strex	r3, r2, [r1]
 8004c94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1e6      	bne.n	8004c6a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e062      	b.n	8004d74 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b04      	cmp	r3, #4
 8004cba:	d149      	bne.n	8004d50 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f856 	bl	8004d7c <UART_WaitOnFlagUntilTimeout>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d03c      	beq.n	8004d50 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	e853 3f00 	ldrex	r3, [r3]
 8004ce2:	623b      	str	r3, [r7, #32]
   return(result);
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
 8004ce6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cf4:	633b      	str	r3, [r7, #48]	; 0x30
 8004cf6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cfc:	e841 2300 	strex	r3, r2, [r1]
 8004d00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1e6      	bne.n	8004cd6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	3308      	adds	r3, #8
 8004d0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	e853 3f00 	ldrex	r3, [r3]
 8004d16:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f023 0301 	bic.w	r3, r3, #1
 8004d1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	3308      	adds	r3, #8
 8004d26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d28:	61fa      	str	r2, [r7, #28]
 8004d2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2c:	69b9      	ldr	r1, [r7, #24]
 8004d2e:	69fa      	ldr	r2, [r7, #28]
 8004d30:	e841 2300 	strex	r3, r2, [r1]
 8004d34:	617b      	str	r3, [r7, #20]
   return(result);
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1e5      	bne.n	8004d08 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e011      	b.n	8004d74 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2220      	movs	r2, #32
 8004d54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2220      	movs	r2, #32
 8004d5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3758      	adds	r7, #88	; 0x58
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	603b      	str	r3, [r7, #0]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d8c:	e049      	b.n	8004e22 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d94:	d045      	beq.n	8004e22 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d96:	f7fc f855 	bl	8000e44 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d302      	bcc.n	8004dac <UART_WaitOnFlagUntilTimeout+0x30>
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e048      	b.n	8004e42 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0304 	and.w	r3, r3, #4
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d031      	beq.n	8004e22 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	69db      	ldr	r3, [r3, #28]
 8004dc4:	f003 0308 	and.w	r3, r3, #8
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d110      	bne.n	8004dee <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2208      	movs	r2, #8
 8004dd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 f838 	bl	8004e4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2208      	movs	r2, #8
 8004dde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e029      	b.n	8004e42 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004df8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dfc:	d111      	bne.n	8004e22 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 f81e 	bl	8004e4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2220      	movs	r2, #32
 8004e12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e00f      	b.n	8004e42 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	69da      	ldr	r2, [r3, #28]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	bf0c      	ite	eq
 8004e32:	2301      	moveq	r3, #1
 8004e34:	2300      	movne	r3, #0
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	461a      	mov	r2, r3
 8004e3a:	79fb      	ldrb	r3, [r7, #7]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d0a6      	beq.n	8004d8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b095      	sub	sp, #84	; 0x54
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e5a:	e853 3f00 	ldrex	r3, [r3]
 8004e5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e70:	643b      	str	r3, [r7, #64]	; 0x40
 8004e72:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e78:	e841 2300 	strex	r3, r2, [r1]
 8004e7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1e6      	bne.n	8004e52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	3308      	adds	r3, #8
 8004e8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	e853 3f00 	ldrex	r3, [r3]
 8004e92:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f023 0301 	bic.w	r3, r3, #1
 8004e9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	3308      	adds	r3, #8
 8004ea2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ea4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ea6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004eaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eac:	e841 2300 	strex	r3, r2, [r1]
 8004eb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1e5      	bne.n	8004e84 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d118      	bne.n	8004ef2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	e853 3f00 	ldrex	r3, [r3]
 8004ecc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	f023 0310 	bic.w	r3, r3, #16
 8004ed4:	647b      	str	r3, [r7, #68]	; 0x44
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	461a      	mov	r2, r3
 8004edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ede:	61bb      	str	r3, [r7, #24]
 8004ee0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee2:	6979      	ldr	r1, [r7, #20]
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	e841 2300 	strex	r3, r2, [r1]
 8004eea:	613b      	str	r3, [r7, #16]
   return(result);
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1e6      	bne.n	8004ec0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004f06:	bf00      	nop
 8004f08:	3754      	adds	r7, #84	; 0x54
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
	...

08004f14 <sniprintf>:
 8004f14:	b40c      	push	{r2, r3}
 8004f16:	b530      	push	{r4, r5, lr}
 8004f18:	4b17      	ldr	r3, [pc, #92]	; (8004f78 <sniprintf+0x64>)
 8004f1a:	1e0c      	subs	r4, r1, #0
 8004f1c:	681d      	ldr	r5, [r3, #0]
 8004f1e:	b09d      	sub	sp, #116	; 0x74
 8004f20:	da08      	bge.n	8004f34 <sniprintf+0x20>
 8004f22:	238b      	movs	r3, #139	; 0x8b
 8004f24:	602b      	str	r3, [r5, #0]
 8004f26:	f04f 30ff 	mov.w	r0, #4294967295
 8004f2a:	b01d      	add	sp, #116	; 0x74
 8004f2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f30:	b002      	add	sp, #8
 8004f32:	4770      	bx	lr
 8004f34:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004f38:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004f3c:	bf14      	ite	ne
 8004f3e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004f42:	4623      	moveq	r3, r4
 8004f44:	9304      	str	r3, [sp, #16]
 8004f46:	9307      	str	r3, [sp, #28]
 8004f48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f4c:	9002      	str	r0, [sp, #8]
 8004f4e:	9006      	str	r0, [sp, #24]
 8004f50:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004f54:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004f56:	ab21      	add	r3, sp, #132	; 0x84
 8004f58:	a902      	add	r1, sp, #8
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	9301      	str	r3, [sp, #4]
 8004f5e:	f000 f9cd 	bl	80052fc <_svfiprintf_r>
 8004f62:	1c43      	adds	r3, r0, #1
 8004f64:	bfbc      	itt	lt
 8004f66:	238b      	movlt	r3, #139	; 0x8b
 8004f68:	602b      	strlt	r3, [r5, #0]
 8004f6a:	2c00      	cmp	r4, #0
 8004f6c:	d0dd      	beq.n	8004f2a <sniprintf+0x16>
 8004f6e:	9b02      	ldr	r3, [sp, #8]
 8004f70:	2200      	movs	r2, #0
 8004f72:	701a      	strb	r2, [r3, #0]
 8004f74:	e7d9      	b.n	8004f2a <sniprintf+0x16>
 8004f76:	bf00      	nop
 8004f78:	20000058 	.word	0x20000058

08004f7c <_vsniprintf_r>:
 8004f7c:	b530      	push	{r4, r5, lr}
 8004f7e:	4614      	mov	r4, r2
 8004f80:	2c00      	cmp	r4, #0
 8004f82:	b09b      	sub	sp, #108	; 0x6c
 8004f84:	4605      	mov	r5, r0
 8004f86:	461a      	mov	r2, r3
 8004f88:	da05      	bge.n	8004f96 <_vsniprintf_r+0x1a>
 8004f8a:	238b      	movs	r3, #139	; 0x8b
 8004f8c:	6003      	str	r3, [r0, #0]
 8004f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f92:	b01b      	add	sp, #108	; 0x6c
 8004f94:	bd30      	pop	{r4, r5, pc}
 8004f96:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004f9a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004f9e:	bf14      	ite	ne
 8004fa0:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004fa4:	4623      	moveq	r3, r4
 8004fa6:	9302      	str	r3, [sp, #8]
 8004fa8:	9305      	str	r3, [sp, #20]
 8004faa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004fae:	9100      	str	r1, [sp, #0]
 8004fb0:	9104      	str	r1, [sp, #16]
 8004fb2:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004fb6:	4669      	mov	r1, sp
 8004fb8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004fba:	f000 f99f 	bl	80052fc <_svfiprintf_r>
 8004fbe:	1c43      	adds	r3, r0, #1
 8004fc0:	bfbc      	itt	lt
 8004fc2:	238b      	movlt	r3, #139	; 0x8b
 8004fc4:	602b      	strlt	r3, [r5, #0]
 8004fc6:	2c00      	cmp	r4, #0
 8004fc8:	d0e3      	beq.n	8004f92 <_vsniprintf_r+0x16>
 8004fca:	9b00      	ldr	r3, [sp, #0]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	701a      	strb	r2, [r3, #0]
 8004fd0:	e7df      	b.n	8004f92 <_vsniprintf_r+0x16>
	...

08004fd4 <vsniprintf>:
 8004fd4:	b507      	push	{r0, r1, r2, lr}
 8004fd6:	9300      	str	r3, [sp, #0]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	460a      	mov	r2, r1
 8004fdc:	4601      	mov	r1, r0
 8004fde:	4803      	ldr	r0, [pc, #12]	; (8004fec <vsniprintf+0x18>)
 8004fe0:	6800      	ldr	r0, [r0, #0]
 8004fe2:	f7ff ffcb 	bl	8004f7c <_vsniprintf_r>
 8004fe6:	b003      	add	sp, #12
 8004fe8:	f85d fb04 	ldr.w	pc, [sp], #4
 8004fec:	20000058 	.word	0x20000058

08004ff0 <memset>:
 8004ff0:	4402      	add	r2, r0
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d100      	bne.n	8004ffa <memset+0xa>
 8004ff8:	4770      	bx	lr
 8004ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8004ffe:	e7f9      	b.n	8004ff4 <memset+0x4>

08005000 <__errno>:
 8005000:	4b01      	ldr	r3, [pc, #4]	; (8005008 <__errno+0x8>)
 8005002:	6818      	ldr	r0, [r3, #0]
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	20000058 	.word	0x20000058

0800500c <__libc_init_array>:
 800500c:	b570      	push	{r4, r5, r6, lr}
 800500e:	4d0d      	ldr	r5, [pc, #52]	; (8005044 <__libc_init_array+0x38>)
 8005010:	4c0d      	ldr	r4, [pc, #52]	; (8005048 <__libc_init_array+0x3c>)
 8005012:	1b64      	subs	r4, r4, r5
 8005014:	10a4      	asrs	r4, r4, #2
 8005016:	2600      	movs	r6, #0
 8005018:	42a6      	cmp	r6, r4
 800501a:	d109      	bne.n	8005030 <__libc_init_array+0x24>
 800501c:	4d0b      	ldr	r5, [pc, #44]	; (800504c <__libc_init_array+0x40>)
 800501e:	4c0c      	ldr	r4, [pc, #48]	; (8005050 <__libc_init_array+0x44>)
 8005020:	f000 fc6a 	bl	80058f8 <_init>
 8005024:	1b64      	subs	r4, r4, r5
 8005026:	10a4      	asrs	r4, r4, #2
 8005028:	2600      	movs	r6, #0
 800502a:	42a6      	cmp	r6, r4
 800502c:	d105      	bne.n	800503a <__libc_init_array+0x2e>
 800502e:	bd70      	pop	{r4, r5, r6, pc}
 8005030:	f855 3b04 	ldr.w	r3, [r5], #4
 8005034:	4798      	blx	r3
 8005036:	3601      	adds	r6, #1
 8005038:	e7ee      	b.n	8005018 <__libc_init_array+0xc>
 800503a:	f855 3b04 	ldr.w	r3, [r5], #4
 800503e:	4798      	blx	r3
 8005040:	3601      	adds	r6, #1
 8005042:	e7f2      	b.n	800502a <__libc_init_array+0x1e>
 8005044:	08005a08 	.word	0x08005a08
 8005048:	08005a08 	.word	0x08005a08
 800504c:	08005a08 	.word	0x08005a08
 8005050:	08005a0c 	.word	0x08005a0c

08005054 <__retarget_lock_acquire_recursive>:
 8005054:	4770      	bx	lr

08005056 <__retarget_lock_release_recursive>:
 8005056:	4770      	bx	lr

08005058 <_free_r>:
 8005058:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800505a:	2900      	cmp	r1, #0
 800505c:	d044      	beq.n	80050e8 <_free_r+0x90>
 800505e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005062:	9001      	str	r0, [sp, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	f1a1 0404 	sub.w	r4, r1, #4
 800506a:	bfb8      	it	lt
 800506c:	18e4      	addlt	r4, r4, r3
 800506e:	f000 f8df 	bl	8005230 <__malloc_lock>
 8005072:	4a1e      	ldr	r2, [pc, #120]	; (80050ec <_free_r+0x94>)
 8005074:	9801      	ldr	r0, [sp, #4]
 8005076:	6813      	ldr	r3, [r2, #0]
 8005078:	b933      	cbnz	r3, 8005088 <_free_r+0x30>
 800507a:	6063      	str	r3, [r4, #4]
 800507c:	6014      	str	r4, [r2, #0]
 800507e:	b003      	add	sp, #12
 8005080:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005084:	f000 b8da 	b.w	800523c <__malloc_unlock>
 8005088:	42a3      	cmp	r3, r4
 800508a:	d908      	bls.n	800509e <_free_r+0x46>
 800508c:	6825      	ldr	r5, [r4, #0]
 800508e:	1961      	adds	r1, r4, r5
 8005090:	428b      	cmp	r3, r1
 8005092:	bf01      	itttt	eq
 8005094:	6819      	ldreq	r1, [r3, #0]
 8005096:	685b      	ldreq	r3, [r3, #4]
 8005098:	1949      	addeq	r1, r1, r5
 800509a:	6021      	streq	r1, [r4, #0]
 800509c:	e7ed      	b.n	800507a <_free_r+0x22>
 800509e:	461a      	mov	r2, r3
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	b10b      	cbz	r3, 80050a8 <_free_r+0x50>
 80050a4:	42a3      	cmp	r3, r4
 80050a6:	d9fa      	bls.n	800509e <_free_r+0x46>
 80050a8:	6811      	ldr	r1, [r2, #0]
 80050aa:	1855      	adds	r5, r2, r1
 80050ac:	42a5      	cmp	r5, r4
 80050ae:	d10b      	bne.n	80050c8 <_free_r+0x70>
 80050b0:	6824      	ldr	r4, [r4, #0]
 80050b2:	4421      	add	r1, r4
 80050b4:	1854      	adds	r4, r2, r1
 80050b6:	42a3      	cmp	r3, r4
 80050b8:	6011      	str	r1, [r2, #0]
 80050ba:	d1e0      	bne.n	800507e <_free_r+0x26>
 80050bc:	681c      	ldr	r4, [r3, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	6053      	str	r3, [r2, #4]
 80050c2:	440c      	add	r4, r1
 80050c4:	6014      	str	r4, [r2, #0]
 80050c6:	e7da      	b.n	800507e <_free_r+0x26>
 80050c8:	d902      	bls.n	80050d0 <_free_r+0x78>
 80050ca:	230c      	movs	r3, #12
 80050cc:	6003      	str	r3, [r0, #0]
 80050ce:	e7d6      	b.n	800507e <_free_r+0x26>
 80050d0:	6825      	ldr	r5, [r4, #0]
 80050d2:	1961      	adds	r1, r4, r5
 80050d4:	428b      	cmp	r3, r1
 80050d6:	bf04      	itt	eq
 80050d8:	6819      	ldreq	r1, [r3, #0]
 80050da:	685b      	ldreq	r3, [r3, #4]
 80050dc:	6063      	str	r3, [r4, #4]
 80050de:	bf04      	itt	eq
 80050e0:	1949      	addeq	r1, r1, r5
 80050e2:	6021      	streq	r1, [r4, #0]
 80050e4:	6054      	str	r4, [r2, #4]
 80050e6:	e7ca      	b.n	800507e <_free_r+0x26>
 80050e8:	b003      	add	sp, #12
 80050ea:	bd30      	pop	{r4, r5, pc}
 80050ec:	20004320 	.word	0x20004320

080050f0 <sbrk_aligned>:
 80050f0:	b570      	push	{r4, r5, r6, lr}
 80050f2:	4e0e      	ldr	r6, [pc, #56]	; (800512c <sbrk_aligned+0x3c>)
 80050f4:	460c      	mov	r4, r1
 80050f6:	6831      	ldr	r1, [r6, #0]
 80050f8:	4605      	mov	r5, r0
 80050fa:	b911      	cbnz	r1, 8005102 <sbrk_aligned+0x12>
 80050fc:	f000 fba6 	bl	800584c <_sbrk_r>
 8005100:	6030      	str	r0, [r6, #0]
 8005102:	4621      	mov	r1, r4
 8005104:	4628      	mov	r0, r5
 8005106:	f000 fba1 	bl	800584c <_sbrk_r>
 800510a:	1c43      	adds	r3, r0, #1
 800510c:	d00a      	beq.n	8005124 <sbrk_aligned+0x34>
 800510e:	1cc4      	adds	r4, r0, #3
 8005110:	f024 0403 	bic.w	r4, r4, #3
 8005114:	42a0      	cmp	r0, r4
 8005116:	d007      	beq.n	8005128 <sbrk_aligned+0x38>
 8005118:	1a21      	subs	r1, r4, r0
 800511a:	4628      	mov	r0, r5
 800511c:	f000 fb96 	bl	800584c <_sbrk_r>
 8005120:	3001      	adds	r0, #1
 8005122:	d101      	bne.n	8005128 <sbrk_aligned+0x38>
 8005124:	f04f 34ff 	mov.w	r4, #4294967295
 8005128:	4620      	mov	r0, r4
 800512a:	bd70      	pop	{r4, r5, r6, pc}
 800512c:	20004324 	.word	0x20004324

08005130 <_malloc_r>:
 8005130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005134:	1ccd      	adds	r5, r1, #3
 8005136:	f025 0503 	bic.w	r5, r5, #3
 800513a:	3508      	adds	r5, #8
 800513c:	2d0c      	cmp	r5, #12
 800513e:	bf38      	it	cc
 8005140:	250c      	movcc	r5, #12
 8005142:	2d00      	cmp	r5, #0
 8005144:	4607      	mov	r7, r0
 8005146:	db01      	blt.n	800514c <_malloc_r+0x1c>
 8005148:	42a9      	cmp	r1, r5
 800514a:	d905      	bls.n	8005158 <_malloc_r+0x28>
 800514c:	230c      	movs	r3, #12
 800514e:	603b      	str	r3, [r7, #0]
 8005150:	2600      	movs	r6, #0
 8005152:	4630      	mov	r0, r6
 8005154:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005158:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800522c <_malloc_r+0xfc>
 800515c:	f000 f868 	bl	8005230 <__malloc_lock>
 8005160:	f8d8 3000 	ldr.w	r3, [r8]
 8005164:	461c      	mov	r4, r3
 8005166:	bb5c      	cbnz	r4, 80051c0 <_malloc_r+0x90>
 8005168:	4629      	mov	r1, r5
 800516a:	4638      	mov	r0, r7
 800516c:	f7ff ffc0 	bl	80050f0 <sbrk_aligned>
 8005170:	1c43      	adds	r3, r0, #1
 8005172:	4604      	mov	r4, r0
 8005174:	d155      	bne.n	8005222 <_malloc_r+0xf2>
 8005176:	f8d8 4000 	ldr.w	r4, [r8]
 800517a:	4626      	mov	r6, r4
 800517c:	2e00      	cmp	r6, #0
 800517e:	d145      	bne.n	800520c <_malloc_r+0xdc>
 8005180:	2c00      	cmp	r4, #0
 8005182:	d048      	beq.n	8005216 <_malloc_r+0xe6>
 8005184:	6823      	ldr	r3, [r4, #0]
 8005186:	4631      	mov	r1, r6
 8005188:	4638      	mov	r0, r7
 800518a:	eb04 0903 	add.w	r9, r4, r3
 800518e:	f000 fb5d 	bl	800584c <_sbrk_r>
 8005192:	4581      	cmp	r9, r0
 8005194:	d13f      	bne.n	8005216 <_malloc_r+0xe6>
 8005196:	6821      	ldr	r1, [r4, #0]
 8005198:	1a6d      	subs	r5, r5, r1
 800519a:	4629      	mov	r1, r5
 800519c:	4638      	mov	r0, r7
 800519e:	f7ff ffa7 	bl	80050f0 <sbrk_aligned>
 80051a2:	3001      	adds	r0, #1
 80051a4:	d037      	beq.n	8005216 <_malloc_r+0xe6>
 80051a6:	6823      	ldr	r3, [r4, #0]
 80051a8:	442b      	add	r3, r5
 80051aa:	6023      	str	r3, [r4, #0]
 80051ac:	f8d8 3000 	ldr.w	r3, [r8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d038      	beq.n	8005226 <_malloc_r+0xf6>
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	42a2      	cmp	r2, r4
 80051b8:	d12b      	bne.n	8005212 <_malloc_r+0xe2>
 80051ba:	2200      	movs	r2, #0
 80051bc:	605a      	str	r2, [r3, #4]
 80051be:	e00f      	b.n	80051e0 <_malloc_r+0xb0>
 80051c0:	6822      	ldr	r2, [r4, #0]
 80051c2:	1b52      	subs	r2, r2, r5
 80051c4:	d41f      	bmi.n	8005206 <_malloc_r+0xd6>
 80051c6:	2a0b      	cmp	r2, #11
 80051c8:	d917      	bls.n	80051fa <_malloc_r+0xca>
 80051ca:	1961      	adds	r1, r4, r5
 80051cc:	42a3      	cmp	r3, r4
 80051ce:	6025      	str	r5, [r4, #0]
 80051d0:	bf18      	it	ne
 80051d2:	6059      	strne	r1, [r3, #4]
 80051d4:	6863      	ldr	r3, [r4, #4]
 80051d6:	bf08      	it	eq
 80051d8:	f8c8 1000 	streq.w	r1, [r8]
 80051dc:	5162      	str	r2, [r4, r5]
 80051de:	604b      	str	r3, [r1, #4]
 80051e0:	4638      	mov	r0, r7
 80051e2:	f104 060b 	add.w	r6, r4, #11
 80051e6:	f000 f829 	bl	800523c <__malloc_unlock>
 80051ea:	f026 0607 	bic.w	r6, r6, #7
 80051ee:	1d23      	adds	r3, r4, #4
 80051f0:	1af2      	subs	r2, r6, r3
 80051f2:	d0ae      	beq.n	8005152 <_malloc_r+0x22>
 80051f4:	1b9b      	subs	r3, r3, r6
 80051f6:	50a3      	str	r3, [r4, r2]
 80051f8:	e7ab      	b.n	8005152 <_malloc_r+0x22>
 80051fa:	42a3      	cmp	r3, r4
 80051fc:	6862      	ldr	r2, [r4, #4]
 80051fe:	d1dd      	bne.n	80051bc <_malloc_r+0x8c>
 8005200:	f8c8 2000 	str.w	r2, [r8]
 8005204:	e7ec      	b.n	80051e0 <_malloc_r+0xb0>
 8005206:	4623      	mov	r3, r4
 8005208:	6864      	ldr	r4, [r4, #4]
 800520a:	e7ac      	b.n	8005166 <_malloc_r+0x36>
 800520c:	4634      	mov	r4, r6
 800520e:	6876      	ldr	r6, [r6, #4]
 8005210:	e7b4      	b.n	800517c <_malloc_r+0x4c>
 8005212:	4613      	mov	r3, r2
 8005214:	e7cc      	b.n	80051b0 <_malloc_r+0x80>
 8005216:	230c      	movs	r3, #12
 8005218:	603b      	str	r3, [r7, #0]
 800521a:	4638      	mov	r0, r7
 800521c:	f000 f80e 	bl	800523c <__malloc_unlock>
 8005220:	e797      	b.n	8005152 <_malloc_r+0x22>
 8005222:	6025      	str	r5, [r4, #0]
 8005224:	e7dc      	b.n	80051e0 <_malloc_r+0xb0>
 8005226:	605b      	str	r3, [r3, #4]
 8005228:	deff      	udf	#255	; 0xff
 800522a:	bf00      	nop
 800522c:	20004320 	.word	0x20004320

08005230 <__malloc_lock>:
 8005230:	4801      	ldr	r0, [pc, #4]	; (8005238 <__malloc_lock+0x8>)
 8005232:	f7ff bf0f 	b.w	8005054 <__retarget_lock_acquire_recursive>
 8005236:	bf00      	nop
 8005238:	2000431c 	.word	0x2000431c

0800523c <__malloc_unlock>:
 800523c:	4801      	ldr	r0, [pc, #4]	; (8005244 <__malloc_unlock+0x8>)
 800523e:	f7ff bf0a 	b.w	8005056 <__retarget_lock_release_recursive>
 8005242:	bf00      	nop
 8005244:	2000431c 	.word	0x2000431c

08005248 <__ssputs_r>:
 8005248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800524c:	688e      	ldr	r6, [r1, #8]
 800524e:	461f      	mov	r7, r3
 8005250:	42be      	cmp	r6, r7
 8005252:	680b      	ldr	r3, [r1, #0]
 8005254:	4682      	mov	sl, r0
 8005256:	460c      	mov	r4, r1
 8005258:	4690      	mov	r8, r2
 800525a:	d82c      	bhi.n	80052b6 <__ssputs_r+0x6e>
 800525c:	898a      	ldrh	r2, [r1, #12]
 800525e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005262:	d026      	beq.n	80052b2 <__ssputs_r+0x6a>
 8005264:	6965      	ldr	r5, [r4, #20]
 8005266:	6909      	ldr	r1, [r1, #16]
 8005268:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800526c:	eba3 0901 	sub.w	r9, r3, r1
 8005270:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005274:	1c7b      	adds	r3, r7, #1
 8005276:	444b      	add	r3, r9
 8005278:	106d      	asrs	r5, r5, #1
 800527a:	429d      	cmp	r5, r3
 800527c:	bf38      	it	cc
 800527e:	461d      	movcc	r5, r3
 8005280:	0553      	lsls	r3, r2, #21
 8005282:	d527      	bpl.n	80052d4 <__ssputs_r+0x8c>
 8005284:	4629      	mov	r1, r5
 8005286:	f7ff ff53 	bl	8005130 <_malloc_r>
 800528a:	4606      	mov	r6, r0
 800528c:	b360      	cbz	r0, 80052e8 <__ssputs_r+0xa0>
 800528e:	6921      	ldr	r1, [r4, #16]
 8005290:	464a      	mov	r2, r9
 8005292:	f000 faeb 	bl	800586c <memcpy>
 8005296:	89a3      	ldrh	r3, [r4, #12]
 8005298:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800529c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052a0:	81a3      	strh	r3, [r4, #12]
 80052a2:	6126      	str	r6, [r4, #16]
 80052a4:	6165      	str	r5, [r4, #20]
 80052a6:	444e      	add	r6, r9
 80052a8:	eba5 0509 	sub.w	r5, r5, r9
 80052ac:	6026      	str	r6, [r4, #0]
 80052ae:	60a5      	str	r5, [r4, #8]
 80052b0:	463e      	mov	r6, r7
 80052b2:	42be      	cmp	r6, r7
 80052b4:	d900      	bls.n	80052b8 <__ssputs_r+0x70>
 80052b6:	463e      	mov	r6, r7
 80052b8:	6820      	ldr	r0, [r4, #0]
 80052ba:	4632      	mov	r2, r6
 80052bc:	4641      	mov	r1, r8
 80052be:	f000 faab 	bl	8005818 <memmove>
 80052c2:	68a3      	ldr	r3, [r4, #8]
 80052c4:	1b9b      	subs	r3, r3, r6
 80052c6:	60a3      	str	r3, [r4, #8]
 80052c8:	6823      	ldr	r3, [r4, #0]
 80052ca:	4433      	add	r3, r6
 80052cc:	6023      	str	r3, [r4, #0]
 80052ce:	2000      	movs	r0, #0
 80052d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052d4:	462a      	mov	r2, r5
 80052d6:	f000 fad7 	bl	8005888 <_realloc_r>
 80052da:	4606      	mov	r6, r0
 80052dc:	2800      	cmp	r0, #0
 80052de:	d1e0      	bne.n	80052a2 <__ssputs_r+0x5a>
 80052e0:	6921      	ldr	r1, [r4, #16]
 80052e2:	4650      	mov	r0, sl
 80052e4:	f7ff feb8 	bl	8005058 <_free_r>
 80052e8:	230c      	movs	r3, #12
 80052ea:	f8ca 3000 	str.w	r3, [sl]
 80052ee:	89a3      	ldrh	r3, [r4, #12]
 80052f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052f4:	81a3      	strh	r3, [r4, #12]
 80052f6:	f04f 30ff 	mov.w	r0, #4294967295
 80052fa:	e7e9      	b.n	80052d0 <__ssputs_r+0x88>

080052fc <_svfiprintf_r>:
 80052fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005300:	4698      	mov	r8, r3
 8005302:	898b      	ldrh	r3, [r1, #12]
 8005304:	061b      	lsls	r3, r3, #24
 8005306:	b09d      	sub	sp, #116	; 0x74
 8005308:	4607      	mov	r7, r0
 800530a:	460d      	mov	r5, r1
 800530c:	4614      	mov	r4, r2
 800530e:	d50e      	bpl.n	800532e <_svfiprintf_r+0x32>
 8005310:	690b      	ldr	r3, [r1, #16]
 8005312:	b963      	cbnz	r3, 800532e <_svfiprintf_r+0x32>
 8005314:	2140      	movs	r1, #64	; 0x40
 8005316:	f7ff ff0b 	bl	8005130 <_malloc_r>
 800531a:	6028      	str	r0, [r5, #0]
 800531c:	6128      	str	r0, [r5, #16]
 800531e:	b920      	cbnz	r0, 800532a <_svfiprintf_r+0x2e>
 8005320:	230c      	movs	r3, #12
 8005322:	603b      	str	r3, [r7, #0]
 8005324:	f04f 30ff 	mov.w	r0, #4294967295
 8005328:	e0d0      	b.n	80054cc <_svfiprintf_r+0x1d0>
 800532a:	2340      	movs	r3, #64	; 0x40
 800532c:	616b      	str	r3, [r5, #20]
 800532e:	2300      	movs	r3, #0
 8005330:	9309      	str	r3, [sp, #36]	; 0x24
 8005332:	2320      	movs	r3, #32
 8005334:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005338:	f8cd 800c 	str.w	r8, [sp, #12]
 800533c:	2330      	movs	r3, #48	; 0x30
 800533e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80054e4 <_svfiprintf_r+0x1e8>
 8005342:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005346:	f04f 0901 	mov.w	r9, #1
 800534a:	4623      	mov	r3, r4
 800534c:	469a      	mov	sl, r3
 800534e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005352:	b10a      	cbz	r2, 8005358 <_svfiprintf_r+0x5c>
 8005354:	2a25      	cmp	r2, #37	; 0x25
 8005356:	d1f9      	bne.n	800534c <_svfiprintf_r+0x50>
 8005358:	ebba 0b04 	subs.w	fp, sl, r4
 800535c:	d00b      	beq.n	8005376 <_svfiprintf_r+0x7a>
 800535e:	465b      	mov	r3, fp
 8005360:	4622      	mov	r2, r4
 8005362:	4629      	mov	r1, r5
 8005364:	4638      	mov	r0, r7
 8005366:	f7ff ff6f 	bl	8005248 <__ssputs_r>
 800536a:	3001      	adds	r0, #1
 800536c:	f000 80a9 	beq.w	80054c2 <_svfiprintf_r+0x1c6>
 8005370:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005372:	445a      	add	r2, fp
 8005374:	9209      	str	r2, [sp, #36]	; 0x24
 8005376:	f89a 3000 	ldrb.w	r3, [sl]
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 80a1 	beq.w	80054c2 <_svfiprintf_r+0x1c6>
 8005380:	2300      	movs	r3, #0
 8005382:	f04f 32ff 	mov.w	r2, #4294967295
 8005386:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800538a:	f10a 0a01 	add.w	sl, sl, #1
 800538e:	9304      	str	r3, [sp, #16]
 8005390:	9307      	str	r3, [sp, #28]
 8005392:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005396:	931a      	str	r3, [sp, #104]	; 0x68
 8005398:	4654      	mov	r4, sl
 800539a:	2205      	movs	r2, #5
 800539c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053a0:	4850      	ldr	r0, [pc, #320]	; (80054e4 <_svfiprintf_r+0x1e8>)
 80053a2:	f7fa ff1d 	bl	80001e0 <memchr>
 80053a6:	9a04      	ldr	r2, [sp, #16]
 80053a8:	b9d8      	cbnz	r0, 80053e2 <_svfiprintf_r+0xe6>
 80053aa:	06d0      	lsls	r0, r2, #27
 80053ac:	bf44      	itt	mi
 80053ae:	2320      	movmi	r3, #32
 80053b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053b4:	0711      	lsls	r1, r2, #28
 80053b6:	bf44      	itt	mi
 80053b8:	232b      	movmi	r3, #43	; 0x2b
 80053ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053be:	f89a 3000 	ldrb.w	r3, [sl]
 80053c2:	2b2a      	cmp	r3, #42	; 0x2a
 80053c4:	d015      	beq.n	80053f2 <_svfiprintf_r+0xf6>
 80053c6:	9a07      	ldr	r2, [sp, #28]
 80053c8:	4654      	mov	r4, sl
 80053ca:	2000      	movs	r0, #0
 80053cc:	f04f 0c0a 	mov.w	ip, #10
 80053d0:	4621      	mov	r1, r4
 80053d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053d6:	3b30      	subs	r3, #48	; 0x30
 80053d8:	2b09      	cmp	r3, #9
 80053da:	d94d      	bls.n	8005478 <_svfiprintf_r+0x17c>
 80053dc:	b1b0      	cbz	r0, 800540c <_svfiprintf_r+0x110>
 80053de:	9207      	str	r2, [sp, #28]
 80053e0:	e014      	b.n	800540c <_svfiprintf_r+0x110>
 80053e2:	eba0 0308 	sub.w	r3, r0, r8
 80053e6:	fa09 f303 	lsl.w	r3, r9, r3
 80053ea:	4313      	orrs	r3, r2
 80053ec:	9304      	str	r3, [sp, #16]
 80053ee:	46a2      	mov	sl, r4
 80053f0:	e7d2      	b.n	8005398 <_svfiprintf_r+0x9c>
 80053f2:	9b03      	ldr	r3, [sp, #12]
 80053f4:	1d19      	adds	r1, r3, #4
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	9103      	str	r1, [sp, #12]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	bfbb      	ittet	lt
 80053fe:	425b      	neglt	r3, r3
 8005400:	f042 0202 	orrlt.w	r2, r2, #2
 8005404:	9307      	strge	r3, [sp, #28]
 8005406:	9307      	strlt	r3, [sp, #28]
 8005408:	bfb8      	it	lt
 800540a:	9204      	strlt	r2, [sp, #16]
 800540c:	7823      	ldrb	r3, [r4, #0]
 800540e:	2b2e      	cmp	r3, #46	; 0x2e
 8005410:	d10c      	bne.n	800542c <_svfiprintf_r+0x130>
 8005412:	7863      	ldrb	r3, [r4, #1]
 8005414:	2b2a      	cmp	r3, #42	; 0x2a
 8005416:	d134      	bne.n	8005482 <_svfiprintf_r+0x186>
 8005418:	9b03      	ldr	r3, [sp, #12]
 800541a:	1d1a      	adds	r2, r3, #4
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	9203      	str	r2, [sp, #12]
 8005420:	2b00      	cmp	r3, #0
 8005422:	bfb8      	it	lt
 8005424:	f04f 33ff 	movlt.w	r3, #4294967295
 8005428:	3402      	adds	r4, #2
 800542a:	9305      	str	r3, [sp, #20]
 800542c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80054f4 <_svfiprintf_r+0x1f8>
 8005430:	7821      	ldrb	r1, [r4, #0]
 8005432:	2203      	movs	r2, #3
 8005434:	4650      	mov	r0, sl
 8005436:	f7fa fed3 	bl	80001e0 <memchr>
 800543a:	b138      	cbz	r0, 800544c <_svfiprintf_r+0x150>
 800543c:	9b04      	ldr	r3, [sp, #16]
 800543e:	eba0 000a 	sub.w	r0, r0, sl
 8005442:	2240      	movs	r2, #64	; 0x40
 8005444:	4082      	lsls	r2, r0
 8005446:	4313      	orrs	r3, r2
 8005448:	3401      	adds	r4, #1
 800544a:	9304      	str	r3, [sp, #16]
 800544c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005450:	4825      	ldr	r0, [pc, #148]	; (80054e8 <_svfiprintf_r+0x1ec>)
 8005452:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005456:	2206      	movs	r2, #6
 8005458:	f7fa fec2 	bl	80001e0 <memchr>
 800545c:	2800      	cmp	r0, #0
 800545e:	d038      	beq.n	80054d2 <_svfiprintf_r+0x1d6>
 8005460:	4b22      	ldr	r3, [pc, #136]	; (80054ec <_svfiprintf_r+0x1f0>)
 8005462:	bb1b      	cbnz	r3, 80054ac <_svfiprintf_r+0x1b0>
 8005464:	9b03      	ldr	r3, [sp, #12]
 8005466:	3307      	adds	r3, #7
 8005468:	f023 0307 	bic.w	r3, r3, #7
 800546c:	3308      	adds	r3, #8
 800546e:	9303      	str	r3, [sp, #12]
 8005470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005472:	4433      	add	r3, r6
 8005474:	9309      	str	r3, [sp, #36]	; 0x24
 8005476:	e768      	b.n	800534a <_svfiprintf_r+0x4e>
 8005478:	fb0c 3202 	mla	r2, ip, r2, r3
 800547c:	460c      	mov	r4, r1
 800547e:	2001      	movs	r0, #1
 8005480:	e7a6      	b.n	80053d0 <_svfiprintf_r+0xd4>
 8005482:	2300      	movs	r3, #0
 8005484:	3401      	adds	r4, #1
 8005486:	9305      	str	r3, [sp, #20]
 8005488:	4619      	mov	r1, r3
 800548a:	f04f 0c0a 	mov.w	ip, #10
 800548e:	4620      	mov	r0, r4
 8005490:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005494:	3a30      	subs	r2, #48	; 0x30
 8005496:	2a09      	cmp	r2, #9
 8005498:	d903      	bls.n	80054a2 <_svfiprintf_r+0x1a6>
 800549a:	2b00      	cmp	r3, #0
 800549c:	d0c6      	beq.n	800542c <_svfiprintf_r+0x130>
 800549e:	9105      	str	r1, [sp, #20]
 80054a0:	e7c4      	b.n	800542c <_svfiprintf_r+0x130>
 80054a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80054a6:	4604      	mov	r4, r0
 80054a8:	2301      	movs	r3, #1
 80054aa:	e7f0      	b.n	800548e <_svfiprintf_r+0x192>
 80054ac:	ab03      	add	r3, sp, #12
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	462a      	mov	r2, r5
 80054b2:	4b0f      	ldr	r3, [pc, #60]	; (80054f0 <_svfiprintf_r+0x1f4>)
 80054b4:	a904      	add	r1, sp, #16
 80054b6:	4638      	mov	r0, r7
 80054b8:	f3af 8000 	nop.w
 80054bc:	1c42      	adds	r2, r0, #1
 80054be:	4606      	mov	r6, r0
 80054c0:	d1d6      	bne.n	8005470 <_svfiprintf_r+0x174>
 80054c2:	89ab      	ldrh	r3, [r5, #12]
 80054c4:	065b      	lsls	r3, r3, #25
 80054c6:	f53f af2d 	bmi.w	8005324 <_svfiprintf_r+0x28>
 80054ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054cc:	b01d      	add	sp, #116	; 0x74
 80054ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054d2:	ab03      	add	r3, sp, #12
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	462a      	mov	r2, r5
 80054d8:	4b05      	ldr	r3, [pc, #20]	; (80054f0 <_svfiprintf_r+0x1f4>)
 80054da:	a904      	add	r1, sp, #16
 80054dc:	4638      	mov	r0, r7
 80054de:	f000 f879 	bl	80055d4 <_printf_i>
 80054e2:	e7eb      	b.n	80054bc <_svfiprintf_r+0x1c0>
 80054e4:	080059cc 	.word	0x080059cc
 80054e8:	080059d6 	.word	0x080059d6
 80054ec:	00000000 	.word	0x00000000
 80054f0:	08005249 	.word	0x08005249
 80054f4:	080059d2 	.word	0x080059d2

080054f8 <_printf_common>:
 80054f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054fc:	4616      	mov	r6, r2
 80054fe:	4699      	mov	r9, r3
 8005500:	688a      	ldr	r2, [r1, #8]
 8005502:	690b      	ldr	r3, [r1, #16]
 8005504:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005508:	4293      	cmp	r3, r2
 800550a:	bfb8      	it	lt
 800550c:	4613      	movlt	r3, r2
 800550e:	6033      	str	r3, [r6, #0]
 8005510:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005514:	4607      	mov	r7, r0
 8005516:	460c      	mov	r4, r1
 8005518:	b10a      	cbz	r2, 800551e <_printf_common+0x26>
 800551a:	3301      	adds	r3, #1
 800551c:	6033      	str	r3, [r6, #0]
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	0699      	lsls	r1, r3, #26
 8005522:	bf42      	ittt	mi
 8005524:	6833      	ldrmi	r3, [r6, #0]
 8005526:	3302      	addmi	r3, #2
 8005528:	6033      	strmi	r3, [r6, #0]
 800552a:	6825      	ldr	r5, [r4, #0]
 800552c:	f015 0506 	ands.w	r5, r5, #6
 8005530:	d106      	bne.n	8005540 <_printf_common+0x48>
 8005532:	f104 0a19 	add.w	sl, r4, #25
 8005536:	68e3      	ldr	r3, [r4, #12]
 8005538:	6832      	ldr	r2, [r6, #0]
 800553a:	1a9b      	subs	r3, r3, r2
 800553c:	42ab      	cmp	r3, r5
 800553e:	dc26      	bgt.n	800558e <_printf_common+0x96>
 8005540:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005544:	1e13      	subs	r3, r2, #0
 8005546:	6822      	ldr	r2, [r4, #0]
 8005548:	bf18      	it	ne
 800554a:	2301      	movne	r3, #1
 800554c:	0692      	lsls	r2, r2, #26
 800554e:	d42b      	bmi.n	80055a8 <_printf_common+0xb0>
 8005550:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005554:	4649      	mov	r1, r9
 8005556:	4638      	mov	r0, r7
 8005558:	47c0      	blx	r8
 800555a:	3001      	adds	r0, #1
 800555c:	d01e      	beq.n	800559c <_printf_common+0xa4>
 800555e:	6823      	ldr	r3, [r4, #0]
 8005560:	6922      	ldr	r2, [r4, #16]
 8005562:	f003 0306 	and.w	r3, r3, #6
 8005566:	2b04      	cmp	r3, #4
 8005568:	bf02      	ittt	eq
 800556a:	68e5      	ldreq	r5, [r4, #12]
 800556c:	6833      	ldreq	r3, [r6, #0]
 800556e:	1aed      	subeq	r5, r5, r3
 8005570:	68a3      	ldr	r3, [r4, #8]
 8005572:	bf0c      	ite	eq
 8005574:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005578:	2500      	movne	r5, #0
 800557a:	4293      	cmp	r3, r2
 800557c:	bfc4      	itt	gt
 800557e:	1a9b      	subgt	r3, r3, r2
 8005580:	18ed      	addgt	r5, r5, r3
 8005582:	2600      	movs	r6, #0
 8005584:	341a      	adds	r4, #26
 8005586:	42b5      	cmp	r5, r6
 8005588:	d11a      	bne.n	80055c0 <_printf_common+0xc8>
 800558a:	2000      	movs	r0, #0
 800558c:	e008      	b.n	80055a0 <_printf_common+0xa8>
 800558e:	2301      	movs	r3, #1
 8005590:	4652      	mov	r2, sl
 8005592:	4649      	mov	r1, r9
 8005594:	4638      	mov	r0, r7
 8005596:	47c0      	blx	r8
 8005598:	3001      	adds	r0, #1
 800559a:	d103      	bne.n	80055a4 <_printf_common+0xac>
 800559c:	f04f 30ff 	mov.w	r0, #4294967295
 80055a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055a4:	3501      	adds	r5, #1
 80055a6:	e7c6      	b.n	8005536 <_printf_common+0x3e>
 80055a8:	18e1      	adds	r1, r4, r3
 80055aa:	1c5a      	adds	r2, r3, #1
 80055ac:	2030      	movs	r0, #48	; 0x30
 80055ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055b2:	4422      	add	r2, r4
 80055b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055bc:	3302      	adds	r3, #2
 80055be:	e7c7      	b.n	8005550 <_printf_common+0x58>
 80055c0:	2301      	movs	r3, #1
 80055c2:	4622      	mov	r2, r4
 80055c4:	4649      	mov	r1, r9
 80055c6:	4638      	mov	r0, r7
 80055c8:	47c0      	blx	r8
 80055ca:	3001      	adds	r0, #1
 80055cc:	d0e6      	beq.n	800559c <_printf_common+0xa4>
 80055ce:	3601      	adds	r6, #1
 80055d0:	e7d9      	b.n	8005586 <_printf_common+0x8e>
	...

080055d4 <_printf_i>:
 80055d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055d8:	7e0f      	ldrb	r7, [r1, #24]
 80055da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80055dc:	2f78      	cmp	r7, #120	; 0x78
 80055de:	4691      	mov	r9, r2
 80055e0:	4680      	mov	r8, r0
 80055e2:	460c      	mov	r4, r1
 80055e4:	469a      	mov	sl, r3
 80055e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80055ea:	d807      	bhi.n	80055fc <_printf_i+0x28>
 80055ec:	2f62      	cmp	r7, #98	; 0x62
 80055ee:	d80a      	bhi.n	8005606 <_printf_i+0x32>
 80055f0:	2f00      	cmp	r7, #0
 80055f2:	f000 80d4 	beq.w	800579e <_printf_i+0x1ca>
 80055f6:	2f58      	cmp	r7, #88	; 0x58
 80055f8:	f000 80c0 	beq.w	800577c <_printf_i+0x1a8>
 80055fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005600:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005604:	e03a      	b.n	800567c <_printf_i+0xa8>
 8005606:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800560a:	2b15      	cmp	r3, #21
 800560c:	d8f6      	bhi.n	80055fc <_printf_i+0x28>
 800560e:	a101      	add	r1, pc, #4	; (adr r1, 8005614 <_printf_i+0x40>)
 8005610:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005614:	0800566d 	.word	0x0800566d
 8005618:	08005681 	.word	0x08005681
 800561c:	080055fd 	.word	0x080055fd
 8005620:	080055fd 	.word	0x080055fd
 8005624:	080055fd 	.word	0x080055fd
 8005628:	080055fd 	.word	0x080055fd
 800562c:	08005681 	.word	0x08005681
 8005630:	080055fd 	.word	0x080055fd
 8005634:	080055fd 	.word	0x080055fd
 8005638:	080055fd 	.word	0x080055fd
 800563c:	080055fd 	.word	0x080055fd
 8005640:	08005785 	.word	0x08005785
 8005644:	080056ad 	.word	0x080056ad
 8005648:	0800573f 	.word	0x0800573f
 800564c:	080055fd 	.word	0x080055fd
 8005650:	080055fd 	.word	0x080055fd
 8005654:	080057a7 	.word	0x080057a7
 8005658:	080055fd 	.word	0x080055fd
 800565c:	080056ad 	.word	0x080056ad
 8005660:	080055fd 	.word	0x080055fd
 8005664:	080055fd 	.word	0x080055fd
 8005668:	08005747 	.word	0x08005747
 800566c:	682b      	ldr	r3, [r5, #0]
 800566e:	1d1a      	adds	r2, r3, #4
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	602a      	str	r2, [r5, #0]
 8005674:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005678:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800567c:	2301      	movs	r3, #1
 800567e:	e09f      	b.n	80057c0 <_printf_i+0x1ec>
 8005680:	6820      	ldr	r0, [r4, #0]
 8005682:	682b      	ldr	r3, [r5, #0]
 8005684:	0607      	lsls	r7, r0, #24
 8005686:	f103 0104 	add.w	r1, r3, #4
 800568a:	6029      	str	r1, [r5, #0]
 800568c:	d501      	bpl.n	8005692 <_printf_i+0xbe>
 800568e:	681e      	ldr	r6, [r3, #0]
 8005690:	e003      	b.n	800569a <_printf_i+0xc6>
 8005692:	0646      	lsls	r6, r0, #25
 8005694:	d5fb      	bpl.n	800568e <_printf_i+0xba>
 8005696:	f9b3 6000 	ldrsh.w	r6, [r3]
 800569a:	2e00      	cmp	r6, #0
 800569c:	da03      	bge.n	80056a6 <_printf_i+0xd2>
 800569e:	232d      	movs	r3, #45	; 0x2d
 80056a0:	4276      	negs	r6, r6
 80056a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056a6:	485a      	ldr	r0, [pc, #360]	; (8005810 <_printf_i+0x23c>)
 80056a8:	230a      	movs	r3, #10
 80056aa:	e012      	b.n	80056d2 <_printf_i+0xfe>
 80056ac:	682b      	ldr	r3, [r5, #0]
 80056ae:	6820      	ldr	r0, [r4, #0]
 80056b0:	1d19      	adds	r1, r3, #4
 80056b2:	6029      	str	r1, [r5, #0]
 80056b4:	0605      	lsls	r5, r0, #24
 80056b6:	d501      	bpl.n	80056bc <_printf_i+0xe8>
 80056b8:	681e      	ldr	r6, [r3, #0]
 80056ba:	e002      	b.n	80056c2 <_printf_i+0xee>
 80056bc:	0641      	lsls	r1, r0, #25
 80056be:	d5fb      	bpl.n	80056b8 <_printf_i+0xe4>
 80056c0:	881e      	ldrh	r6, [r3, #0]
 80056c2:	4853      	ldr	r0, [pc, #332]	; (8005810 <_printf_i+0x23c>)
 80056c4:	2f6f      	cmp	r7, #111	; 0x6f
 80056c6:	bf0c      	ite	eq
 80056c8:	2308      	moveq	r3, #8
 80056ca:	230a      	movne	r3, #10
 80056cc:	2100      	movs	r1, #0
 80056ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056d2:	6865      	ldr	r5, [r4, #4]
 80056d4:	60a5      	str	r5, [r4, #8]
 80056d6:	2d00      	cmp	r5, #0
 80056d8:	bfa2      	ittt	ge
 80056da:	6821      	ldrge	r1, [r4, #0]
 80056dc:	f021 0104 	bicge.w	r1, r1, #4
 80056e0:	6021      	strge	r1, [r4, #0]
 80056e2:	b90e      	cbnz	r6, 80056e8 <_printf_i+0x114>
 80056e4:	2d00      	cmp	r5, #0
 80056e6:	d04b      	beq.n	8005780 <_printf_i+0x1ac>
 80056e8:	4615      	mov	r5, r2
 80056ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80056ee:	fb03 6711 	mls	r7, r3, r1, r6
 80056f2:	5dc7      	ldrb	r7, [r0, r7]
 80056f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80056f8:	4637      	mov	r7, r6
 80056fa:	42bb      	cmp	r3, r7
 80056fc:	460e      	mov	r6, r1
 80056fe:	d9f4      	bls.n	80056ea <_printf_i+0x116>
 8005700:	2b08      	cmp	r3, #8
 8005702:	d10b      	bne.n	800571c <_printf_i+0x148>
 8005704:	6823      	ldr	r3, [r4, #0]
 8005706:	07de      	lsls	r6, r3, #31
 8005708:	d508      	bpl.n	800571c <_printf_i+0x148>
 800570a:	6923      	ldr	r3, [r4, #16]
 800570c:	6861      	ldr	r1, [r4, #4]
 800570e:	4299      	cmp	r1, r3
 8005710:	bfde      	ittt	le
 8005712:	2330      	movle	r3, #48	; 0x30
 8005714:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005718:	f105 35ff 	addle.w	r5, r5, #4294967295
 800571c:	1b52      	subs	r2, r2, r5
 800571e:	6122      	str	r2, [r4, #16]
 8005720:	f8cd a000 	str.w	sl, [sp]
 8005724:	464b      	mov	r3, r9
 8005726:	aa03      	add	r2, sp, #12
 8005728:	4621      	mov	r1, r4
 800572a:	4640      	mov	r0, r8
 800572c:	f7ff fee4 	bl	80054f8 <_printf_common>
 8005730:	3001      	adds	r0, #1
 8005732:	d14a      	bne.n	80057ca <_printf_i+0x1f6>
 8005734:	f04f 30ff 	mov.w	r0, #4294967295
 8005738:	b004      	add	sp, #16
 800573a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800573e:	6823      	ldr	r3, [r4, #0]
 8005740:	f043 0320 	orr.w	r3, r3, #32
 8005744:	6023      	str	r3, [r4, #0]
 8005746:	4833      	ldr	r0, [pc, #204]	; (8005814 <_printf_i+0x240>)
 8005748:	2778      	movs	r7, #120	; 0x78
 800574a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800574e:	6823      	ldr	r3, [r4, #0]
 8005750:	6829      	ldr	r1, [r5, #0]
 8005752:	061f      	lsls	r7, r3, #24
 8005754:	f851 6b04 	ldr.w	r6, [r1], #4
 8005758:	d402      	bmi.n	8005760 <_printf_i+0x18c>
 800575a:	065f      	lsls	r7, r3, #25
 800575c:	bf48      	it	mi
 800575e:	b2b6      	uxthmi	r6, r6
 8005760:	07df      	lsls	r7, r3, #31
 8005762:	bf48      	it	mi
 8005764:	f043 0320 	orrmi.w	r3, r3, #32
 8005768:	6029      	str	r1, [r5, #0]
 800576a:	bf48      	it	mi
 800576c:	6023      	strmi	r3, [r4, #0]
 800576e:	b91e      	cbnz	r6, 8005778 <_printf_i+0x1a4>
 8005770:	6823      	ldr	r3, [r4, #0]
 8005772:	f023 0320 	bic.w	r3, r3, #32
 8005776:	6023      	str	r3, [r4, #0]
 8005778:	2310      	movs	r3, #16
 800577a:	e7a7      	b.n	80056cc <_printf_i+0xf8>
 800577c:	4824      	ldr	r0, [pc, #144]	; (8005810 <_printf_i+0x23c>)
 800577e:	e7e4      	b.n	800574a <_printf_i+0x176>
 8005780:	4615      	mov	r5, r2
 8005782:	e7bd      	b.n	8005700 <_printf_i+0x12c>
 8005784:	682b      	ldr	r3, [r5, #0]
 8005786:	6826      	ldr	r6, [r4, #0]
 8005788:	6961      	ldr	r1, [r4, #20]
 800578a:	1d18      	adds	r0, r3, #4
 800578c:	6028      	str	r0, [r5, #0]
 800578e:	0635      	lsls	r5, r6, #24
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	d501      	bpl.n	8005798 <_printf_i+0x1c4>
 8005794:	6019      	str	r1, [r3, #0]
 8005796:	e002      	b.n	800579e <_printf_i+0x1ca>
 8005798:	0670      	lsls	r0, r6, #25
 800579a:	d5fb      	bpl.n	8005794 <_printf_i+0x1c0>
 800579c:	8019      	strh	r1, [r3, #0]
 800579e:	2300      	movs	r3, #0
 80057a0:	6123      	str	r3, [r4, #16]
 80057a2:	4615      	mov	r5, r2
 80057a4:	e7bc      	b.n	8005720 <_printf_i+0x14c>
 80057a6:	682b      	ldr	r3, [r5, #0]
 80057a8:	1d1a      	adds	r2, r3, #4
 80057aa:	602a      	str	r2, [r5, #0]
 80057ac:	681d      	ldr	r5, [r3, #0]
 80057ae:	6862      	ldr	r2, [r4, #4]
 80057b0:	2100      	movs	r1, #0
 80057b2:	4628      	mov	r0, r5
 80057b4:	f7fa fd14 	bl	80001e0 <memchr>
 80057b8:	b108      	cbz	r0, 80057be <_printf_i+0x1ea>
 80057ba:	1b40      	subs	r0, r0, r5
 80057bc:	6060      	str	r0, [r4, #4]
 80057be:	6863      	ldr	r3, [r4, #4]
 80057c0:	6123      	str	r3, [r4, #16]
 80057c2:	2300      	movs	r3, #0
 80057c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057c8:	e7aa      	b.n	8005720 <_printf_i+0x14c>
 80057ca:	6923      	ldr	r3, [r4, #16]
 80057cc:	462a      	mov	r2, r5
 80057ce:	4649      	mov	r1, r9
 80057d0:	4640      	mov	r0, r8
 80057d2:	47d0      	blx	sl
 80057d4:	3001      	adds	r0, #1
 80057d6:	d0ad      	beq.n	8005734 <_printf_i+0x160>
 80057d8:	6823      	ldr	r3, [r4, #0]
 80057da:	079b      	lsls	r3, r3, #30
 80057dc:	d413      	bmi.n	8005806 <_printf_i+0x232>
 80057de:	68e0      	ldr	r0, [r4, #12]
 80057e0:	9b03      	ldr	r3, [sp, #12]
 80057e2:	4298      	cmp	r0, r3
 80057e4:	bfb8      	it	lt
 80057e6:	4618      	movlt	r0, r3
 80057e8:	e7a6      	b.n	8005738 <_printf_i+0x164>
 80057ea:	2301      	movs	r3, #1
 80057ec:	4632      	mov	r2, r6
 80057ee:	4649      	mov	r1, r9
 80057f0:	4640      	mov	r0, r8
 80057f2:	47d0      	blx	sl
 80057f4:	3001      	adds	r0, #1
 80057f6:	d09d      	beq.n	8005734 <_printf_i+0x160>
 80057f8:	3501      	adds	r5, #1
 80057fa:	68e3      	ldr	r3, [r4, #12]
 80057fc:	9903      	ldr	r1, [sp, #12]
 80057fe:	1a5b      	subs	r3, r3, r1
 8005800:	42ab      	cmp	r3, r5
 8005802:	dcf2      	bgt.n	80057ea <_printf_i+0x216>
 8005804:	e7eb      	b.n	80057de <_printf_i+0x20a>
 8005806:	2500      	movs	r5, #0
 8005808:	f104 0619 	add.w	r6, r4, #25
 800580c:	e7f5      	b.n	80057fa <_printf_i+0x226>
 800580e:	bf00      	nop
 8005810:	080059dd 	.word	0x080059dd
 8005814:	080059ee 	.word	0x080059ee

08005818 <memmove>:
 8005818:	4288      	cmp	r0, r1
 800581a:	b510      	push	{r4, lr}
 800581c:	eb01 0402 	add.w	r4, r1, r2
 8005820:	d902      	bls.n	8005828 <memmove+0x10>
 8005822:	4284      	cmp	r4, r0
 8005824:	4623      	mov	r3, r4
 8005826:	d807      	bhi.n	8005838 <memmove+0x20>
 8005828:	1e43      	subs	r3, r0, #1
 800582a:	42a1      	cmp	r1, r4
 800582c:	d008      	beq.n	8005840 <memmove+0x28>
 800582e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005832:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005836:	e7f8      	b.n	800582a <memmove+0x12>
 8005838:	4402      	add	r2, r0
 800583a:	4601      	mov	r1, r0
 800583c:	428a      	cmp	r2, r1
 800583e:	d100      	bne.n	8005842 <memmove+0x2a>
 8005840:	bd10      	pop	{r4, pc}
 8005842:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005846:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800584a:	e7f7      	b.n	800583c <memmove+0x24>

0800584c <_sbrk_r>:
 800584c:	b538      	push	{r3, r4, r5, lr}
 800584e:	4d06      	ldr	r5, [pc, #24]	; (8005868 <_sbrk_r+0x1c>)
 8005850:	2300      	movs	r3, #0
 8005852:	4604      	mov	r4, r0
 8005854:	4608      	mov	r0, r1
 8005856:	602b      	str	r3, [r5, #0]
 8005858:	f7fb fa12 	bl	8000c80 <_sbrk>
 800585c:	1c43      	adds	r3, r0, #1
 800585e:	d102      	bne.n	8005866 <_sbrk_r+0x1a>
 8005860:	682b      	ldr	r3, [r5, #0]
 8005862:	b103      	cbz	r3, 8005866 <_sbrk_r+0x1a>
 8005864:	6023      	str	r3, [r4, #0]
 8005866:	bd38      	pop	{r3, r4, r5, pc}
 8005868:	20004318 	.word	0x20004318

0800586c <memcpy>:
 800586c:	440a      	add	r2, r1
 800586e:	4291      	cmp	r1, r2
 8005870:	f100 33ff 	add.w	r3, r0, #4294967295
 8005874:	d100      	bne.n	8005878 <memcpy+0xc>
 8005876:	4770      	bx	lr
 8005878:	b510      	push	{r4, lr}
 800587a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800587e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005882:	4291      	cmp	r1, r2
 8005884:	d1f9      	bne.n	800587a <memcpy+0xe>
 8005886:	bd10      	pop	{r4, pc}

08005888 <_realloc_r>:
 8005888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800588c:	4680      	mov	r8, r0
 800588e:	4614      	mov	r4, r2
 8005890:	460e      	mov	r6, r1
 8005892:	b921      	cbnz	r1, 800589e <_realloc_r+0x16>
 8005894:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005898:	4611      	mov	r1, r2
 800589a:	f7ff bc49 	b.w	8005130 <_malloc_r>
 800589e:	b92a      	cbnz	r2, 80058ac <_realloc_r+0x24>
 80058a0:	f7ff fbda 	bl	8005058 <_free_r>
 80058a4:	4625      	mov	r5, r4
 80058a6:	4628      	mov	r0, r5
 80058a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058ac:	f000 f81b 	bl	80058e6 <_malloc_usable_size_r>
 80058b0:	4284      	cmp	r4, r0
 80058b2:	4607      	mov	r7, r0
 80058b4:	d802      	bhi.n	80058bc <_realloc_r+0x34>
 80058b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80058ba:	d812      	bhi.n	80058e2 <_realloc_r+0x5a>
 80058bc:	4621      	mov	r1, r4
 80058be:	4640      	mov	r0, r8
 80058c0:	f7ff fc36 	bl	8005130 <_malloc_r>
 80058c4:	4605      	mov	r5, r0
 80058c6:	2800      	cmp	r0, #0
 80058c8:	d0ed      	beq.n	80058a6 <_realloc_r+0x1e>
 80058ca:	42bc      	cmp	r4, r7
 80058cc:	4622      	mov	r2, r4
 80058ce:	4631      	mov	r1, r6
 80058d0:	bf28      	it	cs
 80058d2:	463a      	movcs	r2, r7
 80058d4:	f7ff ffca 	bl	800586c <memcpy>
 80058d8:	4631      	mov	r1, r6
 80058da:	4640      	mov	r0, r8
 80058dc:	f7ff fbbc 	bl	8005058 <_free_r>
 80058e0:	e7e1      	b.n	80058a6 <_realloc_r+0x1e>
 80058e2:	4635      	mov	r5, r6
 80058e4:	e7df      	b.n	80058a6 <_realloc_r+0x1e>

080058e6 <_malloc_usable_size_r>:
 80058e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058ea:	1f18      	subs	r0, r3, #4
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	bfbc      	itt	lt
 80058f0:	580b      	ldrlt	r3, [r1, r0]
 80058f2:	18c0      	addlt	r0, r0, r3
 80058f4:	4770      	bx	lr
	...

080058f8 <_init>:
 80058f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058fa:	bf00      	nop
 80058fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058fe:	bc08      	pop	{r3}
 8005900:	469e      	mov	lr, r3
 8005902:	4770      	bx	lr

08005904 <_fini>:
 8005904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005906:	bf00      	nop
 8005908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800590a:	bc08      	pop	{r3}
 800590c:	469e      	mov	lr, r3
 800590e:	4770      	bx	lr
