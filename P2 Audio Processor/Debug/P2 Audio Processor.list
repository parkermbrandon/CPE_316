
P2 Audio Processor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000618c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800631c  0800631c  0001631c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800640c  0800640c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  0800640c  0800640c  0001640c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006414  08006414  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006414  08006414  00016414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006418  08006418  00016418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800641c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001440  2000005c  08006478  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000149c  08006478  0002149c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f15a  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022b0  00000000  00000000  0002f229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db8  00000000  00000000  000314e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a9f  00000000  00000000  00032298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026a3d  00000000  00000000  00032d37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000105c6  00000000  00000000  00059774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec940  00000000  00000000  00069d3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ddc  00000000  00000000  0015667c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0015a458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006304 	.word	0x08006304

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08006304 	.word	0x08006304

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_SAI_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Callback function for completed DMA transfer
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
    // Start receiving into the new currentBuffer
    HAL_SAI_Receive_DMA(&hsai_BlockA2, (uint8_t*)audioBuffer1, AUDIO_BUFFER_SIZE);
 8000584:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000588:	4906      	ldr	r1, [pc, #24]	; (80005a4 <HAL_SAI_RxCpltCallback+0x28>)
 800058a:	4807      	ldr	r0, [pc, #28]	; (80005a8 <HAL_SAI_RxCpltCallback+0x2c>)
 800058c:	f003 fdfe 	bl	800418c <HAL_SAI_Receive_DMA>

    // Signal or start processing data in processingBuffer
    ProcessAudioData(audioBuffer1, AUDIO_BUFFER_SIZE);
 8000590:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <HAL_SAI_RxCpltCallback+0x28>)
 8000596:	f000 f813 	bl	80005c0 <ProcessAudioData>

    // Start transferring processed data to DAC using DMA
    //HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)audioBuffer1, AUDIO_BUFFER_SIZE, DAC_ALIGN_12B_R);
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000078 	.word	0x20000078
 80005a8:	2000107c 	.word	0x2000107c

080005ac <HAL_SAI_RxHalfCpltCallback>:

// Callback function for half completed DMA transfer
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]

}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <ProcessAudioData>:

void ProcessAudioData(uint32_t* buffer, uint32_t size) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	; 0x50
 80005c4:	af02      	add	r7, sp, #8
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < size; ++i) {
 80005ca:	2300      	movs	r3, #0
 80005cc:	647b      	str	r3, [r7, #68]	; 0x44
 80005ce:	e02d      	b.n	800062c <ProcessAudioData+0x6c>
       // Shift right to align 18-bit data within 32-bit word
        int32_t sample = buffer[i] >> 14;
 80005d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	4413      	add	r3, r2
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	0b9b      	lsrs	r3, r3, #14
 80005dc:	643b      	str	r3, [r7, #64]	; 0x40

        // If the data is signed (2's complement), perform sign extension for negative values
        if (sample & 0x20000) { // Check if the 18th bit (sign bit for 18-bit data) is set
 80005de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80005e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d005      	beq.n	80005f4 <ProcessAudioData+0x34>
            sample |= 0xFFFC0000; // Extend the sign to 32 bits
 80005e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80005ea:	ea6f 3383 	mvn.w	r3, r3, lsl #14
 80005ee:	ea6f 3393 	mvn.w	r3, r3, lsr #14
 80005f2:	643b      	str	r3, [r7, #64]	; 0x40
        }

        // Downsample to 12 bits while preserving the sign
        //uint16_t dacSample = (sample / 64) + 2048;
        int16_t dacSample = sample >> 6;
 80005f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80005f6:	119b      	asrs	r3, r3, #6
 80005f8:	87fb      	strh	r3, [r7, #62]	; 0x3e

        // Process the sample as required
        // Example: Print the first few samples
        if (i < 10) {
 80005fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80005fc:	2b09      	cmp	r3, #9
 80005fe:	d80e      	bhi.n	800061e <ProcessAudioData+0x5e>
            char uartBuffer[50];
            snprintf(uartBuffer, sizeof(uartBuffer), "Sample %lu: %ld\r\n", (unsigned long)i, dacSample);
 8000600:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8000604:	f107 000c 	add.w	r0, r7, #12
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800060c:	4a0c      	ldr	r2, [pc, #48]	; (8000640 <ProcessAudioData+0x80>)
 800060e:	2132      	movs	r1, #50	; 0x32
 8000610:	f005 f986 	bl	8005920 <sniprintf>
            TransmitDataOverUART(uartBuffer);
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	4618      	mov	r0, r3
 800061a:	f000 f82f 	bl	800067c <TransmitDataOverUART>
        }

        // Further processing can be added here
        DAC_write(dacSample);
 800061e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000620:	4618      	mov	r0, r3
 8000622:	f000 f853 	bl	80006cc <DAC_write>
    for (uint32_t i = 0; i < size; ++i) {
 8000626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000628:	3301      	adds	r3, #1
 800062a:	647b      	str	r3, [r7, #68]	; 0x44
 800062c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	429a      	cmp	r2, r3
 8000632:	d3cd      	bcc.n	80005d0 <ProcessAudioData+0x10>
    }
}
 8000634:	bf00      	nop
 8000636:	bf00      	nop
 8000638:	3748      	adds	r7, #72	; 0x48
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	0800631c 	.word	0x0800631c

08000644 <DebugPrint>:


void DebugPrint(const char* format, ...) {
 8000644:	b40f      	push	{r0, r1, r2, r3}
 8000646:	b580      	push	{r7, lr}
 8000648:	b0a2      	sub	sp, #136	; 0x88
 800064a:	af00      	add	r7, sp, #0
    char debugBuffer[128];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 800064c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000650:	607b      	str	r3, [r7, #4]
    vsnprintf(debugBuffer, sizeof(debugBuffer), format, args);
 8000652:	f107 0008 	add.w	r0, r7, #8
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800065c:	2180      	movs	r1, #128	; 0x80
 800065e:	f005 f9bf 	bl	80059e0 <vsniprintf>
    va_end(args);

    TransmitDataOverUART(debugBuffer);
 8000662:	f107 0308 	add.w	r3, r7, #8
 8000666:	4618      	mov	r0, r3
 8000668:	f000 f808 	bl	800067c <TransmitDataOverUART>
}
 800066c:	bf00      	nop
 800066e:	3788      	adds	r7, #136	; 0x88
 8000670:	46bd      	mov	sp, r7
 8000672:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000676:	b004      	add	sp, #16
 8000678:	4770      	bx	lr
	...

0800067c <TransmitDataOverUART>:

void TransmitDataOverUART(const char* data)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)data, strlen(data), 1000);
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f7ff fda3 	bl	80001d0 <strlen>
 800068a:	4603      	mov	r3, r0
 800068c:	b29a      	uxth	r2, r3
 800068e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000692:	6879      	ldr	r1, [r7, #4]
 8000694:	4803      	ldr	r0, [pc, #12]	; (80006a4 <TransmitDataOverUART+0x28>)
 8000696:	f004 fbeb 	bl	8004e70 <HAL_UART_Transmit>
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	200012c0 	.word	0x200012c0

080006a8 <HAL_SAI_ErrorCallback>:
        TransmitDataOverUART(temp);
    }
    TransmitDataOverUART("\n");
}

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
    uint32_t saiError = HAL_SAI_GetError(hsai);
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f003 fdf9 	bl	80042a8 <HAL_SAI_GetError>
 80006b6:	60f8      	str	r0, [r7, #12]
    DebugPrint("SAI Error: %lu\n", saiError);
 80006b8:	68f9      	ldr	r1, [r7, #12]
 80006ba:	4803      	ldr	r0, [pc, #12]	; (80006c8 <HAL_SAI_ErrorCallback+0x20>)
 80006bc:	f7ff ffc2 	bl	8000644 <DebugPrint>
}
 80006c0:	bf00      	nop
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	08006350 	.word	0x08006350

080006cc <DAC_write>:

    HAL_SAI_StateTypeDef saiState = HAL_SAI_GetState(&hsai_BlockA2);
    DebugPrint("SAI State: %d\n", saiState);
}

void DAC_write(uint16_t value) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	80fb      	strh	r3, [r7, #6]
    uint16_t spi_data = (value & 0x0FFF) | 0x3000;  // 12-bit value, OR 0x3000 sets the Gain and buffer in the DAC see page 18 of datasheet
 80006d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80006de:	b21b      	sxth	r3, r3
 80006e0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80006e4:	b21b      	sxth	r3, r3
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	81fb      	strh	r3, [r7, #14]
    //HAL_SPI_Transmit_IT(&hspi1, (uint8_t*)&spi_data, 1);
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&spi_data, 1, HAL_MAX_DELAY);
 80006ea:	f107 010e 	add.w	r1, r7, #14
 80006ee:	f04f 33ff 	mov.w	r3, #4294967295
 80006f2:	2201      	movs	r2, #1
 80006f4:	4803      	ldr	r0, [pc, #12]	; (8000704 <DAC_write+0x38>)
 80006f6:	f004 f894 	bl	8004822 <HAL_SPI_Transmit>
}
 80006fa:	bf00      	nop
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20001214 	.word	0x20001214

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070c:	f000 fccc 	bl	80010a8 <HAL_Init>
  void DAC_init();

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000710:	f000 f81a 	bl	8000748 <SystemClock_Config>
  // Start the timer

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000714:	f000 f9a4 	bl	8000a60 <MX_GPIO_Init>
  MX_DMA_Init();
 8000718:	f000 f974 	bl	8000a04 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800071c:	f000 f942 	bl	80009a4 <MX_USART2_UART_Init>
  MX_SAI2_Init();
 8000720:	f000 f874 	bl	800080c <MX_SAI2_Init>
  MX_SPI1_Init();
 8000724:	f000 f900 	bl	8000928 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  currentBuffer = audioBuffer1;
 8000728:	4b04      	ldr	r3, [pc, #16]	; (800073c <main+0x34>)
 800072a:	4a05      	ldr	r2, [pc, #20]	; (8000740 <main+0x38>)
 800072c:	601a      	str	r2, [r3, #0]
  //processingBuffer = audioBuffer2;

  HAL_SAI_Receive_DMA(&hsai_BlockA2, (uint8_t*)audioBuffer1, AUDIO_BUFFER_SIZE);
 800072e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000732:	4903      	ldr	r1, [pc, #12]	; (8000740 <main+0x38>)
 8000734:	4803      	ldr	r0, [pc, #12]	; (8000744 <main+0x3c>)
 8000736:	f003 fd29 	bl	800418c <HAL_SAI_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800073a:	e7fe      	b.n	800073a <main+0x32>
 800073c:	20001078 	.word	0x20001078
 8000740:	20000078 	.word	0x20000078
 8000744:	2000107c 	.word	0x2000107c

08000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b096      	sub	sp, #88	; 0x58
 800074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	2244      	movs	r2, #68	; 0x44
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f005 f950 	bl	80059fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075c:	463b      	mov	r3, r7
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800076a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800076e:	f001 f9e9 	bl	8001b44 <HAL_PWREx_ControlVoltageScaling>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000778:	f000 f9c4 	bl	8000b04 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800077c:	f001 f9c4 	bl	8001b08 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000780:	4b21      	ldr	r3, [pc, #132]	; (8000808 <SystemClock_Config+0xc0>)
 8000782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000786:	4a20      	ldr	r2, [pc, #128]	; (8000808 <SystemClock_Config+0xc0>)
 8000788:	f023 0318 	bic.w	r3, r3, #24
 800078c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000790:	2314      	movs	r3, #20
 8000792:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000794:	2301      	movs	r3, #1
 8000796:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000798:	2301      	movs	r3, #1
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80007a0:	23a0      	movs	r3, #160	; 0xa0
 80007a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a4:	2302      	movs	r3, #2
 80007a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007a8:	2301      	movs	r3, #1
 80007aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 5;
 80007ac:	2305      	movs	r3, #5
 80007ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 37;
 80007b0:	2325      	movs	r3, #37	; 0x25
 80007b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV17;
 80007b4:	2311      	movs	r3, #17
 80007b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007b8:	2302      	movs	r3, #2
 80007ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80007bc:	2304      	movs	r3, #4
 80007be:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4618      	mov	r0, r3
 80007c6:	f001 fa13 	bl	8001bf0 <HAL_RCC_OscConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80007d0:	f000 f998 	bl	8000b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d4:	230f      	movs	r3, #15
 80007d6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d8:	2303      	movs	r3, #3
 80007da:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007e8:	463b      	mov	r3, r7
 80007ea:	2103      	movs	r1, #3
 80007ec:	4618      	mov	r0, r3
 80007ee:	f001 fddb 	bl	80023a8 <HAL_RCC_ClockConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007f8:	f000 f984 	bl	8000b04 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007fc:	f003 f850 	bl	80038a0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000800:	bf00      	nop
 8000802:	3758      	adds	r7, #88	; 0x58
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40021000 	.word	0x40021000

0800080c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000810:	4b3f      	ldr	r3, [pc, #252]	; (8000910 <MX_SAI2_Init+0x104>)
 8000812:	4a40      	ldr	r2, [pc, #256]	; (8000914 <MX_SAI2_Init+0x108>)
 8000814:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_RX;
 8000816:	4b3e      	ldr	r3, [pc, #248]	; (8000910 <MX_SAI2_Init+0x104>)
 8000818:	2201      	movs	r2, #1
 800081a:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800081c:	4b3c      	ldr	r3, [pc, #240]	; (8000910 <MX_SAI2_Init+0x104>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000822:	4b3b      	ldr	r3, [pc, #236]	; (8000910 <MX_SAI2_Init+0x104>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000828:	4b39      	ldr	r3, [pc, #228]	; (8000910 <MX_SAI2_Init+0x104>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800082e:	4b38      	ldr	r3, [pc, #224]	; (8000910 <MX_SAI2_Init+0x104>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000834:	4b36      	ldr	r3, [pc, #216]	; (8000910 <MX_SAI2_Init+0x104>)
 8000836:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800083a:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800083c:	4b34      	ldr	r3, [pc, #208]	; (8000910 <MX_SAI2_Init+0x104>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_MONOMODE;
 8000842:	4b33      	ldr	r3, [pc, #204]	; (8000910 <MX_SAI2_Init+0x104>)
 8000844:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000848:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800084a:	4b31      	ldr	r3, [pc, #196]	; (8000910 <MX_SAI2_Init+0x104>)
 800084c:	2200      	movs	r2, #0
 800084e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 8000850:	2302      	movs	r3, #2
 8000852:	2203      	movs	r2, #3
 8000854:	2100      	movs	r1, #0
 8000856:	482e      	ldr	r0, [pc, #184]	; (8000910 <MX_SAI2_Init+0x104>)
 8000858:	f003 faf4 	bl	8003e44 <HAL_SAI_InitProtocol>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_SAI2_Init+0x5a>
  {
    Error_Handler();
 8000862:	f000 f94f 	bl	8000b04 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000866:	4b2c      	ldr	r3, [pc, #176]	; (8000918 <MX_SAI2_Init+0x10c>)
 8000868:	4a2c      	ldr	r2, [pc, #176]	; (800091c <MX_SAI2_Init+0x110>)
 800086a:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_TX;
 800086c:	4b2a      	ldr	r3, [pc, #168]	; (8000918 <MX_SAI2_Init+0x10c>)
 800086e:	2200      	movs	r2, #0
 8000870:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000872:	4b29      	ldr	r3, [pc, #164]	; (8000918 <MX_SAI2_Init+0x10c>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000878:	4b27      	ldr	r3, [pc, #156]	; (8000918 <MX_SAI2_Init+0x10c>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800087e:	4b26      	ldr	r3, [pc, #152]	; (8000918 <MX_SAI2_Init+0x10c>)
 8000880:	2200      	movs	r2, #0
 8000882:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000884:	4b24      	ldr	r3, [pc, #144]	; (8000918 <MX_SAI2_Init+0x10c>)
 8000886:	2200      	movs	r2, #0
 8000888:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800088a:	4b23      	ldr	r3, [pc, #140]	; (8000918 <MX_SAI2_Init+0x10c>)
 800088c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000890:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000892:	4b21      	ldr	r3, [pc, #132]	; (8000918 <MX_SAI2_Init+0x10c>)
 8000894:	2200      	movs	r2, #0
 8000896:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_MONOMODE;
 8000898:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <MX_SAI2_Init+0x10c>)
 800089a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800089e:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80008a0:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <MX_SAI2_Init+0x10c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <MX_SAI2_Init+0x10c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 80008ac:	2302      	movs	r3, #2
 80008ae:	2200      	movs	r2, #0
 80008b0:	2100      	movs	r1, #0
 80008b2:	4819      	ldr	r0, [pc, #100]	; (8000918 <MX_SAI2_Init+0x10c>)
 80008b4:	f003 fac6 	bl	8003e44 <HAL_SAI_InitProtocol>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_SAI2_Init+0xb6>
  {
    Error_Handler();
 80008be:	f000 f921 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  // Configure the DMA handler for reception process
  hdma_sai2_a.Instance                 = DMA1_Channel6;
 80008c2:	4b17      	ldr	r3, [pc, #92]	; (8000920 <MX_SAI2_Init+0x114>)
 80008c4:	4a17      	ldr	r2, [pc, #92]	; (8000924 <MX_SAI2_Init+0x118>)
 80008c6:	601a      	str	r2, [r3, #0]
  hdma_sai2_a.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80008c8:	4b15      	ldr	r3, [pc, #84]	; (8000920 <MX_SAI2_Init+0x114>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  hdma_sai2_a.Init.PeriphInc           = DMA_PINC_DISABLE;
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_SAI2_Init+0x114>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
  hdma_sai2_a.Init.MemInc              = DMA_MINC_ENABLE;
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <MX_SAI2_Init+0x114>)
 80008d6:	2280      	movs	r2, #128	; 0x80
 80008d8:	611a      	str	r2, [r3, #16]
  hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_SAI2_Init+0x114>)
 80008dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008e0:	615a      	str	r2, [r3, #20]
  hdma_sai2_a.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_SAI2_Init+0x114>)
 80008e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008e8:	619a      	str	r2, [r3, #24]
  hdma_sai2_a.Init.Mode                = DMA_CIRCULAR;
 80008ea:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <MX_SAI2_Init+0x114>)
 80008ec:	2220      	movs	r2, #32
 80008ee:	61da      	str	r2, [r3, #28]
  hdma_sai2_a.Init.Priority            = DMA_PRIORITY_HIGH;
 80008f0:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_SAI2_Init+0x114>)
 80008f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008f6:	621a      	str	r2, [r3, #32]

  HAL_DMA_Init(&hdma_sai2_a);
 80008f8:	4809      	ldr	r0, [pc, #36]	; (8000920 <MX_SAI2_Init+0x114>)
 80008fa:	f000 fd63 	bl	80013c4 <HAL_DMA_Init>

  // Associate the initialized DMA handle to the SAI handle
  __HAL_LINKDMA(&hsai_BlockA2, hdmarx, hdma_sai2_a);
 80008fe:	4b04      	ldr	r3, [pc, #16]	; (8000910 <MX_SAI2_Init+0x104>)
 8000900:	4a07      	ldr	r2, [pc, #28]	; (8000920 <MX_SAI2_Init+0x114>)
 8000902:	671a      	str	r2, [r3, #112]	; 0x70
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_SAI2_Init+0x114>)
 8000906:	4a02      	ldr	r2, [pc, #8]	; (8000910 <MX_SAI2_Init+0x104>)
 8000908:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE END SAI2_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	2000107c 	.word	0x2000107c
 8000914:	40015804 	.word	0x40015804
 8000918:	20001100 	.word	0x20001100
 800091c:	40015824 	.word	0x40015824
 8000920:	20001184 	.word	0x20001184
 8000924:	4002006c 	.word	0x4002006c

08000928 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800092c:	4b1b      	ldr	r3, [pc, #108]	; (800099c <MX_SPI1_Init+0x74>)
 800092e:	4a1c      	ldr	r2, [pc, #112]	; (80009a0 <MX_SPI1_Init+0x78>)
 8000930:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000932:	4b1a      	ldr	r3, [pc, #104]	; (800099c <MX_SPI1_Init+0x74>)
 8000934:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000938:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800093a:	4b18      	ldr	r3, [pc, #96]	; (800099c <MX_SPI1_Init+0x74>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000940:	4b16      	ldr	r3, [pc, #88]	; (800099c <MX_SPI1_Init+0x74>)
 8000942:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000946:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_SPI1_Init+0x74>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <MX_SPI1_Init+0x74>)
 8000950:	2200      	movs	r2, #0
 8000952:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_SPI1_Init+0x74>)
 8000956:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800095a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_SPI1_Init+0x74>)
 800095e:	2208      	movs	r2, #8
 8000960:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_SPI1_Init+0x74>)
 8000964:	2200      	movs	r2, #0
 8000966:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_SPI1_Init+0x74>)
 800096a:	2200      	movs	r2, #0
 800096c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_SPI1_Init+0x74>)
 8000970:	2200      	movs	r2, #0
 8000972:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_SPI1_Init+0x74>)
 8000976:	2207      	movs	r2, #7
 8000978:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_SPI1_Init+0x74>)
 800097c:	2200      	movs	r2, #0
 800097e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_SPI1_Init+0x74>)
 8000982:	2208      	movs	r2, #8
 8000984:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_SPI1_Init+0x74>)
 8000988:	f003 fea8 	bl	80046dc <HAL_SPI_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000992:	f000 f8b7 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20001214 	.word	0x20001214
 80009a0:	40013000 	.word	0x40013000

080009a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_USART2_UART_Init+0x58>)
 80009aa:	4a15      	ldr	r2, [pc, #84]	; (8000a00 <MX_USART2_UART_Init+0x5c>)
 80009ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_USART2_UART_Init+0x58>)
 80009b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_USART2_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MX_USART2_UART_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_USART2_UART_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_USART2_UART_Init+0x58>)
 80009ca:	220c      	movs	r2, #12
 80009cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MX_USART2_UART_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_USART2_UART_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <MX_USART2_UART_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_USART2_UART_Init+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_USART2_UART_Init+0x58>)
 80009e8:	f004 f9f4 	bl	8004dd4 <HAL_UART_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009f2:	f000 f887 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200012c0 	.word	0x200012c0
 8000a00:	40004400 	.word	0x40004400

08000a04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a0a:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <MX_DMA_Init+0x58>)
 8000a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a0e:	4a13      	ldr	r2, [pc, #76]	; (8000a5c <MX_DMA_Init+0x58>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6493      	str	r3, [r2, #72]	; 0x48
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <MX_DMA_Init+0x58>)
 8000a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	200d      	movs	r0, #13
 8000a28:	f000 fc95 	bl	8001356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000a2c:	200d      	movs	r0, #13
 8000a2e:	f000 fcae 	bl	800138e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2100      	movs	r1, #0
 8000a36:	2010      	movs	r0, #16
 8000a38:	f000 fc8d 	bl	8001356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000a3c:	2010      	movs	r0, #16
 8000a3e:	f000 fca6 	bl	800138e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2100      	movs	r1, #0
 8000a46:	2011      	movs	r0, #17
 8000a48:	f000 fc85 	bl	8001356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000a4c:	2011      	movs	r0, #17
 8000a4e:	f000 fc9e 	bl	800138e <HAL_NVIC_EnableIRQ>

}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40021000 	.word	0x40021000

08000a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a76:	4b21      	ldr	r3, [pc, #132]	; (8000afc <MX_GPIO_Init+0x9c>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	4a20      	ldr	r2, [pc, #128]	; (8000afc <MX_GPIO_Init+0x9c>)
 8000a7c:	f043 0304 	orr.w	r3, r3, #4
 8000a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a82:	4b1e      	ldr	r3, [pc, #120]	; (8000afc <MX_GPIO_Init+0x9c>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	f003 0304 	and.w	r3, r3, #4
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a8e:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <MX_GPIO_Init+0x9c>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	4a1a      	ldr	r2, [pc, #104]	; (8000afc <MX_GPIO_Init+0x9c>)
 8000a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9a:	4b18      	ldr	r3, [pc, #96]	; (8000afc <MX_GPIO_Init+0x9c>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <MX_GPIO_Init+0x9c>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	4a14      	ldr	r2, [pc, #80]	; (8000afc <MX_GPIO_Init+0x9c>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab2:	4b12      	ldr	r3, [pc, #72]	; (8000afc <MX_GPIO_Init+0x9c>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <MX_GPIO_Init+0x9c>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	4a0e      	ldr	r2, [pc, #56]	; (8000afc <MX_GPIO_Init+0x9c>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_GPIO_Init+0x9c>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ad6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000adc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <MX_GPIO_Init+0xa0>)
 8000aee:	f000 fe61 	bl	80017b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000af2:	bf00      	nop
 8000af4:	3728      	adds	r7, #40	; 0x28
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40021000 	.word	0x40021000
 8000b00:	48000800 	.word	0x48000800

08000b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b08:	b672      	cpsid	i
}
 8000b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <Error_Handler+0x8>
	...

08000b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <HAL_MspInit+0x44>)
 8000b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b1a:	4a0e      	ldr	r2, [pc, #56]	; (8000b54 <HAL_MspInit+0x44>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6613      	str	r3, [r2, #96]	; 0x60
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <HAL_MspInit+0x44>)
 8000b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <HAL_MspInit+0x44>)
 8000b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b32:	4a08      	ldr	r2, [pc, #32]	; (8000b54 <HAL_MspInit+0x44>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b38:	6593      	str	r3, [r2, #88]	; 0x58
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_MspInit+0x44>)
 8000b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40021000 	.word	0x40021000

08000b58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	; 0x28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a2d      	ldr	r2, [pc, #180]	; (8000c2c <HAL_SPI_MspInit+0xd4>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d153      	bne.n	8000c22 <HAL_SPI_MspInit+0xca>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b7a:	4b2d      	ldr	r3, [pc, #180]	; (8000c30 <HAL_SPI_MspInit+0xd8>)
 8000b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b7e:	4a2c      	ldr	r2, [pc, #176]	; (8000c30 <HAL_SPI_MspInit+0xd8>)
 8000b80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b84:	6613      	str	r3, [r2, #96]	; 0x60
 8000b86:	4b2a      	ldr	r3, [pc, #168]	; (8000c30 <HAL_SPI_MspInit+0xd8>)
 8000b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	4b27      	ldr	r3, [pc, #156]	; (8000c30 <HAL_SPI_MspInit+0xd8>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b96:	4a26      	ldr	r2, [pc, #152]	; (8000c30 <HAL_SPI_MspInit+0xd8>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9e:	4b24      	ldr	r3, [pc, #144]	; (8000c30 <HAL_SPI_MspInit+0xd8>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000baa:	23b0      	movs	r3, #176	; 0xb0
 8000bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bba:	2305      	movs	r3, #5
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc8:	f000 fdf4 	bl	80017b4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000bcc:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <HAL_SPI_MspInit+0xdc>)
 8000bce:	4a1a      	ldr	r2, [pc, #104]	; (8000c38 <HAL_SPI_MspInit+0xe0>)
 8000bd0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8000bd2:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <HAL_SPI_MspInit+0xdc>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bd8:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <HAL_SPI_MspInit+0xdc>)
 8000bda:	2210      	movs	r2, #16
 8000bdc:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <HAL_SPI_MspInit+0xdc>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000be4:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <HAL_SPI_MspInit+0xdc>)
 8000be6:	2280      	movs	r2, #128	; 0x80
 8000be8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bea:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <HAL_SPI_MspInit+0xdc>)
 8000bec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bf0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <HAL_SPI_MspInit+0xdc>)
 8000bf4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bf8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <HAL_SPI_MspInit+0xdc>)
 8000bfc:	2220      	movs	r2, #32
 8000bfe:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <HAL_SPI_MspInit+0xdc>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000c06:	480b      	ldr	r0, [pc, #44]	; (8000c34 <HAL_SPI_MspInit+0xdc>)
 8000c08:	f000 fbdc 	bl	80013c4 <HAL_DMA_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <HAL_SPI_MspInit+0xbe>
    {
      Error_Handler();
 8000c12:	f7ff ff77 	bl	8000b04 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a06      	ldr	r2, [pc, #24]	; (8000c34 <HAL_SPI_MspInit+0xdc>)
 8000c1a:	655a      	str	r2, [r3, #84]	; 0x54
 8000c1c:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <HAL_SPI_MspInit+0xdc>)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c22:	bf00      	nop
 8000c24:	3728      	adds	r7, #40	; 0x28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40013000 	.word	0x40013000
 8000c30:	40021000 	.word	0x40021000
 8000c34:	20001278 	.word	0x20001278
 8000c38:	40020030 	.word	0x40020030

08000c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b0ac      	sub	sp, #176	; 0xb0
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2288      	movs	r2, #136	; 0x88
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f004 fecd 	bl	80059fc <memset>
  if(huart->Instance==USART2)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a21      	ldr	r2, [pc, #132]	; (8000cec <HAL_UART_MspInit+0xb0>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d13b      	bne.n	8000ce4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c70:	2300      	movs	r3, #0
 8000c72:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f001 fdb9 	bl	80027f0 <HAL_RCCEx_PeriphCLKConfig>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c84:	f7ff ff3e 	bl	8000b04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c88:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <HAL_UART_MspInit+0xb4>)
 8000c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c8c:	4a18      	ldr	r2, [pc, #96]	; (8000cf0 <HAL_UART_MspInit+0xb4>)
 8000c8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c92:	6593      	str	r3, [r2, #88]	; 0x58
 8000c94:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <HAL_UART_MspInit+0xb4>)
 8000c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca0:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <HAL_UART_MspInit+0xb4>)
 8000ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca4:	4a12      	ldr	r2, [pc, #72]	; (8000cf0 <HAL_UART_MspInit+0xb4>)
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cac:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <HAL_UART_MspInit+0xb4>)
 8000cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb0:	f003 0301 	and.w	r3, r3, #1
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cb8:	230c      	movs	r3, #12
 8000cba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cd0:	2307      	movs	r3, #7
 8000cd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cda:	4619      	mov	r1, r3
 8000cdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce0:	f000 fd68 	bl	80017b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ce4:	bf00      	nop
 8000ce6:	37b0      	adds	r7, #176	; 0xb0
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40004400 	.word	0x40004400
 8000cf0:	40021000 	.word	0x40021000

08000cf4 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b0ac      	sub	sp, #176	; 0xb0
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2288      	movs	r2, #136	; 0x88
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f004 fe79 	bl	80059fc <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a7f      	ldr	r2, [pc, #508]	; (8000f0c <HAL_SAI_MspInit+0x218>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d16c      	bne.n	8000dee <HAL_SAI_MspInit+0xfa>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000d14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d18:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLL;
 8000d1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d1e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4618      	mov	r0, r3
 8000d26:	f001 fd63 	bl	80027f0 <HAL_RCCEx_PeriphCLKConfig>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <HAL_SAI_MspInit+0x40>
    {
      Error_Handler();
 8000d30:	f7ff fee8 	bl	8000b04 <Error_Handler>
    }

    if (SAI2_client == 0)
 8000d34:	4b76      	ldr	r3, [pc, #472]	; (8000f10 <HAL_SAI_MspInit+0x21c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d10b      	bne.n	8000d54 <HAL_SAI_MspInit+0x60>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000d3c:	4b75      	ldr	r3, [pc, #468]	; (8000f14 <HAL_SAI_MspInit+0x220>)
 8000d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d40:	4a74      	ldr	r2, [pc, #464]	; (8000f14 <HAL_SAI_MspInit+0x220>)
 8000d42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d46:	6613      	str	r3, [r2, #96]	; 0x60
 8000d48:	4b72      	ldr	r3, [pc, #456]	; (8000f14 <HAL_SAI_MspInit+0x220>)
 8000d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8000d54:	4b6e      	ldr	r3, [pc, #440]	; (8000f10 <HAL_SAI_MspInit+0x21c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	4a6d      	ldr	r2, [pc, #436]	; (8000f10 <HAL_SAI_MspInit+0x21c>)
 8000d5c:	6013      	str	r3, [r2, #0]
    /**SAI2_A_Block_A GPIO Configuration
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000d5e:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000d62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	2300      	movs	r3, #0
 8000d74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000d78:	230d      	movs	r3, #13
 8000d7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d82:	4619      	mov	r1, r3
 8000d84:	4864      	ldr	r0, [pc, #400]	; (8000f18 <HAL_SAI_MspInit+0x224>)
 8000d86:	f000 fd15 	bl	80017b4 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 8000d8a:	4b64      	ldr	r3, [pc, #400]	; (8000f1c <HAL_SAI_MspInit+0x228>)
 8000d8c:	4a64      	ldr	r2, [pc, #400]	; (8000f20 <HAL_SAI_MspInit+0x22c>)
 8000d8e:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8000d90:	4b62      	ldr	r3, [pc, #392]	; (8000f1c <HAL_SAI_MspInit+0x228>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d96:	4b61      	ldr	r3, [pc, #388]	; (8000f1c <HAL_SAI_MspInit+0x228>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d9c:	4b5f      	ldr	r3, [pc, #380]	; (8000f1c <HAL_SAI_MspInit+0x228>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8000da2:	4b5e      	ldr	r3, [pc, #376]	; (8000f1c <HAL_SAI_MspInit+0x228>)
 8000da4:	2280      	movs	r2, #128	; 0x80
 8000da6:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000da8:	4b5c      	ldr	r3, [pc, #368]	; (8000f1c <HAL_SAI_MspInit+0x228>)
 8000daa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dae:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000db0:	4b5a      	ldr	r3, [pc, #360]	; (8000f1c <HAL_SAI_MspInit+0x228>)
 8000db2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000db6:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8000db8:	4b58      	ldr	r3, [pc, #352]	; (8000f1c <HAL_SAI_MspInit+0x228>)
 8000dba:	2220      	movs	r2, #32
 8000dbc:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000dbe:	4b57      	ldr	r3, [pc, #348]	; (8000f1c <HAL_SAI_MspInit+0x228>)
 8000dc0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000dc4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8000dc6:	4855      	ldr	r0, [pc, #340]	; (8000f1c <HAL_SAI_MspInit+0x228>)
 8000dc8:	f000 fafc 	bl	80013c4 <HAL_DMA_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_SAI_MspInit+0xe2>
    {
      Error_Handler();
 8000dd2:	f7ff fe97 	bl	8000b04 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a50      	ldr	r2, [pc, #320]	; (8000f1c <HAL_SAI_MspInit+0x228>)
 8000dda:	671a      	str	r2, [r3, #112]	; 0x70
 8000ddc:	4a4f      	ldr	r2, [pc, #316]	; (8000f1c <HAL_SAI_MspInit+0x228>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6293      	str	r3, [r2, #40]	; 0x28

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a4d      	ldr	r2, [pc, #308]	; (8000f1c <HAL_SAI_MspInit+0x228>)
 8000de6:	66da      	str	r2, [r3, #108]	; 0x6c
 8000de8:	4a4c      	ldr	r2, [pc, #304]	; (8000f1c <HAL_SAI_MspInit+0x228>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6293      	str	r3, [r2, #40]	; 0x28

    }
    if(hsai->Instance==SAI2_Block_B)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a4c      	ldr	r2, [pc, #304]	; (8000f24 <HAL_SAI_MspInit+0x230>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	f040 8084 	bne.w	8000f02 <HAL_SAI_MspInit+0x20e>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000dfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dfe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLL;
 8000e00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e04:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e06:	f107 0314 	add.w	r3, r7, #20
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f001 fcf0 	bl	80027f0 <HAL_RCCEx_PeriphCLKConfig>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <HAL_SAI_MspInit+0x126>
    {
      Error_Handler();
 8000e16:	f7ff fe75 	bl	8000b04 <Error_Handler>
    }

      if (SAI2_client == 0)
 8000e1a:	4b3d      	ldr	r3, [pc, #244]	; (8000f10 <HAL_SAI_MspInit+0x21c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d10b      	bne.n	8000e3a <HAL_SAI_MspInit+0x146>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000e22:	4b3c      	ldr	r3, [pc, #240]	; (8000f14 <HAL_SAI_MspInit+0x220>)
 8000e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e26:	4a3b      	ldr	r2, [pc, #236]	; (8000f14 <HAL_SAI_MspInit+0x220>)
 8000e28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e2e:	4b39      	ldr	r3, [pc, #228]	; (8000f14 <HAL_SAI_MspInit+0x220>)
 8000e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8000e3a:	4b35      	ldr	r3, [pc, #212]	; (8000f10 <HAL_SAI_MspInit+0x21c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	4a33      	ldr	r2, [pc, #204]	; (8000f10 <HAL_SAI_MspInit+0x21c>)
 8000e42:	6013      	str	r3, [r2, #0]
    /**SAI2_B_Block_B GPIO Configuration
    PA15 (JTDI)     ------> SAI2_FS_B
    PC10     ------> SAI2_SCK_B
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000e5e:	230d      	movs	r3, #13
 8000e60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e64:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6e:	f000 fca1 	bl	80017b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000e72:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000e8c:	230d      	movs	r3, #13
 8000e8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e92:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e96:	4619      	mov	r1, r3
 8000e98:	4823      	ldr	r0, [pc, #140]	; (8000f28 <HAL_SAI_MspInit+0x234>)
 8000e9a:	f000 fc8b 	bl	80017b4 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Channel7;
 8000e9e:	4b23      	ldr	r3, [pc, #140]	; (8000f2c <HAL_SAI_MspInit+0x238>)
 8000ea0:	4a23      	ldr	r2, [pc, #140]	; (8000f30 <HAL_SAI_MspInit+0x23c>)
 8000ea2:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_1;
 8000ea4:	4b21      	ldr	r3, [pc, #132]	; (8000f2c <HAL_SAI_MspInit+0x238>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000eaa:	4b20      	ldr	r3, [pc, #128]	; (8000f2c <HAL_SAI_MspInit+0x238>)
 8000eac:	2210      	movs	r2, #16
 8000eae:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eb0:	4b1e      	ldr	r3, [pc, #120]	; (8000f2c <HAL_SAI_MspInit+0x238>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <HAL_SAI_MspInit+0x238>)
 8000eb8:	2280      	movs	r2, #128	; 0x80
 8000eba:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <HAL_SAI_MspInit+0x238>)
 8000ebe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ec2:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ec4:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <HAL_SAI_MspInit+0x238>)
 8000ec6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000eca:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8000ecc:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <HAL_SAI_MspInit+0x238>)
 8000ece:	2220      	movs	r2, #32
 8000ed0:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000ed2:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <HAL_SAI_MspInit+0x238>)
 8000ed4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000ed8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8000eda:	4814      	ldr	r0, [pc, #80]	; (8000f2c <HAL_SAI_MspInit+0x238>)
 8000edc:	f000 fa72 	bl	80013c4 <HAL_DMA_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_SAI_MspInit+0x1f6>
    {
      Error_Handler();
 8000ee6:	f7ff fe0d 	bl	8000b04 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a0f      	ldr	r2, [pc, #60]	; (8000f2c <HAL_SAI_MspInit+0x238>)
 8000eee:	671a      	str	r2, [r3, #112]	; 0x70
 8000ef0:	4a0e      	ldr	r2, [pc, #56]	; (8000f2c <HAL_SAI_MspInit+0x238>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a0c      	ldr	r2, [pc, #48]	; (8000f2c <HAL_SAI_MspInit+0x238>)
 8000efa:	66da      	str	r2, [r3, #108]	; 0x6c
 8000efc:	4a0b      	ldr	r2, [pc, #44]	; (8000f2c <HAL_SAI_MspInit+0x238>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6293      	str	r3, [r2, #40]	; 0x28
    }
}
 8000f02:	bf00      	nop
 8000f04:	37b0      	adds	r7, #176	; 0xb0
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40015804 	.word	0x40015804
 8000f10:	20001348 	.word	0x20001348
 8000f14:	40021000 	.word	0x40021000
 8000f18:	48000400 	.word	0x48000400
 8000f1c:	20001184 	.word	0x20001184
 8000f20:	4002006c 	.word	0x4002006c
 8000f24:	40015824 	.word	0x40015824
 8000f28:	48000800 	.word	0x48000800
 8000f2c:	200011cc 	.word	0x200011cc
 8000f30:	40020080 	.word	0x40020080

08000f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <NMI_Handler+0x4>

08000f3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <HardFault_Handler+0x4>

08000f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <MemManage_Handler+0x4>

08000f46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <BusFault_Handler+0x4>

08000f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <UsageFault_Handler+0x4>

08000f52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f80:	f000 f8ee 	bl	8001160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <DMA1_Channel3_IRQHandler+0x10>)
 8000f8e:	f000 fb31 	bl	80015f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20001278 	.word	0x20001278

08000f9c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8000fa0:	4802      	ldr	r0, [pc, #8]	; (8000fac <DMA1_Channel6_IRQHandler+0x10>)
 8000fa2:	f000 fb27 	bl	80015f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20001184 	.word	0x20001184

08000fb0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8000fb4:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <DMA1_Channel7_IRQHandler+0x10>)
 8000fb6:	f000 fb1d 	bl	80015f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200011cc 	.word	0x200011cc

08000fc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fcc:	4a14      	ldr	r2, [pc, #80]	; (8001020 <_sbrk+0x5c>)
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <_sbrk+0x60>)
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <_sbrk+0x64>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d102      	bne.n	8000fe6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <_sbrk+0x64>)
 8000fe2:	4a12      	ldr	r2, [pc, #72]	; (800102c <_sbrk+0x68>)
 8000fe4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <_sbrk+0x64>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d207      	bcs.n	8001004 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff4:	f004 fd0a 	bl	8005a0c <__errno>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8001002:	e009      	b.n	8001018 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800100a:	4b07      	ldr	r3, [pc, #28]	; (8001028 <_sbrk+0x64>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	4a05      	ldr	r2, [pc, #20]	; (8001028 <_sbrk+0x64>)
 8001014:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001016:	68fb      	ldr	r3, [r7, #12]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20018000 	.word	0x20018000
 8001024:	00000400 	.word	0x00000400
 8001028:	2000134c 	.word	0x2000134c
 800102c:	200014a0 	.word	0x200014a0

08001030 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <SystemInit+0x20>)
 8001036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800103a:	4a05      	ldr	r2, [pc, #20]	; (8001050 <SystemInit+0x20>)
 800103c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001040:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001054:	f8df d034 	ldr.w	sp, [pc, #52]	; 800108c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001058:	f7ff ffea 	bl	8001030 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800105c:	480c      	ldr	r0, [pc, #48]	; (8001090 <LoopForever+0x6>)
  ldr r1, =_edata
 800105e:	490d      	ldr	r1, [pc, #52]	; (8001094 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001060:	4a0d      	ldr	r2, [pc, #52]	; (8001098 <LoopForever+0xe>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001064:	e002      	b.n	800106c <LoopCopyDataInit>

08001066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106a:	3304      	adds	r3, #4

0800106c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800106c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001070:	d3f9      	bcc.n	8001066 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001072:	4a0a      	ldr	r2, [pc, #40]	; (800109c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001074:	4c0a      	ldr	r4, [pc, #40]	; (80010a0 <LoopForever+0x16>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001078:	e001      	b.n	800107e <LoopFillZerobss>

0800107a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800107c:	3204      	adds	r2, #4

0800107e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001080:	d3fb      	bcc.n	800107a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001082:	f004 fcc9 	bl	8005a18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001086:	f7ff fb3f 	bl	8000708 <main>

0800108a <LoopForever>:

LoopForever:
    b LoopForever
 800108a:	e7fe      	b.n	800108a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800108c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001094:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001098:	0800641c 	.word	0x0800641c
  ldr r2, =_sbss
 800109c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80010a0:	2000149c 	.word	0x2000149c

080010a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010a4:	e7fe      	b.n	80010a4 <ADC1_2_IRQHandler>
	...

080010a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010ae:	2300      	movs	r3, #0
 80010b0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <HAL_Init+0x3c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a0b      	ldr	r2, [pc, #44]	; (80010e4 <HAL_Init+0x3c>)
 80010b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010bc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010be:	2003      	movs	r0, #3
 80010c0:	f000 f93e 	bl	8001340 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010c4:	2000      	movs	r0, #0
 80010c6:	f000 f80f 	bl	80010e8 <HAL_InitTick>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d002      	beq.n	80010d6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	71fb      	strb	r3, [r7, #7]
 80010d4:	e001      	b.n	80010da <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010d6:	f7ff fd1b 	bl	8000b10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010da:	79fb      	ldrb	r3, [r7, #7]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40022000 	.word	0x40022000

080010e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010f0:	2300      	movs	r3, #0
 80010f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <HAL_InitTick+0x6c>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d023      	beq.n	8001144 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010fc:	4b16      	ldr	r3, [pc, #88]	; (8001158 <HAL_InitTick+0x70>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <HAL_InitTick+0x6c>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4619      	mov	r1, r3
 8001106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800110a:	fbb3 f3f1 	udiv	r3, r3, r1
 800110e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001112:	4618      	mov	r0, r3
 8001114:	f000 f949 	bl	80013aa <HAL_SYSTICK_Config>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d10f      	bne.n	800113e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b0f      	cmp	r3, #15
 8001122:	d809      	bhi.n	8001138 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001124:	2200      	movs	r2, #0
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	f000 f913 	bl	8001356 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001130:	4a0a      	ldr	r2, [pc, #40]	; (800115c <HAL_InitTick+0x74>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	e007      	b.n	8001148 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	73fb      	strb	r3, [r7, #15]
 800113c:	e004      	b.n	8001148 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	73fb      	strb	r3, [r7, #15]
 8001142:	e001      	b.n	8001148 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001148:	7bfb      	ldrb	r3, [r7, #15]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000008 	.word	0x20000008
 8001158:	20000000 	.word	0x20000000
 800115c:	20000004 	.word	0x20000004

08001160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_IncTick+0x20>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_IncTick+0x24>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4413      	add	r3, r2
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <HAL_IncTick+0x24>)
 8001172:	6013      	str	r3, [r2, #0]
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000008 	.word	0x20000008
 8001184:	20001350 	.word	0x20001350

08001188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return uwTick;
 800118c:	4b03      	ldr	r3, [pc, #12]	; (800119c <HAL_GetTick+0x14>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20001350 	.word	0x20001350

080011a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011bc:	4013      	ands	r3, r2
 80011be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011d2:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	60d3      	str	r3, [r2, #12]
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ec:	4b04      	ldr	r3, [pc, #16]	; (8001200 <__NVIC_GetPriorityGrouping+0x18>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	0a1b      	lsrs	r3, r3, #8
 80011f2:	f003 0307 	and.w	r3, r3, #7
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	2b00      	cmp	r3, #0
 8001214:	db0b      	blt.n	800122e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	f003 021f 	and.w	r2, r3, #31
 800121c:	4907      	ldr	r1, [pc, #28]	; (800123c <__NVIC_EnableIRQ+0x38>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	095b      	lsrs	r3, r3, #5
 8001224:	2001      	movs	r0, #1
 8001226:	fa00 f202 	lsl.w	r2, r0, r2
 800122a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000e100 	.word	0xe000e100

08001240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	6039      	str	r1, [r7, #0]
 800124a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001250:	2b00      	cmp	r3, #0
 8001252:	db0a      	blt.n	800126a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	b2da      	uxtb	r2, r3
 8001258:	490c      	ldr	r1, [pc, #48]	; (800128c <__NVIC_SetPriority+0x4c>)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	0112      	lsls	r2, r2, #4
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	440b      	add	r3, r1
 8001264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001268:	e00a      	b.n	8001280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4908      	ldr	r1, [pc, #32]	; (8001290 <__NVIC_SetPriority+0x50>)
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	3b04      	subs	r3, #4
 8001278:	0112      	lsls	r2, r2, #4
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	440b      	add	r3, r1
 800127e:	761a      	strb	r2, [r3, #24]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000e100 	.word	0xe000e100
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001294:	b480      	push	{r7}
 8001296:	b089      	sub	sp, #36	; 0x24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f1c3 0307 	rsb	r3, r3, #7
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	bf28      	it	cs
 80012b2:	2304      	movcs	r3, #4
 80012b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3304      	adds	r3, #4
 80012ba:	2b06      	cmp	r3, #6
 80012bc:	d902      	bls.n	80012c4 <NVIC_EncodePriority+0x30>
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3b03      	subs	r3, #3
 80012c2:	e000      	b.n	80012c6 <NVIC_EncodePriority+0x32>
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	f04f 32ff 	mov.w	r2, #4294967295
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43da      	mvns	r2, r3
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	401a      	ands	r2, r3
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012dc:	f04f 31ff 	mov.w	r1, #4294967295
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	fa01 f303 	lsl.w	r3, r1, r3
 80012e6:	43d9      	mvns	r1, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ec:	4313      	orrs	r3, r2
         );
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3724      	adds	r7, #36	; 0x24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
	...

080012fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800130c:	d301      	bcc.n	8001312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800130e:	2301      	movs	r3, #1
 8001310:	e00f      	b.n	8001332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001312:	4a0a      	ldr	r2, [pc, #40]	; (800133c <SysTick_Config+0x40>)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800131a:	210f      	movs	r1, #15
 800131c:	f04f 30ff 	mov.w	r0, #4294967295
 8001320:	f7ff ff8e 	bl	8001240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <SysTick_Config+0x40>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132a:	4b04      	ldr	r3, [pc, #16]	; (800133c <SysTick_Config+0x40>)
 800132c:	2207      	movs	r2, #7
 800132e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	e000e010 	.word	0xe000e010

08001340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff ff29 	bl	80011a0 <__NVIC_SetPriorityGrouping>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b086      	sub	sp, #24
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607a      	str	r2, [r7, #4]
 8001362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001368:	f7ff ff3e 	bl	80011e8 <__NVIC_GetPriorityGrouping>
 800136c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	68b9      	ldr	r1, [r7, #8]
 8001372:	6978      	ldr	r0, [r7, #20]
 8001374:	f7ff ff8e 	bl	8001294 <NVIC_EncodePriority>
 8001378:	4602      	mov	r2, r0
 800137a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff5d 	bl	8001240 <__NVIC_SetPriority>
}
 8001386:	bf00      	nop
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	4603      	mov	r3, r0
 8001396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff31 	bl	8001204 <__NVIC_EnableIRQ>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ffa2 	bl	80012fc <SysTick_Config>
 80013b8:	4603      	mov	r3, r0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e098      	b.n	8001508 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	461a      	mov	r2, r3
 80013dc:	4b4d      	ldr	r3, [pc, #308]	; (8001514 <HAL_DMA_Init+0x150>)
 80013de:	429a      	cmp	r2, r3
 80013e0:	d80f      	bhi.n	8001402 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	4b4b      	ldr	r3, [pc, #300]	; (8001518 <HAL_DMA_Init+0x154>)
 80013ea:	4413      	add	r3, r2
 80013ec:	4a4b      	ldr	r2, [pc, #300]	; (800151c <HAL_DMA_Init+0x158>)
 80013ee:	fba2 2303 	umull	r2, r3, r2, r3
 80013f2:	091b      	lsrs	r3, r3, #4
 80013f4:	009a      	lsls	r2, r3, #2
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a48      	ldr	r2, [pc, #288]	; (8001520 <HAL_DMA_Init+0x15c>)
 80013fe:	641a      	str	r2, [r3, #64]	; 0x40
 8001400:	e00e      	b.n	8001420 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	4b46      	ldr	r3, [pc, #280]	; (8001524 <HAL_DMA_Init+0x160>)
 800140a:	4413      	add	r3, r2
 800140c:	4a43      	ldr	r2, [pc, #268]	; (800151c <HAL_DMA_Init+0x158>)
 800140e:	fba2 2303 	umull	r2, r3, r2, r3
 8001412:	091b      	lsrs	r3, r3, #4
 8001414:	009a      	lsls	r2, r3, #2
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a42      	ldr	r2, [pc, #264]	; (8001528 <HAL_DMA_Init+0x164>)
 800141e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2202      	movs	r2, #2
 8001424:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800143a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001444:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001450:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800145c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	4313      	orrs	r3, r2
 8001468:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800147a:	d039      	beq.n	80014f0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	4a27      	ldr	r2, [pc, #156]	; (8001520 <HAL_DMA_Init+0x15c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d11a      	bne.n	80014bc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001486:	4b29      	ldr	r3, [pc, #164]	; (800152c <HAL_DMA_Init+0x168>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	f003 031c 	and.w	r3, r3, #28
 8001492:	210f      	movs	r1, #15
 8001494:	fa01 f303 	lsl.w	r3, r1, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	4924      	ldr	r1, [pc, #144]	; (800152c <HAL_DMA_Init+0x168>)
 800149c:	4013      	ands	r3, r2
 800149e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80014a0:	4b22      	ldr	r3, [pc, #136]	; (800152c <HAL_DMA_Init+0x168>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6859      	ldr	r1, [r3, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ac:	f003 031c 	and.w	r3, r3, #28
 80014b0:	fa01 f303 	lsl.w	r3, r1, r3
 80014b4:	491d      	ldr	r1, [pc, #116]	; (800152c <HAL_DMA_Init+0x168>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	600b      	str	r3, [r1, #0]
 80014ba:	e019      	b.n	80014f0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80014bc:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <HAL_DMA_Init+0x16c>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c4:	f003 031c 	and.w	r3, r3, #28
 80014c8:	210f      	movs	r1, #15
 80014ca:	fa01 f303 	lsl.w	r3, r1, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	4917      	ldr	r1, [pc, #92]	; (8001530 <HAL_DMA_Init+0x16c>)
 80014d2:	4013      	ands	r3, r2
 80014d4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80014d6:	4b16      	ldr	r3, [pc, #88]	; (8001530 <HAL_DMA_Init+0x16c>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6859      	ldr	r1, [r3, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e2:	f003 031c 	and.w	r3, r3, #28
 80014e6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ea:	4911      	ldr	r1, [pc, #68]	; (8001530 <HAL_DMA_Init+0x16c>)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	40020407 	.word	0x40020407
 8001518:	bffdfff8 	.word	0xbffdfff8
 800151c:	cccccccd 	.word	0xcccccccd
 8001520:	40020000 	.word	0x40020000
 8001524:	bffdfbf8 	.word	0xbffdfbf8
 8001528:	40020400 	.word	0x40020400
 800152c:	400200a8 	.word	0x400200a8
 8001530:	400204a8 	.word	0x400204a8

08001534 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
 8001540:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800154c:	2b01      	cmp	r3, #1
 800154e:	d101      	bne.n	8001554 <HAL_DMA_Start_IT+0x20>
 8001550:	2302      	movs	r3, #2
 8001552:	e04b      	b.n	80015ec <HAL_DMA_Start_IT+0xb8>
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b01      	cmp	r3, #1
 8001566:	d13a      	bne.n	80015de <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2202      	movs	r2, #2
 800156c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2200      	movs	r2, #0
 8001574:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0201 	bic.w	r2, r2, #1
 8001584:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	68b9      	ldr	r1, [r7, #8]
 800158c:	68f8      	ldr	r0, [r7, #12]
 800158e:	f000 f8e0 	bl	8001752 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	2b00      	cmp	r3, #0
 8001598:	d008      	beq.n	80015ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f042 020e 	orr.w	r2, r2, #14
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	e00f      	b.n	80015cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0204 	bic.w	r2, r2, #4
 80015ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f042 020a 	orr.w	r2, r2, #10
 80015ca:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f042 0201 	orr.w	r2, r2, #1
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	e005      	b.n	80015ea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80015e6:	2302      	movs	r3, #2
 80015e8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80015ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001610:	f003 031c 	and.w	r3, r3, #28
 8001614:	2204      	movs	r2, #4
 8001616:	409a      	lsls	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4013      	ands	r3, r2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d026      	beq.n	800166e <HAL_DMA_IRQHandler+0x7a>
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	f003 0304 	and.w	r3, r3, #4
 8001626:	2b00      	cmp	r3, #0
 8001628:	d021      	beq.n	800166e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0320 	and.w	r3, r3, #32
 8001634:	2b00      	cmp	r3, #0
 8001636:	d107      	bne.n	8001648 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f022 0204 	bic.w	r2, r2, #4
 8001646:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164c:	f003 021c 	and.w	r2, r3, #28
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	2104      	movs	r1, #4
 8001656:	fa01 f202 	lsl.w	r2, r1, r2
 800165a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001660:	2b00      	cmp	r3, #0
 8001662:	d071      	beq.n	8001748 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800166c:	e06c      	b.n	8001748 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	f003 031c 	and.w	r3, r3, #28
 8001676:	2202      	movs	r2, #2
 8001678:	409a      	lsls	r2, r3
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	4013      	ands	r3, r2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d02e      	beq.n	80016e0 <HAL_DMA_IRQHandler+0xec>
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d029      	beq.n	80016e0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0320 	and.w	r3, r3, #32
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10b      	bne.n	80016b2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 020a 	bic.w	r2, r2, #10
 80016a8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2201      	movs	r2, #1
 80016ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	f003 021c 	and.w	r2, r3, #28
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	2102      	movs	r1, #2
 80016c0:	fa01 f202 	lsl.w	r2, r1, r2
 80016c4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d038      	beq.n	8001748 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80016de:	e033      	b.n	8001748 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e4:	f003 031c 	and.w	r3, r3, #28
 80016e8:	2208      	movs	r2, #8
 80016ea:	409a      	lsls	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4013      	ands	r3, r2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d02a      	beq.n	800174a <HAL_DMA_IRQHandler+0x156>
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d025      	beq.n	800174a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 020e 	bic.w	r2, r2, #14
 800170c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	f003 021c 	and.w	r2, r3, #28
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	2101      	movs	r1, #1
 800171c:	fa01 f202 	lsl.w	r2, r1, r2
 8001720:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800173c:	2b00      	cmp	r3, #0
 800173e:	d004      	beq.n	800174a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001748:	bf00      	nop
 800174a:	bf00      	nop
}
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001752:	b480      	push	{r7}
 8001754:	b085      	sub	sp, #20
 8001756:	af00      	add	r7, sp, #0
 8001758:	60f8      	str	r0, [r7, #12]
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	607a      	str	r2, [r7, #4]
 800175e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001764:	f003 021c 	and.w	r2, r3, #28
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	2101      	movs	r1, #1
 800176e:	fa01 f202 	lsl.w	r2, r1, r2
 8001772:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	2b10      	cmp	r3, #16
 8001782:	d108      	bne.n	8001796 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	68ba      	ldr	r2, [r7, #8]
 8001792:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001794:	e007      	b.n	80017a6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	60da      	str	r2, [r3, #12]
}
 80017a6:	bf00      	nop
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
	...

080017b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c2:	e17f      	b.n	8001ac4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	2101      	movs	r1, #1
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	fa01 f303 	lsl.w	r3, r1, r3
 80017d0:	4013      	ands	r3, r2
 80017d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 8171 	beq.w	8001abe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d005      	beq.n	80017f4 <HAL_GPIO_Init+0x40>
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 0303 	and.w	r3, r3, #3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d130      	bne.n	8001856 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	2203      	movs	r2, #3
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	4013      	ands	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	68da      	ldr	r2, [r3, #12]
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4313      	orrs	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800182a:	2201      	movs	r2, #1
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43db      	mvns	r3, r3
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	4013      	ands	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	091b      	lsrs	r3, r3, #4
 8001840:	f003 0201 	and.w	r2, r3, #1
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f003 0303 	and.w	r3, r3, #3
 800185e:	2b03      	cmp	r3, #3
 8001860:	d118      	bne.n	8001894 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001866:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001868:	2201      	movs	r2, #1
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	08db      	lsrs	r3, r3, #3
 800187e:	f003 0201 	and.w	r2, r3, #1
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	4313      	orrs	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 0303 	and.w	r3, r3, #3
 800189c:	2b03      	cmp	r3, #3
 800189e:	d017      	beq.n	80018d0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	2203      	movs	r2, #3
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	4013      	ands	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d123      	bne.n	8001924 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	08da      	lsrs	r2, r3, #3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3208      	adds	r2, #8
 80018e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f003 0307 	and.w	r3, r3, #7
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	220f      	movs	r2, #15
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	4013      	ands	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	691a      	ldr	r2, [r3, #16]
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	4313      	orrs	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	08da      	lsrs	r2, r3, #3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3208      	adds	r2, #8
 800191e:	6939      	ldr	r1, [r7, #16]
 8001920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	2203      	movs	r2, #3
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4013      	ands	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0203 	and.w	r2, r3, #3
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	4313      	orrs	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001960:	2b00      	cmp	r3, #0
 8001962:	f000 80ac 	beq.w	8001abe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001966:	4b5f      	ldr	r3, [pc, #380]	; (8001ae4 <HAL_GPIO_Init+0x330>)
 8001968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800196a:	4a5e      	ldr	r2, [pc, #376]	; (8001ae4 <HAL_GPIO_Init+0x330>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6613      	str	r3, [r2, #96]	; 0x60
 8001972:	4b5c      	ldr	r3, [pc, #368]	; (8001ae4 <HAL_GPIO_Init+0x330>)
 8001974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800197e:	4a5a      	ldr	r2, [pc, #360]	; (8001ae8 <HAL_GPIO_Init+0x334>)
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	089b      	lsrs	r3, r3, #2
 8001984:	3302      	adds	r3, #2
 8001986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800198a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	220f      	movs	r2, #15
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	4013      	ands	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019a8:	d025      	beq.n	80019f6 <HAL_GPIO_Init+0x242>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a4f      	ldr	r2, [pc, #316]	; (8001aec <HAL_GPIO_Init+0x338>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d01f      	beq.n	80019f2 <HAL_GPIO_Init+0x23e>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a4e      	ldr	r2, [pc, #312]	; (8001af0 <HAL_GPIO_Init+0x33c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d019      	beq.n	80019ee <HAL_GPIO_Init+0x23a>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a4d      	ldr	r2, [pc, #308]	; (8001af4 <HAL_GPIO_Init+0x340>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d013      	beq.n	80019ea <HAL_GPIO_Init+0x236>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a4c      	ldr	r2, [pc, #304]	; (8001af8 <HAL_GPIO_Init+0x344>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d00d      	beq.n	80019e6 <HAL_GPIO_Init+0x232>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a4b      	ldr	r2, [pc, #300]	; (8001afc <HAL_GPIO_Init+0x348>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d007      	beq.n	80019e2 <HAL_GPIO_Init+0x22e>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a4a      	ldr	r2, [pc, #296]	; (8001b00 <HAL_GPIO_Init+0x34c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d101      	bne.n	80019de <HAL_GPIO_Init+0x22a>
 80019da:	2306      	movs	r3, #6
 80019dc:	e00c      	b.n	80019f8 <HAL_GPIO_Init+0x244>
 80019de:	2307      	movs	r3, #7
 80019e0:	e00a      	b.n	80019f8 <HAL_GPIO_Init+0x244>
 80019e2:	2305      	movs	r3, #5
 80019e4:	e008      	b.n	80019f8 <HAL_GPIO_Init+0x244>
 80019e6:	2304      	movs	r3, #4
 80019e8:	e006      	b.n	80019f8 <HAL_GPIO_Init+0x244>
 80019ea:	2303      	movs	r3, #3
 80019ec:	e004      	b.n	80019f8 <HAL_GPIO_Init+0x244>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e002      	b.n	80019f8 <HAL_GPIO_Init+0x244>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <HAL_GPIO_Init+0x244>
 80019f6:	2300      	movs	r3, #0
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	f002 0203 	and.w	r2, r2, #3
 80019fe:	0092      	lsls	r2, r2, #2
 8001a00:	4093      	lsls	r3, r2
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a08:	4937      	ldr	r1, [pc, #220]	; (8001ae8 <HAL_GPIO_Init+0x334>)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	089b      	lsrs	r3, r3, #2
 8001a0e:	3302      	adds	r3, #2
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a16:	4b3b      	ldr	r3, [pc, #236]	; (8001b04 <HAL_GPIO_Init+0x350>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4013      	ands	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a3a:	4a32      	ldr	r2, [pc, #200]	; (8001b04 <HAL_GPIO_Init+0x350>)
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a40:	4b30      	ldr	r3, [pc, #192]	; (8001b04 <HAL_GPIO_Init+0x350>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a64:	4a27      	ldr	r2, [pc, #156]	; (8001b04 <HAL_GPIO_Init+0x350>)
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a6a:	4b26      	ldr	r3, [pc, #152]	; (8001b04 <HAL_GPIO_Init+0x350>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	43db      	mvns	r3, r3
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4013      	ands	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a8e:	4a1d      	ldr	r2, [pc, #116]	; (8001b04 <HAL_GPIO_Init+0x350>)
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a94:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <HAL_GPIO_Init+0x350>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ab8:	4a12      	ldr	r2, [pc, #72]	; (8001b04 <HAL_GPIO_Init+0x350>)
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	fa22 f303 	lsr.w	r3, r2, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f47f ae78 	bne.w	80017c4 <HAL_GPIO_Init+0x10>
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	bf00      	nop
 8001ad8:	371c      	adds	r7, #28
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40010000 	.word	0x40010000
 8001aec:	48000400 	.word	0x48000400
 8001af0:	48000800 	.word	0x48000800
 8001af4:	48000c00 	.word	0x48000c00
 8001af8:	48001000 	.word	0x48001000
 8001afc:	48001400 	.word	0x48001400
 8001b00:	48001800 	.word	0x48001800
 8001b04:	40010400 	.word	0x40010400

08001b08 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b0c:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a04      	ldr	r2, [pc, #16]	; (8001b24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b16:	6013      	str	r3, [r2, #0]
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	40007000 	.word	0x40007000

08001b28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b2c:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40007000 	.word	0x40007000

08001b44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b52:	d130      	bne.n	8001bb6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b54:	4b23      	ldr	r3, [pc, #140]	; (8001be4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b60:	d038      	beq.n	8001bd4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b62:	4b20      	ldr	r3, [pc, #128]	; (8001be4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b6a:	4a1e      	ldr	r2, [pc, #120]	; (8001be4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b70:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b72:	4b1d      	ldr	r3, [pc, #116]	; (8001be8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2232      	movs	r2, #50	; 0x32
 8001b78:	fb02 f303 	mul.w	r3, r2, r3
 8001b7c:	4a1b      	ldr	r2, [pc, #108]	; (8001bec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b82:	0c9b      	lsrs	r3, r3, #18
 8001b84:	3301      	adds	r3, #1
 8001b86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b88:	e002      	b.n	8001b90 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b90:	4b14      	ldr	r3, [pc, #80]	; (8001be4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b9c:	d102      	bne.n	8001ba4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1f2      	bne.n	8001b8a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bb0:	d110      	bne.n	8001bd4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e00f      	b.n	8001bd6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bc2:	d007      	beq.n	8001bd4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bc4:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bcc:	4a05      	ldr	r2, [pc, #20]	; (8001be4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bd2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	40007000 	.word	0x40007000
 8001be8:	20000000 	.word	0x20000000
 8001bec:	431bde83 	.word	0x431bde83

08001bf0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b088      	sub	sp, #32
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e3ca      	b.n	8002398 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c02:	4b97      	ldr	r3, [pc, #604]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c0c:	4b94      	ldr	r3, [pc, #592]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	f003 0303 	and.w	r3, r3, #3
 8001c14:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0310 	and.w	r3, r3, #16
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 80e4 	beq.w	8001dec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d007      	beq.n	8001c3a <HAL_RCC_OscConfig+0x4a>
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	2b0c      	cmp	r3, #12
 8001c2e:	f040 808b 	bne.w	8001d48 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	f040 8087 	bne.w	8001d48 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c3a:	4b89      	ldr	r3, [pc, #548]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d005      	beq.n	8001c52 <HAL_RCC_OscConfig+0x62>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e3a2      	b.n	8002398 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a1a      	ldr	r2, [r3, #32]
 8001c56:	4b82      	ldr	r3, [pc, #520]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d004      	beq.n	8001c6c <HAL_RCC_OscConfig+0x7c>
 8001c62:	4b7f      	ldr	r3, [pc, #508]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c6a:	e005      	b.n	8001c78 <HAL_RCC_OscConfig+0x88>
 8001c6c:	4b7c      	ldr	r3, [pc, #496]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001c6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c72:	091b      	lsrs	r3, r3, #4
 8001c74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d223      	bcs.n	8001cc4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f000 fd55 	bl	8002730 <RCC_SetFlashLatencyFromMSIRange>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e383      	b.n	8002398 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c90:	4b73      	ldr	r3, [pc, #460]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a72      	ldr	r2, [pc, #456]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001c96:	f043 0308 	orr.w	r3, r3, #8
 8001c9a:	6013      	str	r3, [r2, #0]
 8001c9c:	4b70      	ldr	r3, [pc, #448]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	496d      	ldr	r1, [pc, #436]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cae:	4b6c      	ldr	r3, [pc, #432]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	021b      	lsls	r3, r3, #8
 8001cbc:	4968      	ldr	r1, [pc, #416]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	604b      	str	r3, [r1, #4]
 8001cc2:	e025      	b.n	8001d10 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cc4:	4b66      	ldr	r3, [pc, #408]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a65      	ldr	r2, [pc, #404]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001cca:	f043 0308 	orr.w	r3, r3, #8
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	4b63      	ldr	r3, [pc, #396]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	4960      	ldr	r1, [pc, #384]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ce2:	4b5f      	ldr	r3, [pc, #380]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	021b      	lsls	r3, r3, #8
 8001cf0:	495b      	ldr	r1, [pc, #364]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d109      	bne.n	8001d10 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f000 fd15 	bl	8002730 <RCC_SetFlashLatencyFromMSIRange>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e343      	b.n	8002398 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d10:	f000 fc4a 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 8001d14:	4602      	mov	r2, r0
 8001d16:	4b52      	ldr	r3, [pc, #328]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	091b      	lsrs	r3, r3, #4
 8001d1c:	f003 030f 	and.w	r3, r3, #15
 8001d20:	4950      	ldr	r1, [pc, #320]	; (8001e64 <HAL_RCC_OscConfig+0x274>)
 8001d22:	5ccb      	ldrb	r3, [r1, r3]
 8001d24:	f003 031f 	and.w	r3, r3, #31
 8001d28:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2c:	4a4e      	ldr	r2, [pc, #312]	; (8001e68 <HAL_RCC_OscConfig+0x278>)
 8001d2e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d30:	4b4e      	ldr	r3, [pc, #312]	; (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff f9d7 	bl	80010e8 <HAL_InitTick>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d052      	beq.n	8001dea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
 8001d46:	e327      	b.n	8002398 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d032      	beq.n	8001db6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d50:	4b43      	ldr	r3, [pc, #268]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a42      	ldr	r2, [pc, #264]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001d56:	f043 0301 	orr.w	r3, r3, #1
 8001d5a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d5c:	f7ff fa14 	bl	8001188 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d64:	f7ff fa10 	bl	8001188 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e310      	b.n	8002398 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d76:	4b3a      	ldr	r3, [pc, #232]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0f0      	beq.n	8001d64 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d82:	4b37      	ldr	r3, [pc, #220]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a36      	ldr	r2, [pc, #216]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001d88:	f043 0308 	orr.w	r3, r3, #8
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	4b34      	ldr	r3, [pc, #208]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	4931      	ldr	r1, [pc, #196]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001da0:	4b2f      	ldr	r3, [pc, #188]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	021b      	lsls	r3, r3, #8
 8001dae:	492c      	ldr	r1, [pc, #176]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	604b      	str	r3, [r1, #4]
 8001db4:	e01a      	b.n	8001dec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001db6:	4b2a      	ldr	r3, [pc, #168]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a29      	ldr	r2, [pc, #164]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001dbc:	f023 0301 	bic.w	r3, r3, #1
 8001dc0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dc2:	f7ff f9e1 	bl	8001188 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dca:	f7ff f9dd 	bl	8001188 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e2dd      	b.n	8002398 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ddc:	4b20      	ldr	r3, [pc, #128]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1f0      	bne.n	8001dca <HAL_RCC_OscConfig+0x1da>
 8001de8:	e000      	b.n	8001dec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d074      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	2b08      	cmp	r3, #8
 8001dfc:	d005      	beq.n	8001e0a <HAL_RCC_OscConfig+0x21a>
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	2b0c      	cmp	r3, #12
 8001e02:	d10e      	bne.n	8001e22 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	2b03      	cmp	r3, #3
 8001e08:	d10b      	bne.n	8001e22 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e0a:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d064      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x2f0>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d160      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e2ba      	b.n	8002398 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e2a:	d106      	bne.n	8001e3a <HAL_RCC_OscConfig+0x24a>
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a0b      	ldr	r2, [pc, #44]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	e026      	b.n	8001e88 <HAL_RCC_OscConfig+0x298>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e42:	d115      	bne.n	8001e70 <HAL_RCC_OscConfig+0x280>
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a05      	ldr	r2, [pc, #20]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001e4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	4b03      	ldr	r3, [pc, #12]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a02      	ldr	r2, [pc, #8]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001e56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e5a:	6013      	str	r3, [r2, #0]
 8001e5c:	e014      	b.n	8001e88 <HAL_RCC_OscConfig+0x298>
 8001e5e:	bf00      	nop
 8001e60:	40021000 	.word	0x40021000
 8001e64:	08006390 	.word	0x08006390
 8001e68:	20000000 	.word	0x20000000
 8001e6c:	20000004 	.word	0x20000004
 8001e70:	4ba0      	ldr	r3, [pc, #640]	; (80020f4 <HAL_RCC_OscConfig+0x504>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a9f      	ldr	r2, [pc, #636]	; (80020f4 <HAL_RCC_OscConfig+0x504>)
 8001e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e7a:	6013      	str	r3, [r2, #0]
 8001e7c:	4b9d      	ldr	r3, [pc, #628]	; (80020f4 <HAL_RCC_OscConfig+0x504>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a9c      	ldr	r2, [pc, #624]	; (80020f4 <HAL_RCC_OscConfig+0x504>)
 8001e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d013      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7ff f97a 	bl	8001188 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e98:	f7ff f976 	bl	8001188 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b64      	cmp	r3, #100	; 0x64
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e276      	b.n	8002398 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eaa:	4b92      	ldr	r3, [pc, #584]	; (80020f4 <HAL_RCC_OscConfig+0x504>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0x2a8>
 8001eb6:	e014      	b.n	8001ee2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb8:	f7ff f966 	bl	8001188 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec0:	f7ff f962 	bl	8001188 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b64      	cmp	r3, #100	; 0x64
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e262      	b.n	8002398 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ed2:	4b88      	ldr	r3, [pc, #544]	; (80020f4 <HAL_RCC_OscConfig+0x504>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x2d0>
 8001ede:	e000      	b.n	8001ee2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d060      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d005      	beq.n	8001f00 <HAL_RCC_OscConfig+0x310>
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	2b0c      	cmp	r3, #12
 8001ef8:	d119      	bne.n	8001f2e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d116      	bne.n	8001f2e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f00:	4b7c      	ldr	r3, [pc, #496]	; (80020f4 <HAL_RCC_OscConfig+0x504>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d005      	beq.n	8001f18 <HAL_RCC_OscConfig+0x328>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e23f      	b.n	8002398 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f18:	4b76      	ldr	r3, [pc, #472]	; (80020f4 <HAL_RCC_OscConfig+0x504>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	061b      	lsls	r3, r3, #24
 8001f26:	4973      	ldr	r1, [pc, #460]	; (80020f4 <HAL_RCC_OscConfig+0x504>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f2c:	e040      	b.n	8001fb0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d023      	beq.n	8001f7e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f36:	4b6f      	ldr	r3, [pc, #444]	; (80020f4 <HAL_RCC_OscConfig+0x504>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a6e      	ldr	r2, [pc, #440]	; (80020f4 <HAL_RCC_OscConfig+0x504>)
 8001f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f42:	f7ff f921 	bl	8001188 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f4a:	f7ff f91d 	bl	8001188 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e21d      	b.n	8002398 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f5c:	4b65      	ldr	r3, [pc, #404]	; (80020f4 <HAL_RCC_OscConfig+0x504>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0f0      	beq.n	8001f4a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f68:	4b62      	ldr	r3, [pc, #392]	; (80020f4 <HAL_RCC_OscConfig+0x504>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	061b      	lsls	r3, r3, #24
 8001f76:	495f      	ldr	r1, [pc, #380]	; (80020f4 <HAL_RCC_OscConfig+0x504>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	604b      	str	r3, [r1, #4]
 8001f7c:	e018      	b.n	8001fb0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f7e:	4b5d      	ldr	r3, [pc, #372]	; (80020f4 <HAL_RCC_OscConfig+0x504>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a5c      	ldr	r2, [pc, #368]	; (80020f4 <HAL_RCC_OscConfig+0x504>)
 8001f84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8a:	f7ff f8fd 	bl	8001188 <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f92:	f7ff f8f9 	bl	8001188 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e1f9      	b.n	8002398 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fa4:	4b53      	ldr	r3, [pc, #332]	; (80020f4 <HAL_RCC_OscConfig+0x504>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1f0      	bne.n	8001f92 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d03c      	beq.n	8002036 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d01c      	beq.n	8001ffe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fc4:	4b4b      	ldr	r3, [pc, #300]	; (80020f4 <HAL_RCC_OscConfig+0x504>)
 8001fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fca:	4a4a      	ldr	r2, [pc, #296]	; (80020f4 <HAL_RCC_OscConfig+0x504>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd4:	f7ff f8d8 	bl	8001188 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fdc:	f7ff f8d4 	bl	8001188 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e1d4      	b.n	8002398 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fee:	4b41      	ldr	r3, [pc, #260]	; (80020f4 <HAL_RCC_OscConfig+0x504>)
 8001ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0ef      	beq.n	8001fdc <HAL_RCC_OscConfig+0x3ec>
 8001ffc:	e01b      	b.n	8002036 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ffe:	4b3d      	ldr	r3, [pc, #244]	; (80020f4 <HAL_RCC_OscConfig+0x504>)
 8002000:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002004:	4a3b      	ldr	r2, [pc, #236]	; (80020f4 <HAL_RCC_OscConfig+0x504>)
 8002006:	f023 0301 	bic.w	r3, r3, #1
 800200a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200e:	f7ff f8bb 	bl	8001188 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002016:	f7ff f8b7 	bl	8001188 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e1b7      	b.n	8002398 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002028:	4b32      	ldr	r3, [pc, #200]	; (80020f4 <HAL_RCC_OscConfig+0x504>)
 800202a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1ef      	bne.n	8002016 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0304 	and.w	r3, r3, #4
 800203e:	2b00      	cmp	r3, #0
 8002040:	f000 80a6 	beq.w	8002190 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002044:	2300      	movs	r3, #0
 8002046:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002048:	4b2a      	ldr	r3, [pc, #168]	; (80020f4 <HAL_RCC_OscConfig+0x504>)
 800204a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10d      	bne.n	8002070 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002054:	4b27      	ldr	r3, [pc, #156]	; (80020f4 <HAL_RCC_OscConfig+0x504>)
 8002056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002058:	4a26      	ldr	r2, [pc, #152]	; (80020f4 <HAL_RCC_OscConfig+0x504>)
 800205a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800205e:	6593      	str	r3, [r2, #88]	; 0x58
 8002060:	4b24      	ldr	r3, [pc, #144]	; (80020f4 <HAL_RCC_OscConfig+0x504>)
 8002062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800206c:	2301      	movs	r3, #1
 800206e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002070:	4b21      	ldr	r3, [pc, #132]	; (80020f8 <HAL_RCC_OscConfig+0x508>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002078:	2b00      	cmp	r3, #0
 800207a:	d118      	bne.n	80020ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800207c:	4b1e      	ldr	r3, [pc, #120]	; (80020f8 <HAL_RCC_OscConfig+0x508>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a1d      	ldr	r2, [pc, #116]	; (80020f8 <HAL_RCC_OscConfig+0x508>)
 8002082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002086:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002088:	f7ff f87e 	bl	8001188 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002090:	f7ff f87a 	bl	8001188 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e17a      	b.n	8002398 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020a2:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <HAL_RCC_OscConfig+0x508>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0f0      	beq.n	8002090 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d108      	bne.n	80020c8 <HAL_RCC_OscConfig+0x4d8>
 80020b6:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <HAL_RCC_OscConfig+0x504>)
 80020b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020bc:	4a0d      	ldr	r2, [pc, #52]	; (80020f4 <HAL_RCC_OscConfig+0x504>)
 80020be:	f043 0301 	orr.w	r3, r3, #1
 80020c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020c6:	e029      	b.n	800211c <HAL_RCC_OscConfig+0x52c>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	2b05      	cmp	r3, #5
 80020ce:	d115      	bne.n	80020fc <HAL_RCC_OscConfig+0x50c>
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <HAL_RCC_OscConfig+0x504>)
 80020d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d6:	4a07      	ldr	r2, [pc, #28]	; (80020f4 <HAL_RCC_OscConfig+0x504>)
 80020d8:	f043 0304 	orr.w	r3, r3, #4
 80020dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020e0:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <HAL_RCC_OscConfig+0x504>)
 80020e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e6:	4a03      	ldr	r2, [pc, #12]	; (80020f4 <HAL_RCC_OscConfig+0x504>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020f0:	e014      	b.n	800211c <HAL_RCC_OscConfig+0x52c>
 80020f2:	bf00      	nop
 80020f4:	40021000 	.word	0x40021000
 80020f8:	40007000 	.word	0x40007000
 80020fc:	4b9c      	ldr	r3, [pc, #624]	; (8002370 <HAL_RCC_OscConfig+0x780>)
 80020fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002102:	4a9b      	ldr	r2, [pc, #620]	; (8002370 <HAL_RCC_OscConfig+0x780>)
 8002104:	f023 0301 	bic.w	r3, r3, #1
 8002108:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800210c:	4b98      	ldr	r3, [pc, #608]	; (8002370 <HAL_RCC_OscConfig+0x780>)
 800210e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002112:	4a97      	ldr	r2, [pc, #604]	; (8002370 <HAL_RCC_OscConfig+0x780>)
 8002114:	f023 0304 	bic.w	r3, r3, #4
 8002118:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d016      	beq.n	8002152 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002124:	f7ff f830 	bl	8001188 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800212a:	e00a      	b.n	8002142 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212c:	f7ff f82c 	bl	8001188 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	f241 3288 	movw	r2, #5000	; 0x1388
 800213a:	4293      	cmp	r3, r2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e12a      	b.n	8002398 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002142:	4b8b      	ldr	r3, [pc, #556]	; (8002370 <HAL_RCC_OscConfig+0x780>)
 8002144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0ed      	beq.n	800212c <HAL_RCC_OscConfig+0x53c>
 8002150:	e015      	b.n	800217e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002152:	f7ff f819 	bl	8001188 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002158:	e00a      	b.n	8002170 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215a:	f7ff f815 	bl	8001188 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	f241 3288 	movw	r2, #5000	; 0x1388
 8002168:	4293      	cmp	r3, r2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e113      	b.n	8002398 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002170:	4b7f      	ldr	r3, [pc, #508]	; (8002370 <HAL_RCC_OscConfig+0x780>)
 8002172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1ed      	bne.n	800215a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800217e:	7ffb      	ldrb	r3, [r7, #31]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d105      	bne.n	8002190 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002184:	4b7a      	ldr	r3, [pc, #488]	; (8002370 <HAL_RCC_OscConfig+0x780>)
 8002186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002188:	4a79      	ldr	r2, [pc, #484]	; (8002370 <HAL_RCC_OscConfig+0x780>)
 800218a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800218e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 80fe 	beq.w	8002396 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219e:	2b02      	cmp	r3, #2
 80021a0:	f040 80d0 	bne.w	8002344 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021a4:	4b72      	ldr	r3, [pc, #456]	; (8002370 <HAL_RCC_OscConfig+0x780>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f003 0203 	and.w	r2, r3, #3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d130      	bne.n	800221a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	3b01      	subs	r3, #1
 80021c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d127      	bne.n	800221a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d11f      	bne.n	800221a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021e4:	2a07      	cmp	r2, #7
 80021e6:	bf14      	ite	ne
 80021e8:	2201      	movne	r2, #1
 80021ea:	2200      	moveq	r2, #0
 80021ec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d113      	bne.n	800221a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fc:	085b      	lsrs	r3, r3, #1
 80021fe:	3b01      	subs	r3, #1
 8002200:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002202:	429a      	cmp	r2, r3
 8002204:	d109      	bne.n	800221a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002210:	085b      	lsrs	r3, r3, #1
 8002212:	3b01      	subs	r3, #1
 8002214:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002216:	429a      	cmp	r2, r3
 8002218:	d06e      	beq.n	80022f8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	2b0c      	cmp	r3, #12
 800221e:	d069      	beq.n	80022f4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002220:	4b53      	ldr	r3, [pc, #332]	; (8002370 <HAL_RCC_OscConfig+0x780>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d105      	bne.n	8002238 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800222c:	4b50      	ldr	r3, [pc, #320]	; (8002370 <HAL_RCC_OscConfig+0x780>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e0ad      	b.n	8002398 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800223c:	4b4c      	ldr	r3, [pc, #304]	; (8002370 <HAL_RCC_OscConfig+0x780>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a4b      	ldr	r2, [pc, #300]	; (8002370 <HAL_RCC_OscConfig+0x780>)
 8002242:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002246:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002248:	f7fe ff9e 	bl	8001188 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002250:	f7fe ff9a 	bl	8001188 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e09a      	b.n	8002398 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002262:	4b43      	ldr	r3, [pc, #268]	; (8002370 <HAL_RCC_OscConfig+0x780>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f0      	bne.n	8002250 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800226e:	4b40      	ldr	r3, [pc, #256]	; (8002370 <HAL_RCC_OscConfig+0x780>)
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	4b40      	ldr	r3, [pc, #256]	; (8002374 <HAL_RCC_OscConfig+0x784>)
 8002274:	4013      	ands	r3, r2
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800227e:	3a01      	subs	r2, #1
 8002280:	0112      	lsls	r2, r2, #4
 8002282:	4311      	orrs	r1, r2
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002288:	0212      	lsls	r2, r2, #8
 800228a:	4311      	orrs	r1, r2
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002290:	0852      	lsrs	r2, r2, #1
 8002292:	3a01      	subs	r2, #1
 8002294:	0552      	lsls	r2, r2, #21
 8002296:	4311      	orrs	r1, r2
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800229c:	0852      	lsrs	r2, r2, #1
 800229e:	3a01      	subs	r2, #1
 80022a0:	0652      	lsls	r2, r2, #25
 80022a2:	4311      	orrs	r1, r2
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022a8:	0912      	lsrs	r2, r2, #4
 80022aa:	0452      	lsls	r2, r2, #17
 80022ac:	430a      	orrs	r2, r1
 80022ae:	4930      	ldr	r1, [pc, #192]	; (8002370 <HAL_RCC_OscConfig+0x780>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022b4:	4b2e      	ldr	r3, [pc, #184]	; (8002370 <HAL_RCC_OscConfig+0x780>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a2d      	ldr	r2, [pc, #180]	; (8002370 <HAL_RCC_OscConfig+0x780>)
 80022ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022c0:	4b2b      	ldr	r3, [pc, #172]	; (8002370 <HAL_RCC_OscConfig+0x780>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	4a2a      	ldr	r2, [pc, #168]	; (8002370 <HAL_RCC_OscConfig+0x780>)
 80022c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022cc:	f7fe ff5c 	bl	8001188 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d4:	f7fe ff58 	bl	8001188 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e058      	b.n	8002398 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022e6:	4b22      	ldr	r3, [pc, #136]	; (8002370 <HAL_RCC_OscConfig+0x780>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022f2:	e050      	b.n	8002396 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e04f      	b.n	8002398 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f8:	4b1d      	ldr	r3, [pc, #116]	; (8002370 <HAL_RCC_OscConfig+0x780>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d148      	bne.n	8002396 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002304:	4b1a      	ldr	r3, [pc, #104]	; (8002370 <HAL_RCC_OscConfig+0x780>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a19      	ldr	r2, [pc, #100]	; (8002370 <HAL_RCC_OscConfig+0x780>)
 800230a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800230e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002310:	4b17      	ldr	r3, [pc, #92]	; (8002370 <HAL_RCC_OscConfig+0x780>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4a16      	ldr	r2, [pc, #88]	; (8002370 <HAL_RCC_OscConfig+0x780>)
 8002316:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800231a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800231c:	f7fe ff34 	bl	8001188 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002324:	f7fe ff30 	bl	8001188 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e030      	b.n	8002398 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002336:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <HAL_RCC_OscConfig+0x780>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f0      	beq.n	8002324 <HAL_RCC_OscConfig+0x734>
 8002342:	e028      	b.n	8002396 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	2b0c      	cmp	r3, #12
 8002348:	d023      	beq.n	8002392 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800234a:	4b09      	ldr	r3, [pc, #36]	; (8002370 <HAL_RCC_OscConfig+0x780>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a08      	ldr	r2, [pc, #32]	; (8002370 <HAL_RCC_OscConfig+0x780>)
 8002350:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002354:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002356:	f7fe ff17 	bl	8001188 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800235c:	e00c      	b.n	8002378 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800235e:	f7fe ff13 	bl	8001188 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d905      	bls.n	8002378 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e013      	b.n	8002398 <HAL_RCC_OscConfig+0x7a8>
 8002370:	40021000 	.word	0x40021000
 8002374:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002378:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <HAL_RCC_OscConfig+0x7b0>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1ec      	bne.n	800235e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002384:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <HAL_RCC_OscConfig+0x7b0>)
 8002386:	68da      	ldr	r2, [r3, #12]
 8002388:	4905      	ldr	r1, [pc, #20]	; (80023a0 <HAL_RCC_OscConfig+0x7b0>)
 800238a:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <HAL_RCC_OscConfig+0x7b4>)
 800238c:	4013      	ands	r3, r2
 800238e:	60cb      	str	r3, [r1, #12]
 8002390:	e001      	b.n	8002396 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e000      	b.n	8002398 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3720      	adds	r7, #32
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40021000 	.word	0x40021000
 80023a4:	feeefffc 	.word	0xfeeefffc

080023a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0e7      	b.n	800258c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023bc:	4b75      	ldr	r3, [pc, #468]	; (8002594 <HAL_RCC_ClockConfig+0x1ec>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d910      	bls.n	80023ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ca:	4b72      	ldr	r3, [pc, #456]	; (8002594 <HAL_RCC_ClockConfig+0x1ec>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 0207 	bic.w	r2, r3, #7
 80023d2:	4970      	ldr	r1, [pc, #448]	; (8002594 <HAL_RCC_ClockConfig+0x1ec>)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023da:	4b6e      	ldr	r3, [pc, #440]	; (8002594 <HAL_RCC_ClockConfig+0x1ec>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d001      	beq.n	80023ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e0cf      	b.n	800258c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d010      	beq.n	800241a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	4b66      	ldr	r3, [pc, #408]	; (8002598 <HAL_RCC_ClockConfig+0x1f0>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002404:	429a      	cmp	r2, r3
 8002406:	d908      	bls.n	800241a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002408:	4b63      	ldr	r3, [pc, #396]	; (8002598 <HAL_RCC_ClockConfig+0x1f0>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	4960      	ldr	r1, [pc, #384]	; (8002598 <HAL_RCC_ClockConfig+0x1f0>)
 8002416:	4313      	orrs	r3, r2
 8002418:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d04c      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b03      	cmp	r3, #3
 800242c:	d107      	bne.n	800243e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800242e:	4b5a      	ldr	r3, [pc, #360]	; (8002598 <HAL_RCC_ClockConfig+0x1f0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d121      	bne.n	800247e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e0a6      	b.n	800258c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d107      	bne.n	8002456 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002446:	4b54      	ldr	r3, [pc, #336]	; (8002598 <HAL_RCC_ClockConfig+0x1f0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d115      	bne.n	800247e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e09a      	b.n	800258c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d107      	bne.n	800246e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800245e:	4b4e      	ldr	r3, [pc, #312]	; (8002598 <HAL_RCC_ClockConfig+0x1f0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d109      	bne.n	800247e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e08e      	b.n	800258c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800246e:	4b4a      	ldr	r3, [pc, #296]	; (8002598 <HAL_RCC_ClockConfig+0x1f0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e086      	b.n	800258c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800247e:	4b46      	ldr	r3, [pc, #280]	; (8002598 <HAL_RCC_ClockConfig+0x1f0>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f023 0203 	bic.w	r2, r3, #3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	4943      	ldr	r1, [pc, #268]	; (8002598 <HAL_RCC_ClockConfig+0x1f0>)
 800248c:	4313      	orrs	r3, r2
 800248e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002490:	f7fe fe7a 	bl	8001188 <HAL_GetTick>
 8002494:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002496:	e00a      	b.n	80024ae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002498:	f7fe fe76 	bl	8001188 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e06e      	b.n	800258c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ae:	4b3a      	ldr	r3, [pc, #232]	; (8002598 <HAL_RCC_ClockConfig+0x1f0>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 020c 	and.w	r2, r3, #12
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	429a      	cmp	r2, r3
 80024be:	d1eb      	bne.n	8002498 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d010      	beq.n	80024ee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	4b31      	ldr	r3, [pc, #196]	; (8002598 <HAL_RCC_ClockConfig+0x1f0>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024d8:	429a      	cmp	r2, r3
 80024da:	d208      	bcs.n	80024ee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024dc:	4b2e      	ldr	r3, [pc, #184]	; (8002598 <HAL_RCC_ClockConfig+0x1f0>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	492b      	ldr	r1, [pc, #172]	; (8002598 <HAL_RCC_ClockConfig+0x1f0>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024ee:	4b29      	ldr	r3, [pc, #164]	; (8002594 <HAL_RCC_ClockConfig+0x1ec>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d210      	bcs.n	800251e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fc:	4b25      	ldr	r3, [pc, #148]	; (8002594 <HAL_RCC_ClockConfig+0x1ec>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f023 0207 	bic.w	r2, r3, #7
 8002504:	4923      	ldr	r1, [pc, #140]	; (8002594 <HAL_RCC_ClockConfig+0x1ec>)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	4313      	orrs	r3, r2
 800250a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800250c:	4b21      	ldr	r3, [pc, #132]	; (8002594 <HAL_RCC_ClockConfig+0x1ec>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d001      	beq.n	800251e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e036      	b.n	800258c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	2b00      	cmp	r3, #0
 8002528:	d008      	beq.n	800253c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800252a:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <HAL_RCC_ClockConfig+0x1f0>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	4918      	ldr	r1, [pc, #96]	; (8002598 <HAL_RCC_ClockConfig+0x1f0>)
 8002538:	4313      	orrs	r3, r2
 800253a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0308 	and.w	r3, r3, #8
 8002544:	2b00      	cmp	r3, #0
 8002546:	d009      	beq.n	800255c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002548:	4b13      	ldr	r3, [pc, #76]	; (8002598 <HAL_RCC_ClockConfig+0x1f0>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	4910      	ldr	r1, [pc, #64]	; (8002598 <HAL_RCC_ClockConfig+0x1f0>)
 8002558:	4313      	orrs	r3, r2
 800255a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800255c:	f000 f824 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 8002560:	4602      	mov	r2, r0
 8002562:	4b0d      	ldr	r3, [pc, #52]	; (8002598 <HAL_RCC_ClockConfig+0x1f0>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	091b      	lsrs	r3, r3, #4
 8002568:	f003 030f 	and.w	r3, r3, #15
 800256c:	490b      	ldr	r1, [pc, #44]	; (800259c <HAL_RCC_ClockConfig+0x1f4>)
 800256e:	5ccb      	ldrb	r3, [r1, r3]
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	fa22 f303 	lsr.w	r3, r2, r3
 8002578:	4a09      	ldr	r2, [pc, #36]	; (80025a0 <HAL_RCC_ClockConfig+0x1f8>)
 800257a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800257c:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <HAL_RCC_ClockConfig+0x1fc>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe fdb1 	bl	80010e8 <HAL_InitTick>
 8002586:	4603      	mov	r3, r0
 8002588:	72fb      	strb	r3, [r7, #11]

  return status;
 800258a:	7afb      	ldrb	r3, [r7, #11]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40022000 	.word	0x40022000
 8002598:	40021000 	.word	0x40021000
 800259c:	08006390 	.word	0x08006390
 80025a0:	20000000 	.word	0x20000000
 80025a4:	20000004 	.word	0x20000004

080025a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b089      	sub	sp, #36	; 0x24
 80025ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61fb      	str	r3, [r7, #28]
 80025b2:	2300      	movs	r3, #0
 80025b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025b6:	4b3e      	ldr	r3, [pc, #248]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025c0:	4b3b      	ldr	r3, [pc, #236]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 0303 	and.w	r3, r3, #3
 80025c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d005      	beq.n	80025dc <HAL_RCC_GetSysClockFreq+0x34>
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	2b0c      	cmp	r3, #12
 80025d4:	d121      	bne.n	800261a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d11e      	bne.n	800261a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025dc:	4b34      	ldr	r3, [pc, #208]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0308 	and.w	r3, r3, #8
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d107      	bne.n	80025f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025e8:	4b31      	ldr	r3, [pc, #196]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ee:	0a1b      	lsrs	r3, r3, #8
 80025f0:	f003 030f 	and.w	r3, r3, #15
 80025f4:	61fb      	str	r3, [r7, #28]
 80025f6:	e005      	b.n	8002604 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025f8:	4b2d      	ldr	r3, [pc, #180]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	091b      	lsrs	r3, r3, #4
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002604:	4a2b      	ldr	r2, [pc, #172]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800260c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10d      	bne.n	8002630 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002618:	e00a      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	2b04      	cmp	r3, #4
 800261e:	d102      	bne.n	8002626 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002620:	4b25      	ldr	r3, [pc, #148]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002622:	61bb      	str	r3, [r7, #24]
 8002624:	e004      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	2b08      	cmp	r3, #8
 800262a:	d101      	bne.n	8002630 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800262c:	4b23      	ldr	r3, [pc, #140]	; (80026bc <HAL_RCC_GetSysClockFreq+0x114>)
 800262e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	2b0c      	cmp	r3, #12
 8002634:	d134      	bne.n	80026a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002636:	4b1e      	ldr	r3, [pc, #120]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2b02      	cmp	r3, #2
 8002644:	d003      	beq.n	800264e <HAL_RCC_GetSysClockFreq+0xa6>
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2b03      	cmp	r3, #3
 800264a:	d003      	beq.n	8002654 <HAL_RCC_GetSysClockFreq+0xac>
 800264c:	e005      	b.n	800265a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800264e:	4b1a      	ldr	r3, [pc, #104]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002650:	617b      	str	r3, [r7, #20]
      break;
 8002652:	e005      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002654:	4b19      	ldr	r3, [pc, #100]	; (80026bc <HAL_RCC_GetSysClockFreq+0x114>)
 8002656:	617b      	str	r3, [r7, #20]
      break;
 8002658:	e002      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	617b      	str	r3, [r7, #20]
      break;
 800265e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002660:	4b13      	ldr	r3, [pc, #76]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	091b      	lsrs	r3, r3, #4
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	3301      	adds	r3, #1
 800266c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800266e:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	0a1b      	lsrs	r3, r3, #8
 8002674:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	fb03 f202 	mul.w	r2, r3, r2
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	fbb2 f3f3 	udiv	r3, r2, r3
 8002684:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002686:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	0e5b      	lsrs	r3, r3, #25
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	3301      	adds	r3, #1
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	fbb2 f3f3 	udiv	r3, r2, r3
 800269e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026a0:	69bb      	ldr	r3, [r7, #24]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3724      	adds	r7, #36	; 0x24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40021000 	.word	0x40021000
 80026b4:	080063a8 	.word	0x080063a8
 80026b8:	00f42400 	.word	0x00f42400
 80026bc:	007a1200 	.word	0x007a1200

080026c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026c4:	4b03      	ldr	r3, [pc, #12]	; (80026d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80026c6:	681b      	ldr	r3, [r3, #0]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	20000000 	.word	0x20000000

080026d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026dc:	f7ff fff0 	bl	80026c0 <HAL_RCC_GetHCLKFreq>
 80026e0:	4602      	mov	r2, r0
 80026e2:	4b06      	ldr	r3, [pc, #24]	; (80026fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	0a1b      	lsrs	r3, r3, #8
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	4904      	ldr	r1, [pc, #16]	; (8002700 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026ee:	5ccb      	ldrb	r3, [r1, r3]
 80026f0:	f003 031f 	and.w	r3, r3, #31
 80026f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40021000 	.word	0x40021000
 8002700:	080063a0 	.word	0x080063a0

08002704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002708:	f7ff ffda 	bl	80026c0 <HAL_RCC_GetHCLKFreq>
 800270c:	4602      	mov	r2, r0
 800270e:	4b06      	ldr	r3, [pc, #24]	; (8002728 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	0adb      	lsrs	r3, r3, #11
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	4904      	ldr	r1, [pc, #16]	; (800272c <HAL_RCC_GetPCLK2Freq+0x28>)
 800271a:	5ccb      	ldrb	r3, [r1, r3]
 800271c:	f003 031f 	and.w	r3, r3, #31
 8002720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002724:	4618      	mov	r0, r3
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40021000 	.word	0x40021000
 800272c:	080063a0 	.word	0x080063a0

08002730 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002738:	2300      	movs	r3, #0
 800273a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800273c:	4b2a      	ldr	r3, [pc, #168]	; (80027e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800273e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d003      	beq.n	8002750 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002748:	f7ff f9ee 	bl	8001b28 <HAL_PWREx_GetVoltageRange>
 800274c:	6178      	str	r0, [r7, #20]
 800274e:	e014      	b.n	800277a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002750:	4b25      	ldr	r3, [pc, #148]	; (80027e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002754:	4a24      	ldr	r2, [pc, #144]	; (80027e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800275a:	6593      	str	r3, [r2, #88]	; 0x58
 800275c:	4b22      	ldr	r3, [pc, #136]	; (80027e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800275e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002768:	f7ff f9de 	bl	8001b28 <HAL_PWREx_GetVoltageRange>
 800276c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800276e:	4b1e      	ldr	r3, [pc, #120]	; (80027e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002772:	4a1d      	ldr	r2, [pc, #116]	; (80027e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002778:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002780:	d10b      	bne.n	800279a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b80      	cmp	r3, #128	; 0x80
 8002786:	d919      	bls.n	80027bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2ba0      	cmp	r3, #160	; 0xa0
 800278c:	d902      	bls.n	8002794 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800278e:	2302      	movs	r3, #2
 8002790:	613b      	str	r3, [r7, #16]
 8002792:	e013      	b.n	80027bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002794:	2301      	movs	r3, #1
 8002796:	613b      	str	r3, [r7, #16]
 8002798:	e010      	b.n	80027bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b80      	cmp	r3, #128	; 0x80
 800279e:	d902      	bls.n	80027a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80027a0:	2303      	movs	r3, #3
 80027a2:	613b      	str	r3, [r7, #16]
 80027a4:	e00a      	b.n	80027bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2b80      	cmp	r3, #128	; 0x80
 80027aa:	d102      	bne.n	80027b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027ac:	2302      	movs	r3, #2
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	e004      	b.n	80027bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b70      	cmp	r3, #112	; 0x70
 80027b6:	d101      	bne.n	80027bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027b8:	2301      	movs	r3, #1
 80027ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f023 0207 	bic.w	r2, r3, #7
 80027c4:	4909      	ldr	r1, [pc, #36]	; (80027ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027cc:	4b07      	ldr	r3, [pc, #28]	; (80027ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d001      	beq.n	80027de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40021000 	.word	0x40021000
 80027ec:	40022000 	.word	0x40022000

080027f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027f8:	2300      	movs	r3, #0
 80027fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027fc:	2300      	movs	r3, #0
 80027fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002808:	2b00      	cmp	r3, #0
 800280a:	d041      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002810:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002814:	d02a      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002816:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800281a:	d824      	bhi.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800281c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002820:	d008      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002822:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002826:	d81e      	bhi.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00a      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800282c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002830:	d010      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002832:	e018      	b.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002834:	4b86      	ldr	r3, [pc, #536]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	4a85      	ldr	r2, [pc, #532]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800283a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800283e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002840:	e015      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	3304      	adds	r3, #4
 8002846:	2100      	movs	r1, #0
 8002848:	4618      	mov	r0, r3
 800284a:	f001 f839 	bl	80038c0 <RCCEx_PLLSAI1_Config>
 800284e:	4603      	mov	r3, r0
 8002850:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002852:	e00c      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3320      	adds	r3, #32
 8002858:	2100      	movs	r1, #0
 800285a:	4618      	mov	r0, r3
 800285c:	f001 f924 	bl	8003aa8 <RCCEx_PLLSAI2_Config>
 8002860:	4603      	mov	r3, r0
 8002862:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002864:	e003      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	74fb      	strb	r3, [r7, #19]
      break;
 800286a:	e000      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800286c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800286e:	7cfb      	ldrb	r3, [r7, #19]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10b      	bne.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002874:	4b76      	ldr	r3, [pc, #472]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002882:	4973      	ldr	r1, [pc, #460]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002884:	4313      	orrs	r3, r2
 8002886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800288a:	e001      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800288c:	7cfb      	ldrb	r3, [r7, #19]
 800288e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d041      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80028a4:	d02a      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80028a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80028aa:	d824      	bhi.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80028ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028b0:	d008      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80028b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028b6:	d81e      	bhi.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00a      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80028bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028c0:	d010      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80028c2:	e018      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028c4:	4b62      	ldr	r3, [pc, #392]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	4a61      	ldr	r2, [pc, #388]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028d0:	e015      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3304      	adds	r3, #4
 80028d6:	2100      	movs	r1, #0
 80028d8:	4618      	mov	r0, r3
 80028da:	f000 fff1 	bl	80038c0 <RCCEx_PLLSAI1_Config>
 80028de:	4603      	mov	r3, r0
 80028e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028e2:	e00c      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3320      	adds	r3, #32
 80028e8:	2100      	movs	r1, #0
 80028ea:	4618      	mov	r0, r3
 80028ec:	f001 f8dc 	bl	8003aa8 <RCCEx_PLLSAI2_Config>
 80028f0:	4603      	mov	r3, r0
 80028f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028f4:	e003      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	74fb      	strb	r3, [r7, #19]
      break;
 80028fa:	e000      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80028fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028fe:	7cfb      	ldrb	r3, [r7, #19]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10b      	bne.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002904:	4b52      	ldr	r3, [pc, #328]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002912:	494f      	ldr	r1, [pc, #316]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002914:	4313      	orrs	r3, r2
 8002916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800291a:	e001      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800291c:	7cfb      	ldrb	r3, [r7, #19]
 800291e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 80a0 	beq.w	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800292e:	2300      	movs	r3, #0
 8002930:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002932:	4b47      	ldr	r3, [pc, #284]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002942:	2300      	movs	r3, #0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00d      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002948:	4b41      	ldr	r3, [pc, #260]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800294a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294c:	4a40      	ldr	r2, [pc, #256]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800294e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002952:	6593      	str	r3, [r2, #88]	; 0x58
 8002954:	4b3e      	ldr	r3, [pc, #248]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002960:	2301      	movs	r3, #1
 8002962:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002964:	4b3b      	ldr	r3, [pc, #236]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a3a      	ldr	r2, [pc, #232]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800296a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800296e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002970:	f7fe fc0a 	bl	8001188 <HAL_GetTick>
 8002974:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002976:	e009      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002978:	f7fe fc06 	bl	8001188 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d902      	bls.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	74fb      	strb	r3, [r7, #19]
        break;
 800298a:	e005      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800298c:	4b31      	ldr	r3, [pc, #196]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002994:	2b00      	cmp	r3, #0
 8002996:	d0ef      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002998:	7cfb      	ldrb	r3, [r7, #19]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d15c      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800299e:	4b2c      	ldr	r3, [pc, #176]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d01f      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d019      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029bc:	4b24      	ldr	r3, [pc, #144]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029c8:	4b21      	ldr	r3, [pc, #132]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ce:	4a20      	ldr	r2, [pc, #128]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029d8:	4b1d      	ldr	r3, [pc, #116]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029de:	4a1c      	ldr	r2, [pc, #112]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029e8:	4a19      	ldr	r2, [pc, #100]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d016      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fa:	f7fe fbc5 	bl	8001188 <HAL_GetTick>
 80029fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a00:	e00b      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a02:	f7fe fbc1 	bl	8001188 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d902      	bls.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	74fb      	strb	r3, [r7, #19]
            break;
 8002a18:	e006      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a1a:	4b0d      	ldr	r3, [pc, #52]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0ec      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002a28:	7cfb      	ldrb	r3, [r7, #19]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10c      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a2e:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a3e:	4904      	ldr	r1, [pc, #16]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a46:	e009      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a48:	7cfb      	ldrb	r3, [r7, #19]
 8002a4a:	74bb      	strb	r3, [r7, #18]
 8002a4c:	e006      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002a4e:	bf00      	nop
 8002a50:	40021000 	.word	0x40021000
 8002a54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a58:	7cfb      	ldrb	r3, [r7, #19]
 8002a5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a5c:	7c7b      	ldrb	r3, [r7, #17]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d105      	bne.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a62:	4b9e      	ldr	r3, [pc, #632]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a66:	4a9d      	ldr	r2, [pc, #628]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a6c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00a      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a7a:	4b98      	ldr	r3, [pc, #608]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a80:	f023 0203 	bic.w	r2, r3, #3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a88:	4994      	ldr	r1, [pc, #592]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00a      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a9c:	4b8f      	ldr	r3, [pc, #572]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa2:	f023 020c 	bic.w	r2, r3, #12
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aaa:	498c      	ldr	r1, [pc, #560]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00a      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002abe:	4b87      	ldr	r3, [pc, #540]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	4983      	ldr	r1, [pc, #524]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00a      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ae0:	4b7e      	ldr	r3, [pc, #504]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aee:	497b      	ldr	r1, [pc, #492]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0310 	and.w	r3, r3, #16
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00a      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b02:	4b76      	ldr	r3, [pc, #472]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b10:	4972      	ldr	r1, [pc, #456]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0320 	and.w	r3, r3, #32
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00a      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b24:	4b6d      	ldr	r3, [pc, #436]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b32:	496a      	ldr	r1, [pc, #424]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00a      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b46:	4b65      	ldr	r3, [pc, #404]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b54:	4961      	ldr	r1, [pc, #388]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00a      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b68:	4b5c      	ldr	r3, [pc, #368]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b76:	4959      	ldr	r1, [pc, #356]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00a      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b8a:	4b54      	ldr	r3, [pc, #336]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b90:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b98:	4950      	ldr	r1, [pc, #320]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00a      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bac:	4b4b      	ldr	r3, [pc, #300]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bba:	4948      	ldr	r1, [pc, #288]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00a      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bce:	4b43      	ldr	r3, [pc, #268]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bdc:	493f      	ldr	r1, [pc, #252]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d028      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bf0:	4b3a      	ldr	r3, [pc, #232]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bfe:	4937      	ldr	r1, [pc, #220]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c0e:	d106      	bne.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c10:	4b32      	ldr	r3, [pc, #200]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	4a31      	ldr	r2, [pc, #196]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c1a:	60d3      	str	r3, [r2, #12]
 8002c1c:	e011      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c26:	d10c      	bne.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 fe46 	bl	80038c0 <RCCEx_PLLSAI1_Config>
 8002c34:	4603      	mov	r3, r0
 8002c36:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c38:	7cfb      	ldrb	r3, [r7, #19]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002c3e:	7cfb      	ldrb	r3, [r7, #19]
 8002c40:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d028      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c4e:	4b23      	ldr	r3, [pc, #140]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c54:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5c:	491f      	ldr	r1, [pc, #124]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c6c:	d106      	bne.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c6e:	4b1b      	ldr	r3, [pc, #108]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	4a1a      	ldr	r2, [pc, #104]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c78:	60d3      	str	r3, [r2, #12]
 8002c7a:	e011      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c84:	d10c      	bne.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	3304      	adds	r3, #4
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 fe17 	bl	80038c0 <RCCEx_PLLSAI1_Config>
 8002c92:	4603      	mov	r3, r0
 8002c94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c96:	7cfb      	ldrb	r3, [r7, #19]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002c9c:	7cfb      	ldrb	r3, [r7, #19]
 8002c9e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d02b      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002cac:	4b0b      	ldr	r3, [pc, #44]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cba:	4908      	ldr	r1, [pc, #32]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cca:	d109      	bne.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ccc:	4b03      	ldr	r3, [pc, #12]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	4a02      	ldr	r2, [pc, #8]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cd6:	60d3      	str	r3, [r2, #12]
 8002cd8:	e014      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002cda:	bf00      	nop
 8002cdc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ce8:	d10c      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3304      	adds	r3, #4
 8002cee:	2101      	movs	r1, #1
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f000 fde5 	bl	80038c0 <RCCEx_PLLSAI1_Config>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cfa:	7cfb      	ldrb	r3, [r7, #19]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002d00:	7cfb      	ldrb	r3, [r7, #19]
 8002d02:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d02f      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d10:	4b2b      	ldr	r3, [pc, #172]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d16:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d1e:	4928      	ldr	r1, [pc, #160]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d2e:	d10d      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3304      	adds	r3, #4
 8002d34:	2102      	movs	r1, #2
 8002d36:	4618      	mov	r0, r3
 8002d38:	f000 fdc2 	bl	80038c0 <RCCEx_PLLSAI1_Config>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d40:	7cfb      	ldrb	r3, [r7, #19]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d014      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d46:	7cfb      	ldrb	r3, [r7, #19]
 8002d48:	74bb      	strb	r3, [r7, #18]
 8002d4a:	e011      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d54:	d10c      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3320      	adds	r3, #32
 8002d5a:	2102      	movs	r1, #2
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 fea3 	bl	8003aa8 <RCCEx_PLLSAI2_Config>
 8002d62:	4603      	mov	r3, r0
 8002d64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d66:	7cfb      	ldrb	r3, [r7, #19]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d6c:	7cfb      	ldrb	r3, [r7, #19]
 8002d6e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00a      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d7c:	4b10      	ldr	r3, [pc, #64]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d82:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d8a:	490d      	ldr	r1, [pc, #52]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00b      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d9e:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dae:	4904      	ldr	r1, [pc, #16]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002db6:	7cbb      	ldrb	r3, [r7, #18]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40021000 	.word	0x40021000

08002dc4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b088      	sub	sp, #32
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dd6:	d13e      	bne.n	8002e56 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8002dd8:	4bb2      	ldr	r3, [pc, #712]	; (80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002de2:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dea:	d028      	beq.n	8002e3e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002df2:	f200 8542 	bhi.w	800387a <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dfc:	d005      	beq.n	8002e0a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e04:	d00e      	beq.n	8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8002e06:	f000 bd38 	b.w	800387a <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002e0a:	4ba6      	ldr	r3, [pc, #664]	; (80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	f040 8532 	bne.w	800387e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8002e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e1e:	61fb      	str	r3, [r7, #28]
      break;
 8002e20:	f000 bd2d 	b.w	800387e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002e24:	4b9f      	ldr	r3, [pc, #636]	; (80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	f040 8527 	bne.w	8003882 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8002e34:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002e38:	61fb      	str	r3, [r7, #28]
      break;
 8002e3a:	f000 bd22 	b.w	8003882 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002e3e:	4b99      	ldr	r3, [pc, #612]	; (80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e4a:	f040 851c 	bne.w	8003886 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 8002e4e:	4b96      	ldr	r3, [pc, #600]	; (80030a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8002e50:	61fb      	str	r3, [r7, #28]
      break;
 8002e52:	f000 bd18 	b.w	8003886 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e56:	4b93      	ldr	r3, [pc, #588]	; (80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	d036      	beq.n	8002ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2b03      	cmp	r3, #3
 8002e6a:	d840      	bhi.n	8002eee <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d003      	beq.n	8002e7a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d020      	beq.n	8002eba <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8002e78:	e039      	b.n	8002eee <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002e7a:	4b8a      	ldr	r3, [pc, #552]	; (80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d116      	bne.n	8002eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002e86:	4b87      	ldr	r3, [pc, #540]	; (80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d005      	beq.n	8002e9e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8002e92:	4b84      	ldr	r3, [pc, #528]	; (80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	091b      	lsrs	r3, r3, #4
 8002e98:	f003 030f 	and.w	r3, r3, #15
 8002e9c:	e005      	b.n	8002eaa <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8002e9e:	4b81      	ldr	r3, [pc, #516]	; (80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ea4:	0a1b      	lsrs	r3, r3, #8
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	4a80      	ldr	r2, [pc, #512]	; (80030ac <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8002eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002eb2:	e01f      	b.n	8002ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	61bb      	str	r3, [r7, #24]
      break;
 8002eb8:	e01c      	b.n	8002ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002eba:	4b7a      	ldr	r3, [pc, #488]	; (80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ec6:	d102      	bne.n	8002ece <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8002ec8:	4b79      	ldr	r3, [pc, #484]	; (80030b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002eca:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002ecc:	e012      	b.n	8002ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61bb      	str	r3, [r7, #24]
      break;
 8002ed2:	e00f      	b.n	8002ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002ed4:	4b73      	ldr	r3, [pc, #460]	; (80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002edc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ee0:	d102      	bne.n	8002ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8002ee2:	4b74      	ldr	r3, [pc, #464]	; (80030b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8002ee4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002ee6:	e005      	b.n	8002ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	61bb      	str	r3, [r7, #24]
      break;
 8002eec:	e002      	b.n	8002ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61bb      	str	r3, [r7, #24]
      break;
 8002ef2:	bf00      	nop
    }

    switch(PeriphClk)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002efa:	f000 80dd 	beq.w	80030b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f04:	f200 84c1 	bhi.w	800388a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f0e:	f000 80d3 	beq.w	80030b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f18:	f200 84b7 	bhi.w	800388a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f22:	f000 835f 	beq.w	80035e4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f2c:	f200 84ad 	bhi.w	800388a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f36:	f000 847e 	beq.w	8003836 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f40:	f200 84a3 	bhi.w	800388a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f4a:	f000 82cd 	beq.w	80034e8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f54:	f200 8499 	bhi.w	800388a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f5e:	f000 80ab 	beq.w	80030b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f68:	f200 848f 	bhi.w	800388a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f72:	f000 8090 	beq.w	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f7c:	f200 8485 	bhi.w	800388a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f86:	d07f      	beq.n	8003088 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f8e:	f200 847c 	bhi.w	800388a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f98:	f000 8403 	beq.w	80037a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fa2:	f200 8472 	bhi.w	800388a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fac:	f000 83af 	beq.w	800370e <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fb6:	f200 8468 	bhi.w	800388a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fc0:	f000 8379 	beq.w	80036b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fca:	f200 845e 	bhi.w	800388a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b80      	cmp	r3, #128	; 0x80
 8002fd2:	f000 8344 	beq.w	800365e <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b80      	cmp	r3, #128	; 0x80
 8002fda:	f200 8456 	bhi.w	800388a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b20      	cmp	r3, #32
 8002fe2:	d84b      	bhi.n	800307c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 844f 	beq.w	800388a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	2b1f      	cmp	r3, #31
 8002ff2:	f200 844a 	bhi.w	800388a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002ff6:	a201      	add	r2, pc, #4	; (adr r2, 8002ffc <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8002ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffc:	080031e5 	.word	0x080031e5
 8003000:	08003253 	.word	0x08003253
 8003004:	0800388b 	.word	0x0800388b
 8003008:	080032e7 	.word	0x080032e7
 800300c:	0800388b 	.word	0x0800388b
 8003010:	0800388b 	.word	0x0800388b
 8003014:	0800388b 	.word	0x0800388b
 8003018:	0800336d 	.word	0x0800336d
 800301c:	0800388b 	.word	0x0800388b
 8003020:	0800388b 	.word	0x0800388b
 8003024:	0800388b 	.word	0x0800388b
 8003028:	0800388b 	.word	0x0800388b
 800302c:	0800388b 	.word	0x0800388b
 8003030:	0800388b 	.word	0x0800388b
 8003034:	0800388b 	.word	0x0800388b
 8003038:	080033e5 	.word	0x080033e5
 800303c:	0800388b 	.word	0x0800388b
 8003040:	0800388b 	.word	0x0800388b
 8003044:	0800388b 	.word	0x0800388b
 8003048:	0800388b 	.word	0x0800388b
 800304c:	0800388b 	.word	0x0800388b
 8003050:	0800388b 	.word	0x0800388b
 8003054:	0800388b 	.word	0x0800388b
 8003058:	0800388b 	.word	0x0800388b
 800305c:	0800388b 	.word	0x0800388b
 8003060:	0800388b 	.word	0x0800388b
 8003064:	0800388b 	.word	0x0800388b
 8003068:	0800388b 	.word	0x0800388b
 800306c:	0800388b 	.word	0x0800388b
 8003070:	0800388b 	.word	0x0800388b
 8003074:	0800388b 	.word	0x0800388b
 8003078:	08003467 	.word	0x08003467
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b40      	cmp	r3, #64	; 0x40
 8003080:	f000 82c1 	beq.w	8003606 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003084:	f000 bc01 	b.w	800388a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003088:	69b9      	ldr	r1, [r7, #24]
 800308a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800308e:	f000 fde9 	bl	8003c64 <RCCEx_GetSAIxPeriphCLKFreq>
 8003092:	61f8      	str	r0, [r7, #28]
      break;
 8003094:	e3fa      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8003096:	69b9      	ldr	r1, [r7, #24]
 8003098:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800309c:	f000 fde2 	bl	8003c64 <RCCEx_GetSAIxPeriphCLKFreq>
 80030a0:	61f8      	str	r0, [r7, #28]
      break;
 80030a2:	e3f3      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80030a4:	40021000 	.word	0x40021000
 80030a8:	0003d090 	.word	0x0003d090
 80030ac:	080063a8 	.word	0x080063a8
 80030b0:	00f42400 	.word	0x00f42400
 80030b4:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80030b8:	4ba9      	ldr	r3, [pc, #676]	; (8003360 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80030ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030be:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80030ca:	d00c      	beq.n	80030e6 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80030d2:	d87f      	bhi.n	80031d4 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030da:	d04e      	beq.n	800317a <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030e2:	d01d      	beq.n	8003120 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 80030e4:	e076      	b.n	80031d4 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80030e6:	4b9e      	ldr	r3, [pc, #632]	; (8003360 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d172      	bne.n	80031d8 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80030f2:	4b9b      	ldr	r3, [pc, #620]	; (8003360 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d005      	beq.n	800310a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 80030fe:	4b98      	ldr	r3, [pc, #608]	; (8003360 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	091b      	lsrs	r3, r3, #4
 8003104:	f003 030f 	and.w	r3, r3, #15
 8003108:	e005      	b.n	8003116 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 800310a:	4b95      	ldr	r3, [pc, #596]	; (8003360 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800310c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003110:	0a1b      	lsrs	r3, r3, #8
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	4a93      	ldr	r2, [pc, #588]	; (8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8003118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800311c:	61fb      	str	r3, [r7, #28]
          break;
 800311e:	e05b      	b.n	80031d8 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003120:	4b8f      	ldr	r3, [pc, #572]	; (8003360 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003128:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800312c:	d156      	bne.n	80031dc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800312e:	4b8c      	ldr	r3, [pc, #560]	; (8003360 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003136:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800313a:	d14f      	bne.n	80031dc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800313c:	4b88      	ldr	r3, [pc, #544]	; (8003360 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	0a1b      	lsrs	r3, r3, #8
 8003142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003146:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	fb03 f202 	mul.w	r2, r3, r2
 8003150:	4b83      	ldr	r3, [pc, #524]	; (8003360 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	091b      	lsrs	r3, r3, #4
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	3301      	adds	r3, #1
 800315c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003160:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003162:	4b7f      	ldr	r3, [pc, #508]	; (8003360 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	0d5b      	lsrs	r3, r3, #21
 8003168:	f003 0303 	and.w	r3, r3, #3
 800316c:	3301      	adds	r3, #1
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	fbb2 f3f3 	udiv	r3, r2, r3
 8003176:	61fb      	str	r3, [r7, #28]
          break;
 8003178:	e030      	b.n	80031dc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800317a:	4b79      	ldr	r3, [pc, #484]	; (8003360 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003182:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003186:	d12b      	bne.n	80031e0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003188:	4b75      	ldr	r3, [pc, #468]	; (8003360 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003190:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003194:	d124      	bne.n	80031e0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003196:	4b72      	ldr	r3, [pc, #456]	; (8003360 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	0a1b      	lsrs	r3, r3, #8
 800319c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031a0:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	fb03 f202 	mul.w	r2, r3, r2
 80031aa:	4b6d      	ldr	r3, [pc, #436]	; (8003360 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	091b      	lsrs	r3, r3, #4
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	3301      	adds	r3, #1
 80031b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ba:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80031bc:	4b68      	ldr	r3, [pc, #416]	; (8003360 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	0d5b      	lsrs	r3, r3, #21
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	3301      	adds	r3, #1
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d0:	61fb      	str	r3, [r7, #28]
          break;
 80031d2:	e005      	b.n	80031e0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 80031d4:	bf00      	nop
 80031d6:	e359      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80031d8:	bf00      	nop
 80031da:	e357      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80031dc:	bf00      	nop
 80031de:	e355      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80031e0:	bf00      	nop
        break;
 80031e2:	e353      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80031e4:	4b5e      	ldr	r3, [pc, #376]	; (8003360 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80031e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	613b      	str	r3, [r7, #16]
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	2b03      	cmp	r3, #3
 80031f4:	d827      	bhi.n	8003246 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 80031f6:	a201      	add	r2, pc, #4	; (adr r2, 80031fc <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80031f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fc:	0800320d 	.word	0x0800320d
 8003200:	08003215 	.word	0x08003215
 8003204:	0800321d 	.word	0x0800321d
 8003208:	08003231 	.word	0x08003231
          frequency = HAL_RCC_GetPCLK2Freq();
 800320c:	f7ff fa7a 	bl	8002704 <HAL_RCC_GetPCLK2Freq>
 8003210:	61f8      	str	r0, [r7, #28]
          break;
 8003212:	e01d      	b.n	8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8003214:	f7ff f9c8 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 8003218:	61f8      	str	r0, [r7, #28]
          break;
 800321a:	e019      	b.n	8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800321c:	4b50      	ldr	r3, [pc, #320]	; (8003360 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003228:	d10f      	bne.n	800324a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 800322a:	4b4f      	ldr	r3, [pc, #316]	; (8003368 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800322c:	61fb      	str	r3, [r7, #28]
          break;
 800322e:	e00c      	b.n	800324a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003230:	4b4b      	ldr	r3, [pc, #300]	; (8003360 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b02      	cmp	r3, #2
 800323c:	d107      	bne.n	800324e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 800323e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003242:	61fb      	str	r3, [r7, #28]
          break;
 8003244:	e003      	b.n	800324e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8003246:	bf00      	nop
 8003248:	e320      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800324a:	bf00      	nop
 800324c:	e31e      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800324e:	bf00      	nop
        break;
 8003250:	e31c      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003252:	4b43      	ldr	r3, [pc, #268]	; (8003360 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003258:	f003 030c 	and.w	r3, r3, #12
 800325c:	613b      	str	r3, [r7, #16]
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	2b0c      	cmp	r3, #12
 8003262:	d83a      	bhi.n	80032da <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8003264:	a201      	add	r2, pc, #4	; (adr r2, 800326c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8003266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326a:	bf00      	nop
 800326c:	080032a1 	.word	0x080032a1
 8003270:	080032db 	.word	0x080032db
 8003274:	080032db 	.word	0x080032db
 8003278:	080032db 	.word	0x080032db
 800327c:	080032a9 	.word	0x080032a9
 8003280:	080032db 	.word	0x080032db
 8003284:	080032db 	.word	0x080032db
 8003288:	080032db 	.word	0x080032db
 800328c:	080032b1 	.word	0x080032b1
 8003290:	080032db 	.word	0x080032db
 8003294:	080032db 	.word	0x080032db
 8003298:	080032db 	.word	0x080032db
 800329c:	080032c5 	.word	0x080032c5
          frequency = HAL_RCC_GetPCLK1Freq();
 80032a0:	f7ff fa1a 	bl	80026d8 <HAL_RCC_GetPCLK1Freq>
 80032a4:	61f8      	str	r0, [r7, #28]
          break;
 80032a6:	e01d      	b.n	80032e4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 80032a8:	f7ff f97e 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 80032ac:	61f8      	str	r0, [r7, #28]
          break;
 80032ae:	e019      	b.n	80032e4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80032b0:	4b2b      	ldr	r3, [pc, #172]	; (8003360 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032bc:	d10f      	bne.n	80032de <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 80032be:	4b2a      	ldr	r3, [pc, #168]	; (8003368 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80032c0:	61fb      	str	r3, [r7, #28]
          break;
 80032c2:	e00c      	b.n	80032de <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80032c4:	4b26      	ldr	r3, [pc, #152]	; (8003360 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80032c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d107      	bne.n	80032e2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 80032d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032d6:	61fb      	str	r3, [r7, #28]
          break;
 80032d8:	e003      	b.n	80032e2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 80032da:	bf00      	nop
 80032dc:	e2d6      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80032de:	bf00      	nop
 80032e0:	e2d4      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80032e2:	bf00      	nop
        break;
 80032e4:	e2d2      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80032e6:	4b1e      	ldr	r3, [pc, #120]	; (8003360 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80032e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	2b30      	cmp	r3, #48	; 0x30
 80032f6:	d021      	beq.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	2b30      	cmp	r3, #48	; 0x30
 80032fc:	d829      	bhi.n	8003352 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	2b20      	cmp	r3, #32
 8003302:	d011      	beq.n	8003328 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	2b20      	cmp	r3, #32
 8003308:	d823      	bhi.n	8003352 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d003      	beq.n	8003318 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	2b10      	cmp	r3, #16
 8003314:	d004      	beq.n	8003320 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8003316:	e01c      	b.n	8003352 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003318:	f7ff f9de 	bl	80026d8 <HAL_RCC_GetPCLK1Freq>
 800331c:	61f8      	str	r0, [r7, #28]
          break;
 800331e:	e01d      	b.n	800335c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8003320:	f7ff f942 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 8003324:	61f8      	str	r0, [r7, #28]
          break;
 8003326:	e019      	b.n	800335c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003328:	4b0d      	ldr	r3, [pc, #52]	; (8003360 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003334:	d10f      	bne.n	8003356 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8003336:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8003338:	61fb      	str	r3, [r7, #28]
          break;
 800333a:	e00c      	b.n	8003356 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800333c:	4b08      	ldr	r3, [pc, #32]	; (8003360 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800333e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b02      	cmp	r3, #2
 8003348:	d107      	bne.n	800335a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 800334a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800334e:	61fb      	str	r3, [r7, #28]
          break;
 8003350:	e003      	b.n	800335a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8003352:	bf00      	nop
 8003354:	e29a      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003356:	bf00      	nop
 8003358:	e298      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800335a:	bf00      	nop
        break;
 800335c:	e296      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800335e:	bf00      	nop
 8003360:	40021000 	.word	0x40021000
 8003364:	080063a8 	.word	0x080063a8
 8003368:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800336c:	4b9b      	ldr	r3, [pc, #620]	; (80035dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800336e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003372:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	2bc0      	cmp	r3, #192	; 0xc0
 800337c:	d021      	beq.n	80033c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	2bc0      	cmp	r3, #192	; 0xc0
 8003382:	d829      	bhi.n	80033d8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	2b80      	cmp	r3, #128	; 0x80
 8003388:	d011      	beq.n	80033ae <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	2b80      	cmp	r3, #128	; 0x80
 800338e:	d823      	bhi.n	80033d8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	2b40      	cmp	r3, #64	; 0x40
 800339a:	d004      	beq.n	80033a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 800339c:	e01c      	b.n	80033d8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 800339e:	f7ff f99b 	bl	80026d8 <HAL_RCC_GetPCLK1Freq>
 80033a2:	61f8      	str	r0, [r7, #28]
          break;
 80033a4:	e01d      	b.n	80033e2 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 80033a6:	f7ff f8ff 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 80033aa:	61f8      	str	r0, [r7, #28]
          break;
 80033ac:	e019      	b.n	80033e2 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80033ae:	4b8b      	ldr	r3, [pc, #556]	; (80035dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ba:	d10f      	bne.n	80033dc <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 80033bc:	4b88      	ldr	r3, [pc, #544]	; (80035e0 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80033be:	61fb      	str	r3, [r7, #28]
          break;
 80033c0:	e00c      	b.n	80033dc <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80033c2:	4b86      	ldr	r3, [pc, #536]	; (80035dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80033c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d107      	bne.n	80033e0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 80033d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033d4:	61fb      	str	r3, [r7, #28]
          break;
 80033d6:	e003      	b.n	80033e0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 80033d8:	bf00      	nop
 80033da:	e257      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80033dc:	bf00      	nop
 80033de:	e255      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80033e0:	bf00      	nop
        break;
 80033e2:	e253      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80033e4:	4b7d      	ldr	r3, [pc, #500]	; (80035dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80033e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033f6:	d025      	beq.n	8003444 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033fe:	d82c      	bhi.n	800345a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003406:	d013      	beq.n	8003430 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800340e:	d824      	bhi.n	800345a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d004      	beq.n	8003420 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800341c:	d004      	beq.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 800341e:	e01c      	b.n	800345a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003420:	f7ff f95a 	bl	80026d8 <HAL_RCC_GetPCLK1Freq>
 8003424:	61f8      	str	r0, [r7, #28]
          break;
 8003426:	e01d      	b.n	8003464 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003428:	f7ff f8be 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 800342c:	61f8      	str	r0, [r7, #28]
          break;
 800342e:	e019      	b.n	8003464 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003430:	4b6a      	ldr	r3, [pc, #424]	; (80035dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800343c:	d10f      	bne.n	800345e <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 800343e:	4b68      	ldr	r3, [pc, #416]	; (80035e0 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003440:	61fb      	str	r3, [r7, #28]
          break;
 8003442:	e00c      	b.n	800345e <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003444:	4b65      	ldr	r3, [pc, #404]	; (80035dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b02      	cmp	r3, #2
 8003450:	d107      	bne.n	8003462 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8003452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003456:	61fb      	str	r3, [r7, #28]
          break;
 8003458:	e003      	b.n	8003462 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 800345a:	bf00      	nop
 800345c:	e216      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800345e:	bf00      	nop
 8003460:	e214      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003462:	bf00      	nop
        break;
 8003464:	e212      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003466:	4b5d      	ldr	r3, [pc, #372]	; (80035dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003470:	613b      	str	r3, [r7, #16]
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003478:	d025      	beq.n	80034c6 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003480:	d82c      	bhi.n	80034dc <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003488:	d013      	beq.n	80034b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003490:	d824      	bhi.n	80034dc <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d004      	beq.n	80034a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800349e:	d004      	beq.n	80034aa <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 80034a0:	e01c      	b.n	80034dc <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 80034a2:	f7ff f919 	bl	80026d8 <HAL_RCC_GetPCLK1Freq>
 80034a6:	61f8      	str	r0, [r7, #28]
          break;
 80034a8:	e01d      	b.n	80034e6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 80034aa:	f7ff f87d 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 80034ae:	61f8      	str	r0, [r7, #28]
          break;
 80034b0:	e019      	b.n	80034e6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80034b2:	4b4a      	ldr	r3, [pc, #296]	; (80035dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034be:	d10f      	bne.n	80034e0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 80034c0:	4b47      	ldr	r3, [pc, #284]	; (80035e0 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80034c2:	61fb      	str	r3, [r7, #28]
          break;
 80034c4:	e00c      	b.n	80034e0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80034c6:	4b45      	ldr	r3, [pc, #276]	; (80035dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80034c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d107      	bne.n	80034e4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 80034d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034d8:	61fb      	str	r3, [r7, #28]
          break;
 80034da:	e003      	b.n	80034e4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 80034dc:	bf00      	nop
 80034de:	e1d5      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80034e0:	bf00      	nop
 80034e2:	e1d3      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80034e4:	bf00      	nop
        break;
 80034e6:	e1d1      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80034e8:	4b3c      	ldr	r3, [pc, #240]	; (80035dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80034ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80034fa:	d00c      	beq.n	8003516 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003502:	d864      	bhi.n	80035ce <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800350a:	d008      	beq.n	800351e <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003512:	d030      	beq.n	8003576 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8003514:	e05b      	b.n	80035ce <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8003516:	f7ff f847 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 800351a:	61f8      	str	r0, [r7, #28]
          break;
 800351c:	e05c      	b.n	80035d8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800351e:	4b2f      	ldr	r3, [pc, #188]	; (80035dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003526:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800352a:	d152      	bne.n	80035d2 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 800352c:	4b2b      	ldr	r3, [pc, #172]	; (80035dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d04c      	beq.n	80035d2 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003538:	4b28      	ldr	r3, [pc, #160]	; (80035dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	0a1b      	lsrs	r3, r3, #8
 800353e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003542:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	fb03 f202 	mul.w	r2, r3, r2
 800354c:	4b23      	ldr	r3, [pc, #140]	; (80035dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	091b      	lsrs	r3, r3, #4
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	3301      	adds	r3, #1
 8003558:	fbb2 f3f3 	udiv	r3, r2, r3
 800355c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800355e:	4b1f      	ldr	r3, [pc, #124]	; (80035dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	0e5b      	lsrs	r3, r3, #25
 8003564:	f003 0303 	and.w	r3, r3, #3
 8003568:	3301      	adds	r3, #1
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003572:	61fb      	str	r3, [r7, #28]
          break;
 8003574:	e02d      	b.n	80035d2 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8003576:	4b19      	ldr	r3, [pc, #100]	; (80035dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800357e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003582:	d128      	bne.n	80035d6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8003584:	4b15      	ldr	r3, [pc, #84]	; (80035dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d022      	beq.n	80035d6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8003590:	4b12      	ldr	r3, [pc, #72]	; (80035dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	0a1b      	lsrs	r3, r3, #8
 8003596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800359a:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	fb03 f202 	mul.w	r2, r3, r2
 80035a4:	4b0d      	ldr	r3, [pc, #52]	; (80035dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	091b      	lsrs	r3, r3, #4
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	3301      	adds	r3, #1
 80035b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b4:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80035b6:	4b09      	ldr	r3, [pc, #36]	; (80035dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	0e5b      	lsrs	r3, r3, #25
 80035bc:	f003 0303 	and.w	r3, r3, #3
 80035c0:	3301      	adds	r3, #1
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ca:	61fb      	str	r3, [r7, #28]
          break;
 80035cc:	e003      	b.n	80035d6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 80035ce:	bf00      	nop
 80035d0:	e15c      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80035d2:	bf00      	nop
 80035d4:	e15a      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80035d6:	bf00      	nop
        break;
 80035d8:	e158      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80035da:	bf00      	nop
 80035dc:	40021000 	.word	0x40021000
 80035e0:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80035e4:	4b9d      	ldr	r3, [pc, #628]	; (800385c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80035e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035ee:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d103      	bne.n	80035fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 80035f6:	f7ff f885 	bl	8002704 <HAL_RCC_GetPCLK2Freq>
 80035fa:	61f8      	str	r0, [r7, #28]
        break;
 80035fc:	e146      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 80035fe:	f7fe ffd3 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 8003602:	61f8      	str	r0, [r7, #28]
        break;
 8003604:	e142      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8003606:	4b95      	ldr	r3, [pc, #596]	; (800385c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003610:	613b      	str	r3, [r7, #16]
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003618:	d013      	beq.n	8003642 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003620:	d819      	bhi.n	8003656 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d004      	beq.n	8003632 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800362e:	d004      	beq.n	800363a <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8003630:	e011      	b.n	8003656 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003632:	f7ff f851 	bl	80026d8 <HAL_RCC_GetPCLK1Freq>
 8003636:	61f8      	str	r0, [r7, #28]
          break;
 8003638:	e010      	b.n	800365c <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 800363a:	f7fe ffb5 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 800363e:	61f8      	str	r0, [r7, #28]
          break;
 8003640:	e00c      	b.n	800365c <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003642:	4b86      	ldr	r3, [pc, #536]	; (800385c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800364a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800364e:	d104      	bne.n	800365a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8003650:	4b83      	ldr	r3, [pc, #524]	; (8003860 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003652:	61fb      	str	r3, [r7, #28]
          break;
 8003654:	e001      	b.n	800365a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8003656:	bf00      	nop
 8003658:	e118      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800365a:	bf00      	nop
        break;
 800365c:	e116      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800365e:	4b7f      	ldr	r3, [pc, #508]	; (800385c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003664:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003668:	613b      	str	r3, [r7, #16]
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003670:	d013      	beq.n	800369a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003678:	d819      	bhi.n	80036ae <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d004      	beq.n	800368a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003686:	d004      	beq.n	8003692 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8003688:	e011      	b.n	80036ae <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 800368a:	f7ff f825 	bl	80026d8 <HAL_RCC_GetPCLK1Freq>
 800368e:	61f8      	str	r0, [r7, #28]
          break;
 8003690:	e010      	b.n	80036b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003692:	f7fe ff89 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 8003696:	61f8      	str	r0, [r7, #28]
          break;
 8003698:	e00c      	b.n	80036b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800369a:	4b70      	ldr	r3, [pc, #448]	; (800385c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a6:	d104      	bne.n	80036b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 80036a8:	4b6d      	ldr	r3, [pc, #436]	; (8003860 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80036aa:	61fb      	str	r3, [r7, #28]
          break;
 80036ac:	e001      	b.n	80036b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 80036ae:	bf00      	nop
 80036b0:	e0ec      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80036b2:	bf00      	nop
        break;
 80036b4:	e0ea      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80036b6:	4b69      	ldr	r3, [pc, #420]	; (800385c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80036b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036c0:	613b      	str	r3, [r7, #16]
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036c8:	d013      	beq.n	80036f2 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036d0:	d819      	bhi.n	8003706 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d004      	beq.n	80036e2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036de:	d004      	beq.n	80036ea <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 80036e0:	e011      	b.n	8003706 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 80036e2:	f7fe fff9 	bl	80026d8 <HAL_RCC_GetPCLK1Freq>
 80036e6:	61f8      	str	r0, [r7, #28]
          break;
 80036e8:	e010      	b.n	800370c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 80036ea:	f7fe ff5d 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 80036ee:	61f8      	str	r0, [r7, #28]
          break;
 80036f0:	e00c      	b.n	800370c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80036f2:	4b5a      	ldr	r3, [pc, #360]	; (800385c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036fe:	d104      	bne.n	800370a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8003700:	4b57      	ldr	r3, [pc, #348]	; (8003860 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003702:	61fb      	str	r3, [r7, #28]
          break;
 8003704:	e001      	b.n	800370a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8003706:	bf00      	nop
 8003708:	e0c0      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800370a:	bf00      	nop
        break;
 800370c:	e0be      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800370e:	4b53      	ldr	r3, [pc, #332]	; (800385c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003714:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003718:	613b      	str	r3, [r7, #16]
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003720:	d02c      	beq.n	800377c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003728:	d833      	bhi.n	8003792 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003730:	d01a      	beq.n	8003768 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003738:	d82b      	bhi.n	8003792 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d004      	beq.n	800374a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003746:	d004      	beq.n	8003752 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8003748:	e023      	b.n	8003792 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 800374a:	f7fe ffc5 	bl	80026d8 <HAL_RCC_GetPCLK1Freq>
 800374e:	61f8      	str	r0, [r7, #28]
          break;
 8003750:	e026      	b.n	80037a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003752:	4b42      	ldr	r3, [pc, #264]	; (800385c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003754:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b02      	cmp	r3, #2
 800375e:	d11a      	bne.n	8003796 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8003760:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003764:	61fb      	str	r3, [r7, #28]
          break;
 8003766:	e016      	b.n	8003796 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003768:	4b3c      	ldr	r3, [pc, #240]	; (800385c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003774:	d111      	bne.n	800379a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8003776:	4b3a      	ldr	r3, [pc, #232]	; (8003860 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003778:	61fb      	str	r3, [r7, #28]
          break;
 800377a:	e00e      	b.n	800379a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800377c:	4b37      	ldr	r3, [pc, #220]	; (800385c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800377e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b02      	cmp	r3, #2
 8003788:	d109      	bne.n	800379e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 800378a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800378e:	61fb      	str	r3, [r7, #28]
          break;
 8003790:	e005      	b.n	800379e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8003792:	bf00      	nop
 8003794:	e07a      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003796:	bf00      	nop
 8003798:	e078      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800379a:	bf00      	nop
 800379c:	e076      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800379e:	bf00      	nop
        break;
 80037a0:	e074      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80037a2:	4b2e      	ldr	r3, [pc, #184]	; (800385c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80037a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80037ac:	613b      	str	r3, [r7, #16]
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80037b4:	d02c      	beq.n	8003810 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80037bc:	d833      	bhi.n	8003826 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037c4:	d01a      	beq.n	80037fc <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037cc:	d82b      	bhi.n	8003826 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d004      	beq.n	80037de <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037da:	d004      	beq.n	80037e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 80037dc:	e023      	b.n	8003826 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 80037de:	f7fe ff7b 	bl	80026d8 <HAL_RCC_GetPCLK1Freq>
 80037e2:	61f8      	str	r0, [r7, #28]
          break;
 80037e4:	e026      	b.n	8003834 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80037e6:	4b1d      	ldr	r3, [pc, #116]	; (800385c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80037e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d11a      	bne.n	800382a <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 80037f4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80037f8:	61fb      	str	r3, [r7, #28]
          break;
 80037fa:	e016      	b.n	800382a <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80037fc:	4b17      	ldr	r3, [pc, #92]	; (800385c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003808:	d111      	bne.n	800382e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 800380a:	4b15      	ldr	r3, [pc, #84]	; (8003860 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800380c:	61fb      	str	r3, [r7, #28]
          break;
 800380e:	e00e      	b.n	800382e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003810:	4b12      	ldr	r3, [pc, #72]	; (800385c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b02      	cmp	r3, #2
 800381c:	d109      	bne.n	8003832 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 800381e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003822:	61fb      	str	r3, [r7, #28]
          break;
 8003824:	e005      	b.n	8003832 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8003826:	bf00      	nop
 8003828:	e030      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800382a:	bf00      	nop
 800382c:	e02e      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800382e:	bf00      	nop
 8003830:	e02c      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003832:	bf00      	nop
        break;
 8003834:	e02a      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8003836:	4b09      	ldr	r3, [pc, #36]	; (800385c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003840:	613b      	str	r3, [r7, #16]
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d004      	beq.n	8003852 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800384e:	d009      	beq.n	8003864 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8003850:	e012      	b.n	8003878 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003852:	f7fe ff41 	bl	80026d8 <HAL_RCC_GetPCLK1Freq>
 8003856:	61f8      	str	r0, [r7, #28]
          break;
 8003858:	e00e      	b.n	8003878 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 800385a:	bf00      	nop
 800385c:	40021000 	.word	0x40021000
 8003860:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003864:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800386c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003870:	d101      	bne.n	8003876 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8003872:	4b0a      	ldr	r3, [pc, #40]	; (800389c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8003874:	61fb      	str	r3, [r7, #28]
          break;
 8003876:	bf00      	nop
        break;
 8003878:	e008      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800387a:	bf00      	nop
 800387c:	e006      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800387e:	bf00      	nop
 8003880:	e004      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003882:	bf00      	nop
 8003884:	e002      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003886:	bf00      	nop
 8003888:	e000      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800388a:	bf00      	nop
    }
  }

  return(frequency);
 800388c:	69fb      	ldr	r3, [r7, #28]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3720      	adds	r7, #32
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40021000 	.word	0x40021000
 800389c:	00f42400 	.word	0x00f42400

080038a0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80038a4:	4b05      	ldr	r3, [pc, #20]	; (80038bc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a04      	ldr	r2, [pc, #16]	; (80038bc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80038aa:	f043 0304 	orr.w	r3, r3, #4
 80038ae:	6013      	str	r3, [r2, #0]
}
 80038b0:	bf00      	nop
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	40021000 	.word	0x40021000

080038c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038ce:	4b75      	ldr	r3, [pc, #468]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d018      	beq.n	800390c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80038da:	4b72      	ldr	r3, [pc, #456]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f003 0203 	and.w	r2, r3, #3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d10d      	bne.n	8003906 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
       ||
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d009      	beq.n	8003906 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80038f2:	4b6c      	ldr	r3, [pc, #432]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	091b      	lsrs	r3, r3, #4
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	1c5a      	adds	r2, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
       ||
 8003902:	429a      	cmp	r2, r3
 8003904:	d047      	beq.n	8003996 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	73fb      	strb	r3, [r7, #15]
 800390a:	e044      	b.n	8003996 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2b03      	cmp	r3, #3
 8003912:	d018      	beq.n	8003946 <RCCEx_PLLSAI1_Config+0x86>
 8003914:	2b03      	cmp	r3, #3
 8003916:	d825      	bhi.n	8003964 <RCCEx_PLLSAI1_Config+0xa4>
 8003918:	2b01      	cmp	r3, #1
 800391a:	d002      	beq.n	8003922 <RCCEx_PLLSAI1_Config+0x62>
 800391c:	2b02      	cmp	r3, #2
 800391e:	d009      	beq.n	8003934 <RCCEx_PLLSAI1_Config+0x74>
 8003920:	e020      	b.n	8003964 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003922:	4b60      	ldr	r3, [pc, #384]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d11d      	bne.n	800396a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003932:	e01a      	b.n	800396a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003934:	4b5b      	ldr	r3, [pc, #364]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800393c:	2b00      	cmp	r3, #0
 800393e:	d116      	bne.n	800396e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003944:	e013      	b.n	800396e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003946:	4b57      	ldr	r3, [pc, #348]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10f      	bne.n	8003972 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003952:	4b54      	ldr	r3, [pc, #336]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d109      	bne.n	8003972 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003962:	e006      	b.n	8003972 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	73fb      	strb	r3, [r7, #15]
      break;
 8003968:	e004      	b.n	8003974 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800396a:	bf00      	nop
 800396c:	e002      	b.n	8003974 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800396e:	bf00      	nop
 8003970:	e000      	b.n	8003974 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003972:	bf00      	nop
    }

    if(status == HAL_OK)
 8003974:	7bfb      	ldrb	r3, [r7, #15]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10d      	bne.n	8003996 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800397a:	4b4a      	ldr	r3, [pc, #296]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6819      	ldr	r1, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	3b01      	subs	r3, #1
 800398c:	011b      	lsls	r3, r3, #4
 800398e:	430b      	orrs	r3, r1
 8003990:	4944      	ldr	r1, [pc, #272]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003992:	4313      	orrs	r3, r2
 8003994:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003996:	7bfb      	ldrb	r3, [r7, #15]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d17d      	bne.n	8003a98 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800399c:	4b41      	ldr	r3, [pc, #260]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a40      	ldr	r2, [pc, #256]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039a8:	f7fd fbee 	bl	8001188 <HAL_GetTick>
 80039ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039ae:	e009      	b.n	80039c4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039b0:	f7fd fbea 	bl	8001188 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d902      	bls.n	80039c4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	73fb      	strb	r3, [r7, #15]
        break;
 80039c2:	e005      	b.n	80039d0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039c4:	4b37      	ldr	r3, [pc, #220]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1ef      	bne.n	80039b0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d160      	bne.n	8003a98 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d111      	bne.n	8003a00 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039dc:	4b31      	ldr	r3, [pc, #196]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80039e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6892      	ldr	r2, [r2, #8]
 80039ec:	0211      	lsls	r1, r2, #8
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	68d2      	ldr	r2, [r2, #12]
 80039f2:	0912      	lsrs	r2, r2, #4
 80039f4:	0452      	lsls	r2, r2, #17
 80039f6:	430a      	orrs	r2, r1
 80039f8:	492a      	ldr	r1, [pc, #168]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	610b      	str	r3, [r1, #16]
 80039fe:	e027      	b.n	8003a50 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d112      	bne.n	8003a2c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a06:	4b27      	ldr	r3, [pc, #156]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003a0e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6892      	ldr	r2, [r2, #8]
 8003a16:	0211      	lsls	r1, r2, #8
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6912      	ldr	r2, [r2, #16]
 8003a1c:	0852      	lsrs	r2, r2, #1
 8003a1e:	3a01      	subs	r2, #1
 8003a20:	0552      	lsls	r2, r2, #21
 8003a22:	430a      	orrs	r2, r1
 8003a24:	491f      	ldr	r1, [pc, #124]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	610b      	str	r3, [r1, #16]
 8003a2a:	e011      	b.n	8003a50 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a2c:	4b1d      	ldr	r3, [pc, #116]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6892      	ldr	r2, [r2, #8]
 8003a3c:	0211      	lsls	r1, r2, #8
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6952      	ldr	r2, [r2, #20]
 8003a42:	0852      	lsrs	r2, r2, #1
 8003a44:	3a01      	subs	r2, #1
 8003a46:	0652      	lsls	r2, r2, #25
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	4916      	ldr	r1, [pc, #88]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a50:	4b14      	ldr	r3, [pc, #80]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a13      	ldr	r2, [pc, #76]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a5c:	f7fd fb94 	bl	8001188 <HAL_GetTick>
 8003a60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a62:	e009      	b.n	8003a78 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a64:	f7fd fb90 	bl	8001188 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d902      	bls.n	8003a78 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	73fb      	strb	r3, [r7, #15]
          break;
 8003a76:	e005      	b.n	8003a84 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a78:	4b0a      	ldr	r3, [pc, #40]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0ef      	beq.n	8003a64 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d106      	bne.n	8003a98 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a8a:	4b06      	ldr	r3, [pc, #24]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a8c:	691a      	ldr	r2, [r3, #16]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	4904      	ldr	r1, [pc, #16]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40021000 	.word	0x40021000

08003aa8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ab6:	4b6a      	ldr	r3, [pc, #424]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d018      	beq.n	8003af4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003ac2:	4b67      	ldr	r3, [pc, #412]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f003 0203 	and.w	r2, r3, #3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d10d      	bne.n	8003aee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
       ||
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d009      	beq.n	8003aee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003ada:	4b61      	ldr	r3, [pc, #388]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	091b      	lsrs	r3, r3, #4
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
       ||
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d047      	beq.n	8003b7e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	73fb      	strb	r3, [r7, #15]
 8003af2:	e044      	b.n	8003b7e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b03      	cmp	r3, #3
 8003afa:	d018      	beq.n	8003b2e <RCCEx_PLLSAI2_Config+0x86>
 8003afc:	2b03      	cmp	r3, #3
 8003afe:	d825      	bhi.n	8003b4c <RCCEx_PLLSAI2_Config+0xa4>
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d002      	beq.n	8003b0a <RCCEx_PLLSAI2_Config+0x62>
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d009      	beq.n	8003b1c <RCCEx_PLLSAI2_Config+0x74>
 8003b08:	e020      	b.n	8003b4c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b0a:	4b55      	ldr	r3, [pc, #340]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d11d      	bne.n	8003b52 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b1a:	e01a      	b.n	8003b52 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b1c:	4b50      	ldr	r3, [pc, #320]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d116      	bne.n	8003b56 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b2c:	e013      	b.n	8003b56 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b2e:	4b4c      	ldr	r3, [pc, #304]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10f      	bne.n	8003b5a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b3a:	4b49      	ldr	r3, [pc, #292]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d109      	bne.n	8003b5a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b4a:	e006      	b.n	8003b5a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b50:	e004      	b.n	8003b5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b52:	bf00      	nop
 8003b54:	e002      	b.n	8003b5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b56:	bf00      	nop
 8003b58:	e000      	b.n	8003b5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b5c:	7bfb      	ldrb	r3, [r7, #15]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10d      	bne.n	8003b7e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b62:	4b3f      	ldr	r3, [pc, #252]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6819      	ldr	r1, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	3b01      	subs	r3, #1
 8003b74:	011b      	lsls	r3, r3, #4
 8003b76:	430b      	orrs	r3, r1
 8003b78:	4939      	ldr	r1, [pc, #228]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b7e:	7bfb      	ldrb	r3, [r7, #15]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d167      	bne.n	8003c54 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b84:	4b36      	ldr	r3, [pc, #216]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a35      	ldr	r2, [pc, #212]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b90:	f7fd fafa 	bl	8001188 <HAL_GetTick>
 8003b94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b96:	e009      	b.n	8003bac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b98:	f7fd faf6 	bl	8001188 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d902      	bls.n	8003bac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	73fb      	strb	r3, [r7, #15]
        break;
 8003baa:	e005      	b.n	8003bb8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bac:	4b2c      	ldr	r3, [pc, #176]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1ef      	bne.n	8003b98 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d14a      	bne.n	8003c54 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d111      	bne.n	8003be8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bc4:	4b26      	ldr	r3, [pc, #152]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6892      	ldr	r2, [r2, #8]
 8003bd4:	0211      	lsls	r1, r2, #8
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	68d2      	ldr	r2, [r2, #12]
 8003bda:	0912      	lsrs	r2, r2, #4
 8003bdc:	0452      	lsls	r2, r2, #17
 8003bde:	430a      	orrs	r2, r1
 8003be0:	491f      	ldr	r1, [pc, #124]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	614b      	str	r3, [r1, #20]
 8003be6:	e011      	b.n	8003c0c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003be8:	4b1d      	ldr	r3, [pc, #116]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003bf0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6892      	ldr	r2, [r2, #8]
 8003bf8:	0211      	lsls	r1, r2, #8
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6912      	ldr	r2, [r2, #16]
 8003bfe:	0852      	lsrs	r2, r2, #1
 8003c00:	3a01      	subs	r2, #1
 8003c02:	0652      	lsls	r2, r2, #25
 8003c04:	430a      	orrs	r2, r1
 8003c06:	4916      	ldr	r1, [pc, #88]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c0c:	4b14      	ldr	r3, [pc, #80]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a13      	ldr	r2, [pc, #76]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c18:	f7fd fab6 	bl	8001188 <HAL_GetTick>
 8003c1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c1e:	e009      	b.n	8003c34 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c20:	f7fd fab2 	bl	8001188 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d902      	bls.n	8003c34 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	73fb      	strb	r3, [r7, #15]
          break;
 8003c32:	e005      	b.n	8003c40 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c34:	4b0a      	ldr	r3, [pc, #40]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0ef      	beq.n	8003c20 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d106      	bne.n	8003c54 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c46:	4b06      	ldr	r3, [pc, #24]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c48:	695a      	ldr	r2, [r3, #20]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	4904      	ldr	r1, [pc, #16]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	40021000 	.word	0x40021000

08003c64 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b089      	sub	sp, #36	; 0x24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8003c72:	2300      	movs	r3, #0
 8003c74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c80:	d10c      	bne.n	8003c9c <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8003c82:	4b6e      	ldr	r3, [pc, #440]	; (8003e3c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c88:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003c8c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c94:	d112      	bne.n	8003cbc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8003c96:	4b6a      	ldr	r3, [pc, #424]	; (8003e40 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8003c98:	61fb      	str	r3, [r7, #28]
 8003c9a:	e00f      	b.n	8003cbc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca2:	d10b      	bne.n	8003cbc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8003ca4:	4b65      	ldr	r3, [pc, #404]	; (8003e3c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003caa:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8003cae:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003cb6:	d101      	bne.n	8003cbc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8003cb8:	4b61      	ldr	r3, [pc, #388]	; (8003e40 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8003cba:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f040 80b4 	bne.w	8003e2c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cce:	d003      	beq.n	8003cd8 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cd6:	d135      	bne.n	8003d44 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8003cd8:	4b58      	ldr	r3, [pc, #352]	; (8003e3c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ce4:	f040 80a1 	bne.w	8003e2a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8003ce8:	4b54      	ldr	r3, [pc, #336]	; (8003e3c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 809a 	beq.w	8003e2a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003cf6:	4b51      	ldr	r3, [pc, #324]	; (8003e3c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	091b      	lsrs	r3, r3, #4
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	3301      	adds	r3, #1
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d08:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003d0a:	4b4c      	ldr	r3, [pc, #304]	; (8003e3c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	0a1b      	lsrs	r3, r3, #8
 8003d10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d14:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10a      	bne.n	8003d32 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8003d1c:	4b47      	ldr	r3, [pc, #284]	; (8003e3c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d002      	beq.n	8003d2e <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8003d28:	2311      	movs	r3, #17
 8003d2a:	617b      	str	r3, [r7, #20]
 8003d2c:	e001      	b.n	8003d32 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8003d2e:	2307      	movs	r3, #7
 8003d30:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	fb03 f202 	mul.w	r2, r3, r2
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d40:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8003d42:	e072      	b.n	8003e2a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d133      	bne.n	8003db2 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8003d4a:	4b3c      	ldr	r3, [pc, #240]	; (8003e3c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d56:	d169      	bne.n	8003e2c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8003d58:	4b38      	ldr	r3, [pc, #224]	; (8003e3c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d063      	beq.n	8003e2c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003d64:	4b35      	ldr	r3, [pc, #212]	; (8003e3c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	091b      	lsrs	r3, r3, #4
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	3301      	adds	r3, #1
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d76:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003d78:	4b30      	ldr	r3, [pc, #192]	; (8003e3c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	0a1b      	lsrs	r3, r3, #8
 8003d7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d82:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10a      	bne.n	8003da0 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8003d8a:	4b2c      	ldr	r3, [pc, #176]	; (8003e3c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8003d96:	2311      	movs	r3, #17
 8003d98:	617b      	str	r3, [r7, #20]
 8003d9a:	e001      	b.n	8003da0 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8003d9c:	2307      	movs	r3, #7
 8003d9e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	fb03 f202 	mul.w	r2, r3, r2
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dae:	61fb      	str	r3, [r7, #28]
 8003db0:	e03c      	b.n	8003e2c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003db8:	d003      	beq.n	8003dc2 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dc0:	d134      	bne.n	8003e2c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8003dc2:	4b1e      	ldr	r3, [pc, #120]	; (8003e3c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dce:	d12d      	bne.n	8003e2c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8003dd0:	4b1a      	ldr	r3, [pc, #104]	; (8003e3c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d027      	beq.n	8003e2c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003ddc:	4b17      	ldr	r3, [pc, #92]	; (8003e3c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	091b      	lsrs	r3, r3, #4
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	3301      	adds	r3, #1
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dee:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8003df0:	4b12      	ldr	r3, [pc, #72]	; (8003e3c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	0a1b      	lsrs	r3, r3, #8
 8003df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dfa:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10a      	bne.n	8003e18 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8003e02:	4b0e      	ldr	r3, [pc, #56]	; (8003e3c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8003e0e:	2311      	movs	r3, #17
 8003e10:	617b      	str	r3, [r7, #20]
 8003e12:	e001      	b.n	8003e18 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8003e14:	2307      	movs	r3, #7
 8003e16:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	fb03 f202 	mul.w	r2, r3, r2
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e26:	61fb      	str	r3, [r7, #28]
 8003e28:	e000      	b.n	8003e2c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8003e2a:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8003e2c:	69fb      	ldr	r3, [r7, #28]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3724      	adds	r7, #36	; 0x24
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	001fff68 	.word	0x001fff68

08003e44 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
 8003e50:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d904      	bls.n	8003e62 <HAL_SAI_InitProtocol+0x1e>
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	3b03      	subs	r3, #3
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d812      	bhi.n	8003e86 <HAL_SAI_InitProtocol+0x42>
 8003e60:	e008      	b.n	8003e74 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	68b9      	ldr	r1, [r7, #8]
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 fa2b 	bl	80042c4 <SAI_InitI2S>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	75fb      	strb	r3, [r7, #23]
      break;
 8003e72:	e00b      	b.n	8003e8c <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	68b9      	ldr	r1, [r7, #8]
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 fad4 	bl	8004428 <SAI_InitPCM>
 8003e80:	4603      	mov	r3, r0
 8003e82:	75fb      	strb	r3, [r7, #23]
      break;
 8003e84:	e002      	b.n	8003e8c <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	75fb      	strb	r3, [r7, #23]
      break;
 8003e8a:	bf00      	nop
  }

  if (status == HAL_OK)
 8003e8c:	7dfb      	ldrb	r3, [r7, #23]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d104      	bne.n	8003e9c <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 f808 	bl	8003ea8 <HAL_SAI_Init>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3718      	adds	r7, #24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
	...

08003ea8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b088      	sub	sp, #32
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e155      	b.n	8004166 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d106      	bne.n	8003ed4 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7fc ff10 	bl	8000cf4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 fb61 	bl	800459c <SAI_Disable>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e140      	b.n	8004166 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d00c      	beq.n	8003f0e <HAL_SAI_Init+0x66>
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d80d      	bhi.n	8003f14 <HAL_SAI_Init+0x6c>
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <HAL_SAI_Init+0x5a>
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d003      	beq.n	8003f08 <HAL_SAI_Init+0x60>
 8003f00:	e008      	b.n	8003f14 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8003f02:	2300      	movs	r3, #0
 8003f04:	61fb      	str	r3, [r7, #28]
      break;
 8003f06:	e008      	b.n	8003f1a <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8003f08:	2310      	movs	r3, #16
 8003f0a:	61fb      	str	r3, [r7, #28]
      break;
 8003f0c:	e005      	b.n	8003f1a <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8003f0e:	2320      	movs	r3, #32
 8003f10:	61fb      	str	r3, [r7, #28]
      break;
 8003f12:	e002      	b.n	8003f1a <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8003f14:	2300      	movs	r3, #0
 8003f16:	61fb      	str	r3, [r7, #28]
      break;
 8003f18:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	2b03      	cmp	r3, #3
 8003f20:	d81d      	bhi.n	8003f5e <HAL_SAI_Init+0xb6>
 8003f22:	a201      	add	r2, pc, #4	; (adr r2, 8003f28 <HAL_SAI_Init+0x80>)
 8003f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f28:	08003f39 	.word	0x08003f39
 8003f2c:	08003f3f 	.word	0x08003f3f
 8003f30:	08003f47 	.word	0x08003f47
 8003f34:	08003f4f 	.word	0x08003f4f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	617b      	str	r3, [r7, #20]
      break;
 8003f3c:	e012      	b.n	8003f64 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8003f3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f42:	617b      	str	r3, [r7, #20]
      break;
 8003f44:	e00e      	b.n	8003f64 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8003f46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f4a:	617b      	str	r3, [r7, #20]
      break;
 8003f4c:	e00a      	b.n	8003f64 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8003f4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f52:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	f043 0301 	orr.w	r3, r3, #1
 8003f5a:	61fb      	str	r3, [r7, #28]
      break;
 8003f5c:	e002      	b.n	8003f64 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	617b      	str	r3, [r7, #20]
      break;
 8003f62:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a81      	ldr	r2, [pc, #516]	; (8004170 <HAL_SAI_Init+0x2c8>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d004      	beq.n	8003f78 <HAL_SAI_Init+0xd0>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a80      	ldr	r2, [pc, #512]	; (8004174 <HAL_SAI_Init+0x2cc>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d103      	bne.n	8003f80 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8003f78:	4a7f      	ldr	r2, [pc, #508]	; (8004178 <HAL_SAI_Init+0x2d0>)
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	6013      	str	r3, [r2, #0]
 8003f7e:	e002      	b.n	8003f86 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8003f80:	4a7e      	ldr	r2, [pc, #504]	; (800417c <HAL_SAI_Init+0x2d4>)
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d041      	beq.n	8004012 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a77      	ldr	r2, [pc, #476]	; (8004170 <HAL_SAI_Init+0x2c8>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d004      	beq.n	8003fa2 <HAL_SAI_Init+0xfa>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a75      	ldr	r2, [pc, #468]	; (8004174 <HAL_SAI_Init+0x2cc>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d105      	bne.n	8003fae <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8003fa2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003fa6:	f7fe ff0d 	bl	8002dc4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003faa:	6138      	str	r0, [r7, #16]
 8003fac:	e004      	b.n	8003fb8 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8003fae:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003fb2:	f7fe ff07 	bl	8002dc4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003fb6:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	69db      	ldr	r3, [r3, #28]
 8003fc8:	025b      	lsls	r3, r3, #9
 8003fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fce:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4a6b      	ldr	r2, [pc, #428]	; (8004180 <HAL_SAI_Init+0x2d8>)
 8003fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd8:	08da      	lsrs	r2, r3, #3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8003fde:	68f9      	ldr	r1, [r7, #12]
 8003fe0:	4b67      	ldr	r3, [pc, #412]	; (8004180 <HAL_SAI_Init+0x2d8>)
 8003fe2:	fba3 2301 	umull	r2, r3, r3, r1
 8003fe6:	08da      	lsrs	r2, r3, #3
 8003fe8:	4613      	mov	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	1aca      	subs	r2, r1, r3
 8003ff2:	2a08      	cmp	r2, #8
 8003ff4:	d904      	bls.n	8004000 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	1c5a      	adds	r2, r3, #1
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004004:	2b04      	cmp	r3, #4
 8004006:	d104      	bne.n	8004012 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	085a      	lsrs	r2, r3, #1
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_SAI_Init+0x17a>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2b02      	cmp	r3, #2
 8004020:	d109      	bne.n	8004036 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004026:	2b01      	cmp	r3, #1
 8004028:	d101      	bne.n	800402e <HAL_SAI_Init+0x186>
 800402a:	2300      	movs	r3, #0
 800402c:	e001      	b.n	8004032 <HAL_SAI_Init+0x18a>
 800402e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004032:	61bb      	str	r3, [r7, #24]
 8004034:	e008      	b.n	8004048 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403a:	2b01      	cmp	r3, #1
 800403c:	d102      	bne.n	8004044 <HAL_SAI_Init+0x19c>
 800403e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004042:	e000      	b.n	8004046 <HAL_SAI_Init+0x19e>
 8004044:	2300      	movs	r3, #0
 8004046:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6819      	ldr	r1, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	4b4c      	ldr	r3, [pc, #304]	; (8004184 <HAL_SAI_Init+0x2dc>)
 8004054:	400b      	ands	r3, r1
 8004056:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6819      	ldr	r1, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004066:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800406c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004072:	431a      	orrs	r2, r3
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8004080:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800408c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	051b      	lsls	r3, r3, #20
 8004094:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6812      	ldr	r2, [r2, #0]
 80040a8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80040ac:	f023 030f 	bic.w	r3, r3, #15
 80040b0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6859      	ldr	r1, [r3, #4]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	699a      	ldr	r2, [r3, #24]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c0:	431a      	orrs	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c6:	431a      	orrs	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	6899      	ldr	r1, [r3, #8]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	4b2b      	ldr	r3, [pc, #172]	; (8004188 <HAL_SAI_Init+0x2e0>)
 80040dc:	400b      	ands	r3, r1
 80040de:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6899      	ldr	r1, [r3, #8]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80040f0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 80040f6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 80040fc:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004102:	3b01      	subs	r3, #1
 8004104:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004106:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	430a      	orrs	r2, r1
 800410e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68d9      	ldr	r1, [r3, #12]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	f24f 0320 	movw	r3, #61472	; 0xf020
 800411e:	400b      	ands	r3, r1
 8004120:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68d9      	ldr	r1, [r3, #12]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004130:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004136:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004138:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413e:	3b01      	subs	r3, #1
 8004140:	021b      	lsls	r3, r3, #8
 8004142:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	430a      	orrs	r2, r1
 800414a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3720      	adds	r7, #32
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	40015404 	.word	0x40015404
 8004174:	40015424 	.word	0x40015424
 8004178:	40015400 	.word	0x40015400
 800417c:	40015800 	.word	0x40015800
 8004180:	cccccccd 	.word	0xcccccccd
 8004184:	ff05c010 	.word	0xff05c010
 8004188:	fff88000 	.word	0xfff88000

0800418c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	4613      	mov	r3, r2
 8004198:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d002      	beq.n	80041a6 <HAL_SAI_Receive_DMA+0x1a>
 80041a0:	88fb      	ldrh	r3, [r7, #6]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e074      	b.n	8004294 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d16d      	bne.n	8004292 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d101      	bne.n	80041c4 <HAL_SAI_Receive_DMA+0x38>
 80041c0:	2302      	movs	r3, #2
 80041c2:	e067      	b.n	8004294 <HAL_SAI_Receive_DMA+0x108>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	88fa      	ldrh	r2, [r7, #6]
 80041d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	88fa      	ldrh	r2, [r7, #6]
 80041de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2222      	movs	r2, #34	; 0x22
 80041ee:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f6:	4a29      	ldr	r2, [pc, #164]	; (800429c <HAL_SAI_Receive_DMA+0x110>)
 80041f8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fe:	4a28      	ldr	r2, [pc, #160]	; (80042a0 <HAL_SAI_Receive_DMA+0x114>)
 8004200:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004206:	4a27      	ldr	r2, [pc, #156]	; (80042a4 <HAL_SAI_Receive_DMA+0x118>)
 8004208:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420e:	2200      	movs	r2, #0
 8004210:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	331c      	adds	r3, #28
 800421c:	4619      	mov	r1, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004222:	461a      	mov	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800422a:	f7fd f983 	bl	8001534 <HAL_DMA_Start_IT>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d005      	beq.n	8004240 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e029      	b.n	8004294 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004240:	2100      	movs	r1, #0
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 f972 	bl	800452c <SAI_InterruptFlag>
 8004248:	4601      	mov	r1, r0
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	691a      	ldr	r2, [r3, #16]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004266:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d107      	bne.n	8004286 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004284:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800428e:	2300      	movs	r3, #0
 8004290:	e000      	b.n	8004294 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8004292:	2302      	movs	r3, #2
  }
}
 8004294:	4618      	mov	r0, r3
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	0800466f 	.word	0x0800466f
 80042a0:	08004611 	.word	0x08004611
 80042a4:	0800468b 	.word	0x0800468b

080042a8 <HAL_SAI_GetError>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for the specified SAI Block.
  * @retval SAI Error Code
  */
uint32_t HAL_SAI_GetError(const SAI_HandleTypeDef *hsai)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  return hsai->ErrorCode;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
	...

080042c4 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
 80042d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042d2:	2300      	movs	r3, #0
 80042d4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <SAI_InitI2S+0x2e>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d103      	bne.n	80042fa <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80042f8:	e002      	b.n	8004300 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2201      	movs	r2, #1
 80042fe:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004306:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800430e:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e077      	b.n	800441a <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d107      	bne.n	8004340 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800433c:	651a      	str	r2, [r3, #80]	; 0x50
 800433e:	e006      	b.n	800434e <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004346:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Frame definition */
  switch (datasize)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b03      	cmp	r3, #3
 8004352:	d84f      	bhi.n	80043f4 <SAI_InitI2S+0x130>
 8004354:	a201      	add	r2, pc, #4	; (adr r2, 800435c <SAI_InitI2S+0x98>)
 8004356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435a:	bf00      	nop
 800435c:	0800436d 	.word	0x0800436d
 8004360:	0800438f 	.word	0x0800438f
 8004364:	080043b1 	.word	0x080043b1
 8004368:	080043d3 	.word	0x080043d3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2280      	movs	r2, #128	; 0x80
 8004370:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	085b      	lsrs	r3, r3, #1
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	085b      	lsrs	r3, r3, #1
 8004380:	011a      	lsls	r2, r3, #4
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2240      	movs	r2, #64	; 0x40
 800438a:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800438c:	e035      	b.n	80043fa <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2280      	movs	r2, #128	; 0x80
 8004392:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	085b      	lsrs	r3, r3, #1
 8004398:	019a      	lsls	r2, r3, #6
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	085b      	lsrs	r3, r3, #1
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2280      	movs	r2, #128	; 0x80
 80043ac:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80043ae:	e024      	b.n	80043fa <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	22c0      	movs	r2, #192	; 0xc0
 80043b4:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	085b      	lsrs	r3, r3, #1
 80043ba:	019a      	lsls	r2, r3, #6
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	085b      	lsrs	r3, r3, #1
 80043c4:	015a      	lsls	r2, r3, #5
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2280      	movs	r2, #128	; 0x80
 80043ce:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80043d0:	e013      	b.n	80043fa <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	22e0      	movs	r2, #224	; 0xe0
 80043d6:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	085b      	lsrs	r3, r3, #1
 80043dc:	019a      	lsls	r2, r3, #6
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	085b      	lsrs	r3, r3, #1
 80043e6:	015a      	lsls	r2, r3, #5
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2280      	movs	r2, #128	; 0x80
 80043f0:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80043f2:	e002      	b.n	80043fa <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	75fb      	strb	r3, [r7, #23]
      break;
 80043f8:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d10b      	bne.n	8004418 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d102      	bne.n	800440c <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2210      	movs	r2, #16
 800440a:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b02      	cmp	r3, #2
 8004410:	d102      	bne.n	8004418 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2208      	movs	r2, #8
 8004416:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  return status;
 8004418:	7dfb      	ldrb	r3, [r7, #23]
}
 800441a:	4618      	mov	r0, r3
 800441c:	371c      	adds	r7, #28
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop

08004428 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004428:	b480      	push	{r7}
 800442a:	b087      	sub	sp, #28
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
 8004434:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004436:	2300      	movs	r3, #0
 8004438:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <SAI_InitPCM+0x2e>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2b02      	cmp	r3, #2
 8004454:	d103      	bne.n	800445e <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2201      	movs	r2, #1
 800445a:	63da      	str	r2, [r3, #60]	; 0x3c
 800445c:	e002      	b.n	8004464 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004470:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004478:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800448c:	661a      	str	r2, [r3, #96]	; 0x60

  if (protocol == SAI_PCM_SHORT)
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	2b04      	cmp	r3, #4
 8004492:	d103      	bne.n	800449c <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2201      	movs	r2, #1
 8004498:	645a      	str	r2, [r3, #68]	; 0x44
 800449a:	e002      	b.n	80044a2 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	220d      	movs	r2, #13
 80044a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  switch (datasize)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b03      	cmp	r3, #3
 80044a6:	d837      	bhi.n	8004518 <SAI_InitPCM+0xf0>
 80044a8:	a201      	add	r2, pc, #4	; (adr r2, 80044b0 <SAI_InitPCM+0x88>)
 80044aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ae:	bf00      	nop
 80044b0:	080044c1 	.word	0x080044c1
 80044b4:	080044d7 	.word	0x080044d7
 80044b8:	080044ed 	.word	0x080044ed
 80044bc:	08004503 	.word	0x08004503
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2280      	movs	r2, #128	; 0x80
 80044c4:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	011a      	lsls	r2, r3, #4
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2240      	movs	r2, #64	; 0x40
 80044d2:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80044d4:	e023      	b.n	800451e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2280      	movs	r2, #128	; 0x80
 80044da:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	015a      	lsls	r2, r3, #5
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2280      	movs	r2, #128	; 0x80
 80044e8:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80044ea:	e018      	b.n	800451e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	22c0      	movs	r2, #192	; 0xc0
 80044f0:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	015a      	lsls	r2, r3, #5
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2280      	movs	r2, #128	; 0x80
 80044fe:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8004500:	e00d      	b.n	800451e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	22e0      	movs	r2, #224	; 0xe0
 8004506:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2280      	movs	r2, #128	; 0x80
 8004514:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8004516:	e002      	b.n	800451e <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	75fb      	strb	r3, [r7, #23]
      break;
 800451c:	bf00      	nop
  }

  return status;
 800451e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004520:	4618      	mov	r0, r3
 8004522:	371c      	adds	r7, #28
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	460b      	mov	r3, r1
 8004536:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8004538:	2301      	movs	r3, #1
 800453a:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800453c:	78fb      	ldrb	r3, [r7, #3]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d103      	bne.n	800454a <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f043 0308 	orr.w	r3, r3, #8
 8004548:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454e:	2b08      	cmp	r3, #8
 8004550:	d10b      	bne.n	800456a <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004556:	2b03      	cmp	r3, #3
 8004558:	d003      	beq.n	8004562 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d103      	bne.n	800456a <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f043 0310 	orr.w	r3, r3, #16
 8004568:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2b03      	cmp	r3, #3
 8004570:	d003      	beq.n	800457a <SAI_InterruptFlag+0x4e>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2b02      	cmp	r3, #2
 8004578:	d104      	bne.n	8004584 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004580:	60fb      	str	r3, [r7, #12]
 8004582:	e003      	b.n	800458c <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f043 0304 	orr.w	r3, r3, #4
 800458a:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800458c:	68fb      	ldr	r3, [r7, #12]
}
 800458e:	4618      	mov	r0, r3
 8004590:	3714      	adds	r7, #20
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
	...

0800459c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80045a4:	4b18      	ldr	r3, [pc, #96]	; (8004608 <SAI_Disable+0x6c>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a18      	ldr	r2, [pc, #96]	; (800460c <SAI_Disable+0x70>)
 80045aa:	fba2 2303 	umull	r2, r3, r2, r3
 80045ae:	0b1b      	lsrs	r3, r3, #12
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80045b4:	2300      	movs	r3, #0
 80045b6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80045c6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10a      	bne.n	80045e4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	72fb      	strb	r3, [r7, #11]
      break;
 80045e2:	e009      	b.n	80045f8 <SAI_Disable+0x5c>
    }
    count--;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	3b01      	subs	r3, #1
 80045e8:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1e7      	bne.n	80045c8 <SAI_Disable+0x2c>

  return status;
 80045f8:	7afb      	ldrb	r3, [r7, #11]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3714      	adds	r7, #20
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	20000000 	.word	0x20000000
 800460c:	95cbec1b 	.word	0x95cbec1b

08004610 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	2b20      	cmp	r3, #32
 8004624:	d01c      	beq.n	8004660 <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004634:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800463e:	2100      	movs	r1, #0
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f7ff ff73 	bl	800452c <SAI_InterruptFlag>
 8004646:	4603      	mov	r3, r0
 8004648:	43d9      	mvns	r1, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	691a      	ldr	r2, [r3, #16]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	400a      	ands	r2, r1
 8004656:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f7fb ff8b 	bl	800057c <HAL_SAI_RxCpltCallback>
#endif
}
 8004666:	bf00      	nop
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b084      	sub	sp, #16
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f7fb ff95 	bl	80005ac <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8004682:	bf00      	nop
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b084      	sub	sp, #16
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004696:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800469e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80046b6:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f7ff ff6f 	bl	800459c <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f7fb ffea 	bl	80006a8 <HAL_SAI_ErrorCallback>
#endif
}
 80046d4:	bf00      	nop
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e095      	b.n	800481a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d108      	bne.n	8004708 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046fe:	d009      	beq.n	8004714 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	61da      	str	r2, [r3, #28]
 8004706:	e005      	b.n	8004714 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d106      	bne.n	8004734 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7fc fa12 	bl	8000b58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800474a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004754:	d902      	bls.n	800475c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	e002      	b.n	8004762 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800475c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004760:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800476a:	d007      	beq.n	800477c <HAL_SPI_Init+0xa0>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004774:	d002      	beq.n	800477c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800478c:	431a      	orrs	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	431a      	orrs	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047b4:	431a      	orrs	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047be:	ea42 0103 	orr.w	r1, r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	0c1b      	lsrs	r3, r3, #16
 80047d8:	f003 0204 	and.w	r2, r3, #4
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	f003 0310 	and.w	r3, r3, #16
 80047e4:	431a      	orrs	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ea:	f003 0308 	and.w	r3, r3, #8
 80047ee:	431a      	orrs	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80047f8:	ea42 0103 	orr.w	r1, r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b088      	sub	sp, #32
 8004826:	af00      	add	r7, sp, #0
 8004828:	60f8      	str	r0, [r7, #12]
 800482a:	60b9      	str	r1, [r7, #8]
 800482c:	603b      	str	r3, [r7, #0]
 800482e:	4613      	mov	r3, r2
 8004830:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800483c:	2b01      	cmp	r3, #1
 800483e:	d101      	bne.n	8004844 <HAL_SPI_Transmit+0x22>
 8004840:	2302      	movs	r3, #2
 8004842:	e15f      	b.n	8004b04 <HAL_SPI_Transmit+0x2e2>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800484c:	f7fc fc9c 	bl	8001188 <HAL_GetTick>
 8004850:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004852:	88fb      	ldrh	r3, [r7, #6]
 8004854:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b01      	cmp	r3, #1
 8004860:	d002      	beq.n	8004868 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004862:	2302      	movs	r3, #2
 8004864:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004866:	e148      	b.n	8004afa <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d002      	beq.n	8004874 <HAL_SPI_Transmit+0x52>
 800486e:	88fb      	ldrh	r3, [r7, #6]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d102      	bne.n	800487a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004878:	e13f      	b.n	8004afa <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2203      	movs	r2, #3
 800487e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	88fa      	ldrh	r2, [r7, #6]
 8004892:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	88fa      	ldrh	r2, [r7, #6]
 8004898:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048c4:	d10f      	bne.n	80048e6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f0:	2b40      	cmp	r3, #64	; 0x40
 80048f2:	d007      	beq.n	8004904 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004902:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800490c:	d94f      	bls.n	80049ae <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d002      	beq.n	800491c <HAL_SPI_Transmit+0xfa>
 8004916:	8afb      	ldrh	r3, [r7, #22]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d142      	bne.n	80049a2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004920:	881a      	ldrh	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492c:	1c9a      	adds	r2, r3, #2
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004936:	b29b      	uxth	r3, r3
 8004938:	3b01      	subs	r3, #1
 800493a:	b29a      	uxth	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004940:	e02f      	b.n	80049a2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b02      	cmp	r3, #2
 800494e:	d112      	bne.n	8004976 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004954:	881a      	ldrh	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004960:	1c9a      	adds	r2, r3, #2
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800496a:	b29b      	uxth	r3, r3
 800496c:	3b01      	subs	r3, #1
 800496e:	b29a      	uxth	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004974:	e015      	b.n	80049a2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004976:	f7fc fc07 	bl	8001188 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	429a      	cmp	r2, r3
 8004984:	d803      	bhi.n	800498e <HAL_SPI_Transmit+0x16c>
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498c:	d102      	bne.n	8004994 <HAL_SPI_Transmit+0x172>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d106      	bne.n	80049a2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80049a0:	e0ab      	b.n	8004afa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1ca      	bne.n	8004942 <HAL_SPI_Transmit+0x120>
 80049ac:	e080      	b.n	8004ab0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d002      	beq.n	80049bc <HAL_SPI_Transmit+0x19a>
 80049b6:	8afb      	ldrh	r3, [r7, #22]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d174      	bne.n	8004aa6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d912      	bls.n	80049ec <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ca:	881a      	ldrh	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d6:	1c9a      	adds	r2, r3, #2
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	3b02      	subs	r3, #2
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049ea:	e05c      	b.n	8004aa6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	330c      	adds	r3, #12
 80049f6:	7812      	ldrb	r2, [r2, #0]
 80049f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fe:	1c5a      	adds	r2, r3, #1
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004a12:	e048      	b.n	8004aa6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d12b      	bne.n	8004a7a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d912      	bls.n	8004a52 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a30:	881a      	ldrh	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3c:	1c9a      	adds	r2, r3, #2
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	3b02      	subs	r3, #2
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a50:	e029      	b.n	8004aa6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	330c      	adds	r3, #12
 8004a5c:	7812      	ldrb	r2, [r2, #0]
 8004a5e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a64:	1c5a      	adds	r2, r3, #1
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	3b01      	subs	r3, #1
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a78:	e015      	b.n	8004aa6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a7a:	f7fc fb85 	bl	8001188 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d803      	bhi.n	8004a92 <HAL_SPI_Transmit+0x270>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a90:	d102      	bne.n	8004a98 <HAL_SPI_Transmit+0x276>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d106      	bne.n	8004aa6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004aa4:	e029      	b.n	8004afa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1b1      	bne.n	8004a14 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	6839      	ldr	r1, [r7, #0]
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f000 f947 	bl	8004d48 <SPI_EndRxTxTransaction>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d002      	beq.n	8004ac6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10a      	bne.n	8004ae4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ace:	2300      	movs	r3, #0
 8004ad0:	613b      	str	r3, [r7, #16]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	613b      	str	r3, [r7, #16]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	613b      	str	r3, [r7, #16]
 8004ae2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d002      	beq.n	8004af2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	77fb      	strb	r3, [r7, #31]
 8004af0:	e003      	b.n	8004afa <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004b02:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3720      	adds	r7, #32
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b088      	sub	sp, #32
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	603b      	str	r3, [r7, #0]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b1c:	f7fc fb34 	bl	8001188 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b24:	1a9b      	subs	r3, r3, r2
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	4413      	add	r3, r2
 8004b2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b2c:	f7fc fb2c 	bl	8001188 <HAL_GetTick>
 8004b30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b32:	4b39      	ldr	r3, [pc, #228]	; (8004c18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	015b      	lsls	r3, r3, #5
 8004b38:	0d1b      	lsrs	r3, r3, #20
 8004b3a:	69fa      	ldr	r2, [r7, #28]
 8004b3c:	fb02 f303 	mul.w	r3, r2, r3
 8004b40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b42:	e054      	b.n	8004bee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4a:	d050      	beq.n	8004bee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b4c:	f7fc fb1c 	bl	8001188 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	69fa      	ldr	r2, [r7, #28]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d902      	bls.n	8004b62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d13d      	bne.n	8004bde <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b7a:	d111      	bne.n	8004ba0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b84:	d004      	beq.n	8004b90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b8e:	d107      	bne.n	8004ba0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ba8:	d10f      	bne.n	8004bca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bb8:	601a      	str	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bc8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e017      	b.n	8004c0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	3b01      	subs	r3, #1
 8004bec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	bf0c      	ite	eq
 8004bfe:	2301      	moveq	r3, #1
 8004c00:	2300      	movne	r3, #0
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	461a      	mov	r2, r3
 8004c06:	79fb      	ldrb	r3, [r7, #7]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d19b      	bne.n	8004b44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3720      	adds	r7, #32
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	20000000 	.word	0x20000000

08004c1c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b08a      	sub	sp, #40	; 0x28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
 8004c28:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004c2e:	f7fc faab 	bl	8001188 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c36:	1a9b      	subs	r3, r3, r2
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004c3e:	f7fc faa3 	bl	8001188 <HAL_GetTick>
 8004c42:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	330c      	adds	r3, #12
 8004c4a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004c4c:	4b3d      	ldr	r3, [pc, #244]	; (8004d44 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	4613      	mov	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	00da      	lsls	r2, r3, #3
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	0d1b      	lsrs	r3, r3, #20
 8004c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c5e:	fb02 f303 	mul.w	r3, r2, r3
 8004c62:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004c64:	e060      	b.n	8004d28 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c6c:	d107      	bne.n	8004c7e <SPI_WaitFifoStateUntilTimeout+0x62>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d104      	bne.n	8004c7e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004c7c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c84:	d050      	beq.n	8004d28 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c86:	f7fc fa7f 	bl	8001188 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d902      	bls.n	8004c9c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d13d      	bne.n	8004d18 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004caa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cb4:	d111      	bne.n	8004cda <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cbe:	d004      	beq.n	8004cca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cc8:	d107      	bne.n	8004cda <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cd8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ce2:	d10f      	bne.n	8004d04 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cf2:	601a      	str	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d02:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e010      	b.n	8004d3a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	3b01      	subs	r3, #1
 8004d26:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689a      	ldr	r2, [r3, #8]
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	4013      	ands	r3, r2
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d196      	bne.n	8004c66 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3728      	adds	r7, #40	; 0x28
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	20000000 	.word	0x20000000

08004d48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af02      	add	r7, sp, #8
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f7ff ff5b 	bl	8004c1c <SPI_WaitFifoStateUntilTimeout>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d007      	beq.n	8004d7c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d70:	f043 0220 	orr.w	r2, r3, #32
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e027      	b.n	8004dcc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2200      	movs	r2, #0
 8004d84:	2180      	movs	r1, #128	; 0x80
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f7ff fec0 	bl	8004b0c <SPI_WaitFlagStateUntilTimeout>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d007      	beq.n	8004da2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d96:	f043 0220 	orr.w	r2, r3, #32
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e014      	b.n	8004dcc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f7ff ff34 	bl	8004c1c <SPI_WaitFifoStateUntilTimeout>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d007      	beq.n	8004dca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dbe:	f043 0220 	orr.w	r2, r3, #32
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e000      	b.n	8004dcc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e040      	b.n	8004e68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d106      	bne.n	8004dfc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7fb ff20 	bl	8000c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2224      	movs	r2, #36	; 0x24
 8004e00:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 0201 	bic.w	r2, r2, #1
 8004e10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d002      	beq.n	8004e20 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fb6a 	bl	80054f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 f8af 	bl	8004f84 <UART_SetConfig>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d101      	bne.n	8004e30 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e01b      	b.n	8004e68 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689a      	ldr	r2, [r3, #8]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f042 0201 	orr.w	r2, r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 fbe9 	bl	8005638 <UART_CheckIdleState>
 8004e66:	4603      	mov	r3, r0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3708      	adds	r7, #8
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b08a      	sub	sp, #40	; 0x28
 8004e74:	af02      	add	r7, sp, #8
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	603b      	str	r3, [r7, #0]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e84:	2b20      	cmp	r3, #32
 8004e86:	d178      	bne.n	8004f7a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <HAL_UART_Transmit+0x24>
 8004e8e:	88fb      	ldrh	r3, [r7, #6]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e071      	b.n	8004f7c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2221      	movs	r2, #33	; 0x21
 8004ea4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ea6:	f7fc f96f 	bl	8001188 <HAL_GetTick>
 8004eaa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	88fa      	ldrh	r2, [r7, #6]
 8004eb0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	88fa      	ldrh	r2, [r7, #6]
 8004eb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ec4:	d108      	bne.n	8004ed8 <HAL_UART_Transmit+0x68>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d104      	bne.n	8004ed8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	61bb      	str	r3, [r7, #24]
 8004ed6:	e003      	b.n	8004ee0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004edc:	2300      	movs	r3, #0
 8004ede:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ee0:	e030      	b.n	8004f44 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	2180      	movs	r1, #128	; 0x80
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f000 fc4b 	bl	8005788 <UART_WaitOnFlagUntilTimeout>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d004      	beq.n	8004f02 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2220      	movs	r2, #32
 8004efc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e03c      	b.n	8004f7c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10b      	bne.n	8004f20 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	881a      	ldrh	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f14:	b292      	uxth	r2, r2
 8004f16:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	3302      	adds	r3, #2
 8004f1c:	61bb      	str	r3, [r7, #24]
 8004f1e:	e008      	b.n	8004f32 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	781a      	ldrb	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	b292      	uxth	r2, r2
 8004f2a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1c8      	bne.n	8004ee2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	2200      	movs	r2, #0
 8004f58:	2140      	movs	r1, #64	; 0x40
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 fc14 	bl	8005788 <UART_WaitOnFlagUntilTimeout>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d004      	beq.n	8004f70 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e005      	b.n	8004f7c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2220      	movs	r2, #32
 8004f74:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	e000      	b.n	8004f7c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004f7a:	2302      	movs	r3, #2
  }
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3720      	adds	r7, #32
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f88:	b08a      	sub	sp, #40	; 0x28
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	4ba4      	ldr	r3, [pc, #656]	; (8005244 <UART_SetConfig+0x2c0>)
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	6812      	ldr	r2, [r2, #0]
 8004fba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fbc:	430b      	orrs	r3, r1
 8004fbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	68da      	ldr	r2, [r3, #12]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a99      	ldr	r2, [pc, #612]	; (8005248 <UART_SetConfig+0x2c4>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d004      	beq.n	8004ff0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fec:	4313      	orrs	r3, r2
 8004fee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005000:	430a      	orrs	r2, r1
 8005002:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a90      	ldr	r2, [pc, #576]	; (800524c <UART_SetConfig+0x2c8>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d126      	bne.n	800505c <UART_SetConfig+0xd8>
 800500e:	4b90      	ldr	r3, [pc, #576]	; (8005250 <UART_SetConfig+0x2cc>)
 8005010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005014:	f003 0303 	and.w	r3, r3, #3
 8005018:	2b03      	cmp	r3, #3
 800501a:	d81b      	bhi.n	8005054 <UART_SetConfig+0xd0>
 800501c:	a201      	add	r2, pc, #4	; (adr r2, 8005024 <UART_SetConfig+0xa0>)
 800501e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005022:	bf00      	nop
 8005024:	08005035 	.word	0x08005035
 8005028:	08005045 	.word	0x08005045
 800502c:	0800503d 	.word	0x0800503d
 8005030:	0800504d 	.word	0x0800504d
 8005034:	2301      	movs	r3, #1
 8005036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800503a:	e116      	b.n	800526a <UART_SetConfig+0x2e6>
 800503c:	2302      	movs	r3, #2
 800503e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005042:	e112      	b.n	800526a <UART_SetConfig+0x2e6>
 8005044:	2304      	movs	r3, #4
 8005046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800504a:	e10e      	b.n	800526a <UART_SetConfig+0x2e6>
 800504c:	2308      	movs	r3, #8
 800504e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005052:	e10a      	b.n	800526a <UART_SetConfig+0x2e6>
 8005054:	2310      	movs	r3, #16
 8005056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800505a:	e106      	b.n	800526a <UART_SetConfig+0x2e6>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a7c      	ldr	r2, [pc, #496]	; (8005254 <UART_SetConfig+0x2d0>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d138      	bne.n	80050d8 <UART_SetConfig+0x154>
 8005066:	4b7a      	ldr	r3, [pc, #488]	; (8005250 <UART_SetConfig+0x2cc>)
 8005068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506c:	f003 030c 	and.w	r3, r3, #12
 8005070:	2b0c      	cmp	r3, #12
 8005072:	d82d      	bhi.n	80050d0 <UART_SetConfig+0x14c>
 8005074:	a201      	add	r2, pc, #4	; (adr r2, 800507c <UART_SetConfig+0xf8>)
 8005076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800507a:	bf00      	nop
 800507c:	080050b1 	.word	0x080050b1
 8005080:	080050d1 	.word	0x080050d1
 8005084:	080050d1 	.word	0x080050d1
 8005088:	080050d1 	.word	0x080050d1
 800508c:	080050c1 	.word	0x080050c1
 8005090:	080050d1 	.word	0x080050d1
 8005094:	080050d1 	.word	0x080050d1
 8005098:	080050d1 	.word	0x080050d1
 800509c:	080050b9 	.word	0x080050b9
 80050a0:	080050d1 	.word	0x080050d1
 80050a4:	080050d1 	.word	0x080050d1
 80050a8:	080050d1 	.word	0x080050d1
 80050ac:	080050c9 	.word	0x080050c9
 80050b0:	2300      	movs	r3, #0
 80050b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050b6:	e0d8      	b.n	800526a <UART_SetConfig+0x2e6>
 80050b8:	2302      	movs	r3, #2
 80050ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050be:	e0d4      	b.n	800526a <UART_SetConfig+0x2e6>
 80050c0:	2304      	movs	r3, #4
 80050c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050c6:	e0d0      	b.n	800526a <UART_SetConfig+0x2e6>
 80050c8:	2308      	movs	r3, #8
 80050ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ce:	e0cc      	b.n	800526a <UART_SetConfig+0x2e6>
 80050d0:	2310      	movs	r3, #16
 80050d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050d6:	e0c8      	b.n	800526a <UART_SetConfig+0x2e6>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a5e      	ldr	r2, [pc, #376]	; (8005258 <UART_SetConfig+0x2d4>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d125      	bne.n	800512e <UART_SetConfig+0x1aa>
 80050e2:	4b5b      	ldr	r3, [pc, #364]	; (8005250 <UART_SetConfig+0x2cc>)
 80050e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80050ec:	2b30      	cmp	r3, #48	; 0x30
 80050ee:	d016      	beq.n	800511e <UART_SetConfig+0x19a>
 80050f0:	2b30      	cmp	r3, #48	; 0x30
 80050f2:	d818      	bhi.n	8005126 <UART_SetConfig+0x1a2>
 80050f4:	2b20      	cmp	r3, #32
 80050f6:	d00a      	beq.n	800510e <UART_SetConfig+0x18a>
 80050f8:	2b20      	cmp	r3, #32
 80050fa:	d814      	bhi.n	8005126 <UART_SetConfig+0x1a2>
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d002      	beq.n	8005106 <UART_SetConfig+0x182>
 8005100:	2b10      	cmp	r3, #16
 8005102:	d008      	beq.n	8005116 <UART_SetConfig+0x192>
 8005104:	e00f      	b.n	8005126 <UART_SetConfig+0x1a2>
 8005106:	2300      	movs	r3, #0
 8005108:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800510c:	e0ad      	b.n	800526a <UART_SetConfig+0x2e6>
 800510e:	2302      	movs	r3, #2
 8005110:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005114:	e0a9      	b.n	800526a <UART_SetConfig+0x2e6>
 8005116:	2304      	movs	r3, #4
 8005118:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800511c:	e0a5      	b.n	800526a <UART_SetConfig+0x2e6>
 800511e:	2308      	movs	r3, #8
 8005120:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005124:	e0a1      	b.n	800526a <UART_SetConfig+0x2e6>
 8005126:	2310      	movs	r3, #16
 8005128:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800512c:	e09d      	b.n	800526a <UART_SetConfig+0x2e6>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a4a      	ldr	r2, [pc, #296]	; (800525c <UART_SetConfig+0x2d8>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d125      	bne.n	8005184 <UART_SetConfig+0x200>
 8005138:	4b45      	ldr	r3, [pc, #276]	; (8005250 <UART_SetConfig+0x2cc>)
 800513a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800513e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005142:	2bc0      	cmp	r3, #192	; 0xc0
 8005144:	d016      	beq.n	8005174 <UART_SetConfig+0x1f0>
 8005146:	2bc0      	cmp	r3, #192	; 0xc0
 8005148:	d818      	bhi.n	800517c <UART_SetConfig+0x1f8>
 800514a:	2b80      	cmp	r3, #128	; 0x80
 800514c:	d00a      	beq.n	8005164 <UART_SetConfig+0x1e0>
 800514e:	2b80      	cmp	r3, #128	; 0x80
 8005150:	d814      	bhi.n	800517c <UART_SetConfig+0x1f8>
 8005152:	2b00      	cmp	r3, #0
 8005154:	d002      	beq.n	800515c <UART_SetConfig+0x1d8>
 8005156:	2b40      	cmp	r3, #64	; 0x40
 8005158:	d008      	beq.n	800516c <UART_SetConfig+0x1e8>
 800515a:	e00f      	b.n	800517c <UART_SetConfig+0x1f8>
 800515c:	2300      	movs	r3, #0
 800515e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005162:	e082      	b.n	800526a <UART_SetConfig+0x2e6>
 8005164:	2302      	movs	r3, #2
 8005166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800516a:	e07e      	b.n	800526a <UART_SetConfig+0x2e6>
 800516c:	2304      	movs	r3, #4
 800516e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005172:	e07a      	b.n	800526a <UART_SetConfig+0x2e6>
 8005174:	2308      	movs	r3, #8
 8005176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800517a:	e076      	b.n	800526a <UART_SetConfig+0x2e6>
 800517c:	2310      	movs	r3, #16
 800517e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005182:	e072      	b.n	800526a <UART_SetConfig+0x2e6>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a35      	ldr	r2, [pc, #212]	; (8005260 <UART_SetConfig+0x2dc>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d12a      	bne.n	80051e4 <UART_SetConfig+0x260>
 800518e:	4b30      	ldr	r3, [pc, #192]	; (8005250 <UART_SetConfig+0x2cc>)
 8005190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005194:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005198:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800519c:	d01a      	beq.n	80051d4 <UART_SetConfig+0x250>
 800519e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051a2:	d81b      	bhi.n	80051dc <UART_SetConfig+0x258>
 80051a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051a8:	d00c      	beq.n	80051c4 <UART_SetConfig+0x240>
 80051aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051ae:	d815      	bhi.n	80051dc <UART_SetConfig+0x258>
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d003      	beq.n	80051bc <UART_SetConfig+0x238>
 80051b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051b8:	d008      	beq.n	80051cc <UART_SetConfig+0x248>
 80051ba:	e00f      	b.n	80051dc <UART_SetConfig+0x258>
 80051bc:	2300      	movs	r3, #0
 80051be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051c2:	e052      	b.n	800526a <UART_SetConfig+0x2e6>
 80051c4:	2302      	movs	r3, #2
 80051c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ca:	e04e      	b.n	800526a <UART_SetConfig+0x2e6>
 80051cc:	2304      	movs	r3, #4
 80051ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051d2:	e04a      	b.n	800526a <UART_SetConfig+0x2e6>
 80051d4:	2308      	movs	r3, #8
 80051d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051da:	e046      	b.n	800526a <UART_SetConfig+0x2e6>
 80051dc:	2310      	movs	r3, #16
 80051de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051e2:	e042      	b.n	800526a <UART_SetConfig+0x2e6>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a17      	ldr	r2, [pc, #92]	; (8005248 <UART_SetConfig+0x2c4>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d13a      	bne.n	8005264 <UART_SetConfig+0x2e0>
 80051ee:	4b18      	ldr	r3, [pc, #96]	; (8005250 <UART_SetConfig+0x2cc>)
 80051f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80051f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051fc:	d01a      	beq.n	8005234 <UART_SetConfig+0x2b0>
 80051fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005202:	d81b      	bhi.n	800523c <UART_SetConfig+0x2b8>
 8005204:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005208:	d00c      	beq.n	8005224 <UART_SetConfig+0x2a0>
 800520a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800520e:	d815      	bhi.n	800523c <UART_SetConfig+0x2b8>
 8005210:	2b00      	cmp	r3, #0
 8005212:	d003      	beq.n	800521c <UART_SetConfig+0x298>
 8005214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005218:	d008      	beq.n	800522c <UART_SetConfig+0x2a8>
 800521a:	e00f      	b.n	800523c <UART_SetConfig+0x2b8>
 800521c:	2300      	movs	r3, #0
 800521e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005222:	e022      	b.n	800526a <UART_SetConfig+0x2e6>
 8005224:	2302      	movs	r3, #2
 8005226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800522a:	e01e      	b.n	800526a <UART_SetConfig+0x2e6>
 800522c:	2304      	movs	r3, #4
 800522e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005232:	e01a      	b.n	800526a <UART_SetConfig+0x2e6>
 8005234:	2308      	movs	r3, #8
 8005236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800523a:	e016      	b.n	800526a <UART_SetConfig+0x2e6>
 800523c:	2310      	movs	r3, #16
 800523e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005242:	e012      	b.n	800526a <UART_SetConfig+0x2e6>
 8005244:	efff69f3 	.word	0xefff69f3
 8005248:	40008000 	.word	0x40008000
 800524c:	40013800 	.word	0x40013800
 8005250:	40021000 	.word	0x40021000
 8005254:	40004400 	.word	0x40004400
 8005258:	40004800 	.word	0x40004800
 800525c:	40004c00 	.word	0x40004c00
 8005260:	40005000 	.word	0x40005000
 8005264:	2310      	movs	r3, #16
 8005266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a9f      	ldr	r2, [pc, #636]	; (80054ec <UART_SetConfig+0x568>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d17a      	bne.n	800536a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005274:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005278:	2b08      	cmp	r3, #8
 800527a:	d824      	bhi.n	80052c6 <UART_SetConfig+0x342>
 800527c:	a201      	add	r2, pc, #4	; (adr r2, 8005284 <UART_SetConfig+0x300>)
 800527e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005282:	bf00      	nop
 8005284:	080052a9 	.word	0x080052a9
 8005288:	080052c7 	.word	0x080052c7
 800528c:	080052b1 	.word	0x080052b1
 8005290:	080052c7 	.word	0x080052c7
 8005294:	080052b7 	.word	0x080052b7
 8005298:	080052c7 	.word	0x080052c7
 800529c:	080052c7 	.word	0x080052c7
 80052a0:	080052c7 	.word	0x080052c7
 80052a4:	080052bf 	.word	0x080052bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052a8:	f7fd fa16 	bl	80026d8 <HAL_RCC_GetPCLK1Freq>
 80052ac:	61f8      	str	r0, [r7, #28]
        break;
 80052ae:	e010      	b.n	80052d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052b0:	4b8f      	ldr	r3, [pc, #572]	; (80054f0 <UART_SetConfig+0x56c>)
 80052b2:	61fb      	str	r3, [r7, #28]
        break;
 80052b4:	e00d      	b.n	80052d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052b6:	f7fd f977 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 80052ba:	61f8      	str	r0, [r7, #28]
        break;
 80052bc:	e009      	b.n	80052d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052c2:	61fb      	str	r3, [r7, #28]
        break;
 80052c4:	e005      	b.n	80052d2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80052c6:	2300      	movs	r3, #0
 80052c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80052d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f000 80fb 	beq.w	80054d0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	4613      	mov	r3, r2
 80052e0:	005b      	lsls	r3, r3, #1
 80052e2:	4413      	add	r3, r2
 80052e4:	69fa      	ldr	r2, [r7, #28]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d305      	bcc.n	80052f6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80052f0:	69fa      	ldr	r2, [r7, #28]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d903      	bls.n	80052fe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80052fc:	e0e8      	b.n	80054d0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	2200      	movs	r2, #0
 8005302:	461c      	mov	r4, r3
 8005304:	4615      	mov	r5, r2
 8005306:	f04f 0200 	mov.w	r2, #0
 800530a:	f04f 0300 	mov.w	r3, #0
 800530e:	022b      	lsls	r3, r5, #8
 8005310:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005314:	0222      	lsls	r2, r4, #8
 8005316:	68f9      	ldr	r1, [r7, #12]
 8005318:	6849      	ldr	r1, [r1, #4]
 800531a:	0849      	lsrs	r1, r1, #1
 800531c:	2000      	movs	r0, #0
 800531e:	4688      	mov	r8, r1
 8005320:	4681      	mov	r9, r0
 8005322:	eb12 0a08 	adds.w	sl, r2, r8
 8005326:	eb43 0b09 	adc.w	fp, r3, r9
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	603b      	str	r3, [r7, #0]
 8005332:	607a      	str	r2, [r7, #4]
 8005334:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005338:	4650      	mov	r0, sl
 800533a:	4659      	mov	r1, fp
 800533c:	f7fa ffa0 	bl	8000280 <__aeabi_uldivmod>
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	4613      	mov	r3, r2
 8005346:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800534e:	d308      	bcc.n	8005362 <UART_SetConfig+0x3de>
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005356:	d204      	bcs.n	8005362 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	69ba      	ldr	r2, [r7, #24]
 800535e:	60da      	str	r2, [r3, #12]
 8005360:	e0b6      	b.n	80054d0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005368:	e0b2      	b.n	80054d0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005372:	d15e      	bne.n	8005432 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005374:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005378:	2b08      	cmp	r3, #8
 800537a:	d828      	bhi.n	80053ce <UART_SetConfig+0x44a>
 800537c:	a201      	add	r2, pc, #4	; (adr r2, 8005384 <UART_SetConfig+0x400>)
 800537e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005382:	bf00      	nop
 8005384:	080053a9 	.word	0x080053a9
 8005388:	080053b1 	.word	0x080053b1
 800538c:	080053b9 	.word	0x080053b9
 8005390:	080053cf 	.word	0x080053cf
 8005394:	080053bf 	.word	0x080053bf
 8005398:	080053cf 	.word	0x080053cf
 800539c:	080053cf 	.word	0x080053cf
 80053a0:	080053cf 	.word	0x080053cf
 80053a4:	080053c7 	.word	0x080053c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053a8:	f7fd f996 	bl	80026d8 <HAL_RCC_GetPCLK1Freq>
 80053ac:	61f8      	str	r0, [r7, #28]
        break;
 80053ae:	e014      	b.n	80053da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053b0:	f7fd f9a8 	bl	8002704 <HAL_RCC_GetPCLK2Freq>
 80053b4:	61f8      	str	r0, [r7, #28]
        break;
 80053b6:	e010      	b.n	80053da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053b8:	4b4d      	ldr	r3, [pc, #308]	; (80054f0 <UART_SetConfig+0x56c>)
 80053ba:	61fb      	str	r3, [r7, #28]
        break;
 80053bc:	e00d      	b.n	80053da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053be:	f7fd f8f3 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 80053c2:	61f8      	str	r0, [r7, #28]
        break;
 80053c4:	e009      	b.n	80053da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ca:	61fb      	str	r3, [r7, #28]
        break;
 80053cc:	e005      	b.n	80053da <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80053ce:	2300      	movs	r3, #0
 80053d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80053d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d077      	beq.n	80054d0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	005a      	lsls	r2, r3, #1
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	085b      	lsrs	r3, r3, #1
 80053ea:	441a      	add	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	2b0f      	cmp	r3, #15
 80053fa:	d916      	bls.n	800542a <UART_SetConfig+0x4a6>
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005402:	d212      	bcs.n	800542a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	b29b      	uxth	r3, r3
 8005408:	f023 030f 	bic.w	r3, r3, #15
 800540c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	085b      	lsrs	r3, r3, #1
 8005412:	b29b      	uxth	r3, r3
 8005414:	f003 0307 	and.w	r3, r3, #7
 8005418:	b29a      	uxth	r2, r3
 800541a:	8afb      	ldrh	r3, [r7, #22]
 800541c:	4313      	orrs	r3, r2
 800541e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	8afa      	ldrh	r2, [r7, #22]
 8005426:	60da      	str	r2, [r3, #12]
 8005428:	e052      	b.n	80054d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005430:	e04e      	b.n	80054d0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005432:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005436:	2b08      	cmp	r3, #8
 8005438:	d827      	bhi.n	800548a <UART_SetConfig+0x506>
 800543a:	a201      	add	r2, pc, #4	; (adr r2, 8005440 <UART_SetConfig+0x4bc>)
 800543c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005440:	08005465 	.word	0x08005465
 8005444:	0800546d 	.word	0x0800546d
 8005448:	08005475 	.word	0x08005475
 800544c:	0800548b 	.word	0x0800548b
 8005450:	0800547b 	.word	0x0800547b
 8005454:	0800548b 	.word	0x0800548b
 8005458:	0800548b 	.word	0x0800548b
 800545c:	0800548b 	.word	0x0800548b
 8005460:	08005483 	.word	0x08005483
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005464:	f7fd f938 	bl	80026d8 <HAL_RCC_GetPCLK1Freq>
 8005468:	61f8      	str	r0, [r7, #28]
        break;
 800546a:	e014      	b.n	8005496 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800546c:	f7fd f94a 	bl	8002704 <HAL_RCC_GetPCLK2Freq>
 8005470:	61f8      	str	r0, [r7, #28]
        break;
 8005472:	e010      	b.n	8005496 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005474:	4b1e      	ldr	r3, [pc, #120]	; (80054f0 <UART_SetConfig+0x56c>)
 8005476:	61fb      	str	r3, [r7, #28]
        break;
 8005478:	e00d      	b.n	8005496 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800547a:	f7fd f895 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 800547e:	61f8      	str	r0, [r7, #28]
        break;
 8005480:	e009      	b.n	8005496 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005486:	61fb      	str	r3, [r7, #28]
        break;
 8005488:	e005      	b.n	8005496 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800548a:	2300      	movs	r3, #0
 800548c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005494:	bf00      	nop
    }

    if (pclk != 0U)
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d019      	beq.n	80054d0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	085a      	lsrs	r2, r3, #1
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	441a      	add	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	2b0f      	cmp	r3, #15
 80054b4:	d909      	bls.n	80054ca <UART_SetConfig+0x546>
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054bc:	d205      	bcs.n	80054ca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	60da      	str	r2, [r3, #12]
 80054c8:	e002      	b.n	80054d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80054dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3728      	adds	r7, #40	; 0x28
 80054e4:	46bd      	mov	sp, r7
 80054e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054ea:	bf00      	nop
 80054ec:	40008000 	.word	0x40008000
 80054f0:	00f42400 	.word	0x00f42400

080054f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005500:	f003 0308 	and.w	r3, r3, #8
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00a      	beq.n	800551e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00a      	beq.n	8005540 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00a      	beq.n	8005562 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	430a      	orrs	r2, r1
 8005560:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005566:	f003 0304 	and.w	r3, r3, #4
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00a      	beq.n	8005584 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	430a      	orrs	r2, r1
 8005582:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	f003 0310 	and.w	r3, r3, #16
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00a      	beq.n	80055a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055aa:	f003 0320 	and.w	r3, r3, #32
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00a      	beq.n	80055c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d01a      	beq.n	800560a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	430a      	orrs	r2, r1
 80055e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055f2:	d10a      	bne.n	800560a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	430a      	orrs	r2, r1
 8005608:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00a      	beq.n	800562c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	430a      	orrs	r2, r1
 800562a:	605a      	str	r2, [r3, #4]
  }
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b098      	sub	sp, #96	; 0x60
 800563c:	af02      	add	r7, sp, #8
 800563e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005648:	f7fb fd9e 	bl	8001188 <HAL_GetTick>
 800564c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0308 	and.w	r3, r3, #8
 8005658:	2b08      	cmp	r3, #8
 800565a:	d12e      	bne.n	80056ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800565c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005664:	2200      	movs	r2, #0
 8005666:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f88c 	bl	8005788 <UART_WaitOnFlagUntilTimeout>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d021      	beq.n	80056ba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567e:	e853 3f00 	ldrex	r3, [r3]
 8005682:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005686:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800568a:	653b      	str	r3, [r7, #80]	; 0x50
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	461a      	mov	r2, r3
 8005692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005694:	647b      	str	r3, [r7, #68]	; 0x44
 8005696:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005698:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800569a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800569c:	e841 2300 	strex	r3, r2, [r1]
 80056a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1e6      	bne.n	8005676 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2220      	movs	r2, #32
 80056ac:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e062      	b.n	8005780 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0304 	and.w	r3, r3, #4
 80056c4:	2b04      	cmp	r3, #4
 80056c6:	d149      	bne.n	800575c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056d0:	2200      	movs	r2, #0
 80056d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f856 	bl	8005788 <UART_WaitOnFlagUntilTimeout>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d03c      	beq.n	800575c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	e853 3f00 	ldrex	r3, [r3]
 80056ee:	623b      	str	r3, [r7, #32]
   return(result);
 80056f0:	6a3b      	ldr	r3, [r7, #32]
 80056f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	461a      	mov	r2, r3
 80056fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005700:	633b      	str	r3, [r7, #48]	; 0x30
 8005702:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005704:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005708:	e841 2300 	strex	r3, r2, [r1]
 800570c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800570e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1e6      	bne.n	80056e2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3308      	adds	r3, #8
 800571a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	e853 3f00 	ldrex	r3, [r3]
 8005722:	60fb      	str	r3, [r7, #12]
   return(result);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 0301 	bic.w	r3, r3, #1
 800572a:	64bb      	str	r3, [r7, #72]	; 0x48
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	3308      	adds	r3, #8
 8005732:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005734:	61fa      	str	r2, [r7, #28]
 8005736:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005738:	69b9      	ldr	r1, [r7, #24]
 800573a:	69fa      	ldr	r2, [r7, #28]
 800573c:	e841 2300 	strex	r3, r2, [r1]
 8005740:	617b      	str	r3, [r7, #20]
   return(result);
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1e5      	bne.n	8005714 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2220      	movs	r2, #32
 800574c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e011      	b.n	8005780 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2220      	movs	r2, #32
 8005760:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2220      	movs	r2, #32
 8005766:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3758      	adds	r7, #88	; 0x58
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	603b      	str	r3, [r7, #0]
 8005794:	4613      	mov	r3, r2
 8005796:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005798:	e049      	b.n	800582e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a0:	d045      	beq.n	800582e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057a2:	f7fb fcf1 	bl	8001188 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d302      	bcc.n	80057b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d101      	bne.n	80057bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e048      	b.n	800584e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0304 	and.w	r3, r3, #4
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d031      	beq.n	800582e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	69db      	ldr	r3, [r3, #28]
 80057d0:	f003 0308 	and.w	r3, r3, #8
 80057d4:	2b08      	cmp	r3, #8
 80057d6:	d110      	bne.n	80057fa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2208      	movs	r2, #8
 80057de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f000 f838 	bl	8005856 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2208      	movs	r2, #8
 80057ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e029      	b.n	800584e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	69db      	ldr	r3, [r3, #28]
 8005800:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005804:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005808:	d111      	bne.n	800582e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005812:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f000 f81e 	bl	8005856 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2220      	movs	r2, #32
 800581e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e00f      	b.n	800584e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	69da      	ldr	r2, [r3, #28]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	4013      	ands	r3, r2
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	429a      	cmp	r2, r3
 800583c:	bf0c      	ite	eq
 800583e:	2301      	moveq	r3, #1
 8005840:	2300      	movne	r3, #0
 8005842:	b2db      	uxtb	r3, r3
 8005844:	461a      	mov	r2, r3
 8005846:	79fb      	ldrb	r3, [r7, #7]
 8005848:	429a      	cmp	r2, r3
 800584a:	d0a6      	beq.n	800579a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005856:	b480      	push	{r7}
 8005858:	b095      	sub	sp, #84	; 0x54
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005866:	e853 3f00 	ldrex	r3, [r3]
 800586a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800586c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005872:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	461a      	mov	r2, r3
 800587a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800587c:	643b      	str	r3, [r7, #64]	; 0x40
 800587e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005880:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005882:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005884:	e841 2300 	strex	r3, r2, [r1]
 8005888:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800588a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1e6      	bne.n	800585e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	3308      	adds	r3, #8
 8005896:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005898:	6a3b      	ldr	r3, [r7, #32]
 800589a:	e853 3f00 	ldrex	r3, [r3]
 800589e:	61fb      	str	r3, [r7, #28]
   return(result);
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	f023 0301 	bic.w	r3, r3, #1
 80058a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	3308      	adds	r3, #8
 80058ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058b8:	e841 2300 	strex	r3, r2, [r1]
 80058bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1e5      	bne.n	8005890 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d118      	bne.n	80058fe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	e853 3f00 	ldrex	r3, [r3]
 80058d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	f023 0310 	bic.w	r3, r3, #16
 80058e0:	647b      	str	r3, [r7, #68]	; 0x44
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	461a      	mov	r2, r3
 80058e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058ea:	61bb      	str	r3, [r7, #24]
 80058ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ee:	6979      	ldr	r1, [r7, #20]
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	e841 2300 	strex	r3, r2, [r1]
 80058f6:	613b      	str	r3, [r7, #16]
   return(result);
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1e6      	bne.n	80058cc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2220      	movs	r2, #32
 8005902:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005912:	bf00      	nop
 8005914:	3754      	adds	r7, #84	; 0x54
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
	...

08005920 <sniprintf>:
 8005920:	b40c      	push	{r2, r3}
 8005922:	b530      	push	{r4, r5, lr}
 8005924:	4b17      	ldr	r3, [pc, #92]	; (8005984 <sniprintf+0x64>)
 8005926:	1e0c      	subs	r4, r1, #0
 8005928:	681d      	ldr	r5, [r3, #0]
 800592a:	b09d      	sub	sp, #116	; 0x74
 800592c:	da08      	bge.n	8005940 <sniprintf+0x20>
 800592e:	238b      	movs	r3, #139	; 0x8b
 8005930:	602b      	str	r3, [r5, #0]
 8005932:	f04f 30ff 	mov.w	r0, #4294967295
 8005936:	b01d      	add	sp, #116	; 0x74
 8005938:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800593c:	b002      	add	sp, #8
 800593e:	4770      	bx	lr
 8005940:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005944:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005948:	bf14      	ite	ne
 800594a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800594e:	4623      	moveq	r3, r4
 8005950:	9304      	str	r3, [sp, #16]
 8005952:	9307      	str	r3, [sp, #28]
 8005954:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005958:	9002      	str	r0, [sp, #8]
 800595a:	9006      	str	r0, [sp, #24]
 800595c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005960:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005962:	ab21      	add	r3, sp, #132	; 0x84
 8005964:	a902      	add	r1, sp, #8
 8005966:	4628      	mov	r0, r5
 8005968:	9301      	str	r3, [sp, #4]
 800596a:	f000 f9cd 	bl	8005d08 <_svfiprintf_r>
 800596e:	1c43      	adds	r3, r0, #1
 8005970:	bfbc      	itt	lt
 8005972:	238b      	movlt	r3, #139	; 0x8b
 8005974:	602b      	strlt	r3, [r5, #0]
 8005976:	2c00      	cmp	r4, #0
 8005978:	d0dd      	beq.n	8005936 <sniprintf+0x16>
 800597a:	9b02      	ldr	r3, [sp, #8]
 800597c:	2200      	movs	r2, #0
 800597e:	701a      	strb	r2, [r3, #0]
 8005980:	e7d9      	b.n	8005936 <sniprintf+0x16>
 8005982:	bf00      	nop
 8005984:	20000058 	.word	0x20000058

08005988 <_vsniprintf_r>:
 8005988:	b530      	push	{r4, r5, lr}
 800598a:	4614      	mov	r4, r2
 800598c:	2c00      	cmp	r4, #0
 800598e:	b09b      	sub	sp, #108	; 0x6c
 8005990:	4605      	mov	r5, r0
 8005992:	461a      	mov	r2, r3
 8005994:	da05      	bge.n	80059a2 <_vsniprintf_r+0x1a>
 8005996:	238b      	movs	r3, #139	; 0x8b
 8005998:	6003      	str	r3, [r0, #0]
 800599a:	f04f 30ff 	mov.w	r0, #4294967295
 800599e:	b01b      	add	sp, #108	; 0x6c
 80059a0:	bd30      	pop	{r4, r5, pc}
 80059a2:	f44f 7302 	mov.w	r3, #520	; 0x208
 80059a6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80059aa:	bf14      	ite	ne
 80059ac:	f104 33ff 	addne.w	r3, r4, #4294967295
 80059b0:	4623      	moveq	r3, r4
 80059b2:	9302      	str	r3, [sp, #8]
 80059b4:	9305      	str	r3, [sp, #20]
 80059b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80059ba:	9100      	str	r1, [sp, #0]
 80059bc:	9104      	str	r1, [sp, #16]
 80059be:	f8ad 300e 	strh.w	r3, [sp, #14]
 80059c2:	4669      	mov	r1, sp
 80059c4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80059c6:	f000 f99f 	bl	8005d08 <_svfiprintf_r>
 80059ca:	1c43      	adds	r3, r0, #1
 80059cc:	bfbc      	itt	lt
 80059ce:	238b      	movlt	r3, #139	; 0x8b
 80059d0:	602b      	strlt	r3, [r5, #0]
 80059d2:	2c00      	cmp	r4, #0
 80059d4:	d0e3      	beq.n	800599e <_vsniprintf_r+0x16>
 80059d6:	9b00      	ldr	r3, [sp, #0]
 80059d8:	2200      	movs	r2, #0
 80059da:	701a      	strb	r2, [r3, #0]
 80059dc:	e7df      	b.n	800599e <_vsniprintf_r+0x16>
	...

080059e0 <vsniprintf>:
 80059e0:	b507      	push	{r0, r1, r2, lr}
 80059e2:	9300      	str	r3, [sp, #0]
 80059e4:	4613      	mov	r3, r2
 80059e6:	460a      	mov	r2, r1
 80059e8:	4601      	mov	r1, r0
 80059ea:	4803      	ldr	r0, [pc, #12]	; (80059f8 <vsniprintf+0x18>)
 80059ec:	6800      	ldr	r0, [r0, #0]
 80059ee:	f7ff ffcb 	bl	8005988 <_vsniprintf_r>
 80059f2:	b003      	add	sp, #12
 80059f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80059f8:	20000058 	.word	0x20000058

080059fc <memset>:
 80059fc:	4402      	add	r2, r0
 80059fe:	4603      	mov	r3, r0
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d100      	bne.n	8005a06 <memset+0xa>
 8005a04:	4770      	bx	lr
 8005a06:	f803 1b01 	strb.w	r1, [r3], #1
 8005a0a:	e7f9      	b.n	8005a00 <memset+0x4>

08005a0c <__errno>:
 8005a0c:	4b01      	ldr	r3, [pc, #4]	; (8005a14 <__errno+0x8>)
 8005a0e:	6818      	ldr	r0, [r3, #0]
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	20000058 	.word	0x20000058

08005a18 <__libc_init_array>:
 8005a18:	b570      	push	{r4, r5, r6, lr}
 8005a1a:	4d0d      	ldr	r5, [pc, #52]	; (8005a50 <__libc_init_array+0x38>)
 8005a1c:	4c0d      	ldr	r4, [pc, #52]	; (8005a54 <__libc_init_array+0x3c>)
 8005a1e:	1b64      	subs	r4, r4, r5
 8005a20:	10a4      	asrs	r4, r4, #2
 8005a22:	2600      	movs	r6, #0
 8005a24:	42a6      	cmp	r6, r4
 8005a26:	d109      	bne.n	8005a3c <__libc_init_array+0x24>
 8005a28:	4d0b      	ldr	r5, [pc, #44]	; (8005a58 <__libc_init_array+0x40>)
 8005a2a:	4c0c      	ldr	r4, [pc, #48]	; (8005a5c <__libc_init_array+0x44>)
 8005a2c:	f000 fc6a 	bl	8006304 <_init>
 8005a30:	1b64      	subs	r4, r4, r5
 8005a32:	10a4      	asrs	r4, r4, #2
 8005a34:	2600      	movs	r6, #0
 8005a36:	42a6      	cmp	r6, r4
 8005a38:	d105      	bne.n	8005a46 <__libc_init_array+0x2e>
 8005a3a:	bd70      	pop	{r4, r5, r6, pc}
 8005a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a40:	4798      	blx	r3
 8005a42:	3601      	adds	r6, #1
 8005a44:	e7ee      	b.n	8005a24 <__libc_init_array+0xc>
 8005a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a4a:	4798      	blx	r3
 8005a4c:	3601      	adds	r6, #1
 8005a4e:	e7f2      	b.n	8005a36 <__libc_init_array+0x1e>
 8005a50:	08006414 	.word	0x08006414
 8005a54:	08006414 	.word	0x08006414
 8005a58:	08006414 	.word	0x08006414
 8005a5c:	08006418 	.word	0x08006418

08005a60 <__retarget_lock_acquire_recursive>:
 8005a60:	4770      	bx	lr

08005a62 <__retarget_lock_release_recursive>:
 8005a62:	4770      	bx	lr

08005a64 <_free_r>:
 8005a64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a66:	2900      	cmp	r1, #0
 8005a68:	d044      	beq.n	8005af4 <_free_r+0x90>
 8005a6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a6e:	9001      	str	r0, [sp, #4]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f1a1 0404 	sub.w	r4, r1, #4
 8005a76:	bfb8      	it	lt
 8005a78:	18e4      	addlt	r4, r4, r3
 8005a7a:	f000 f8df 	bl	8005c3c <__malloc_lock>
 8005a7e:	4a1e      	ldr	r2, [pc, #120]	; (8005af8 <_free_r+0x94>)
 8005a80:	9801      	ldr	r0, [sp, #4]
 8005a82:	6813      	ldr	r3, [r2, #0]
 8005a84:	b933      	cbnz	r3, 8005a94 <_free_r+0x30>
 8005a86:	6063      	str	r3, [r4, #4]
 8005a88:	6014      	str	r4, [r2, #0]
 8005a8a:	b003      	add	sp, #12
 8005a8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a90:	f000 b8da 	b.w	8005c48 <__malloc_unlock>
 8005a94:	42a3      	cmp	r3, r4
 8005a96:	d908      	bls.n	8005aaa <_free_r+0x46>
 8005a98:	6825      	ldr	r5, [r4, #0]
 8005a9a:	1961      	adds	r1, r4, r5
 8005a9c:	428b      	cmp	r3, r1
 8005a9e:	bf01      	itttt	eq
 8005aa0:	6819      	ldreq	r1, [r3, #0]
 8005aa2:	685b      	ldreq	r3, [r3, #4]
 8005aa4:	1949      	addeq	r1, r1, r5
 8005aa6:	6021      	streq	r1, [r4, #0]
 8005aa8:	e7ed      	b.n	8005a86 <_free_r+0x22>
 8005aaa:	461a      	mov	r2, r3
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	b10b      	cbz	r3, 8005ab4 <_free_r+0x50>
 8005ab0:	42a3      	cmp	r3, r4
 8005ab2:	d9fa      	bls.n	8005aaa <_free_r+0x46>
 8005ab4:	6811      	ldr	r1, [r2, #0]
 8005ab6:	1855      	adds	r5, r2, r1
 8005ab8:	42a5      	cmp	r5, r4
 8005aba:	d10b      	bne.n	8005ad4 <_free_r+0x70>
 8005abc:	6824      	ldr	r4, [r4, #0]
 8005abe:	4421      	add	r1, r4
 8005ac0:	1854      	adds	r4, r2, r1
 8005ac2:	42a3      	cmp	r3, r4
 8005ac4:	6011      	str	r1, [r2, #0]
 8005ac6:	d1e0      	bne.n	8005a8a <_free_r+0x26>
 8005ac8:	681c      	ldr	r4, [r3, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	6053      	str	r3, [r2, #4]
 8005ace:	440c      	add	r4, r1
 8005ad0:	6014      	str	r4, [r2, #0]
 8005ad2:	e7da      	b.n	8005a8a <_free_r+0x26>
 8005ad4:	d902      	bls.n	8005adc <_free_r+0x78>
 8005ad6:	230c      	movs	r3, #12
 8005ad8:	6003      	str	r3, [r0, #0]
 8005ada:	e7d6      	b.n	8005a8a <_free_r+0x26>
 8005adc:	6825      	ldr	r5, [r4, #0]
 8005ade:	1961      	adds	r1, r4, r5
 8005ae0:	428b      	cmp	r3, r1
 8005ae2:	bf04      	itt	eq
 8005ae4:	6819      	ldreq	r1, [r3, #0]
 8005ae6:	685b      	ldreq	r3, [r3, #4]
 8005ae8:	6063      	str	r3, [r4, #4]
 8005aea:	bf04      	itt	eq
 8005aec:	1949      	addeq	r1, r1, r5
 8005aee:	6021      	streq	r1, [r4, #0]
 8005af0:	6054      	str	r4, [r2, #4]
 8005af2:	e7ca      	b.n	8005a8a <_free_r+0x26>
 8005af4:	b003      	add	sp, #12
 8005af6:	bd30      	pop	{r4, r5, pc}
 8005af8:	20001494 	.word	0x20001494

08005afc <sbrk_aligned>:
 8005afc:	b570      	push	{r4, r5, r6, lr}
 8005afe:	4e0e      	ldr	r6, [pc, #56]	; (8005b38 <sbrk_aligned+0x3c>)
 8005b00:	460c      	mov	r4, r1
 8005b02:	6831      	ldr	r1, [r6, #0]
 8005b04:	4605      	mov	r5, r0
 8005b06:	b911      	cbnz	r1, 8005b0e <sbrk_aligned+0x12>
 8005b08:	f000 fba6 	bl	8006258 <_sbrk_r>
 8005b0c:	6030      	str	r0, [r6, #0]
 8005b0e:	4621      	mov	r1, r4
 8005b10:	4628      	mov	r0, r5
 8005b12:	f000 fba1 	bl	8006258 <_sbrk_r>
 8005b16:	1c43      	adds	r3, r0, #1
 8005b18:	d00a      	beq.n	8005b30 <sbrk_aligned+0x34>
 8005b1a:	1cc4      	adds	r4, r0, #3
 8005b1c:	f024 0403 	bic.w	r4, r4, #3
 8005b20:	42a0      	cmp	r0, r4
 8005b22:	d007      	beq.n	8005b34 <sbrk_aligned+0x38>
 8005b24:	1a21      	subs	r1, r4, r0
 8005b26:	4628      	mov	r0, r5
 8005b28:	f000 fb96 	bl	8006258 <_sbrk_r>
 8005b2c:	3001      	adds	r0, #1
 8005b2e:	d101      	bne.n	8005b34 <sbrk_aligned+0x38>
 8005b30:	f04f 34ff 	mov.w	r4, #4294967295
 8005b34:	4620      	mov	r0, r4
 8005b36:	bd70      	pop	{r4, r5, r6, pc}
 8005b38:	20001498 	.word	0x20001498

08005b3c <_malloc_r>:
 8005b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b40:	1ccd      	adds	r5, r1, #3
 8005b42:	f025 0503 	bic.w	r5, r5, #3
 8005b46:	3508      	adds	r5, #8
 8005b48:	2d0c      	cmp	r5, #12
 8005b4a:	bf38      	it	cc
 8005b4c:	250c      	movcc	r5, #12
 8005b4e:	2d00      	cmp	r5, #0
 8005b50:	4607      	mov	r7, r0
 8005b52:	db01      	blt.n	8005b58 <_malloc_r+0x1c>
 8005b54:	42a9      	cmp	r1, r5
 8005b56:	d905      	bls.n	8005b64 <_malloc_r+0x28>
 8005b58:	230c      	movs	r3, #12
 8005b5a:	603b      	str	r3, [r7, #0]
 8005b5c:	2600      	movs	r6, #0
 8005b5e:	4630      	mov	r0, r6
 8005b60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005c38 <_malloc_r+0xfc>
 8005b68:	f000 f868 	bl	8005c3c <__malloc_lock>
 8005b6c:	f8d8 3000 	ldr.w	r3, [r8]
 8005b70:	461c      	mov	r4, r3
 8005b72:	bb5c      	cbnz	r4, 8005bcc <_malloc_r+0x90>
 8005b74:	4629      	mov	r1, r5
 8005b76:	4638      	mov	r0, r7
 8005b78:	f7ff ffc0 	bl	8005afc <sbrk_aligned>
 8005b7c:	1c43      	adds	r3, r0, #1
 8005b7e:	4604      	mov	r4, r0
 8005b80:	d155      	bne.n	8005c2e <_malloc_r+0xf2>
 8005b82:	f8d8 4000 	ldr.w	r4, [r8]
 8005b86:	4626      	mov	r6, r4
 8005b88:	2e00      	cmp	r6, #0
 8005b8a:	d145      	bne.n	8005c18 <_malloc_r+0xdc>
 8005b8c:	2c00      	cmp	r4, #0
 8005b8e:	d048      	beq.n	8005c22 <_malloc_r+0xe6>
 8005b90:	6823      	ldr	r3, [r4, #0]
 8005b92:	4631      	mov	r1, r6
 8005b94:	4638      	mov	r0, r7
 8005b96:	eb04 0903 	add.w	r9, r4, r3
 8005b9a:	f000 fb5d 	bl	8006258 <_sbrk_r>
 8005b9e:	4581      	cmp	r9, r0
 8005ba0:	d13f      	bne.n	8005c22 <_malloc_r+0xe6>
 8005ba2:	6821      	ldr	r1, [r4, #0]
 8005ba4:	1a6d      	subs	r5, r5, r1
 8005ba6:	4629      	mov	r1, r5
 8005ba8:	4638      	mov	r0, r7
 8005baa:	f7ff ffa7 	bl	8005afc <sbrk_aligned>
 8005bae:	3001      	adds	r0, #1
 8005bb0:	d037      	beq.n	8005c22 <_malloc_r+0xe6>
 8005bb2:	6823      	ldr	r3, [r4, #0]
 8005bb4:	442b      	add	r3, r5
 8005bb6:	6023      	str	r3, [r4, #0]
 8005bb8:	f8d8 3000 	ldr.w	r3, [r8]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d038      	beq.n	8005c32 <_malloc_r+0xf6>
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	42a2      	cmp	r2, r4
 8005bc4:	d12b      	bne.n	8005c1e <_malloc_r+0xe2>
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	605a      	str	r2, [r3, #4]
 8005bca:	e00f      	b.n	8005bec <_malloc_r+0xb0>
 8005bcc:	6822      	ldr	r2, [r4, #0]
 8005bce:	1b52      	subs	r2, r2, r5
 8005bd0:	d41f      	bmi.n	8005c12 <_malloc_r+0xd6>
 8005bd2:	2a0b      	cmp	r2, #11
 8005bd4:	d917      	bls.n	8005c06 <_malloc_r+0xca>
 8005bd6:	1961      	adds	r1, r4, r5
 8005bd8:	42a3      	cmp	r3, r4
 8005bda:	6025      	str	r5, [r4, #0]
 8005bdc:	bf18      	it	ne
 8005bde:	6059      	strne	r1, [r3, #4]
 8005be0:	6863      	ldr	r3, [r4, #4]
 8005be2:	bf08      	it	eq
 8005be4:	f8c8 1000 	streq.w	r1, [r8]
 8005be8:	5162      	str	r2, [r4, r5]
 8005bea:	604b      	str	r3, [r1, #4]
 8005bec:	4638      	mov	r0, r7
 8005bee:	f104 060b 	add.w	r6, r4, #11
 8005bf2:	f000 f829 	bl	8005c48 <__malloc_unlock>
 8005bf6:	f026 0607 	bic.w	r6, r6, #7
 8005bfa:	1d23      	adds	r3, r4, #4
 8005bfc:	1af2      	subs	r2, r6, r3
 8005bfe:	d0ae      	beq.n	8005b5e <_malloc_r+0x22>
 8005c00:	1b9b      	subs	r3, r3, r6
 8005c02:	50a3      	str	r3, [r4, r2]
 8005c04:	e7ab      	b.n	8005b5e <_malloc_r+0x22>
 8005c06:	42a3      	cmp	r3, r4
 8005c08:	6862      	ldr	r2, [r4, #4]
 8005c0a:	d1dd      	bne.n	8005bc8 <_malloc_r+0x8c>
 8005c0c:	f8c8 2000 	str.w	r2, [r8]
 8005c10:	e7ec      	b.n	8005bec <_malloc_r+0xb0>
 8005c12:	4623      	mov	r3, r4
 8005c14:	6864      	ldr	r4, [r4, #4]
 8005c16:	e7ac      	b.n	8005b72 <_malloc_r+0x36>
 8005c18:	4634      	mov	r4, r6
 8005c1a:	6876      	ldr	r6, [r6, #4]
 8005c1c:	e7b4      	b.n	8005b88 <_malloc_r+0x4c>
 8005c1e:	4613      	mov	r3, r2
 8005c20:	e7cc      	b.n	8005bbc <_malloc_r+0x80>
 8005c22:	230c      	movs	r3, #12
 8005c24:	603b      	str	r3, [r7, #0]
 8005c26:	4638      	mov	r0, r7
 8005c28:	f000 f80e 	bl	8005c48 <__malloc_unlock>
 8005c2c:	e797      	b.n	8005b5e <_malloc_r+0x22>
 8005c2e:	6025      	str	r5, [r4, #0]
 8005c30:	e7dc      	b.n	8005bec <_malloc_r+0xb0>
 8005c32:	605b      	str	r3, [r3, #4]
 8005c34:	deff      	udf	#255	; 0xff
 8005c36:	bf00      	nop
 8005c38:	20001494 	.word	0x20001494

08005c3c <__malloc_lock>:
 8005c3c:	4801      	ldr	r0, [pc, #4]	; (8005c44 <__malloc_lock+0x8>)
 8005c3e:	f7ff bf0f 	b.w	8005a60 <__retarget_lock_acquire_recursive>
 8005c42:	bf00      	nop
 8005c44:	20001490 	.word	0x20001490

08005c48 <__malloc_unlock>:
 8005c48:	4801      	ldr	r0, [pc, #4]	; (8005c50 <__malloc_unlock+0x8>)
 8005c4a:	f7ff bf0a 	b.w	8005a62 <__retarget_lock_release_recursive>
 8005c4e:	bf00      	nop
 8005c50:	20001490 	.word	0x20001490

08005c54 <__ssputs_r>:
 8005c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c58:	688e      	ldr	r6, [r1, #8]
 8005c5a:	461f      	mov	r7, r3
 8005c5c:	42be      	cmp	r6, r7
 8005c5e:	680b      	ldr	r3, [r1, #0]
 8005c60:	4682      	mov	sl, r0
 8005c62:	460c      	mov	r4, r1
 8005c64:	4690      	mov	r8, r2
 8005c66:	d82c      	bhi.n	8005cc2 <__ssputs_r+0x6e>
 8005c68:	898a      	ldrh	r2, [r1, #12]
 8005c6a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c6e:	d026      	beq.n	8005cbe <__ssputs_r+0x6a>
 8005c70:	6965      	ldr	r5, [r4, #20]
 8005c72:	6909      	ldr	r1, [r1, #16]
 8005c74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c78:	eba3 0901 	sub.w	r9, r3, r1
 8005c7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c80:	1c7b      	adds	r3, r7, #1
 8005c82:	444b      	add	r3, r9
 8005c84:	106d      	asrs	r5, r5, #1
 8005c86:	429d      	cmp	r5, r3
 8005c88:	bf38      	it	cc
 8005c8a:	461d      	movcc	r5, r3
 8005c8c:	0553      	lsls	r3, r2, #21
 8005c8e:	d527      	bpl.n	8005ce0 <__ssputs_r+0x8c>
 8005c90:	4629      	mov	r1, r5
 8005c92:	f7ff ff53 	bl	8005b3c <_malloc_r>
 8005c96:	4606      	mov	r6, r0
 8005c98:	b360      	cbz	r0, 8005cf4 <__ssputs_r+0xa0>
 8005c9a:	6921      	ldr	r1, [r4, #16]
 8005c9c:	464a      	mov	r2, r9
 8005c9e:	f000 faeb 	bl	8006278 <memcpy>
 8005ca2:	89a3      	ldrh	r3, [r4, #12]
 8005ca4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cac:	81a3      	strh	r3, [r4, #12]
 8005cae:	6126      	str	r6, [r4, #16]
 8005cb0:	6165      	str	r5, [r4, #20]
 8005cb2:	444e      	add	r6, r9
 8005cb4:	eba5 0509 	sub.w	r5, r5, r9
 8005cb8:	6026      	str	r6, [r4, #0]
 8005cba:	60a5      	str	r5, [r4, #8]
 8005cbc:	463e      	mov	r6, r7
 8005cbe:	42be      	cmp	r6, r7
 8005cc0:	d900      	bls.n	8005cc4 <__ssputs_r+0x70>
 8005cc2:	463e      	mov	r6, r7
 8005cc4:	6820      	ldr	r0, [r4, #0]
 8005cc6:	4632      	mov	r2, r6
 8005cc8:	4641      	mov	r1, r8
 8005cca:	f000 faab 	bl	8006224 <memmove>
 8005cce:	68a3      	ldr	r3, [r4, #8]
 8005cd0:	1b9b      	subs	r3, r3, r6
 8005cd2:	60a3      	str	r3, [r4, #8]
 8005cd4:	6823      	ldr	r3, [r4, #0]
 8005cd6:	4433      	add	r3, r6
 8005cd8:	6023      	str	r3, [r4, #0]
 8005cda:	2000      	movs	r0, #0
 8005cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ce0:	462a      	mov	r2, r5
 8005ce2:	f000 fad7 	bl	8006294 <_realloc_r>
 8005ce6:	4606      	mov	r6, r0
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	d1e0      	bne.n	8005cae <__ssputs_r+0x5a>
 8005cec:	6921      	ldr	r1, [r4, #16]
 8005cee:	4650      	mov	r0, sl
 8005cf0:	f7ff feb8 	bl	8005a64 <_free_r>
 8005cf4:	230c      	movs	r3, #12
 8005cf6:	f8ca 3000 	str.w	r3, [sl]
 8005cfa:	89a3      	ldrh	r3, [r4, #12]
 8005cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d00:	81a3      	strh	r3, [r4, #12]
 8005d02:	f04f 30ff 	mov.w	r0, #4294967295
 8005d06:	e7e9      	b.n	8005cdc <__ssputs_r+0x88>

08005d08 <_svfiprintf_r>:
 8005d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d0c:	4698      	mov	r8, r3
 8005d0e:	898b      	ldrh	r3, [r1, #12]
 8005d10:	061b      	lsls	r3, r3, #24
 8005d12:	b09d      	sub	sp, #116	; 0x74
 8005d14:	4607      	mov	r7, r0
 8005d16:	460d      	mov	r5, r1
 8005d18:	4614      	mov	r4, r2
 8005d1a:	d50e      	bpl.n	8005d3a <_svfiprintf_r+0x32>
 8005d1c:	690b      	ldr	r3, [r1, #16]
 8005d1e:	b963      	cbnz	r3, 8005d3a <_svfiprintf_r+0x32>
 8005d20:	2140      	movs	r1, #64	; 0x40
 8005d22:	f7ff ff0b 	bl	8005b3c <_malloc_r>
 8005d26:	6028      	str	r0, [r5, #0]
 8005d28:	6128      	str	r0, [r5, #16]
 8005d2a:	b920      	cbnz	r0, 8005d36 <_svfiprintf_r+0x2e>
 8005d2c:	230c      	movs	r3, #12
 8005d2e:	603b      	str	r3, [r7, #0]
 8005d30:	f04f 30ff 	mov.w	r0, #4294967295
 8005d34:	e0d0      	b.n	8005ed8 <_svfiprintf_r+0x1d0>
 8005d36:	2340      	movs	r3, #64	; 0x40
 8005d38:	616b      	str	r3, [r5, #20]
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d3e:	2320      	movs	r3, #32
 8005d40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d44:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d48:	2330      	movs	r3, #48	; 0x30
 8005d4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005ef0 <_svfiprintf_r+0x1e8>
 8005d4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d52:	f04f 0901 	mov.w	r9, #1
 8005d56:	4623      	mov	r3, r4
 8005d58:	469a      	mov	sl, r3
 8005d5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d5e:	b10a      	cbz	r2, 8005d64 <_svfiprintf_r+0x5c>
 8005d60:	2a25      	cmp	r2, #37	; 0x25
 8005d62:	d1f9      	bne.n	8005d58 <_svfiprintf_r+0x50>
 8005d64:	ebba 0b04 	subs.w	fp, sl, r4
 8005d68:	d00b      	beq.n	8005d82 <_svfiprintf_r+0x7a>
 8005d6a:	465b      	mov	r3, fp
 8005d6c:	4622      	mov	r2, r4
 8005d6e:	4629      	mov	r1, r5
 8005d70:	4638      	mov	r0, r7
 8005d72:	f7ff ff6f 	bl	8005c54 <__ssputs_r>
 8005d76:	3001      	adds	r0, #1
 8005d78:	f000 80a9 	beq.w	8005ece <_svfiprintf_r+0x1c6>
 8005d7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d7e:	445a      	add	r2, fp
 8005d80:	9209      	str	r2, [sp, #36]	; 0x24
 8005d82:	f89a 3000 	ldrb.w	r3, [sl]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f000 80a1 	beq.w	8005ece <_svfiprintf_r+0x1c6>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d96:	f10a 0a01 	add.w	sl, sl, #1
 8005d9a:	9304      	str	r3, [sp, #16]
 8005d9c:	9307      	str	r3, [sp, #28]
 8005d9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005da2:	931a      	str	r3, [sp, #104]	; 0x68
 8005da4:	4654      	mov	r4, sl
 8005da6:	2205      	movs	r2, #5
 8005da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dac:	4850      	ldr	r0, [pc, #320]	; (8005ef0 <_svfiprintf_r+0x1e8>)
 8005dae:	f7fa fa17 	bl	80001e0 <memchr>
 8005db2:	9a04      	ldr	r2, [sp, #16]
 8005db4:	b9d8      	cbnz	r0, 8005dee <_svfiprintf_r+0xe6>
 8005db6:	06d0      	lsls	r0, r2, #27
 8005db8:	bf44      	itt	mi
 8005dba:	2320      	movmi	r3, #32
 8005dbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dc0:	0711      	lsls	r1, r2, #28
 8005dc2:	bf44      	itt	mi
 8005dc4:	232b      	movmi	r3, #43	; 0x2b
 8005dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dca:	f89a 3000 	ldrb.w	r3, [sl]
 8005dce:	2b2a      	cmp	r3, #42	; 0x2a
 8005dd0:	d015      	beq.n	8005dfe <_svfiprintf_r+0xf6>
 8005dd2:	9a07      	ldr	r2, [sp, #28]
 8005dd4:	4654      	mov	r4, sl
 8005dd6:	2000      	movs	r0, #0
 8005dd8:	f04f 0c0a 	mov.w	ip, #10
 8005ddc:	4621      	mov	r1, r4
 8005dde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005de2:	3b30      	subs	r3, #48	; 0x30
 8005de4:	2b09      	cmp	r3, #9
 8005de6:	d94d      	bls.n	8005e84 <_svfiprintf_r+0x17c>
 8005de8:	b1b0      	cbz	r0, 8005e18 <_svfiprintf_r+0x110>
 8005dea:	9207      	str	r2, [sp, #28]
 8005dec:	e014      	b.n	8005e18 <_svfiprintf_r+0x110>
 8005dee:	eba0 0308 	sub.w	r3, r0, r8
 8005df2:	fa09 f303 	lsl.w	r3, r9, r3
 8005df6:	4313      	orrs	r3, r2
 8005df8:	9304      	str	r3, [sp, #16]
 8005dfa:	46a2      	mov	sl, r4
 8005dfc:	e7d2      	b.n	8005da4 <_svfiprintf_r+0x9c>
 8005dfe:	9b03      	ldr	r3, [sp, #12]
 8005e00:	1d19      	adds	r1, r3, #4
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	9103      	str	r1, [sp, #12]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	bfbb      	ittet	lt
 8005e0a:	425b      	neglt	r3, r3
 8005e0c:	f042 0202 	orrlt.w	r2, r2, #2
 8005e10:	9307      	strge	r3, [sp, #28]
 8005e12:	9307      	strlt	r3, [sp, #28]
 8005e14:	bfb8      	it	lt
 8005e16:	9204      	strlt	r2, [sp, #16]
 8005e18:	7823      	ldrb	r3, [r4, #0]
 8005e1a:	2b2e      	cmp	r3, #46	; 0x2e
 8005e1c:	d10c      	bne.n	8005e38 <_svfiprintf_r+0x130>
 8005e1e:	7863      	ldrb	r3, [r4, #1]
 8005e20:	2b2a      	cmp	r3, #42	; 0x2a
 8005e22:	d134      	bne.n	8005e8e <_svfiprintf_r+0x186>
 8005e24:	9b03      	ldr	r3, [sp, #12]
 8005e26:	1d1a      	adds	r2, r3, #4
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	9203      	str	r2, [sp, #12]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	bfb8      	it	lt
 8005e30:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e34:	3402      	adds	r4, #2
 8005e36:	9305      	str	r3, [sp, #20]
 8005e38:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005f00 <_svfiprintf_r+0x1f8>
 8005e3c:	7821      	ldrb	r1, [r4, #0]
 8005e3e:	2203      	movs	r2, #3
 8005e40:	4650      	mov	r0, sl
 8005e42:	f7fa f9cd 	bl	80001e0 <memchr>
 8005e46:	b138      	cbz	r0, 8005e58 <_svfiprintf_r+0x150>
 8005e48:	9b04      	ldr	r3, [sp, #16]
 8005e4a:	eba0 000a 	sub.w	r0, r0, sl
 8005e4e:	2240      	movs	r2, #64	; 0x40
 8005e50:	4082      	lsls	r2, r0
 8005e52:	4313      	orrs	r3, r2
 8005e54:	3401      	adds	r4, #1
 8005e56:	9304      	str	r3, [sp, #16]
 8005e58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e5c:	4825      	ldr	r0, [pc, #148]	; (8005ef4 <_svfiprintf_r+0x1ec>)
 8005e5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e62:	2206      	movs	r2, #6
 8005e64:	f7fa f9bc 	bl	80001e0 <memchr>
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	d038      	beq.n	8005ede <_svfiprintf_r+0x1d6>
 8005e6c:	4b22      	ldr	r3, [pc, #136]	; (8005ef8 <_svfiprintf_r+0x1f0>)
 8005e6e:	bb1b      	cbnz	r3, 8005eb8 <_svfiprintf_r+0x1b0>
 8005e70:	9b03      	ldr	r3, [sp, #12]
 8005e72:	3307      	adds	r3, #7
 8005e74:	f023 0307 	bic.w	r3, r3, #7
 8005e78:	3308      	adds	r3, #8
 8005e7a:	9303      	str	r3, [sp, #12]
 8005e7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e7e:	4433      	add	r3, r6
 8005e80:	9309      	str	r3, [sp, #36]	; 0x24
 8005e82:	e768      	b.n	8005d56 <_svfiprintf_r+0x4e>
 8005e84:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e88:	460c      	mov	r4, r1
 8005e8a:	2001      	movs	r0, #1
 8005e8c:	e7a6      	b.n	8005ddc <_svfiprintf_r+0xd4>
 8005e8e:	2300      	movs	r3, #0
 8005e90:	3401      	adds	r4, #1
 8005e92:	9305      	str	r3, [sp, #20]
 8005e94:	4619      	mov	r1, r3
 8005e96:	f04f 0c0a 	mov.w	ip, #10
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ea0:	3a30      	subs	r2, #48	; 0x30
 8005ea2:	2a09      	cmp	r2, #9
 8005ea4:	d903      	bls.n	8005eae <_svfiprintf_r+0x1a6>
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d0c6      	beq.n	8005e38 <_svfiprintf_r+0x130>
 8005eaa:	9105      	str	r1, [sp, #20]
 8005eac:	e7c4      	b.n	8005e38 <_svfiprintf_r+0x130>
 8005eae:	fb0c 2101 	mla	r1, ip, r1, r2
 8005eb2:	4604      	mov	r4, r0
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e7f0      	b.n	8005e9a <_svfiprintf_r+0x192>
 8005eb8:	ab03      	add	r3, sp, #12
 8005eba:	9300      	str	r3, [sp, #0]
 8005ebc:	462a      	mov	r2, r5
 8005ebe:	4b0f      	ldr	r3, [pc, #60]	; (8005efc <_svfiprintf_r+0x1f4>)
 8005ec0:	a904      	add	r1, sp, #16
 8005ec2:	4638      	mov	r0, r7
 8005ec4:	f3af 8000 	nop.w
 8005ec8:	1c42      	adds	r2, r0, #1
 8005eca:	4606      	mov	r6, r0
 8005ecc:	d1d6      	bne.n	8005e7c <_svfiprintf_r+0x174>
 8005ece:	89ab      	ldrh	r3, [r5, #12]
 8005ed0:	065b      	lsls	r3, r3, #25
 8005ed2:	f53f af2d 	bmi.w	8005d30 <_svfiprintf_r+0x28>
 8005ed6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ed8:	b01d      	add	sp, #116	; 0x74
 8005eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ede:	ab03      	add	r3, sp, #12
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	462a      	mov	r2, r5
 8005ee4:	4b05      	ldr	r3, [pc, #20]	; (8005efc <_svfiprintf_r+0x1f4>)
 8005ee6:	a904      	add	r1, sp, #16
 8005ee8:	4638      	mov	r0, r7
 8005eea:	f000 f879 	bl	8005fe0 <_printf_i>
 8005eee:	e7eb      	b.n	8005ec8 <_svfiprintf_r+0x1c0>
 8005ef0:	080063d8 	.word	0x080063d8
 8005ef4:	080063e2 	.word	0x080063e2
 8005ef8:	00000000 	.word	0x00000000
 8005efc:	08005c55 	.word	0x08005c55
 8005f00:	080063de 	.word	0x080063de

08005f04 <_printf_common>:
 8005f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f08:	4616      	mov	r6, r2
 8005f0a:	4699      	mov	r9, r3
 8005f0c:	688a      	ldr	r2, [r1, #8]
 8005f0e:	690b      	ldr	r3, [r1, #16]
 8005f10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f14:	4293      	cmp	r3, r2
 8005f16:	bfb8      	it	lt
 8005f18:	4613      	movlt	r3, r2
 8005f1a:	6033      	str	r3, [r6, #0]
 8005f1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f20:	4607      	mov	r7, r0
 8005f22:	460c      	mov	r4, r1
 8005f24:	b10a      	cbz	r2, 8005f2a <_printf_common+0x26>
 8005f26:	3301      	adds	r3, #1
 8005f28:	6033      	str	r3, [r6, #0]
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	0699      	lsls	r1, r3, #26
 8005f2e:	bf42      	ittt	mi
 8005f30:	6833      	ldrmi	r3, [r6, #0]
 8005f32:	3302      	addmi	r3, #2
 8005f34:	6033      	strmi	r3, [r6, #0]
 8005f36:	6825      	ldr	r5, [r4, #0]
 8005f38:	f015 0506 	ands.w	r5, r5, #6
 8005f3c:	d106      	bne.n	8005f4c <_printf_common+0x48>
 8005f3e:	f104 0a19 	add.w	sl, r4, #25
 8005f42:	68e3      	ldr	r3, [r4, #12]
 8005f44:	6832      	ldr	r2, [r6, #0]
 8005f46:	1a9b      	subs	r3, r3, r2
 8005f48:	42ab      	cmp	r3, r5
 8005f4a:	dc26      	bgt.n	8005f9a <_printf_common+0x96>
 8005f4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f50:	1e13      	subs	r3, r2, #0
 8005f52:	6822      	ldr	r2, [r4, #0]
 8005f54:	bf18      	it	ne
 8005f56:	2301      	movne	r3, #1
 8005f58:	0692      	lsls	r2, r2, #26
 8005f5a:	d42b      	bmi.n	8005fb4 <_printf_common+0xb0>
 8005f5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f60:	4649      	mov	r1, r9
 8005f62:	4638      	mov	r0, r7
 8005f64:	47c0      	blx	r8
 8005f66:	3001      	adds	r0, #1
 8005f68:	d01e      	beq.n	8005fa8 <_printf_common+0xa4>
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	6922      	ldr	r2, [r4, #16]
 8005f6e:	f003 0306 	and.w	r3, r3, #6
 8005f72:	2b04      	cmp	r3, #4
 8005f74:	bf02      	ittt	eq
 8005f76:	68e5      	ldreq	r5, [r4, #12]
 8005f78:	6833      	ldreq	r3, [r6, #0]
 8005f7a:	1aed      	subeq	r5, r5, r3
 8005f7c:	68a3      	ldr	r3, [r4, #8]
 8005f7e:	bf0c      	ite	eq
 8005f80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f84:	2500      	movne	r5, #0
 8005f86:	4293      	cmp	r3, r2
 8005f88:	bfc4      	itt	gt
 8005f8a:	1a9b      	subgt	r3, r3, r2
 8005f8c:	18ed      	addgt	r5, r5, r3
 8005f8e:	2600      	movs	r6, #0
 8005f90:	341a      	adds	r4, #26
 8005f92:	42b5      	cmp	r5, r6
 8005f94:	d11a      	bne.n	8005fcc <_printf_common+0xc8>
 8005f96:	2000      	movs	r0, #0
 8005f98:	e008      	b.n	8005fac <_printf_common+0xa8>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	4652      	mov	r2, sl
 8005f9e:	4649      	mov	r1, r9
 8005fa0:	4638      	mov	r0, r7
 8005fa2:	47c0      	blx	r8
 8005fa4:	3001      	adds	r0, #1
 8005fa6:	d103      	bne.n	8005fb0 <_printf_common+0xac>
 8005fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fb0:	3501      	adds	r5, #1
 8005fb2:	e7c6      	b.n	8005f42 <_printf_common+0x3e>
 8005fb4:	18e1      	adds	r1, r4, r3
 8005fb6:	1c5a      	adds	r2, r3, #1
 8005fb8:	2030      	movs	r0, #48	; 0x30
 8005fba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fbe:	4422      	add	r2, r4
 8005fc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fc8:	3302      	adds	r3, #2
 8005fca:	e7c7      	b.n	8005f5c <_printf_common+0x58>
 8005fcc:	2301      	movs	r3, #1
 8005fce:	4622      	mov	r2, r4
 8005fd0:	4649      	mov	r1, r9
 8005fd2:	4638      	mov	r0, r7
 8005fd4:	47c0      	blx	r8
 8005fd6:	3001      	adds	r0, #1
 8005fd8:	d0e6      	beq.n	8005fa8 <_printf_common+0xa4>
 8005fda:	3601      	adds	r6, #1
 8005fdc:	e7d9      	b.n	8005f92 <_printf_common+0x8e>
	...

08005fe0 <_printf_i>:
 8005fe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe4:	7e0f      	ldrb	r7, [r1, #24]
 8005fe6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005fe8:	2f78      	cmp	r7, #120	; 0x78
 8005fea:	4691      	mov	r9, r2
 8005fec:	4680      	mov	r8, r0
 8005fee:	460c      	mov	r4, r1
 8005ff0:	469a      	mov	sl, r3
 8005ff2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ff6:	d807      	bhi.n	8006008 <_printf_i+0x28>
 8005ff8:	2f62      	cmp	r7, #98	; 0x62
 8005ffa:	d80a      	bhi.n	8006012 <_printf_i+0x32>
 8005ffc:	2f00      	cmp	r7, #0
 8005ffe:	f000 80d4 	beq.w	80061aa <_printf_i+0x1ca>
 8006002:	2f58      	cmp	r7, #88	; 0x58
 8006004:	f000 80c0 	beq.w	8006188 <_printf_i+0x1a8>
 8006008:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800600c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006010:	e03a      	b.n	8006088 <_printf_i+0xa8>
 8006012:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006016:	2b15      	cmp	r3, #21
 8006018:	d8f6      	bhi.n	8006008 <_printf_i+0x28>
 800601a:	a101      	add	r1, pc, #4	; (adr r1, 8006020 <_printf_i+0x40>)
 800601c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006020:	08006079 	.word	0x08006079
 8006024:	0800608d 	.word	0x0800608d
 8006028:	08006009 	.word	0x08006009
 800602c:	08006009 	.word	0x08006009
 8006030:	08006009 	.word	0x08006009
 8006034:	08006009 	.word	0x08006009
 8006038:	0800608d 	.word	0x0800608d
 800603c:	08006009 	.word	0x08006009
 8006040:	08006009 	.word	0x08006009
 8006044:	08006009 	.word	0x08006009
 8006048:	08006009 	.word	0x08006009
 800604c:	08006191 	.word	0x08006191
 8006050:	080060b9 	.word	0x080060b9
 8006054:	0800614b 	.word	0x0800614b
 8006058:	08006009 	.word	0x08006009
 800605c:	08006009 	.word	0x08006009
 8006060:	080061b3 	.word	0x080061b3
 8006064:	08006009 	.word	0x08006009
 8006068:	080060b9 	.word	0x080060b9
 800606c:	08006009 	.word	0x08006009
 8006070:	08006009 	.word	0x08006009
 8006074:	08006153 	.word	0x08006153
 8006078:	682b      	ldr	r3, [r5, #0]
 800607a:	1d1a      	adds	r2, r3, #4
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	602a      	str	r2, [r5, #0]
 8006080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006084:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006088:	2301      	movs	r3, #1
 800608a:	e09f      	b.n	80061cc <_printf_i+0x1ec>
 800608c:	6820      	ldr	r0, [r4, #0]
 800608e:	682b      	ldr	r3, [r5, #0]
 8006090:	0607      	lsls	r7, r0, #24
 8006092:	f103 0104 	add.w	r1, r3, #4
 8006096:	6029      	str	r1, [r5, #0]
 8006098:	d501      	bpl.n	800609e <_printf_i+0xbe>
 800609a:	681e      	ldr	r6, [r3, #0]
 800609c:	e003      	b.n	80060a6 <_printf_i+0xc6>
 800609e:	0646      	lsls	r6, r0, #25
 80060a0:	d5fb      	bpl.n	800609a <_printf_i+0xba>
 80060a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80060a6:	2e00      	cmp	r6, #0
 80060a8:	da03      	bge.n	80060b2 <_printf_i+0xd2>
 80060aa:	232d      	movs	r3, #45	; 0x2d
 80060ac:	4276      	negs	r6, r6
 80060ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060b2:	485a      	ldr	r0, [pc, #360]	; (800621c <_printf_i+0x23c>)
 80060b4:	230a      	movs	r3, #10
 80060b6:	e012      	b.n	80060de <_printf_i+0xfe>
 80060b8:	682b      	ldr	r3, [r5, #0]
 80060ba:	6820      	ldr	r0, [r4, #0]
 80060bc:	1d19      	adds	r1, r3, #4
 80060be:	6029      	str	r1, [r5, #0]
 80060c0:	0605      	lsls	r5, r0, #24
 80060c2:	d501      	bpl.n	80060c8 <_printf_i+0xe8>
 80060c4:	681e      	ldr	r6, [r3, #0]
 80060c6:	e002      	b.n	80060ce <_printf_i+0xee>
 80060c8:	0641      	lsls	r1, r0, #25
 80060ca:	d5fb      	bpl.n	80060c4 <_printf_i+0xe4>
 80060cc:	881e      	ldrh	r6, [r3, #0]
 80060ce:	4853      	ldr	r0, [pc, #332]	; (800621c <_printf_i+0x23c>)
 80060d0:	2f6f      	cmp	r7, #111	; 0x6f
 80060d2:	bf0c      	ite	eq
 80060d4:	2308      	moveq	r3, #8
 80060d6:	230a      	movne	r3, #10
 80060d8:	2100      	movs	r1, #0
 80060da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060de:	6865      	ldr	r5, [r4, #4]
 80060e0:	60a5      	str	r5, [r4, #8]
 80060e2:	2d00      	cmp	r5, #0
 80060e4:	bfa2      	ittt	ge
 80060e6:	6821      	ldrge	r1, [r4, #0]
 80060e8:	f021 0104 	bicge.w	r1, r1, #4
 80060ec:	6021      	strge	r1, [r4, #0]
 80060ee:	b90e      	cbnz	r6, 80060f4 <_printf_i+0x114>
 80060f0:	2d00      	cmp	r5, #0
 80060f2:	d04b      	beq.n	800618c <_printf_i+0x1ac>
 80060f4:	4615      	mov	r5, r2
 80060f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80060fa:	fb03 6711 	mls	r7, r3, r1, r6
 80060fe:	5dc7      	ldrb	r7, [r0, r7]
 8006100:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006104:	4637      	mov	r7, r6
 8006106:	42bb      	cmp	r3, r7
 8006108:	460e      	mov	r6, r1
 800610a:	d9f4      	bls.n	80060f6 <_printf_i+0x116>
 800610c:	2b08      	cmp	r3, #8
 800610e:	d10b      	bne.n	8006128 <_printf_i+0x148>
 8006110:	6823      	ldr	r3, [r4, #0]
 8006112:	07de      	lsls	r6, r3, #31
 8006114:	d508      	bpl.n	8006128 <_printf_i+0x148>
 8006116:	6923      	ldr	r3, [r4, #16]
 8006118:	6861      	ldr	r1, [r4, #4]
 800611a:	4299      	cmp	r1, r3
 800611c:	bfde      	ittt	le
 800611e:	2330      	movle	r3, #48	; 0x30
 8006120:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006124:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006128:	1b52      	subs	r2, r2, r5
 800612a:	6122      	str	r2, [r4, #16]
 800612c:	f8cd a000 	str.w	sl, [sp]
 8006130:	464b      	mov	r3, r9
 8006132:	aa03      	add	r2, sp, #12
 8006134:	4621      	mov	r1, r4
 8006136:	4640      	mov	r0, r8
 8006138:	f7ff fee4 	bl	8005f04 <_printf_common>
 800613c:	3001      	adds	r0, #1
 800613e:	d14a      	bne.n	80061d6 <_printf_i+0x1f6>
 8006140:	f04f 30ff 	mov.w	r0, #4294967295
 8006144:	b004      	add	sp, #16
 8006146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800614a:	6823      	ldr	r3, [r4, #0]
 800614c:	f043 0320 	orr.w	r3, r3, #32
 8006150:	6023      	str	r3, [r4, #0]
 8006152:	4833      	ldr	r0, [pc, #204]	; (8006220 <_printf_i+0x240>)
 8006154:	2778      	movs	r7, #120	; 0x78
 8006156:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800615a:	6823      	ldr	r3, [r4, #0]
 800615c:	6829      	ldr	r1, [r5, #0]
 800615e:	061f      	lsls	r7, r3, #24
 8006160:	f851 6b04 	ldr.w	r6, [r1], #4
 8006164:	d402      	bmi.n	800616c <_printf_i+0x18c>
 8006166:	065f      	lsls	r7, r3, #25
 8006168:	bf48      	it	mi
 800616a:	b2b6      	uxthmi	r6, r6
 800616c:	07df      	lsls	r7, r3, #31
 800616e:	bf48      	it	mi
 8006170:	f043 0320 	orrmi.w	r3, r3, #32
 8006174:	6029      	str	r1, [r5, #0]
 8006176:	bf48      	it	mi
 8006178:	6023      	strmi	r3, [r4, #0]
 800617a:	b91e      	cbnz	r6, 8006184 <_printf_i+0x1a4>
 800617c:	6823      	ldr	r3, [r4, #0]
 800617e:	f023 0320 	bic.w	r3, r3, #32
 8006182:	6023      	str	r3, [r4, #0]
 8006184:	2310      	movs	r3, #16
 8006186:	e7a7      	b.n	80060d8 <_printf_i+0xf8>
 8006188:	4824      	ldr	r0, [pc, #144]	; (800621c <_printf_i+0x23c>)
 800618a:	e7e4      	b.n	8006156 <_printf_i+0x176>
 800618c:	4615      	mov	r5, r2
 800618e:	e7bd      	b.n	800610c <_printf_i+0x12c>
 8006190:	682b      	ldr	r3, [r5, #0]
 8006192:	6826      	ldr	r6, [r4, #0]
 8006194:	6961      	ldr	r1, [r4, #20]
 8006196:	1d18      	adds	r0, r3, #4
 8006198:	6028      	str	r0, [r5, #0]
 800619a:	0635      	lsls	r5, r6, #24
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	d501      	bpl.n	80061a4 <_printf_i+0x1c4>
 80061a0:	6019      	str	r1, [r3, #0]
 80061a2:	e002      	b.n	80061aa <_printf_i+0x1ca>
 80061a4:	0670      	lsls	r0, r6, #25
 80061a6:	d5fb      	bpl.n	80061a0 <_printf_i+0x1c0>
 80061a8:	8019      	strh	r1, [r3, #0]
 80061aa:	2300      	movs	r3, #0
 80061ac:	6123      	str	r3, [r4, #16]
 80061ae:	4615      	mov	r5, r2
 80061b0:	e7bc      	b.n	800612c <_printf_i+0x14c>
 80061b2:	682b      	ldr	r3, [r5, #0]
 80061b4:	1d1a      	adds	r2, r3, #4
 80061b6:	602a      	str	r2, [r5, #0]
 80061b8:	681d      	ldr	r5, [r3, #0]
 80061ba:	6862      	ldr	r2, [r4, #4]
 80061bc:	2100      	movs	r1, #0
 80061be:	4628      	mov	r0, r5
 80061c0:	f7fa f80e 	bl	80001e0 <memchr>
 80061c4:	b108      	cbz	r0, 80061ca <_printf_i+0x1ea>
 80061c6:	1b40      	subs	r0, r0, r5
 80061c8:	6060      	str	r0, [r4, #4]
 80061ca:	6863      	ldr	r3, [r4, #4]
 80061cc:	6123      	str	r3, [r4, #16]
 80061ce:	2300      	movs	r3, #0
 80061d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061d4:	e7aa      	b.n	800612c <_printf_i+0x14c>
 80061d6:	6923      	ldr	r3, [r4, #16]
 80061d8:	462a      	mov	r2, r5
 80061da:	4649      	mov	r1, r9
 80061dc:	4640      	mov	r0, r8
 80061de:	47d0      	blx	sl
 80061e0:	3001      	adds	r0, #1
 80061e2:	d0ad      	beq.n	8006140 <_printf_i+0x160>
 80061e4:	6823      	ldr	r3, [r4, #0]
 80061e6:	079b      	lsls	r3, r3, #30
 80061e8:	d413      	bmi.n	8006212 <_printf_i+0x232>
 80061ea:	68e0      	ldr	r0, [r4, #12]
 80061ec:	9b03      	ldr	r3, [sp, #12]
 80061ee:	4298      	cmp	r0, r3
 80061f0:	bfb8      	it	lt
 80061f2:	4618      	movlt	r0, r3
 80061f4:	e7a6      	b.n	8006144 <_printf_i+0x164>
 80061f6:	2301      	movs	r3, #1
 80061f8:	4632      	mov	r2, r6
 80061fa:	4649      	mov	r1, r9
 80061fc:	4640      	mov	r0, r8
 80061fe:	47d0      	blx	sl
 8006200:	3001      	adds	r0, #1
 8006202:	d09d      	beq.n	8006140 <_printf_i+0x160>
 8006204:	3501      	adds	r5, #1
 8006206:	68e3      	ldr	r3, [r4, #12]
 8006208:	9903      	ldr	r1, [sp, #12]
 800620a:	1a5b      	subs	r3, r3, r1
 800620c:	42ab      	cmp	r3, r5
 800620e:	dcf2      	bgt.n	80061f6 <_printf_i+0x216>
 8006210:	e7eb      	b.n	80061ea <_printf_i+0x20a>
 8006212:	2500      	movs	r5, #0
 8006214:	f104 0619 	add.w	r6, r4, #25
 8006218:	e7f5      	b.n	8006206 <_printf_i+0x226>
 800621a:	bf00      	nop
 800621c:	080063e9 	.word	0x080063e9
 8006220:	080063fa 	.word	0x080063fa

08006224 <memmove>:
 8006224:	4288      	cmp	r0, r1
 8006226:	b510      	push	{r4, lr}
 8006228:	eb01 0402 	add.w	r4, r1, r2
 800622c:	d902      	bls.n	8006234 <memmove+0x10>
 800622e:	4284      	cmp	r4, r0
 8006230:	4623      	mov	r3, r4
 8006232:	d807      	bhi.n	8006244 <memmove+0x20>
 8006234:	1e43      	subs	r3, r0, #1
 8006236:	42a1      	cmp	r1, r4
 8006238:	d008      	beq.n	800624c <memmove+0x28>
 800623a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800623e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006242:	e7f8      	b.n	8006236 <memmove+0x12>
 8006244:	4402      	add	r2, r0
 8006246:	4601      	mov	r1, r0
 8006248:	428a      	cmp	r2, r1
 800624a:	d100      	bne.n	800624e <memmove+0x2a>
 800624c:	bd10      	pop	{r4, pc}
 800624e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006252:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006256:	e7f7      	b.n	8006248 <memmove+0x24>

08006258 <_sbrk_r>:
 8006258:	b538      	push	{r3, r4, r5, lr}
 800625a:	4d06      	ldr	r5, [pc, #24]	; (8006274 <_sbrk_r+0x1c>)
 800625c:	2300      	movs	r3, #0
 800625e:	4604      	mov	r4, r0
 8006260:	4608      	mov	r0, r1
 8006262:	602b      	str	r3, [r5, #0]
 8006264:	f7fa feae 	bl	8000fc4 <_sbrk>
 8006268:	1c43      	adds	r3, r0, #1
 800626a:	d102      	bne.n	8006272 <_sbrk_r+0x1a>
 800626c:	682b      	ldr	r3, [r5, #0]
 800626e:	b103      	cbz	r3, 8006272 <_sbrk_r+0x1a>
 8006270:	6023      	str	r3, [r4, #0]
 8006272:	bd38      	pop	{r3, r4, r5, pc}
 8006274:	2000148c 	.word	0x2000148c

08006278 <memcpy>:
 8006278:	440a      	add	r2, r1
 800627a:	4291      	cmp	r1, r2
 800627c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006280:	d100      	bne.n	8006284 <memcpy+0xc>
 8006282:	4770      	bx	lr
 8006284:	b510      	push	{r4, lr}
 8006286:	f811 4b01 	ldrb.w	r4, [r1], #1
 800628a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800628e:	4291      	cmp	r1, r2
 8006290:	d1f9      	bne.n	8006286 <memcpy+0xe>
 8006292:	bd10      	pop	{r4, pc}

08006294 <_realloc_r>:
 8006294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006298:	4680      	mov	r8, r0
 800629a:	4614      	mov	r4, r2
 800629c:	460e      	mov	r6, r1
 800629e:	b921      	cbnz	r1, 80062aa <_realloc_r+0x16>
 80062a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062a4:	4611      	mov	r1, r2
 80062a6:	f7ff bc49 	b.w	8005b3c <_malloc_r>
 80062aa:	b92a      	cbnz	r2, 80062b8 <_realloc_r+0x24>
 80062ac:	f7ff fbda 	bl	8005a64 <_free_r>
 80062b0:	4625      	mov	r5, r4
 80062b2:	4628      	mov	r0, r5
 80062b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062b8:	f000 f81b 	bl	80062f2 <_malloc_usable_size_r>
 80062bc:	4284      	cmp	r4, r0
 80062be:	4607      	mov	r7, r0
 80062c0:	d802      	bhi.n	80062c8 <_realloc_r+0x34>
 80062c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80062c6:	d812      	bhi.n	80062ee <_realloc_r+0x5a>
 80062c8:	4621      	mov	r1, r4
 80062ca:	4640      	mov	r0, r8
 80062cc:	f7ff fc36 	bl	8005b3c <_malloc_r>
 80062d0:	4605      	mov	r5, r0
 80062d2:	2800      	cmp	r0, #0
 80062d4:	d0ed      	beq.n	80062b2 <_realloc_r+0x1e>
 80062d6:	42bc      	cmp	r4, r7
 80062d8:	4622      	mov	r2, r4
 80062da:	4631      	mov	r1, r6
 80062dc:	bf28      	it	cs
 80062de:	463a      	movcs	r2, r7
 80062e0:	f7ff ffca 	bl	8006278 <memcpy>
 80062e4:	4631      	mov	r1, r6
 80062e6:	4640      	mov	r0, r8
 80062e8:	f7ff fbbc 	bl	8005a64 <_free_r>
 80062ec:	e7e1      	b.n	80062b2 <_realloc_r+0x1e>
 80062ee:	4635      	mov	r5, r6
 80062f0:	e7df      	b.n	80062b2 <_realloc_r+0x1e>

080062f2 <_malloc_usable_size_r>:
 80062f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062f6:	1f18      	subs	r0, r3, #4
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	bfbc      	itt	lt
 80062fc:	580b      	ldrlt	r3, [r1, r0]
 80062fe:	18c0      	addlt	r0, r0, r3
 8006300:	4770      	bx	lr
	...

08006304 <_init>:
 8006304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006306:	bf00      	nop
 8006308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800630a:	bc08      	pop	{r3}
 800630c:	469e      	mov	lr, r3
 800630e:	4770      	bx	lr

08006310 <_fini>:
 8006310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006312:	bf00      	nop
 8006314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006316:	bc08      	pop	{r3}
 8006318:	469e      	mov	lr, r3
 800631a:	4770      	bx	lr
