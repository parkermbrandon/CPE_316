
P2 Audio Processor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a6c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004bf4  08004bf4  00014bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c3c  08004c3c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c3c  08004c3c  00014c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c44  08004c44  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c44  08004c44  00014c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c48  08004c48  00014c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004c4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012ac  2000000c  08004c58  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012b8  08004c58  000212b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000efbc  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021f2  00000000  00000000  0002f03b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d98  00000000  00000000  00031230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a8b  00000000  00000000  00031fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026702  00000000  00000000  00032a53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010022  00000000  00000000  00059155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec42a  00000000  00000000  00069177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000381c  00000000  00000000  001555a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00158dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004bdc 	.word	0x08004bdc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004bdc 	.word	0x08004bdc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fc4c 	bl	8000d64 <HAL_Init>
  void DAC_init();

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f812 	bl	80004f4 <SystemClock_Config>
  // Start the timer

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f994 	bl	80007fc <MX_GPIO_Init>
  MX_DMA_Init();
 80004d4:	f000 f96c 	bl	80007b0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004d8:	f000 f93a 	bl	8000750 <MX_USART2_UART_Init>
  MX_SAI2_Init();
 80004dc:	f000 f86c 	bl	80005b8 <MX_SAI2_Init>
  MX_SPI1_Init();
 80004e0:	f000 f8f8 	bl	80006d4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  currentBuffer = audioBuffer1;
 80004e4:	4b01      	ldr	r3, [pc, #4]	; (80004ec <main+0x28>)
 80004e6:	4a02      	ldr	r2, [pc, #8]	; (80004f0 <main+0x2c>)
 80004e8:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ea:	e7fe      	b.n	80004ea <main+0x26>
 80004ec:	20001028 	.word	0x20001028
 80004f0:	20000028 	.word	0x20000028

080004f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b096      	sub	sp, #88	; 0x58
 80004f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	2244      	movs	r2, #68	; 0x44
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f004 fb3d 	bl	8004b82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000508:	463b      	mov	r3, r7
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000516:	f44f 7000 	mov.w	r0, #512	; 0x200
 800051a:	f001 f8e1 	bl	80016e0 <HAL_PWREx_ControlVoltageScaling>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000524:	f000 f9bc 	bl	80008a0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000528:	f001 f8bc 	bl	80016a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800052c:	4b21      	ldr	r3, [pc, #132]	; (80005b4 <SystemClock_Config+0xc0>)
 800052e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000532:	4a20      	ldr	r2, [pc, #128]	; (80005b4 <SystemClock_Config+0xc0>)
 8000534:	f023 0318 	bic.w	r3, r3, #24
 8000538:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800053c:	2314      	movs	r3, #20
 800053e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000540:	2301      	movs	r3, #1
 8000542:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000544:	2301      	movs	r3, #1
 8000546:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 800054c:	23a0      	movs	r3, #160	; 0xa0
 800054e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000550:	2302      	movs	r3, #2
 8000552:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000554:	2301      	movs	r3, #1
 8000556:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000558:	2305      	movs	r3, #5
 800055a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 37;
 800055c:	2325      	movs	r3, #37	; 0x25
 800055e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV17;
 8000560:	2311      	movs	r3, #17
 8000562:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000564:	2302      	movs	r3, #2
 8000566:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000568:	2304      	movs	r3, #4
 800056a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056c:	f107 0314 	add.w	r3, r7, #20
 8000570:	4618      	mov	r0, r3
 8000572:	f001 f90b 	bl	800178c <HAL_RCC_OscConfig>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800057c:	f000 f990 	bl	80008a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000580:	230f      	movs	r3, #15
 8000582:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000584:	2303      	movs	r3, #3
 8000586:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000594:	463b      	mov	r3, r7
 8000596:	2103      	movs	r1, #3
 8000598:	4618      	mov	r0, r3
 800059a:	f001 fcd3 	bl	8001f44 <HAL_RCC_ClockConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005a4:	f000 f97c 	bl	80008a0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005a8:	f002 ff48 	bl	800343c <HAL_RCCEx_EnableMSIPLLMode>
}
 80005ac:	bf00      	nop
 80005ae:	3758      	adds	r7, #88	; 0x58
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40021000 	.word	0x40021000

080005b8 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80005bc:	4b3f      	ldr	r3, [pc, #252]	; (80006bc <MX_SAI2_Init+0x104>)
 80005be:	4a40      	ldr	r2, [pc, #256]	; (80006c0 <MX_SAI2_Init+0x108>)
 80005c0:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_RX;
 80005c2:	4b3e      	ldr	r3, [pc, #248]	; (80006bc <MX_SAI2_Init+0x104>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80005c8:	4b3c      	ldr	r3, [pc, #240]	; (80006bc <MX_SAI2_Init+0x104>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80005ce:	4b3b      	ldr	r3, [pc, #236]	; (80006bc <MX_SAI2_Init+0x104>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80005d4:	4b39      	ldr	r3, [pc, #228]	; (80006bc <MX_SAI2_Init+0x104>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80005da:	4b38      	ldr	r3, [pc, #224]	; (80006bc <MX_SAI2_Init+0x104>)
 80005dc:	2200      	movs	r2, #0
 80005de:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80005e0:	4b36      	ldr	r3, [pc, #216]	; (80006bc <MX_SAI2_Init+0x104>)
 80005e2:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80005e6:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80005e8:	4b34      	ldr	r3, [pc, #208]	; (80006bc <MX_SAI2_Init+0x104>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_MONOMODE;
 80005ee:	4b33      	ldr	r3, [pc, #204]	; (80006bc <MX_SAI2_Init+0x104>)
 80005f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005f4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80005f6:	4b31      	ldr	r3, [pc, #196]	; (80006bc <MX_SAI2_Init+0x104>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 80005fc:	2302      	movs	r3, #2
 80005fe:	2203      	movs	r2, #3
 8000600:	2100      	movs	r1, #0
 8000602:	482e      	ldr	r0, [pc, #184]	; (80006bc <MX_SAI2_Init+0x104>)
 8000604:	f003 f9ec 	bl	80039e0 <HAL_SAI_InitProtocol>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_SAI2_Init+0x5a>
  {
    Error_Handler();
 800060e:	f000 f947 	bl	80008a0 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000612:	4b2c      	ldr	r3, [pc, #176]	; (80006c4 <MX_SAI2_Init+0x10c>)
 8000614:	4a2c      	ldr	r2, [pc, #176]	; (80006c8 <MX_SAI2_Init+0x110>)
 8000616:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000618:	4b2a      	ldr	r3, [pc, #168]	; (80006c4 <MX_SAI2_Init+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 800061e:	4b29      	ldr	r3, [pc, #164]	; (80006c4 <MX_SAI2_Init+0x10c>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000624:	4b27      	ldr	r3, [pc, #156]	; (80006c4 <MX_SAI2_Init+0x10c>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800062a:	4b26      	ldr	r3, [pc, #152]	; (80006c4 <MX_SAI2_Init+0x10c>)
 800062c:	2200      	movs	r2, #0
 800062e:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000630:	4b24      	ldr	r3, [pc, #144]	; (80006c4 <MX_SAI2_Init+0x10c>)
 8000632:	2200      	movs	r2, #0
 8000634:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000636:	4b23      	ldr	r3, [pc, #140]	; (80006c4 <MX_SAI2_Init+0x10c>)
 8000638:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800063c:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800063e:	4b21      	ldr	r3, [pc, #132]	; (80006c4 <MX_SAI2_Init+0x10c>)
 8000640:	2200      	movs	r2, #0
 8000642:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_MONOMODE;
 8000644:	4b1f      	ldr	r3, [pc, #124]	; (80006c4 <MX_SAI2_Init+0x10c>)
 8000646:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800064a:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800064c:	4b1d      	ldr	r3, [pc, #116]	; (80006c4 <MX_SAI2_Init+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000652:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <MX_SAI2_Init+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000658:	2302      	movs	r3, #2
 800065a:	2200      	movs	r2, #0
 800065c:	2100      	movs	r1, #0
 800065e:	4819      	ldr	r0, [pc, #100]	; (80006c4 <MX_SAI2_Init+0x10c>)
 8000660:	f003 f9be 	bl	80039e0 <HAL_SAI_InitProtocol>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_SAI2_Init+0xb6>
  {
    Error_Handler();
 800066a:	f000 f919 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  // Configure the DMA handler for reception process
  hdma_sai2_a.Instance                 = DMA1_Channel6;
 800066e:	4b17      	ldr	r3, [pc, #92]	; (80006cc <MX_SAI2_Init+0x114>)
 8000670:	4a17      	ldr	r2, [pc, #92]	; (80006d0 <MX_SAI2_Init+0x118>)
 8000672:	601a      	str	r2, [r3, #0]
  hdma_sai2_a.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8000674:	4b15      	ldr	r3, [pc, #84]	; (80006cc <MX_SAI2_Init+0x114>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  hdma_sai2_a.Init.PeriphInc           = DMA_PINC_DISABLE;
 800067a:	4b14      	ldr	r3, [pc, #80]	; (80006cc <MX_SAI2_Init+0x114>)
 800067c:	2200      	movs	r2, #0
 800067e:	60da      	str	r2, [r3, #12]
  hdma_sai2_a.Init.MemInc              = DMA_MINC_ENABLE;
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <MX_SAI2_Init+0x114>)
 8000682:	2280      	movs	r2, #128	; 0x80
 8000684:	611a      	str	r2, [r3, #16]
  hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000686:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_SAI2_Init+0x114>)
 8000688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800068c:	615a      	str	r2, [r3, #20]
  hdma_sai2_a.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800068e:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <MX_SAI2_Init+0x114>)
 8000690:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000694:	619a      	str	r2, [r3, #24]
  hdma_sai2_a.Init.Mode                = DMA_CIRCULAR;
 8000696:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <MX_SAI2_Init+0x114>)
 8000698:	2220      	movs	r2, #32
 800069a:	61da      	str	r2, [r3, #28]
  hdma_sai2_a.Init.Priority            = DMA_PRIORITY_HIGH;
 800069c:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <MX_SAI2_Init+0x114>)
 800069e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006a2:	621a      	str	r2, [r3, #32]

  HAL_DMA_Init(&hdma_sai2_a);
 80006a4:	4809      	ldr	r0, [pc, #36]	; (80006cc <MX_SAI2_Init+0x114>)
 80006a6:	f000 fceb 	bl	8001080 <HAL_DMA_Init>

  // Associate the initialized DMA handle to the SAI handle
  __HAL_LINKDMA(&hsai_BlockA2, hdmarx, hdma_sai2_a);
 80006aa:	4b04      	ldr	r3, [pc, #16]	; (80006bc <MX_SAI2_Init+0x104>)
 80006ac:	4a07      	ldr	r2, [pc, #28]	; (80006cc <MX_SAI2_Init+0x114>)
 80006ae:	671a      	str	r2, [r3, #112]	; 0x70
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_SAI2_Init+0x114>)
 80006b2:	4a02      	ldr	r2, [pc, #8]	; (80006bc <MX_SAI2_Init+0x104>)
 80006b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE END SAI2_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	2000102c 	.word	0x2000102c
 80006c0:	40015804 	.word	0x40015804
 80006c4:	200010b0 	.word	0x200010b0
 80006c8:	40015824 	.word	0x40015824
 80006cc:	20001134 	.word	0x20001134
 80006d0:	4002006c 	.word	0x4002006c

080006d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <MX_SPI1_Init+0x74>)
 80006da:	4a1c      	ldr	r2, [pc, #112]	; (800074c <MX_SPI1_Init+0x78>)
 80006dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006de:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <MX_SPI1_Init+0x74>)
 80006e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MX_SPI1_Init+0x74>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80006ec:	4b16      	ldr	r3, [pc, #88]	; (8000748 <MX_SPI1_Init+0x74>)
 80006ee:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80006f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006f4:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_SPI1_Init+0x74>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006fa:	4b13      	ldr	r3, [pc, #76]	; (8000748 <MX_SPI1_Init+0x74>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_SPI1_Init+0x74>)
 8000702:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000706:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_SPI1_Init+0x74>)
 800070a:	2208      	movs	r2, #8
 800070c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_SPI1_Init+0x74>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_SPI1_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_SPI1_Init+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_SPI1_Init+0x74>)
 8000722:	2207      	movs	r2, #7
 8000724:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <MX_SPI1_Init+0x74>)
 8000728:	2200      	movs	r2, #0
 800072a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_SPI1_Init+0x74>)
 800072e:	2208      	movs	r2, #8
 8000730:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_SPI1_Init+0x74>)
 8000734:	f003 fc66 	bl	8004004 <HAL_SPI_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800073e:	f000 f8af 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200011c4 	.word	0x200011c4
 800074c:	40013000 	.word	0x40013000

08000750 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 8000756:	4a15      	ldr	r2, [pc, #84]	; (80007ac <MX_USART2_UART_Init+0x5c>)
 8000758:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 800075c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000760:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 8000794:	f003 fcd9 	bl	800414a <HAL_UART_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800079e:	f000 f87f 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20001228 	.word	0x20001228
 80007ac:	40004400 	.word	0x40004400

080007b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_DMA_Init+0x48>)
 80007b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007ba:	4a0f      	ldr	r2, [pc, #60]	; (80007f8 <MX_DMA_Init+0x48>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6493      	str	r3, [r2, #72]	; 0x48
 80007c2:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <MX_DMA_Init+0x48>)
 80007c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	2010      	movs	r0, #16
 80007d4:	f000 fc1d 	bl	8001012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80007d8:	2010      	movs	r0, #16
 80007da:	f000 fc36 	bl	800104a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	2011      	movs	r0, #17
 80007e4:	f000 fc15 	bl	8001012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80007e8:	2011      	movs	r0, #17
 80007ea:	f000 fc2e 	bl	800104a <HAL_NVIC_EnableIRQ>

}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40021000 	.word	0x40021000

080007fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08a      	sub	sp, #40	; 0x28
 8000800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	4b21      	ldr	r3, [pc, #132]	; (8000898 <MX_GPIO_Init+0x9c>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	4a20      	ldr	r2, [pc, #128]	; (8000898 <MX_GPIO_Init+0x9c>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081e:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <MX_GPIO_Init+0x9c>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082a:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <MX_GPIO_Init+0x9c>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	4a1a      	ldr	r2, [pc, #104]	; (8000898 <MX_GPIO_Init+0x9c>)
 8000830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000836:	4b18      	ldr	r3, [pc, #96]	; (8000898 <MX_GPIO_Init+0x9c>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <MX_GPIO_Init+0x9c>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	4a14      	ldr	r2, [pc, #80]	; (8000898 <MX_GPIO_Init+0x9c>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084e:	4b12      	ldr	r3, [pc, #72]	; (8000898 <MX_GPIO_Init+0x9c>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_GPIO_Init+0x9c>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	4a0e      	ldr	r2, [pc, #56]	; (8000898 <MX_GPIO_Init+0x9c>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_GPIO_Init+0x9c>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000872:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000878:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800087c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4619      	mov	r1, r3
 8000888:	4804      	ldr	r0, [pc, #16]	; (800089c <MX_GPIO_Init+0xa0>)
 800088a:	f000 fd61 	bl	8001350 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800088e:	bf00      	nop
 8000890:	3728      	adds	r7, #40	; 0x28
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40021000 	.word	0x40021000
 800089c:	48000800 	.word	0x48000800

080008a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a4:	b672      	cpsid	i
}
 80008a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <Error_Handler+0x8>
	...

080008ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b2:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <HAL_MspInit+0x44>)
 80008b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008b6:	4a0e      	ldr	r2, [pc, #56]	; (80008f0 <HAL_MspInit+0x44>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6613      	str	r3, [r2, #96]	; 0x60
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <HAL_MspInit+0x44>)
 80008c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <HAL_MspInit+0x44>)
 80008cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ce:	4a08      	ldr	r2, [pc, #32]	; (80008f0 <HAL_MspInit+0x44>)
 80008d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d4:	6593      	str	r3, [r2, #88]	; 0x58
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <HAL_MspInit+0x44>)
 80008d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	40021000 	.word	0x40021000

080008f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08a      	sub	sp, #40	; 0x28
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a17      	ldr	r2, [pc, #92]	; (8000970 <HAL_SPI_MspInit+0x7c>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d128      	bne.n	8000968 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000916:	4b17      	ldr	r3, [pc, #92]	; (8000974 <HAL_SPI_MspInit+0x80>)
 8000918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800091a:	4a16      	ldr	r2, [pc, #88]	; (8000974 <HAL_SPI_MspInit+0x80>)
 800091c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000920:	6613      	str	r3, [r2, #96]	; 0x60
 8000922:	4b14      	ldr	r3, [pc, #80]	; (8000974 <HAL_SPI_MspInit+0x80>)
 8000924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000926:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <HAL_SPI_MspInit+0x80>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	4a10      	ldr	r2, [pc, #64]	; (8000974 <HAL_SPI_MspInit+0x80>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <HAL_SPI_MspInit+0x80>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000946:	23b0      	movs	r3, #176	; 0xb0
 8000948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000952:	2303      	movs	r3, #3
 8000954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000956:	2305      	movs	r3, #5
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	4619      	mov	r1, r3
 8000960:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000964:	f000 fcf4 	bl	8001350 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000968:	bf00      	nop
 800096a:	3728      	adds	r7, #40	; 0x28
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40013000 	.word	0x40013000
 8000974:	40021000 	.word	0x40021000

08000978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b0ac      	sub	sp, #176	; 0xb0
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	2288      	movs	r2, #136	; 0x88
 8000996:	2100      	movs	r1, #0
 8000998:	4618      	mov	r0, r3
 800099a:	f004 f8f2 	bl	8004b82 <memset>
  if(huart->Instance==USART2)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a21      	ldr	r2, [pc, #132]	; (8000a28 <HAL_UART_MspInit+0xb0>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d13b      	bne.n	8000a20 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009a8:	2302      	movs	r3, #2
 80009aa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4618      	mov	r0, r3
 80009b6:	f001 fce9 	bl	800238c <HAL_RCCEx_PeriphCLKConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009c0:	f7ff ff6e 	bl	80008a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009c4:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <HAL_UART_MspInit+0xb4>)
 80009c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c8:	4a18      	ldr	r2, [pc, #96]	; (8000a2c <HAL_UART_MspInit+0xb4>)
 80009ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ce:	6593      	str	r3, [r2, #88]	; 0x58
 80009d0:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <HAL_UART_MspInit+0xb4>)
 80009d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009dc:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <HAL_UART_MspInit+0xb4>)
 80009de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e0:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <HAL_UART_MspInit+0xb4>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e8:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <HAL_UART_MspInit+0xb4>)
 80009ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009f4:	230c      	movs	r3, #12
 80009f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a06:	2303      	movs	r3, #3
 8000a08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a0c:	2307      	movs	r3, #7
 8000a0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a16:	4619      	mov	r1, r3
 8000a18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1c:	f000 fc98 	bl	8001350 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a20:	bf00      	nop
 8000a22:	37b0      	adds	r7, #176	; 0xb0
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40004400 	.word	0x40004400
 8000a2c:	40021000 	.word	0x40021000

08000a30 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b0ac      	sub	sp, #176	; 0xb0
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2288      	movs	r2, #136	; 0x88
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4618      	mov	r0, r3
 8000a42:	f004 f89e 	bl	8004b82 <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a7f      	ldr	r2, [pc, #508]	; (8000c48 <HAL_SAI_MspInit+0x218>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d16c      	bne.n	8000b2a <HAL_SAI_MspInit+0xfa>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a54:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLL;
 8000a56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a5a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4618      	mov	r0, r3
 8000a62:	f001 fc93 	bl	800238c <HAL_RCCEx_PeriphCLKConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <HAL_SAI_MspInit+0x40>
    {
      Error_Handler();
 8000a6c:	f7ff ff18 	bl	80008a0 <Error_Handler>
    }

    if (SAI2_client == 0)
 8000a70:	4b76      	ldr	r3, [pc, #472]	; (8000c4c <HAL_SAI_MspInit+0x21c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d10b      	bne.n	8000a90 <HAL_SAI_MspInit+0x60>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000a78:	4b75      	ldr	r3, [pc, #468]	; (8000c50 <HAL_SAI_MspInit+0x220>)
 8000a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a7c:	4a74      	ldr	r2, [pc, #464]	; (8000c50 <HAL_SAI_MspInit+0x220>)
 8000a7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a82:	6613      	str	r3, [r2, #96]	; 0x60
 8000a84:	4b72      	ldr	r3, [pc, #456]	; (8000c50 <HAL_SAI_MspInit+0x220>)
 8000a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8000a90:	4b6e      	ldr	r3, [pc, #440]	; (8000c4c <HAL_SAI_MspInit+0x21c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	3301      	adds	r3, #1
 8000a96:	4a6d      	ldr	r2, [pc, #436]	; (8000c4c <HAL_SAI_MspInit+0x21c>)
 8000a98:	6013      	str	r3, [r2, #0]
    /**SAI2_A_Block_A GPIO Configuration
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000a9a:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000a9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000ab4:	230d      	movs	r3, #13
 8000ab6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4864      	ldr	r0, [pc, #400]	; (8000c54 <HAL_SAI_MspInit+0x224>)
 8000ac2:	f000 fc45 	bl	8001350 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 8000ac6:	4b64      	ldr	r3, [pc, #400]	; (8000c58 <HAL_SAI_MspInit+0x228>)
 8000ac8:	4a64      	ldr	r2, [pc, #400]	; (8000c5c <HAL_SAI_MspInit+0x22c>)
 8000aca:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8000acc:	4b62      	ldr	r3, [pc, #392]	; (8000c58 <HAL_SAI_MspInit+0x228>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ad2:	4b61      	ldr	r3, [pc, #388]	; (8000c58 <HAL_SAI_MspInit+0x228>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ad8:	4b5f      	ldr	r3, [pc, #380]	; (8000c58 <HAL_SAI_MspInit+0x228>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8000ade:	4b5e      	ldr	r3, [pc, #376]	; (8000c58 <HAL_SAI_MspInit+0x228>)
 8000ae0:	2280      	movs	r2, #128	; 0x80
 8000ae2:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ae4:	4b5c      	ldr	r3, [pc, #368]	; (8000c58 <HAL_SAI_MspInit+0x228>)
 8000ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aea:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000aec:	4b5a      	ldr	r3, [pc, #360]	; (8000c58 <HAL_SAI_MspInit+0x228>)
 8000aee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000af2:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8000af4:	4b58      	ldr	r3, [pc, #352]	; (8000c58 <HAL_SAI_MspInit+0x228>)
 8000af6:	2220      	movs	r2, #32
 8000af8:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000afa:	4b57      	ldr	r3, [pc, #348]	; (8000c58 <HAL_SAI_MspInit+0x228>)
 8000afc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000b00:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8000b02:	4855      	ldr	r0, [pc, #340]	; (8000c58 <HAL_SAI_MspInit+0x228>)
 8000b04:	f000 fabc 	bl	8001080 <HAL_DMA_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <HAL_SAI_MspInit+0xe2>
    {
      Error_Handler();
 8000b0e:	f7ff fec7 	bl	80008a0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4a50      	ldr	r2, [pc, #320]	; (8000c58 <HAL_SAI_MspInit+0x228>)
 8000b16:	671a      	str	r2, [r3, #112]	; 0x70
 8000b18:	4a4f      	ldr	r2, [pc, #316]	; (8000c58 <HAL_SAI_MspInit+0x228>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6293      	str	r3, [r2, #40]	; 0x28

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4a4d      	ldr	r2, [pc, #308]	; (8000c58 <HAL_SAI_MspInit+0x228>)
 8000b22:	66da      	str	r2, [r3, #108]	; 0x6c
 8000b24:	4a4c      	ldr	r2, [pc, #304]	; (8000c58 <HAL_SAI_MspInit+0x228>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6293      	str	r3, [r2, #40]	; 0x28

    }
    if(hsai->Instance==SAI2_Block_B)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a4c      	ldr	r2, [pc, #304]	; (8000c60 <HAL_SAI_MspInit+0x230>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	f040 8084 	bne.w	8000c3e <HAL_SAI_MspInit+0x20e>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000b36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b3a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLL;
 8000b3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b40:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4618      	mov	r0, r3
 8000b48:	f001 fc20 	bl	800238c <HAL_RCCEx_PeriphCLKConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <HAL_SAI_MspInit+0x126>
    {
      Error_Handler();
 8000b52:	f7ff fea5 	bl	80008a0 <Error_Handler>
    }

      if (SAI2_client == 0)
 8000b56:	4b3d      	ldr	r3, [pc, #244]	; (8000c4c <HAL_SAI_MspInit+0x21c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d10b      	bne.n	8000b76 <HAL_SAI_MspInit+0x146>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000b5e:	4b3c      	ldr	r3, [pc, #240]	; (8000c50 <HAL_SAI_MspInit+0x220>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	4a3b      	ldr	r2, [pc, #236]	; (8000c50 <HAL_SAI_MspInit+0x220>)
 8000b64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b68:	6613      	str	r3, [r2, #96]	; 0x60
 8000b6a:	4b39      	ldr	r3, [pc, #228]	; (8000c50 <HAL_SAI_MspInit+0x220>)
 8000b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8000b76:	4b35      	ldr	r3, [pc, #212]	; (8000c4c <HAL_SAI_MspInit+0x21c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	4a33      	ldr	r2, [pc, #204]	; (8000c4c <HAL_SAI_MspInit+0x21c>)
 8000b7e:	6013      	str	r3, [r2, #0]
    /**SAI2_B_Block_B GPIO Configuration
    PA15 (JTDI)     ------> SAI2_FS_B
    PC10     ------> SAI2_SCK_B
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000b9a:	230d      	movs	r3, #13
 8000b9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000baa:	f000 fbd1 	bl	8001350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000bae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000bc8:	230d      	movs	r3, #13
 8000bca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4823      	ldr	r0, [pc, #140]	; (8000c64 <HAL_SAI_MspInit+0x234>)
 8000bd6:	f000 fbbb 	bl	8001350 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Channel7;
 8000bda:	4b23      	ldr	r3, [pc, #140]	; (8000c68 <HAL_SAI_MspInit+0x238>)
 8000bdc:	4a23      	ldr	r2, [pc, #140]	; (8000c6c <HAL_SAI_MspInit+0x23c>)
 8000bde:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_1;
 8000be0:	4b21      	ldr	r3, [pc, #132]	; (8000c68 <HAL_SAI_MspInit+0x238>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000be6:	4b20      	ldr	r3, [pc, #128]	; (8000c68 <HAL_SAI_MspInit+0x238>)
 8000be8:	2210      	movs	r2, #16
 8000bea:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bec:	4b1e      	ldr	r3, [pc, #120]	; (8000c68 <HAL_SAI_MspInit+0x238>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8000bf2:	4b1d      	ldr	r3, [pc, #116]	; (8000c68 <HAL_SAI_MspInit+0x238>)
 8000bf4:	2280      	movs	r2, #128	; 0x80
 8000bf6:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	; (8000c68 <HAL_SAI_MspInit+0x238>)
 8000bfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bfe:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c00:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <HAL_SAI_MspInit+0x238>)
 8000c02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c06:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8000c08:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <HAL_SAI_MspInit+0x238>)
 8000c0a:	2220      	movs	r2, #32
 8000c0c:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c0e:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <HAL_SAI_MspInit+0x238>)
 8000c10:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000c14:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8000c16:	4814      	ldr	r0, [pc, #80]	; (8000c68 <HAL_SAI_MspInit+0x238>)
 8000c18:	f000 fa32 	bl	8001080 <HAL_DMA_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <HAL_SAI_MspInit+0x1f6>
    {
      Error_Handler();
 8000c22:	f7ff fe3d 	bl	80008a0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a0f      	ldr	r2, [pc, #60]	; (8000c68 <HAL_SAI_MspInit+0x238>)
 8000c2a:	671a      	str	r2, [r3, #112]	; 0x70
 8000c2c:	4a0e      	ldr	r2, [pc, #56]	; (8000c68 <HAL_SAI_MspInit+0x238>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a0c      	ldr	r2, [pc, #48]	; (8000c68 <HAL_SAI_MspInit+0x238>)
 8000c36:	66da      	str	r2, [r3, #108]	; 0x6c
 8000c38:	4a0b      	ldr	r2, [pc, #44]	; (8000c68 <HAL_SAI_MspInit+0x238>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6293      	str	r3, [r2, #40]	; 0x28
    }
}
 8000c3e:	bf00      	nop
 8000c40:	37b0      	adds	r7, #176	; 0xb0
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40015804 	.word	0x40015804
 8000c4c:	200012b0 	.word	0x200012b0
 8000c50:	40021000 	.word	0x40021000
 8000c54:	48000400 	.word	0x48000400
 8000c58:	20001134 	.word	0x20001134
 8000c5c:	4002006c 	.word	0x4002006c
 8000c60:	40015824 	.word	0x40015824
 8000c64:	48000800 	.word	0x48000800
 8000c68:	2000117c 	.word	0x2000117c
 8000c6c:	40020080 	.word	0x40020080

08000c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <NMI_Handler+0x4>

08000c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <HardFault_Handler+0x4>

08000c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <MemManage_Handler+0x4>

08000c82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <BusFault_Handler+0x4>

08000c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <UsageFault_Handler+0x4>

08000c8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cbc:	f000 f8ae 	bl	8000e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8000cc8:	4802      	ldr	r0, [pc, #8]	; (8000cd4 <DMA1_Channel6_IRQHandler+0x10>)
 8000cca:	f000 fa91 	bl	80011f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20001134 	.word	0x20001134

08000cd8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8000cdc:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <DMA1_Channel7_IRQHandler+0x10>)
 8000cde:	f000 fa87 	bl	80011f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	2000117c 	.word	0x2000117c

08000cec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <SystemInit+0x20>)
 8000cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cf6:	4a05      	ldr	r2, [pc, #20]	; (8000d0c <SystemInit+0x20>)
 8000cf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d14:	f7ff ffea 	bl	8000cec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d18:	480c      	ldr	r0, [pc, #48]	; (8000d4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d1a:	490d      	ldr	r1, [pc, #52]	; (8000d50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	; (8000d54 <LoopForever+0xe>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d20:	e002      	b.n	8000d28 <LoopCopyDataInit>

08000d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d26:	3304      	adds	r3, #4

08000d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d2c:	d3f9      	bcc.n	8000d22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d30:	4c0a      	ldr	r4, [pc, #40]	; (8000d5c <LoopForever+0x16>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d34:	e001      	b.n	8000d3a <LoopFillZerobss>

08000d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d38:	3204      	adds	r2, #4

08000d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d3c:	d3fb      	bcc.n	8000d36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d3e:	f003 ff29 	bl	8004b94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d42:	f7ff fbbf 	bl	80004c4 <main>

08000d46 <LoopForever>:

LoopForever:
    b LoopForever
 8000d46:	e7fe      	b.n	8000d46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d48:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d50:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d54:	08004c4c 	.word	0x08004c4c
  ldr r2, =_sbss
 8000d58:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d5c:	200012b8 	.word	0x200012b8

08000d60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d60:	e7fe      	b.n	8000d60 <ADC1_2_IRQHandler>
	...

08000d64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <HAL_Init+0x3c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a0b      	ldr	r2, [pc, #44]	; (8000da0 <HAL_Init+0x3c>)
 8000d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d78:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d7a:	2003      	movs	r0, #3
 8000d7c:	f000 f93e 	bl	8000ffc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d80:	2000      	movs	r0, #0
 8000d82:	f000 f80f 	bl	8000da4 <HAL_InitTick>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d002      	beq.n	8000d92 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	71fb      	strb	r3, [r7, #7]
 8000d90:	e001      	b.n	8000d96 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d92:	f7ff fd8b 	bl	80008ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d96:	79fb      	ldrb	r3, [r7, #7]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40022000 	.word	0x40022000

08000da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dac:	2300      	movs	r3, #0
 8000dae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000db0:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <HAL_InitTick+0x6c>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d023      	beq.n	8000e00 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000db8:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <HAL_InitTick+0x70>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <HAL_InitTick+0x6c>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 f949 	bl	8001066 <HAL_SYSTICK_Config>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d10f      	bne.n	8000dfa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b0f      	cmp	r3, #15
 8000dde:	d809      	bhi.n	8000df4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de0:	2200      	movs	r2, #0
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	f04f 30ff 	mov.w	r0, #4294967295
 8000de8:	f000 f913 	bl	8001012 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dec:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <HAL_InitTick+0x74>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6013      	str	r3, [r2, #0]
 8000df2:	e007      	b.n	8000e04 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	73fb      	strb	r3, [r7, #15]
 8000df8:	e004      	b.n	8000e04 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	73fb      	strb	r3, [r7, #15]
 8000dfe:	e001      	b.n	8000e04 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000008 	.word	0x20000008
 8000e14:	20000000 	.word	0x20000000
 8000e18:	20000004 	.word	0x20000004

08000e1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_IncTick+0x20>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_IncTick+0x24>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <HAL_IncTick+0x24>)
 8000e2e:	6013      	str	r3, [r2, #0]
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20000008 	.word	0x20000008
 8000e40:	200012b4 	.word	0x200012b4

08000e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return uwTick;
 8000e48:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <HAL_GetTick+0x14>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	200012b4 	.word	0x200012b4

08000e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8e:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	60d3      	str	r3, [r2, #12]
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <__NVIC_GetPriorityGrouping+0x18>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	0a1b      	lsrs	r3, r3, #8
 8000eae:	f003 0307 	and.w	r3, r3, #7
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	db0b      	blt.n	8000eea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	f003 021f 	and.w	r2, r3, #31
 8000ed8:	4907      	ldr	r1, [pc, #28]	; (8000ef8 <__NVIC_EnableIRQ+0x38>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	095b      	lsrs	r3, r3, #5
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000e100 	.word	0xe000e100

08000efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	6039      	str	r1, [r7, #0]
 8000f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	db0a      	blt.n	8000f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	490c      	ldr	r1, [pc, #48]	; (8000f48 <__NVIC_SetPriority+0x4c>)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	0112      	lsls	r2, r2, #4
 8000f1c:	b2d2      	uxtb	r2, r2
 8000f1e:	440b      	add	r3, r1
 8000f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f24:	e00a      	b.n	8000f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4908      	ldr	r1, [pc, #32]	; (8000f4c <__NVIC_SetPriority+0x50>)
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	f003 030f 	and.w	r3, r3, #15
 8000f32:	3b04      	subs	r3, #4
 8000f34:	0112      	lsls	r2, r2, #4
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	440b      	add	r3, r1
 8000f3a:	761a      	strb	r2, [r3, #24]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000e100 	.word	0xe000e100
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b089      	sub	sp, #36	; 0x24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	f1c3 0307 	rsb	r3, r3, #7
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	bf28      	it	cs
 8000f6e:	2304      	movcs	r3, #4
 8000f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3304      	adds	r3, #4
 8000f76:	2b06      	cmp	r3, #6
 8000f78:	d902      	bls.n	8000f80 <NVIC_EncodePriority+0x30>
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3b03      	subs	r3, #3
 8000f7e:	e000      	b.n	8000f82 <NVIC_EncodePriority+0x32>
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	f04f 32ff 	mov.w	r2, #4294967295
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43da      	mvns	r2, r3
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	401a      	ands	r2, r3
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f98:	f04f 31ff 	mov.w	r1, #4294967295
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa2:	43d9      	mvns	r1, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	4313      	orrs	r3, r2
         );
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3724      	adds	r7, #36	; 0x24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fc8:	d301      	bcc.n	8000fce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00f      	b.n	8000fee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fce:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <SysTick_Config+0x40>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fd6:	210f      	movs	r1, #15
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fdc:	f7ff ff8e 	bl	8000efc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <SysTick_Config+0x40>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fe6:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <SysTick_Config+0x40>)
 8000fe8:	2207      	movs	r2, #7
 8000fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	e000e010 	.word	0xe000e010

08000ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ff29 	bl	8000e5c <__NVIC_SetPriorityGrouping>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b086      	sub	sp, #24
 8001016:	af00      	add	r7, sp, #0
 8001018:	4603      	mov	r3, r0
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
 800101e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001024:	f7ff ff3e 	bl	8000ea4 <__NVIC_GetPriorityGrouping>
 8001028:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	68b9      	ldr	r1, [r7, #8]
 800102e:	6978      	ldr	r0, [r7, #20]
 8001030:	f7ff ff8e 	bl	8000f50 <NVIC_EncodePriority>
 8001034:	4602      	mov	r2, r0
 8001036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103a:	4611      	mov	r1, r2
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff5d 	bl	8000efc <__NVIC_SetPriority>
}
 8001042:	bf00      	nop
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff31 	bl	8000ec0 <__NVIC_EnableIRQ>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff ffa2 	bl	8000fb8 <SysTick_Config>
 8001074:	4603      	mov	r3, r0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d101      	bne.n	8001092 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e098      	b.n	80011c4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	461a      	mov	r2, r3
 8001098:	4b4d      	ldr	r3, [pc, #308]	; (80011d0 <HAL_DMA_Init+0x150>)
 800109a:	429a      	cmp	r2, r3
 800109c:	d80f      	bhi.n	80010be <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	461a      	mov	r2, r3
 80010a4:	4b4b      	ldr	r3, [pc, #300]	; (80011d4 <HAL_DMA_Init+0x154>)
 80010a6:	4413      	add	r3, r2
 80010a8:	4a4b      	ldr	r2, [pc, #300]	; (80011d8 <HAL_DMA_Init+0x158>)
 80010aa:	fba2 2303 	umull	r2, r3, r2, r3
 80010ae:	091b      	lsrs	r3, r3, #4
 80010b0:	009a      	lsls	r2, r3, #2
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a48      	ldr	r2, [pc, #288]	; (80011dc <HAL_DMA_Init+0x15c>)
 80010ba:	641a      	str	r2, [r3, #64]	; 0x40
 80010bc:	e00e      	b.n	80010dc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	461a      	mov	r2, r3
 80010c4:	4b46      	ldr	r3, [pc, #280]	; (80011e0 <HAL_DMA_Init+0x160>)
 80010c6:	4413      	add	r3, r2
 80010c8:	4a43      	ldr	r2, [pc, #268]	; (80011d8 <HAL_DMA_Init+0x158>)
 80010ca:	fba2 2303 	umull	r2, r3, r2, r3
 80010ce:	091b      	lsrs	r3, r3, #4
 80010d0:	009a      	lsls	r2, r3, #2
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a42      	ldr	r2, [pc, #264]	; (80011e4 <HAL_DMA_Init+0x164>)
 80010da:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2202      	movs	r2, #2
 80010e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80010f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001100:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	691b      	ldr	r3, [r3, #16]
 8001106:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800110c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001118:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a1b      	ldr	r3, [r3, #32]
 800111e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001120:	68fa      	ldr	r2, [r7, #12]
 8001122:	4313      	orrs	r3, r2
 8001124:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001136:	d039      	beq.n	80011ac <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	4a27      	ldr	r2, [pc, #156]	; (80011dc <HAL_DMA_Init+0x15c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d11a      	bne.n	8001178 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001142:	4b29      	ldr	r3, [pc, #164]	; (80011e8 <HAL_DMA_Init+0x168>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	f003 031c 	and.w	r3, r3, #28
 800114e:	210f      	movs	r1, #15
 8001150:	fa01 f303 	lsl.w	r3, r1, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	4924      	ldr	r1, [pc, #144]	; (80011e8 <HAL_DMA_Init+0x168>)
 8001158:	4013      	ands	r3, r2
 800115a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800115c:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <HAL_DMA_Init+0x168>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6859      	ldr	r1, [r3, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001168:	f003 031c 	and.w	r3, r3, #28
 800116c:	fa01 f303 	lsl.w	r3, r1, r3
 8001170:	491d      	ldr	r1, [pc, #116]	; (80011e8 <HAL_DMA_Init+0x168>)
 8001172:	4313      	orrs	r3, r2
 8001174:	600b      	str	r3, [r1, #0]
 8001176:	e019      	b.n	80011ac <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001178:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <HAL_DMA_Init+0x16c>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001180:	f003 031c 	and.w	r3, r3, #28
 8001184:	210f      	movs	r1, #15
 8001186:	fa01 f303 	lsl.w	r3, r1, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	4917      	ldr	r1, [pc, #92]	; (80011ec <HAL_DMA_Init+0x16c>)
 800118e:	4013      	ands	r3, r2
 8001190:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001192:	4b16      	ldr	r3, [pc, #88]	; (80011ec <HAL_DMA_Init+0x16c>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6859      	ldr	r1, [r3, #4]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	f003 031c 	and.w	r3, r3, #28
 80011a2:	fa01 f303 	lsl.w	r3, r1, r3
 80011a6:	4911      	ldr	r1, [pc, #68]	; (80011ec <HAL_DMA_Init+0x16c>)
 80011a8:	4313      	orrs	r3, r2
 80011aa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2201      	movs	r2, #1
 80011b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	40020407 	.word	0x40020407
 80011d4:	bffdfff8 	.word	0xbffdfff8
 80011d8:	cccccccd 	.word	0xcccccccd
 80011dc:	40020000 	.word	0x40020000
 80011e0:	bffdfbf8 	.word	0xbffdfbf8
 80011e4:	40020400 	.word	0x40020400
 80011e8:	400200a8 	.word	0x400200a8
 80011ec:	400204a8 	.word	0x400204a8

080011f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120c:	f003 031c 	and.w	r3, r3, #28
 8001210:	2204      	movs	r2, #4
 8001212:	409a      	lsls	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4013      	ands	r3, r2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d026      	beq.n	800126a <HAL_DMA_IRQHandler+0x7a>
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	f003 0304 	and.w	r3, r3, #4
 8001222:	2b00      	cmp	r3, #0
 8001224:	d021      	beq.n	800126a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0320 	and.w	r3, r3, #32
 8001230:	2b00      	cmp	r3, #0
 8001232:	d107      	bne.n	8001244 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 0204 	bic.w	r2, r2, #4
 8001242:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001248:	f003 021c 	and.w	r2, r3, #28
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001250:	2104      	movs	r1, #4
 8001252:	fa01 f202 	lsl.w	r2, r1, r2
 8001256:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125c:	2b00      	cmp	r3, #0
 800125e:	d071      	beq.n	8001344 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001268:	e06c      	b.n	8001344 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	f003 031c 	and.w	r3, r3, #28
 8001272:	2202      	movs	r2, #2
 8001274:	409a      	lsls	r2, r3
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	4013      	ands	r3, r2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d02e      	beq.n	80012dc <HAL_DMA_IRQHandler+0xec>
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d029      	beq.n	80012dc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0320 	and.w	r3, r3, #32
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10b      	bne.n	80012ae <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f022 020a 	bic.w	r2, r2, #10
 80012a4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2201      	movs	r2, #1
 80012aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	f003 021c 	and.w	r2, r3, #28
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	2102      	movs	r1, #2
 80012bc:	fa01 f202 	lsl.w	r2, r1, r2
 80012c0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d038      	beq.n	8001344 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80012da:	e033      	b.n	8001344 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e0:	f003 031c 	and.w	r3, r3, #28
 80012e4:	2208      	movs	r2, #8
 80012e6:	409a      	lsls	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4013      	ands	r3, r2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d02a      	beq.n	8001346 <HAL_DMA_IRQHandler+0x156>
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d025      	beq.n	8001346 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 020e 	bic.w	r2, r2, #14
 8001308:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	f003 021c 	and.w	r2, r3, #28
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	2101      	movs	r1, #1
 8001318:	fa01 f202 	lsl.w	r2, r1, r2
 800131c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2201      	movs	r2, #1
 8001322:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2201      	movs	r2, #1
 8001328:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001338:	2b00      	cmp	r3, #0
 800133a:	d004      	beq.n	8001346 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001344:	bf00      	nop
 8001346:	bf00      	nop
}
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001350:	b480      	push	{r7}
 8001352:	b087      	sub	sp, #28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800135e:	e17f      	b.n	8001660 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	2101      	movs	r1, #1
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	fa01 f303 	lsl.w	r3, r1, r3
 800136c:	4013      	ands	r3, r2
 800136e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 8171 	beq.w	800165a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	2b01      	cmp	r3, #1
 8001382:	d005      	beq.n	8001390 <HAL_GPIO_Init+0x40>
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d130      	bne.n	80013f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	2203      	movs	r2, #3
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	68da      	ldr	r2, [r3, #12]
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013c6:	2201      	movs	r2, #1
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4013      	ands	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	091b      	lsrs	r3, r3, #4
 80013dc:	f003 0201 	and.w	r2, r3, #1
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f003 0303 	and.w	r3, r3, #3
 80013fa:	2b03      	cmp	r3, #3
 80013fc:	d118      	bne.n	8001430 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001402:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001404:	2201      	movs	r2, #1
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4013      	ands	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	08db      	lsrs	r3, r3, #3
 800141a:	f003 0201 	and.w	r2, r3, #1
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 0303 	and.w	r3, r3, #3
 8001438:	2b03      	cmp	r3, #3
 800143a:	d017      	beq.n	800146c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	2203      	movs	r2, #3
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4013      	ands	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	4313      	orrs	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 0303 	and.w	r3, r3, #3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d123      	bne.n	80014c0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	08da      	lsrs	r2, r3, #3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3208      	adds	r2, #8
 8001480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001484:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	f003 0307 	and.w	r3, r3, #7
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	220f      	movs	r2, #15
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	691a      	ldr	r2, [r3, #16]
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	08da      	lsrs	r2, r3, #3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3208      	adds	r2, #8
 80014ba:	6939      	ldr	r1, [r7, #16]
 80014bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	2203      	movs	r2, #3
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4013      	ands	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 0203 	and.w	r2, r3, #3
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f000 80ac 	beq.w	800165a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001502:	4b5f      	ldr	r3, [pc, #380]	; (8001680 <HAL_GPIO_Init+0x330>)
 8001504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001506:	4a5e      	ldr	r2, [pc, #376]	; (8001680 <HAL_GPIO_Init+0x330>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6613      	str	r3, [r2, #96]	; 0x60
 800150e:	4b5c      	ldr	r3, [pc, #368]	; (8001680 <HAL_GPIO_Init+0x330>)
 8001510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800151a:	4a5a      	ldr	r2, [pc, #360]	; (8001684 <HAL_GPIO_Init+0x334>)
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	089b      	lsrs	r3, r3, #2
 8001520:	3302      	adds	r3, #2
 8001522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001526:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	f003 0303 	and.w	r3, r3, #3
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	220f      	movs	r2, #15
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001544:	d025      	beq.n	8001592 <HAL_GPIO_Init+0x242>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a4f      	ldr	r2, [pc, #316]	; (8001688 <HAL_GPIO_Init+0x338>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d01f      	beq.n	800158e <HAL_GPIO_Init+0x23e>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a4e      	ldr	r2, [pc, #312]	; (800168c <HAL_GPIO_Init+0x33c>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d019      	beq.n	800158a <HAL_GPIO_Init+0x23a>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a4d      	ldr	r2, [pc, #308]	; (8001690 <HAL_GPIO_Init+0x340>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d013      	beq.n	8001586 <HAL_GPIO_Init+0x236>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a4c      	ldr	r2, [pc, #304]	; (8001694 <HAL_GPIO_Init+0x344>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d00d      	beq.n	8001582 <HAL_GPIO_Init+0x232>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a4b      	ldr	r2, [pc, #300]	; (8001698 <HAL_GPIO_Init+0x348>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d007      	beq.n	800157e <HAL_GPIO_Init+0x22e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a4a      	ldr	r2, [pc, #296]	; (800169c <HAL_GPIO_Init+0x34c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d101      	bne.n	800157a <HAL_GPIO_Init+0x22a>
 8001576:	2306      	movs	r3, #6
 8001578:	e00c      	b.n	8001594 <HAL_GPIO_Init+0x244>
 800157a:	2307      	movs	r3, #7
 800157c:	e00a      	b.n	8001594 <HAL_GPIO_Init+0x244>
 800157e:	2305      	movs	r3, #5
 8001580:	e008      	b.n	8001594 <HAL_GPIO_Init+0x244>
 8001582:	2304      	movs	r3, #4
 8001584:	e006      	b.n	8001594 <HAL_GPIO_Init+0x244>
 8001586:	2303      	movs	r3, #3
 8001588:	e004      	b.n	8001594 <HAL_GPIO_Init+0x244>
 800158a:	2302      	movs	r3, #2
 800158c:	e002      	b.n	8001594 <HAL_GPIO_Init+0x244>
 800158e:	2301      	movs	r3, #1
 8001590:	e000      	b.n	8001594 <HAL_GPIO_Init+0x244>
 8001592:	2300      	movs	r3, #0
 8001594:	697a      	ldr	r2, [r7, #20]
 8001596:	f002 0203 	and.w	r2, r2, #3
 800159a:	0092      	lsls	r2, r2, #2
 800159c:	4093      	lsls	r3, r2
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015a4:	4937      	ldr	r1, [pc, #220]	; (8001684 <HAL_GPIO_Init+0x334>)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	089b      	lsrs	r3, r3, #2
 80015aa:	3302      	adds	r3, #2
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015b2:	4b3b      	ldr	r3, [pc, #236]	; (80016a0 <HAL_GPIO_Init+0x350>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	43db      	mvns	r3, r3
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015d6:	4a32      	ldr	r2, [pc, #200]	; (80016a0 <HAL_GPIO_Init+0x350>)
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015dc:	4b30      	ldr	r3, [pc, #192]	; (80016a0 <HAL_GPIO_Init+0x350>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4013      	ands	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001600:	4a27      	ldr	r2, [pc, #156]	; (80016a0 <HAL_GPIO_Init+0x350>)
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001606:	4b26      	ldr	r3, [pc, #152]	; (80016a0 <HAL_GPIO_Init+0x350>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	43db      	mvns	r3, r3
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	4013      	ands	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4313      	orrs	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800162a:	4a1d      	ldr	r2, [pc, #116]	; (80016a0 <HAL_GPIO_Init+0x350>)
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001630:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <HAL_GPIO_Init+0x350>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	43db      	mvns	r3, r3
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4013      	ands	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	4313      	orrs	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001654:	4a12      	ldr	r2, [pc, #72]	; (80016a0 <HAL_GPIO_Init+0x350>)
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	3301      	adds	r3, #1
 800165e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	fa22 f303 	lsr.w	r3, r2, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	f47f ae78 	bne.w	8001360 <HAL_GPIO_Init+0x10>
  }
}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	371c      	adds	r7, #28
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40021000 	.word	0x40021000
 8001684:	40010000 	.word	0x40010000
 8001688:	48000400 	.word	0x48000400
 800168c:	48000800 	.word	0x48000800
 8001690:	48000c00 	.word	0x48000c00
 8001694:	48001000 	.word	0x48001000
 8001698:	48001400 	.word	0x48001400
 800169c:	48001800 	.word	0x48001800
 80016a0:	40010400 	.word	0x40010400

080016a4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b2:	6013      	str	r3, [r2, #0]
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	40007000 	.word	0x40007000

080016c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016c8:	4b04      	ldr	r3, [pc, #16]	; (80016dc <HAL_PWREx_GetVoltageRange+0x18>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40007000 	.word	0x40007000

080016e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016ee:	d130      	bne.n	8001752 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016f0:	4b23      	ldr	r3, [pc, #140]	; (8001780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016fc:	d038      	beq.n	8001770 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016fe:	4b20      	ldr	r3, [pc, #128]	; (8001780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001706:	4a1e      	ldr	r2, [pc, #120]	; (8001780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001708:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800170c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800170e:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2232      	movs	r2, #50	; 0x32
 8001714:	fb02 f303 	mul.w	r3, r2, r3
 8001718:	4a1b      	ldr	r2, [pc, #108]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800171a:	fba2 2303 	umull	r2, r3, r2, r3
 800171e:	0c9b      	lsrs	r3, r3, #18
 8001720:	3301      	adds	r3, #1
 8001722:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001724:	e002      	b.n	800172c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	3b01      	subs	r3, #1
 800172a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800172c:	4b14      	ldr	r3, [pc, #80]	; (8001780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001738:	d102      	bne.n	8001740 <HAL_PWREx_ControlVoltageScaling+0x60>
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1f2      	bne.n	8001726 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001740:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001742:	695b      	ldr	r3, [r3, #20]
 8001744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800174c:	d110      	bne.n	8001770 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e00f      	b.n	8001772 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001752:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800175a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800175e:	d007      	beq.n	8001770 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001760:	4b07      	ldr	r3, [pc, #28]	; (8001780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001768:	4a05      	ldr	r2, [pc, #20]	; (8001780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800176a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800176e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	40007000 	.word	0x40007000
 8001784:	20000000 	.word	0x20000000
 8001788:	431bde83 	.word	0x431bde83

0800178c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b088      	sub	sp, #32
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e3ca      	b.n	8001f34 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800179e:	4b97      	ldr	r3, [pc, #604]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f003 030c 	and.w	r3, r3, #12
 80017a6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017a8:	4b94      	ldr	r3, [pc, #592]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	f003 0303 	and.w	r3, r3, #3
 80017b0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0310 	and.w	r3, r3, #16
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 80e4 	beq.w	8001988 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d007      	beq.n	80017d6 <HAL_RCC_OscConfig+0x4a>
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	2b0c      	cmp	r3, #12
 80017ca:	f040 808b 	bne.w	80018e4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	f040 8087 	bne.w	80018e4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017d6:	4b89      	ldr	r3, [pc, #548]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d005      	beq.n	80017ee <HAL_RCC_OscConfig+0x62>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e3a2      	b.n	8001f34 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a1a      	ldr	r2, [r3, #32]
 80017f2:	4b82      	ldr	r3, [pc, #520]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0308 	and.w	r3, r3, #8
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d004      	beq.n	8001808 <HAL_RCC_OscConfig+0x7c>
 80017fe:	4b7f      	ldr	r3, [pc, #508]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001806:	e005      	b.n	8001814 <HAL_RCC_OscConfig+0x88>
 8001808:	4b7c      	ldr	r3, [pc, #496]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 800180a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800180e:	091b      	lsrs	r3, r3, #4
 8001810:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001814:	4293      	cmp	r3, r2
 8001816:	d223      	bcs.n	8001860 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	4618      	mov	r0, r3
 800181e:	f000 fd55 	bl	80022cc <RCC_SetFlashLatencyFromMSIRange>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e383      	b.n	8001f34 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800182c:	4b73      	ldr	r3, [pc, #460]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a72      	ldr	r2, [pc, #456]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 8001832:	f043 0308 	orr.w	r3, r3, #8
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	4b70      	ldr	r3, [pc, #448]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	496d      	ldr	r1, [pc, #436]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 8001846:	4313      	orrs	r3, r2
 8001848:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800184a:	4b6c      	ldr	r3, [pc, #432]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	021b      	lsls	r3, r3, #8
 8001858:	4968      	ldr	r1, [pc, #416]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 800185a:	4313      	orrs	r3, r2
 800185c:	604b      	str	r3, [r1, #4]
 800185e:	e025      	b.n	80018ac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001860:	4b66      	ldr	r3, [pc, #408]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a65      	ldr	r2, [pc, #404]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 8001866:	f043 0308 	orr.w	r3, r3, #8
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	4b63      	ldr	r3, [pc, #396]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a1b      	ldr	r3, [r3, #32]
 8001878:	4960      	ldr	r1, [pc, #384]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 800187a:	4313      	orrs	r3, r2
 800187c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800187e:	4b5f      	ldr	r3, [pc, #380]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	021b      	lsls	r3, r3, #8
 800188c:	495b      	ldr	r1, [pc, #364]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 800188e:	4313      	orrs	r3, r2
 8001890:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d109      	bne.n	80018ac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	4618      	mov	r0, r3
 800189e:	f000 fd15 	bl	80022cc <RCC_SetFlashLatencyFromMSIRange>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e343      	b.n	8001f34 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018ac:	f000 fc4a 	bl	8002144 <HAL_RCC_GetSysClockFreq>
 80018b0:	4602      	mov	r2, r0
 80018b2:	4b52      	ldr	r3, [pc, #328]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	091b      	lsrs	r3, r3, #4
 80018b8:	f003 030f 	and.w	r3, r3, #15
 80018bc:	4950      	ldr	r1, [pc, #320]	; (8001a00 <HAL_RCC_OscConfig+0x274>)
 80018be:	5ccb      	ldrb	r3, [r1, r3]
 80018c0:	f003 031f 	and.w	r3, r3, #31
 80018c4:	fa22 f303 	lsr.w	r3, r2, r3
 80018c8:	4a4e      	ldr	r2, [pc, #312]	; (8001a04 <HAL_RCC_OscConfig+0x278>)
 80018ca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018cc:	4b4e      	ldr	r3, [pc, #312]	; (8001a08 <HAL_RCC_OscConfig+0x27c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fa67 	bl	8000da4 <HAL_InitTick>
 80018d6:	4603      	mov	r3, r0
 80018d8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d052      	beq.n	8001986 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	e327      	b.n	8001f34 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d032      	beq.n	8001952 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018ec:	4b43      	ldr	r3, [pc, #268]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a42      	ldr	r2, [pc, #264]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018f8:	f7ff faa4 	bl	8000e44 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001900:	f7ff faa0 	bl	8000e44 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e310      	b.n	8001f34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001912:	4b3a      	ldr	r3, [pc, #232]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f0      	beq.n	8001900 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800191e:	4b37      	ldr	r3, [pc, #220]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a36      	ldr	r2, [pc, #216]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 8001924:	f043 0308 	orr.w	r3, r3, #8
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	4b34      	ldr	r3, [pc, #208]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	4931      	ldr	r1, [pc, #196]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 8001938:	4313      	orrs	r3, r2
 800193a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800193c:	4b2f      	ldr	r3, [pc, #188]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69db      	ldr	r3, [r3, #28]
 8001948:	021b      	lsls	r3, r3, #8
 800194a:	492c      	ldr	r1, [pc, #176]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 800194c:	4313      	orrs	r3, r2
 800194e:	604b      	str	r3, [r1, #4]
 8001950:	e01a      	b.n	8001988 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001952:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a29      	ldr	r2, [pc, #164]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 8001958:	f023 0301 	bic.w	r3, r3, #1
 800195c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800195e:	f7ff fa71 	bl	8000e44 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001966:	f7ff fa6d 	bl	8000e44 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e2dd      	b.n	8001f34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001978:	4b20      	ldr	r3, [pc, #128]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1f0      	bne.n	8001966 <HAL_RCC_OscConfig+0x1da>
 8001984:	e000      	b.n	8001988 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001986:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	2b00      	cmp	r3, #0
 8001992:	d074      	beq.n	8001a7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	2b08      	cmp	r3, #8
 8001998:	d005      	beq.n	80019a6 <HAL_RCC_OscConfig+0x21a>
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	2b0c      	cmp	r3, #12
 800199e:	d10e      	bne.n	80019be <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	d10b      	bne.n	80019be <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a6:	4b15      	ldr	r3, [pc, #84]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d064      	beq.n	8001a7c <HAL_RCC_OscConfig+0x2f0>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d160      	bne.n	8001a7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e2ba      	b.n	8001f34 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c6:	d106      	bne.n	80019d6 <HAL_RCC_OscConfig+0x24a>
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0b      	ldr	r2, [pc, #44]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 80019ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d2:	6013      	str	r3, [r2, #0]
 80019d4:	e026      	b.n	8001a24 <HAL_RCC_OscConfig+0x298>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019de:	d115      	bne.n	8001a0c <HAL_RCC_OscConfig+0x280>
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a05      	ldr	r2, [pc, #20]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 80019e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ea:	6013      	str	r3, [r2, #0]
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a02      	ldr	r2, [pc, #8]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 80019f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	e014      	b.n	8001a24 <HAL_RCC_OscConfig+0x298>
 80019fa:	bf00      	nop
 80019fc:	40021000 	.word	0x40021000
 8001a00:	08004bf4 	.word	0x08004bf4
 8001a04:	20000000 	.word	0x20000000
 8001a08:	20000004 	.word	0x20000004
 8001a0c:	4ba0      	ldr	r3, [pc, #640]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a9f      	ldr	r2, [pc, #636]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a16:	6013      	str	r3, [r2, #0]
 8001a18:	4b9d      	ldr	r3, [pc, #628]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a9c      	ldr	r2, [pc, #624]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d013      	beq.n	8001a54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fa0a 	bl	8000e44 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fa06 	bl	8000e44 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e276      	b.n	8001f34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a46:	4b92      	ldr	r3, [pc, #584]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f0      	beq.n	8001a34 <HAL_RCC_OscConfig+0x2a8>
 8001a52:	e014      	b.n	8001a7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a54:	f7ff f9f6 	bl	8000e44 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a5c:	f7ff f9f2 	bl	8000e44 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b64      	cmp	r3, #100	; 0x64
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e262      	b.n	8001f34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a6e:	4b88      	ldr	r3, [pc, #544]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f0      	bne.n	8001a5c <HAL_RCC_OscConfig+0x2d0>
 8001a7a:	e000      	b.n	8001a7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d060      	beq.n	8001b4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	2b04      	cmp	r3, #4
 8001a8e:	d005      	beq.n	8001a9c <HAL_RCC_OscConfig+0x310>
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	2b0c      	cmp	r3, #12
 8001a94:	d119      	bne.n	8001aca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d116      	bne.n	8001aca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a9c:	4b7c      	ldr	r3, [pc, #496]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d005      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x328>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e23f      	b.n	8001f34 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab4:	4b76      	ldr	r3, [pc, #472]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	061b      	lsls	r3, r3, #24
 8001ac2:	4973      	ldr	r1, [pc, #460]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ac8:	e040      	b.n	8001b4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d023      	beq.n	8001b1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad2:	4b6f      	ldr	r3, [pc, #444]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a6e      	ldr	r2, [pc, #440]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001adc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ade:	f7ff f9b1 	bl	8000e44 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae6:	f7ff f9ad 	bl	8000e44 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e21d      	b.n	8001f34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af8:	4b65      	ldr	r3, [pc, #404]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0f0      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b04:	4b62      	ldr	r3, [pc, #392]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	061b      	lsls	r3, r3, #24
 8001b12:	495f      	ldr	r1, [pc, #380]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	604b      	str	r3, [r1, #4]
 8001b18:	e018      	b.n	8001b4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b1a:	4b5d      	ldr	r3, [pc, #372]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a5c      	ldr	r2, [pc, #368]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001b20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b26:	f7ff f98d 	bl	8000e44 <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2e:	f7ff f989 	bl	8000e44 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e1f9      	b.n	8001f34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b40:	4b53      	ldr	r3, [pc, #332]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1f0      	bne.n	8001b2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0308 	and.w	r3, r3, #8
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d03c      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	695b      	ldr	r3, [r3, #20]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d01c      	beq.n	8001b9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b60:	4b4b      	ldr	r3, [pc, #300]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b66:	4a4a      	ldr	r2, [pc, #296]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b70:	f7ff f968 	bl	8000e44 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b78:	f7ff f964 	bl	8000e44 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e1d4      	b.n	8001f34 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b8a:	4b41      	ldr	r3, [pc, #260]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0ef      	beq.n	8001b78 <HAL_RCC_OscConfig+0x3ec>
 8001b98:	e01b      	b.n	8001bd2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b9a:	4b3d      	ldr	r3, [pc, #244]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba0:	4a3b      	ldr	r2, [pc, #236]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001ba2:	f023 0301 	bic.w	r3, r3, #1
 8001ba6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001baa:	f7ff f94b 	bl	8000e44 <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb2:	f7ff f947 	bl	8000e44 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e1b7      	b.n	8001f34 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bc4:	4b32      	ldr	r3, [pc, #200]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1ef      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0304 	and.w	r3, r3, #4
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 80a6 	beq.w	8001d2c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be0:	2300      	movs	r3, #0
 8001be2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001be4:	4b2a      	ldr	r3, [pc, #168]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d10d      	bne.n	8001c0c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf0:	4b27      	ldr	r3, [pc, #156]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf4:	4a26      	ldr	r2, [pc, #152]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001bf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	6593      	str	r3, [r2, #88]	; 0x58
 8001bfc:	4b24      	ldr	r3, [pc, #144]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c0c:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <HAL_RCC_OscConfig+0x508>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d118      	bne.n	8001c4a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c18:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <HAL_RCC_OscConfig+0x508>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a1d      	ldr	r2, [pc, #116]	; (8001c94 <HAL_RCC_OscConfig+0x508>)
 8001c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c24:	f7ff f90e 	bl	8000e44 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c2c:	f7ff f90a 	bl	8000e44 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e17a      	b.n	8001f34 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <HAL_RCC_OscConfig+0x508>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0f0      	beq.n	8001c2c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d108      	bne.n	8001c64 <HAL_RCC_OscConfig+0x4d8>
 8001c52:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c58:	4a0d      	ldr	r2, [pc, #52]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c62:	e029      	b.n	8001cb8 <HAL_RCC_OscConfig+0x52c>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	2b05      	cmp	r3, #5
 8001c6a:	d115      	bne.n	8001c98 <HAL_RCC_OscConfig+0x50c>
 8001c6c:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c72:	4a07      	ldr	r2, [pc, #28]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001c74:	f043 0304 	orr.w	r3, r3, #4
 8001c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c82:	4a03      	ldr	r2, [pc, #12]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c8c:	e014      	b.n	8001cb8 <HAL_RCC_OscConfig+0x52c>
 8001c8e:	bf00      	nop
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40007000 	.word	0x40007000
 8001c98:	4b9c      	ldr	r3, [pc, #624]	; (8001f0c <HAL_RCC_OscConfig+0x780>)
 8001c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c9e:	4a9b      	ldr	r2, [pc, #620]	; (8001f0c <HAL_RCC_OscConfig+0x780>)
 8001ca0:	f023 0301 	bic.w	r3, r3, #1
 8001ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca8:	4b98      	ldr	r3, [pc, #608]	; (8001f0c <HAL_RCC_OscConfig+0x780>)
 8001caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cae:	4a97      	ldr	r2, [pc, #604]	; (8001f0c <HAL_RCC_OscConfig+0x780>)
 8001cb0:	f023 0304 	bic.w	r3, r3, #4
 8001cb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d016      	beq.n	8001cee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc0:	f7ff f8c0 	bl	8000e44 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cc6:	e00a      	b.n	8001cde <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc8:	f7ff f8bc 	bl	8000e44 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e12a      	b.n	8001f34 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cde:	4b8b      	ldr	r3, [pc, #556]	; (8001f0c <HAL_RCC_OscConfig+0x780>)
 8001ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0ed      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x53c>
 8001cec:	e015      	b.n	8001d1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cee:	f7ff f8a9 	bl	8000e44 <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cf4:	e00a      	b.n	8001d0c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf6:	f7ff f8a5 	bl	8000e44 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e113      	b.n	8001f34 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d0c:	4b7f      	ldr	r3, [pc, #508]	; (8001f0c <HAL_RCC_OscConfig+0x780>)
 8001d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1ed      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d1a:	7ffb      	ldrb	r3, [r7, #31]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d105      	bne.n	8001d2c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d20:	4b7a      	ldr	r3, [pc, #488]	; (8001f0c <HAL_RCC_OscConfig+0x780>)
 8001d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d24:	4a79      	ldr	r2, [pc, #484]	; (8001f0c <HAL_RCC_OscConfig+0x780>)
 8001d26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d2a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 80fe 	beq.w	8001f32 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	f040 80d0 	bne.w	8001ee0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d40:	4b72      	ldr	r3, [pc, #456]	; (8001f0c <HAL_RCC_OscConfig+0x780>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f003 0203 	and.w	r2, r3, #3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d130      	bne.n	8001db6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d127      	bne.n	8001db6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d70:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d11f      	bne.n	8001db6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d80:	2a07      	cmp	r2, #7
 8001d82:	bf14      	ite	ne
 8001d84:	2201      	movne	r2, #1
 8001d86:	2200      	moveq	r2, #0
 8001d88:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d113      	bne.n	8001db6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d98:	085b      	lsrs	r3, r3, #1
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d109      	bne.n	8001db6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dac:	085b      	lsrs	r3, r3, #1
 8001dae:	3b01      	subs	r3, #1
 8001db0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d06e      	beq.n	8001e94 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	2b0c      	cmp	r3, #12
 8001dba:	d069      	beq.n	8001e90 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001dbc:	4b53      	ldr	r3, [pc, #332]	; (8001f0c <HAL_RCC_OscConfig+0x780>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d105      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001dc8:	4b50      	ldr	r3, [pc, #320]	; (8001f0c <HAL_RCC_OscConfig+0x780>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e0ad      	b.n	8001f34 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001dd8:	4b4c      	ldr	r3, [pc, #304]	; (8001f0c <HAL_RCC_OscConfig+0x780>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a4b      	ldr	r2, [pc, #300]	; (8001f0c <HAL_RCC_OscConfig+0x780>)
 8001dde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001de4:	f7ff f82e 	bl	8000e44 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dec:	f7ff f82a 	bl	8000e44 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e09a      	b.n	8001f34 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dfe:	4b43      	ldr	r3, [pc, #268]	; (8001f0c <HAL_RCC_OscConfig+0x780>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e0a:	4b40      	ldr	r3, [pc, #256]	; (8001f0c <HAL_RCC_OscConfig+0x780>)
 8001e0c:	68da      	ldr	r2, [r3, #12]
 8001e0e:	4b40      	ldr	r3, [pc, #256]	; (8001f10 <HAL_RCC_OscConfig+0x784>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e1a:	3a01      	subs	r2, #1
 8001e1c:	0112      	lsls	r2, r2, #4
 8001e1e:	4311      	orrs	r1, r2
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e24:	0212      	lsls	r2, r2, #8
 8001e26:	4311      	orrs	r1, r2
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e2c:	0852      	lsrs	r2, r2, #1
 8001e2e:	3a01      	subs	r2, #1
 8001e30:	0552      	lsls	r2, r2, #21
 8001e32:	4311      	orrs	r1, r2
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e38:	0852      	lsrs	r2, r2, #1
 8001e3a:	3a01      	subs	r2, #1
 8001e3c:	0652      	lsls	r2, r2, #25
 8001e3e:	4311      	orrs	r1, r2
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e44:	0912      	lsrs	r2, r2, #4
 8001e46:	0452      	lsls	r2, r2, #17
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	4930      	ldr	r1, [pc, #192]	; (8001f0c <HAL_RCC_OscConfig+0x780>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e50:	4b2e      	ldr	r3, [pc, #184]	; (8001f0c <HAL_RCC_OscConfig+0x780>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a2d      	ldr	r2, [pc, #180]	; (8001f0c <HAL_RCC_OscConfig+0x780>)
 8001e56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e5a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e5c:	4b2b      	ldr	r3, [pc, #172]	; (8001f0c <HAL_RCC_OscConfig+0x780>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	4a2a      	ldr	r2, [pc, #168]	; (8001f0c <HAL_RCC_OscConfig+0x780>)
 8001e62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e66:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e68:	f7fe ffec 	bl	8000e44 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e70:	f7fe ffe8 	bl	8000e44 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e058      	b.n	8001f34 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e82:	4b22      	ldr	r3, [pc, #136]	; (8001f0c <HAL_RCC_OscConfig+0x780>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d0f0      	beq.n	8001e70 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e8e:	e050      	b.n	8001f32 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e04f      	b.n	8001f34 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e94:	4b1d      	ldr	r3, [pc, #116]	; (8001f0c <HAL_RCC_OscConfig+0x780>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d148      	bne.n	8001f32 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ea0:	4b1a      	ldr	r3, [pc, #104]	; (8001f0c <HAL_RCC_OscConfig+0x780>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a19      	ldr	r2, [pc, #100]	; (8001f0c <HAL_RCC_OscConfig+0x780>)
 8001ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eaa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001eac:	4b17      	ldr	r3, [pc, #92]	; (8001f0c <HAL_RCC_OscConfig+0x780>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4a16      	ldr	r2, [pc, #88]	; (8001f0c <HAL_RCC_OscConfig+0x780>)
 8001eb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eb6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001eb8:	f7fe ffc4 	bl	8000e44 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec0:	f7fe ffc0 	bl	8000e44 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e030      	b.n	8001f34 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <HAL_RCC_OscConfig+0x780>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0f0      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x734>
 8001ede:	e028      	b.n	8001f32 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	2b0c      	cmp	r3, #12
 8001ee4:	d023      	beq.n	8001f2e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee6:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <HAL_RCC_OscConfig+0x780>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a08      	ldr	r2, [pc, #32]	; (8001f0c <HAL_RCC_OscConfig+0x780>)
 8001eec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef2:	f7fe ffa7 	bl	8000e44 <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ef8:	e00c      	b.n	8001f14 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efa:	f7fe ffa3 	bl	8000e44 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d905      	bls.n	8001f14 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e013      	b.n	8001f34 <HAL_RCC_OscConfig+0x7a8>
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f14:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <HAL_RCC_OscConfig+0x7b0>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1ec      	bne.n	8001efa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <HAL_RCC_OscConfig+0x7b0>)
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	4905      	ldr	r1, [pc, #20]	; (8001f3c <HAL_RCC_OscConfig+0x7b0>)
 8001f26:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <HAL_RCC_OscConfig+0x7b4>)
 8001f28:	4013      	ands	r3, r2
 8001f2a:	60cb      	str	r3, [r1, #12]
 8001f2c:	e001      	b.n	8001f32 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3720      	adds	r7, #32
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	feeefffc 	.word	0xfeeefffc

08001f44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e0e7      	b.n	8002128 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f58:	4b75      	ldr	r3, [pc, #468]	; (8002130 <HAL_RCC_ClockConfig+0x1ec>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d910      	bls.n	8001f88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f66:	4b72      	ldr	r3, [pc, #456]	; (8002130 <HAL_RCC_ClockConfig+0x1ec>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f023 0207 	bic.w	r2, r3, #7
 8001f6e:	4970      	ldr	r1, [pc, #448]	; (8002130 <HAL_RCC_ClockConfig+0x1ec>)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f76:	4b6e      	ldr	r3, [pc, #440]	; (8002130 <HAL_RCC_ClockConfig+0x1ec>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d001      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e0cf      	b.n	8002128 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d010      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	4b66      	ldr	r3, [pc, #408]	; (8002134 <HAL_RCC_ClockConfig+0x1f0>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d908      	bls.n	8001fb6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa4:	4b63      	ldr	r3, [pc, #396]	; (8002134 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	4960      	ldr	r1, [pc, #384]	; (8002134 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d04c      	beq.n	800205c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b03      	cmp	r3, #3
 8001fc8:	d107      	bne.n	8001fda <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fca:	4b5a      	ldr	r3, [pc, #360]	; (8002134 <HAL_RCC_ClockConfig+0x1f0>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d121      	bne.n	800201a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e0a6      	b.n	8002128 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d107      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fe2:	4b54      	ldr	r3, [pc, #336]	; (8002134 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d115      	bne.n	800201a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e09a      	b.n	8002128 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d107      	bne.n	800200a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ffa:	4b4e      	ldr	r3, [pc, #312]	; (8002134 <HAL_RCC_ClockConfig+0x1f0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d109      	bne.n	800201a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e08e      	b.n	8002128 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800200a:	4b4a      	ldr	r3, [pc, #296]	; (8002134 <HAL_RCC_ClockConfig+0x1f0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e086      	b.n	8002128 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800201a:	4b46      	ldr	r3, [pc, #280]	; (8002134 <HAL_RCC_ClockConfig+0x1f0>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f023 0203 	bic.w	r2, r3, #3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	4943      	ldr	r1, [pc, #268]	; (8002134 <HAL_RCC_ClockConfig+0x1f0>)
 8002028:	4313      	orrs	r3, r2
 800202a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800202c:	f7fe ff0a 	bl	8000e44 <HAL_GetTick>
 8002030:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002032:	e00a      	b.n	800204a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002034:	f7fe ff06 	bl	8000e44 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002042:	4293      	cmp	r3, r2
 8002044:	d901      	bls.n	800204a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e06e      	b.n	8002128 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204a:	4b3a      	ldr	r3, [pc, #232]	; (8002134 <HAL_RCC_ClockConfig+0x1f0>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 020c 	and.w	r2, r3, #12
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	429a      	cmp	r2, r3
 800205a:	d1eb      	bne.n	8002034 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d010      	beq.n	800208a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	4b31      	ldr	r3, [pc, #196]	; (8002134 <HAL_RCC_ClockConfig+0x1f0>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002074:	429a      	cmp	r2, r3
 8002076:	d208      	bcs.n	800208a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002078:	4b2e      	ldr	r3, [pc, #184]	; (8002134 <HAL_RCC_ClockConfig+0x1f0>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	492b      	ldr	r1, [pc, #172]	; (8002134 <HAL_RCC_ClockConfig+0x1f0>)
 8002086:	4313      	orrs	r3, r2
 8002088:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800208a:	4b29      	ldr	r3, [pc, #164]	; (8002130 <HAL_RCC_ClockConfig+0x1ec>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d210      	bcs.n	80020ba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002098:	4b25      	ldr	r3, [pc, #148]	; (8002130 <HAL_RCC_ClockConfig+0x1ec>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f023 0207 	bic.w	r2, r3, #7
 80020a0:	4923      	ldr	r1, [pc, #140]	; (8002130 <HAL_RCC_ClockConfig+0x1ec>)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a8:	4b21      	ldr	r3, [pc, #132]	; (8002130 <HAL_RCC_ClockConfig+0x1ec>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d001      	beq.n	80020ba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e036      	b.n	8002128 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0304 	and.w	r3, r3, #4
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d008      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c6:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <HAL_RCC_ClockConfig+0x1f0>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	4918      	ldr	r1, [pc, #96]	; (8002134 <HAL_RCC_ClockConfig+0x1f0>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0308 	and.w	r3, r3, #8
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d009      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020e4:	4b13      	ldr	r3, [pc, #76]	; (8002134 <HAL_RCC_ClockConfig+0x1f0>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	4910      	ldr	r1, [pc, #64]	; (8002134 <HAL_RCC_ClockConfig+0x1f0>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020f8:	f000 f824 	bl	8002144 <HAL_RCC_GetSysClockFreq>
 80020fc:	4602      	mov	r2, r0
 80020fe:	4b0d      	ldr	r3, [pc, #52]	; (8002134 <HAL_RCC_ClockConfig+0x1f0>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	091b      	lsrs	r3, r3, #4
 8002104:	f003 030f 	and.w	r3, r3, #15
 8002108:	490b      	ldr	r1, [pc, #44]	; (8002138 <HAL_RCC_ClockConfig+0x1f4>)
 800210a:	5ccb      	ldrb	r3, [r1, r3]
 800210c:	f003 031f 	and.w	r3, r3, #31
 8002110:	fa22 f303 	lsr.w	r3, r2, r3
 8002114:	4a09      	ldr	r2, [pc, #36]	; (800213c <HAL_RCC_ClockConfig+0x1f8>)
 8002116:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002118:	4b09      	ldr	r3, [pc, #36]	; (8002140 <HAL_RCC_ClockConfig+0x1fc>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe fe41 	bl	8000da4 <HAL_InitTick>
 8002122:	4603      	mov	r3, r0
 8002124:	72fb      	strb	r3, [r7, #11]

  return status;
 8002126:	7afb      	ldrb	r3, [r7, #11]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40022000 	.word	0x40022000
 8002134:	40021000 	.word	0x40021000
 8002138:	08004bf4 	.word	0x08004bf4
 800213c:	20000000 	.word	0x20000000
 8002140:	20000004 	.word	0x20000004

08002144 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002144:	b480      	push	{r7}
 8002146:	b089      	sub	sp, #36	; 0x24
 8002148:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
 800214e:	2300      	movs	r3, #0
 8002150:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002152:	4b3e      	ldr	r3, [pc, #248]	; (800224c <HAL_RCC_GetSysClockFreq+0x108>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 030c 	and.w	r3, r3, #12
 800215a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800215c:	4b3b      	ldr	r3, [pc, #236]	; (800224c <HAL_RCC_GetSysClockFreq+0x108>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	f003 0303 	and.w	r3, r3, #3
 8002164:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d005      	beq.n	8002178 <HAL_RCC_GetSysClockFreq+0x34>
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	2b0c      	cmp	r3, #12
 8002170:	d121      	bne.n	80021b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d11e      	bne.n	80021b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002178:	4b34      	ldr	r3, [pc, #208]	; (800224c <HAL_RCC_GetSysClockFreq+0x108>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0308 	and.w	r3, r3, #8
 8002180:	2b00      	cmp	r3, #0
 8002182:	d107      	bne.n	8002194 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002184:	4b31      	ldr	r3, [pc, #196]	; (800224c <HAL_RCC_GetSysClockFreq+0x108>)
 8002186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800218a:	0a1b      	lsrs	r3, r3, #8
 800218c:	f003 030f 	and.w	r3, r3, #15
 8002190:	61fb      	str	r3, [r7, #28]
 8002192:	e005      	b.n	80021a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002194:	4b2d      	ldr	r3, [pc, #180]	; (800224c <HAL_RCC_GetSysClockFreq+0x108>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	091b      	lsrs	r3, r3, #4
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80021a0:	4a2b      	ldr	r2, [pc, #172]	; (8002250 <HAL_RCC_GetSysClockFreq+0x10c>)
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10d      	bne.n	80021cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021b4:	e00a      	b.n	80021cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	2b04      	cmp	r3, #4
 80021ba:	d102      	bne.n	80021c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021bc:	4b25      	ldr	r3, [pc, #148]	; (8002254 <HAL_RCC_GetSysClockFreq+0x110>)
 80021be:	61bb      	str	r3, [r7, #24]
 80021c0:	e004      	b.n	80021cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d101      	bne.n	80021cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021c8:	4b23      	ldr	r3, [pc, #140]	; (8002258 <HAL_RCC_GetSysClockFreq+0x114>)
 80021ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	2b0c      	cmp	r3, #12
 80021d0:	d134      	bne.n	800223c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021d2:	4b1e      	ldr	r3, [pc, #120]	; (800224c <HAL_RCC_GetSysClockFreq+0x108>)
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d003      	beq.n	80021ea <HAL_RCC_GetSysClockFreq+0xa6>
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2b03      	cmp	r3, #3
 80021e6:	d003      	beq.n	80021f0 <HAL_RCC_GetSysClockFreq+0xac>
 80021e8:	e005      	b.n	80021f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021ea:	4b1a      	ldr	r3, [pc, #104]	; (8002254 <HAL_RCC_GetSysClockFreq+0x110>)
 80021ec:	617b      	str	r3, [r7, #20]
      break;
 80021ee:	e005      	b.n	80021fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021f0:	4b19      	ldr	r3, [pc, #100]	; (8002258 <HAL_RCC_GetSysClockFreq+0x114>)
 80021f2:	617b      	str	r3, [r7, #20]
      break;
 80021f4:	e002      	b.n	80021fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	617b      	str	r3, [r7, #20]
      break;
 80021fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021fc:	4b13      	ldr	r3, [pc, #76]	; (800224c <HAL_RCC_GetSysClockFreq+0x108>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	091b      	lsrs	r3, r3, #4
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	3301      	adds	r3, #1
 8002208:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800220a:	4b10      	ldr	r3, [pc, #64]	; (800224c <HAL_RCC_GetSysClockFreq+0x108>)
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	0a1b      	lsrs	r3, r3, #8
 8002210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	fb03 f202 	mul.w	r2, r3, r2
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002220:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002222:	4b0a      	ldr	r3, [pc, #40]	; (800224c <HAL_RCC_GetSysClockFreq+0x108>)
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	0e5b      	lsrs	r3, r3, #25
 8002228:	f003 0303 	and.w	r3, r3, #3
 800222c:	3301      	adds	r3, #1
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	fbb2 f3f3 	udiv	r3, r2, r3
 800223a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800223c:	69bb      	ldr	r3, [r7, #24]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3724      	adds	r7, #36	; 0x24
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40021000 	.word	0x40021000
 8002250:	08004c0c 	.word	0x08004c0c
 8002254:	00f42400 	.word	0x00f42400
 8002258:	007a1200 	.word	0x007a1200

0800225c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002260:	4b03      	ldr	r3, [pc, #12]	; (8002270 <HAL_RCC_GetHCLKFreq+0x14>)
 8002262:	681b      	ldr	r3, [r3, #0]
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	20000000 	.word	0x20000000

08002274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002278:	f7ff fff0 	bl	800225c <HAL_RCC_GetHCLKFreq>
 800227c:	4602      	mov	r2, r0
 800227e:	4b06      	ldr	r3, [pc, #24]	; (8002298 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	0a1b      	lsrs	r3, r3, #8
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	4904      	ldr	r1, [pc, #16]	; (800229c <HAL_RCC_GetPCLK1Freq+0x28>)
 800228a:	5ccb      	ldrb	r3, [r1, r3]
 800228c:	f003 031f 	and.w	r3, r3, #31
 8002290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002294:	4618      	mov	r0, r3
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40021000 	.word	0x40021000
 800229c:	08004c04 	.word	0x08004c04

080022a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022a4:	f7ff ffda 	bl	800225c <HAL_RCC_GetHCLKFreq>
 80022a8:	4602      	mov	r2, r0
 80022aa:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	0adb      	lsrs	r3, r3, #11
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	4904      	ldr	r1, [pc, #16]	; (80022c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022b6:	5ccb      	ldrb	r3, [r1, r3]
 80022b8:	f003 031f 	and.w	r3, r3, #31
 80022bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40021000 	.word	0x40021000
 80022c8:	08004c04 	.word	0x08004c04

080022cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022d4:	2300      	movs	r3, #0
 80022d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022d8:	4b2a      	ldr	r3, [pc, #168]	; (8002384 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022e4:	f7ff f9ee 	bl	80016c4 <HAL_PWREx_GetVoltageRange>
 80022e8:	6178      	str	r0, [r7, #20]
 80022ea:	e014      	b.n	8002316 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022ec:	4b25      	ldr	r3, [pc, #148]	; (8002384 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f0:	4a24      	ldr	r2, [pc, #144]	; (8002384 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f6:	6593      	str	r3, [r2, #88]	; 0x58
 80022f8:	4b22      	ldr	r3, [pc, #136]	; (8002384 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002304:	f7ff f9de 	bl	80016c4 <HAL_PWREx_GetVoltageRange>
 8002308:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800230a:	4b1e      	ldr	r3, [pc, #120]	; (8002384 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800230c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230e:	4a1d      	ldr	r2, [pc, #116]	; (8002384 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002314:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800231c:	d10b      	bne.n	8002336 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b80      	cmp	r3, #128	; 0x80
 8002322:	d919      	bls.n	8002358 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2ba0      	cmp	r3, #160	; 0xa0
 8002328:	d902      	bls.n	8002330 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800232a:	2302      	movs	r3, #2
 800232c:	613b      	str	r3, [r7, #16]
 800232e:	e013      	b.n	8002358 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002330:	2301      	movs	r3, #1
 8002332:	613b      	str	r3, [r7, #16]
 8002334:	e010      	b.n	8002358 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b80      	cmp	r3, #128	; 0x80
 800233a:	d902      	bls.n	8002342 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800233c:	2303      	movs	r3, #3
 800233e:	613b      	str	r3, [r7, #16]
 8002340:	e00a      	b.n	8002358 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b80      	cmp	r3, #128	; 0x80
 8002346:	d102      	bne.n	800234e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002348:	2302      	movs	r3, #2
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	e004      	b.n	8002358 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b70      	cmp	r3, #112	; 0x70
 8002352:	d101      	bne.n	8002358 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002354:	2301      	movs	r3, #1
 8002356:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002358:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f023 0207 	bic.w	r2, r3, #7
 8002360:	4909      	ldr	r1, [pc, #36]	; (8002388 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002368:	4b07      	ldr	r3, [pc, #28]	; (8002388 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	429a      	cmp	r2, r3
 8002374:	d001      	beq.n	800237a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40021000 	.word	0x40021000
 8002388:	40022000 	.word	0x40022000

0800238c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002394:	2300      	movs	r3, #0
 8002396:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002398:	2300      	movs	r3, #0
 800239a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d041      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80023b0:	d02a      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80023b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80023b6:	d824      	bhi.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80023bc:	d008      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80023be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80023c2:	d81e      	bhi.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00a      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x52>
 80023c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023cc:	d010      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80023ce:	e018      	b.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023d0:	4b86      	ldr	r3, [pc, #536]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	4a85      	ldr	r2, [pc, #532]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023da:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023dc:	e015      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3304      	adds	r3, #4
 80023e2:	2100      	movs	r1, #0
 80023e4:	4618      	mov	r0, r3
 80023e6:	f001 f839 	bl	800345c <RCCEx_PLLSAI1_Config>
 80023ea:	4603      	mov	r3, r0
 80023ec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023ee:	e00c      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3320      	adds	r3, #32
 80023f4:	2100      	movs	r1, #0
 80023f6:	4618      	mov	r0, r3
 80023f8:	f001 f924 	bl	8003644 <RCCEx_PLLSAI2_Config>
 80023fc:	4603      	mov	r3, r0
 80023fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002400:	e003      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	74fb      	strb	r3, [r7, #19]
      break;
 8002406:	e000      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002408:	bf00      	nop
    }

    if(ret == HAL_OK)
 800240a:	7cfb      	ldrb	r3, [r7, #19]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10b      	bne.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002410:	4b76      	ldr	r3, [pc, #472]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002416:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800241e:	4973      	ldr	r1, [pc, #460]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002420:	4313      	orrs	r3, r2
 8002422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002426:	e001      	b.n	800242c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002428:	7cfb      	ldrb	r3, [r7, #19]
 800242a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d041      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800243c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002440:	d02a      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002442:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002446:	d824      	bhi.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002448:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800244c:	d008      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800244e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002452:	d81e      	bhi.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00a      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002458:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800245c:	d010      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800245e:	e018      	b.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002460:	4b62      	ldr	r3, [pc, #392]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	4a61      	ldr	r2, [pc, #388]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800246c:	e015      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3304      	adds	r3, #4
 8002472:	2100      	movs	r1, #0
 8002474:	4618      	mov	r0, r3
 8002476:	f000 fff1 	bl	800345c <RCCEx_PLLSAI1_Config>
 800247a:	4603      	mov	r3, r0
 800247c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800247e:	e00c      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3320      	adds	r3, #32
 8002484:	2100      	movs	r1, #0
 8002486:	4618      	mov	r0, r3
 8002488:	f001 f8dc 	bl	8003644 <RCCEx_PLLSAI2_Config>
 800248c:	4603      	mov	r3, r0
 800248e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002490:	e003      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	74fb      	strb	r3, [r7, #19]
      break;
 8002496:	e000      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002498:	bf00      	nop
    }

    if(ret == HAL_OK)
 800249a:	7cfb      	ldrb	r3, [r7, #19]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10b      	bne.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024a0:	4b52      	ldr	r3, [pc, #328]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024ae:	494f      	ldr	r1, [pc, #316]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80024b6:	e001      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024b8:	7cfb      	ldrb	r3, [r7, #19]
 80024ba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 80a0 	beq.w	800260a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ca:	2300      	movs	r3, #0
 80024cc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024ce:	4b47      	ldr	r3, [pc, #284]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x152>
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80024de:	2300      	movs	r3, #0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00d      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e4:	4b41      	ldr	r3, [pc, #260]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e8:	4a40      	ldr	r2, [pc, #256]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ee:	6593      	str	r3, [r2, #88]	; 0x58
 80024f0:	4b3e      	ldr	r3, [pc, #248]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024fc:	2301      	movs	r3, #1
 80024fe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002500:	4b3b      	ldr	r3, [pc, #236]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a3a      	ldr	r2, [pc, #232]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800250a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800250c:	f7fe fc9a 	bl	8000e44 <HAL_GetTick>
 8002510:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002512:	e009      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002514:	f7fe fc96 	bl	8000e44 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d902      	bls.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	74fb      	strb	r3, [r7, #19]
        break;
 8002526:	e005      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002528:	4b31      	ldr	r3, [pc, #196]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0ef      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002534:	7cfb      	ldrb	r3, [r7, #19]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d15c      	bne.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800253a:	4b2c      	ldr	r3, [pc, #176]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002540:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002544:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d01f      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	429a      	cmp	r2, r3
 8002556:	d019      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002558:	4b24      	ldr	r3, [pc, #144]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800255a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002562:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002564:	4b21      	ldr	r3, [pc, #132]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256a:	4a20      	ldr	r2, [pc, #128]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800256c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002570:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002574:	4b1d      	ldr	r3, [pc, #116]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257a:	4a1c      	ldr	r2, [pc, #112]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800257c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002580:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002584:	4a19      	ldr	r2, [pc, #100]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d016      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002596:	f7fe fc55 	bl	8000e44 <HAL_GetTick>
 800259a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800259c:	e00b      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800259e:	f7fe fc51 	bl	8000e44 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d902      	bls.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	74fb      	strb	r3, [r7, #19]
            break;
 80025b4:	e006      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025b6:	4b0d      	ldr	r3, [pc, #52]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0ec      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80025c4:	7cfb      	ldrb	r3, [r7, #19]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10c      	bne.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025ca:	4b08      	ldr	r3, [pc, #32]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025da:	4904      	ldr	r1, [pc, #16]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025e2:	e009      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025e4:	7cfb      	ldrb	r3, [r7, #19]
 80025e6:	74bb      	strb	r3, [r7, #18]
 80025e8:	e006      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80025ea:	bf00      	nop
 80025ec:	40021000 	.word	0x40021000
 80025f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025f4:	7cfb      	ldrb	r3, [r7, #19]
 80025f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025f8:	7c7b      	ldrb	r3, [r7, #17]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d105      	bne.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025fe:	4b9e      	ldr	r3, [pc, #632]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002602:	4a9d      	ldr	r2, [pc, #628]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002604:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002608:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00a      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002616:	4b98      	ldr	r3, [pc, #608]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261c:	f023 0203 	bic.w	r2, r3, #3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002624:	4994      	ldr	r1, [pc, #592]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002626:	4313      	orrs	r3, r2
 8002628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00a      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002638:	4b8f      	ldr	r3, [pc, #572]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263e:	f023 020c 	bic.w	r2, r3, #12
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002646:	498c      	ldr	r1, [pc, #560]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002648:	4313      	orrs	r3, r2
 800264a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00a      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800265a:	4b87      	ldr	r3, [pc, #540]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002660:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002668:	4983      	ldr	r1, [pc, #524]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266a:	4313      	orrs	r3, r2
 800266c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0308 	and.w	r3, r3, #8
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00a      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800267c:	4b7e      	ldr	r3, [pc, #504]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002682:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268a:	497b      	ldr	r1, [pc, #492]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268c:	4313      	orrs	r3, r2
 800268e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0310 	and.w	r3, r3, #16
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00a      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800269e:	4b76      	ldr	r3, [pc, #472]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ac:	4972      	ldr	r1, [pc, #456]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0320 	and.w	r3, r3, #32
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00a      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026c0:	4b6d      	ldr	r3, [pc, #436]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ce:	496a      	ldr	r1, [pc, #424]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00a      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026e2:	4b65      	ldr	r3, [pc, #404]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f0:	4961      	ldr	r1, [pc, #388]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00a      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002704:	4b5c      	ldr	r3, [pc, #368]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002712:	4959      	ldr	r1, [pc, #356]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00a      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002726:	4b54      	ldr	r3, [pc, #336]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002734:	4950      	ldr	r1, [pc, #320]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002736:	4313      	orrs	r3, r2
 8002738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00a      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002748:	4b4b      	ldr	r3, [pc, #300]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002756:	4948      	ldr	r1, [pc, #288]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002758:	4313      	orrs	r3, r2
 800275a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00a      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800276a:	4b43      	ldr	r3, [pc, #268]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002770:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002778:	493f      	ldr	r1, [pc, #252]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277a:	4313      	orrs	r3, r2
 800277c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d028      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800278c:	4b3a      	ldr	r3, [pc, #232]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002792:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800279a:	4937      	ldr	r1, [pc, #220]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279c:	4313      	orrs	r3, r2
 800279e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027aa:	d106      	bne.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027ac:	4b32      	ldr	r3, [pc, #200]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	4a31      	ldr	r2, [pc, #196]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027b6:	60d3      	str	r3, [r2, #12]
 80027b8:	e011      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027c2:	d10c      	bne.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3304      	adds	r3, #4
 80027c8:	2101      	movs	r1, #1
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fe46 	bl	800345c <RCCEx_PLLSAI1_Config>
 80027d0:	4603      	mov	r3, r0
 80027d2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80027d4:	7cfb      	ldrb	r3, [r7, #19]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80027da:	7cfb      	ldrb	r3, [r7, #19]
 80027dc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d028      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027ea:	4b23      	ldr	r3, [pc, #140]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f8:	491f      	ldr	r1, [pc, #124]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002804:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002808:	d106      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800280a:	4b1b      	ldr	r3, [pc, #108]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	4a1a      	ldr	r2, [pc, #104]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002810:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002814:	60d3      	str	r3, [r2, #12]
 8002816:	e011      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002820:	d10c      	bne.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	3304      	adds	r3, #4
 8002826:	2101      	movs	r1, #1
 8002828:	4618      	mov	r0, r3
 800282a:	f000 fe17 	bl	800345c <RCCEx_PLLSAI1_Config>
 800282e:	4603      	mov	r3, r0
 8002830:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002832:	7cfb      	ldrb	r3, [r7, #19]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002838:	7cfb      	ldrb	r3, [r7, #19]
 800283a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d02b      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002848:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002856:	4908      	ldr	r1, [pc, #32]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002858:	4313      	orrs	r3, r2
 800285a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002862:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002866:	d109      	bne.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002868:	4b03      	ldr	r3, [pc, #12]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	4a02      	ldr	r2, [pc, #8]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002872:	60d3      	str	r3, [r2, #12]
 8002874:	e014      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002876:	bf00      	nop
 8002878:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002880:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002884:	d10c      	bne.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	3304      	adds	r3, #4
 800288a:	2101      	movs	r1, #1
 800288c:	4618      	mov	r0, r3
 800288e:	f000 fde5 	bl	800345c <RCCEx_PLLSAI1_Config>
 8002892:	4603      	mov	r3, r0
 8002894:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002896:	7cfb      	ldrb	r3, [r7, #19]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800289c:	7cfb      	ldrb	r3, [r7, #19]
 800289e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d02f      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028ac:	4b2b      	ldr	r3, [pc, #172]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028ba:	4928      	ldr	r1, [pc, #160]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028ca:	d10d      	bne.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3304      	adds	r3, #4
 80028d0:	2102      	movs	r1, #2
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 fdc2 	bl	800345c <RCCEx_PLLSAI1_Config>
 80028d8:	4603      	mov	r3, r0
 80028da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028dc:	7cfb      	ldrb	r3, [r7, #19]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d014      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028e2:	7cfb      	ldrb	r3, [r7, #19]
 80028e4:	74bb      	strb	r3, [r7, #18]
 80028e6:	e011      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028f0:	d10c      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3320      	adds	r3, #32
 80028f6:	2102      	movs	r1, #2
 80028f8:	4618      	mov	r0, r3
 80028fa:	f000 fea3 	bl	8003644 <RCCEx_PLLSAI2_Config>
 80028fe:	4603      	mov	r3, r0
 8002900:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002902:	7cfb      	ldrb	r3, [r7, #19]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002908:	7cfb      	ldrb	r3, [r7, #19]
 800290a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00a      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002918:	4b10      	ldr	r3, [pc, #64]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800291a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002926:	490d      	ldr	r1, [pc, #52]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002928:	4313      	orrs	r3, r2
 800292a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00b      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800293a:	4b08      	ldr	r3, [pc, #32]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800293c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002940:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800294a:	4904      	ldr	r1, [pc, #16]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800294c:	4313      	orrs	r3, r2
 800294e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002952:	7cbb      	ldrb	r3, [r7, #18]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40021000 	.word	0x40021000

08002960 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8002968:	2300      	movs	r3, #0
 800296a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002972:	d13e      	bne.n	80029f2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8002974:	4bb2      	ldr	r3, [pc, #712]	; (8002c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800297e:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002986:	d028      	beq.n	80029da <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800298e:	f200 8542 	bhi.w	8003416 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002998:	d005      	beq.n	80029a6 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029a0:	d00e      	beq.n	80029c0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80029a2:	f000 bd38 	b.w	8003416 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80029a6:	4ba6      	ldr	r3, [pc, #664]	; (8002c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80029a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	f040 8532 	bne.w	800341a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 80029b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029ba:	61fb      	str	r3, [r7, #28]
      break;
 80029bc:	f000 bd2d 	b.w	800341a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80029c0:	4b9f      	ldr	r3, [pc, #636]	; (8002c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80029c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	f040 8527 	bne.w	800341e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 80029d0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80029d4:	61fb      	str	r3, [r7, #28]
      break;
 80029d6:	f000 bd22 	b.w	800341e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80029da:	4b99      	ldr	r3, [pc, #612]	; (8002c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029e6:	f040 851c 	bne.w	8003422 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 80029ea:	4b96      	ldr	r3, [pc, #600]	; (8002c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80029ec:	61fb      	str	r3, [r7, #28]
      break;
 80029ee:	f000 bd18 	b.w	8003422 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029f2:	4b93      	ldr	r3, [pc, #588]	; (8002c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	2b03      	cmp	r3, #3
 8002a00:	d036      	beq.n	8002a70 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d840      	bhi.n	8002a8a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d003      	beq.n	8002a16 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d020      	beq.n	8002a56 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8002a14:	e039      	b.n	8002a8a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002a16:	4b8a      	ldr	r3, [pc, #552]	; (8002c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d116      	bne.n	8002a50 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002a22:	4b87      	ldr	r3, [pc, #540]	; (8002c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0308 	and.w	r3, r3, #8
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d005      	beq.n	8002a3a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8002a2e:	4b84      	ldr	r3, [pc, #528]	; (8002c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	091b      	lsrs	r3, r3, #4
 8002a34:	f003 030f 	and.w	r3, r3, #15
 8002a38:	e005      	b.n	8002a46 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8002a3a:	4b81      	ldr	r3, [pc, #516]	; (8002c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002a3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a40:	0a1b      	lsrs	r3, r3, #8
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	4a80      	ldr	r2, [pc, #512]	; (8002c48 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8002a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a4c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002a4e:	e01f      	b.n	8002a90 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	61bb      	str	r3, [r7, #24]
      break;
 8002a54:	e01c      	b.n	8002a90 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002a56:	4b7a      	ldr	r3, [pc, #488]	; (8002c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a62:	d102      	bne.n	8002a6a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8002a64:	4b79      	ldr	r3, [pc, #484]	; (8002c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002a66:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002a68:	e012      	b.n	8002a90 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61bb      	str	r3, [r7, #24]
      break;
 8002a6e:	e00f      	b.n	8002a90 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002a70:	4b73      	ldr	r3, [pc, #460]	; (8002c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a7c:	d102      	bne.n	8002a84 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8002a7e:	4b74      	ldr	r3, [pc, #464]	; (8002c50 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8002a80:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002a82:	e005      	b.n	8002a90 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61bb      	str	r3, [r7, #24]
      break;
 8002a88:	e002      	b.n	8002a90 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61bb      	str	r3, [r7, #24]
      break;
 8002a8e:	bf00      	nop
    }

    switch(PeriphClk)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a96:	f000 80dd 	beq.w	8002c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002aa0:	f200 84c1 	bhi.w	8003426 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002aaa:	f000 80d3 	beq.w	8002c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ab4:	f200 84b7 	bhi.w	8003426 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002abe:	f000 835f 	beq.w	8003180 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac8:	f200 84ad 	bhi.w	8003426 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ad2:	f000 847e 	beq.w	80033d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002adc:	f200 84a3 	bhi.w	8003426 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ae6:	f000 82cd 	beq.w	8003084 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002af0:	f200 8499 	bhi.w	8003426 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002afa:	f000 80ab 	beq.w	8002c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b04:	f200 848f 	bhi.w	8003426 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b0e:	f000 8090 	beq.w	8002c32 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b18:	f200 8485 	bhi.w	8003426 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b22:	d07f      	beq.n	8002c24 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b2a:	f200 847c 	bhi.w	8003426 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b34:	f000 8403 	beq.w	800333e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b3e:	f200 8472 	bhi.w	8003426 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b48:	f000 83af 	beq.w	80032aa <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b52:	f200 8468 	bhi.w	8003426 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b5c:	f000 8379 	beq.w	8003252 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b66:	f200 845e 	bhi.w	8003426 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b80      	cmp	r3, #128	; 0x80
 8002b6e:	f000 8344 	beq.w	80031fa <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b80      	cmp	r3, #128	; 0x80
 8002b76:	f200 8456 	bhi.w	8003426 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b20      	cmp	r3, #32
 8002b7e:	d84b      	bhi.n	8002c18 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 844f 	beq.w	8003426 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	2b1f      	cmp	r3, #31
 8002b8e:	f200 844a 	bhi.w	8003426 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002b92:	a201      	add	r2, pc, #4	; (adr r2, 8002b98 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8002b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b98:	08002d81 	.word	0x08002d81
 8002b9c:	08002def 	.word	0x08002def
 8002ba0:	08003427 	.word	0x08003427
 8002ba4:	08002e83 	.word	0x08002e83
 8002ba8:	08003427 	.word	0x08003427
 8002bac:	08003427 	.word	0x08003427
 8002bb0:	08003427 	.word	0x08003427
 8002bb4:	08002f09 	.word	0x08002f09
 8002bb8:	08003427 	.word	0x08003427
 8002bbc:	08003427 	.word	0x08003427
 8002bc0:	08003427 	.word	0x08003427
 8002bc4:	08003427 	.word	0x08003427
 8002bc8:	08003427 	.word	0x08003427
 8002bcc:	08003427 	.word	0x08003427
 8002bd0:	08003427 	.word	0x08003427
 8002bd4:	08002f81 	.word	0x08002f81
 8002bd8:	08003427 	.word	0x08003427
 8002bdc:	08003427 	.word	0x08003427
 8002be0:	08003427 	.word	0x08003427
 8002be4:	08003427 	.word	0x08003427
 8002be8:	08003427 	.word	0x08003427
 8002bec:	08003427 	.word	0x08003427
 8002bf0:	08003427 	.word	0x08003427
 8002bf4:	08003427 	.word	0x08003427
 8002bf8:	08003427 	.word	0x08003427
 8002bfc:	08003427 	.word	0x08003427
 8002c00:	08003427 	.word	0x08003427
 8002c04:	08003427 	.word	0x08003427
 8002c08:	08003427 	.word	0x08003427
 8002c0c:	08003427 	.word	0x08003427
 8002c10:	08003427 	.word	0x08003427
 8002c14:	08003003 	.word	0x08003003
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b40      	cmp	r3, #64	; 0x40
 8002c1c:	f000 82c1 	beq.w	80031a2 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8002c20:	f000 bc01 	b.w	8003426 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8002c24:	69b9      	ldr	r1, [r7, #24]
 8002c26:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002c2a:	f000 fde9 	bl	8003800 <RCCEx_GetSAIxPeriphCLKFreq>
 8002c2e:	61f8      	str	r0, [r7, #28]
      break;
 8002c30:	e3fa      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8002c32:	69b9      	ldr	r1, [r7, #24]
 8002c34:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002c38:	f000 fde2 	bl	8003800 <RCCEx_GetSAIxPeriphCLKFreq>
 8002c3c:	61f8      	str	r0, [r7, #28]
      break;
 8002c3e:	e3f3      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8002c40:	40021000 	.word	0x40021000
 8002c44:	0003d090 	.word	0x0003d090
 8002c48:	08004c0c 	.word	0x08004c0c
 8002c4c:	00f42400 	.word	0x00f42400
 8002c50:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8002c54:	4ba9      	ldr	r3, [pc, #676]	; (8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8002c5e:	613b      	str	r3, [r7, #16]
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002c66:	d00c      	beq.n	8002c82 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002c6e:	d87f      	bhi.n	8002d70 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c76:	d04e      	beq.n	8002d16 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c7e:	d01d      	beq.n	8002cbc <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8002c80:	e076      	b.n	8002d70 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002c82:	4b9e      	ldr	r3, [pc, #632]	; (8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d172      	bne.n	8002d74 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002c8e:	4b9b      	ldr	r3, [pc, #620]	; (8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d005      	beq.n	8002ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8002c9a:	4b98      	ldr	r3, [pc, #608]	; (8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	091b      	lsrs	r3, r3, #4
 8002ca0:	f003 030f 	and.w	r3, r3, #15
 8002ca4:	e005      	b.n	8002cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8002ca6:	4b95      	ldr	r3, [pc, #596]	; (8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cac:	0a1b      	lsrs	r3, r3, #8
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	4a93      	ldr	r2, [pc, #588]	; (8002f00 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8002cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb8:	61fb      	str	r3, [r7, #28]
          break;
 8002cba:	e05b      	b.n	8002d74 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8002cbc:	4b8f      	ldr	r3, [pc, #572]	; (8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cc8:	d156      	bne.n	8002d78 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8002cca:	4b8c      	ldr	r3, [pc, #560]	; (8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cd6:	d14f      	bne.n	8002d78 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8002cd8:	4b88      	ldr	r3, [pc, #544]	; (8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	0a1b      	lsrs	r3, r3, #8
 8002cde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ce2:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	fb03 f202 	mul.w	r2, r3, r2
 8002cec:	4b83      	ldr	r3, [pc, #524]	; (8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	091b      	lsrs	r3, r3, #4
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8002cfe:	4b7f      	ldr	r3, [pc, #508]	; (8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	0d5b      	lsrs	r3, r3, #21
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	3301      	adds	r3, #1
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d12:	61fb      	str	r3, [r7, #28]
          break;
 8002d14:	e030      	b.n	8002d78 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8002d16:	4b79      	ldr	r3, [pc, #484]	; (8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d22:	d12b      	bne.n	8002d7c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8002d24:	4b75      	ldr	r3, [pc, #468]	; (8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d30:	d124      	bne.n	8002d7c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002d32:	4b72      	ldr	r3, [pc, #456]	; (8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	0a1b      	lsrs	r3, r3, #8
 8002d38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d3c:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	fb03 f202 	mul.w	r2, r3, r2
 8002d46:	4b6d      	ldr	r3, [pc, #436]	; (8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	091b      	lsrs	r3, r3, #4
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	3301      	adds	r3, #1
 8002d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d56:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8002d58:	4b68      	ldr	r3, [pc, #416]	; (8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	0d5b      	lsrs	r3, r3, #21
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	3301      	adds	r3, #1
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6c:	61fb      	str	r3, [r7, #28]
          break;
 8002d6e:	e005      	b.n	8002d7c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8002d70:	bf00      	nop
 8002d72:	e359      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002d74:	bf00      	nop
 8002d76:	e357      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002d78:	bf00      	nop
 8002d7a:	e355      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002d7c:	bf00      	nop
        break;
 8002d7e:	e353      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8002d80:	4b5e      	ldr	r3, [pc, #376]	; (8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	613b      	str	r3, [r7, #16]
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	d827      	bhi.n	8002de2 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8002d92:	a201      	add	r2, pc, #4	; (adr r2, 8002d98 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8002d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d98:	08002da9 	.word	0x08002da9
 8002d9c:	08002db1 	.word	0x08002db1
 8002da0:	08002db9 	.word	0x08002db9
 8002da4:	08002dcd 	.word	0x08002dcd
          frequency = HAL_RCC_GetPCLK2Freq();
 8002da8:	f7ff fa7a 	bl	80022a0 <HAL_RCC_GetPCLK2Freq>
 8002dac:	61f8      	str	r0, [r7, #28]
          break;
 8002dae:	e01d      	b.n	8002dec <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8002db0:	f7ff f9c8 	bl	8002144 <HAL_RCC_GetSysClockFreq>
 8002db4:	61f8      	str	r0, [r7, #28]
          break;
 8002db6:	e019      	b.n	8002dec <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002db8:	4b50      	ldr	r3, [pc, #320]	; (8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc4:	d10f      	bne.n	8002de6 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8002dc6:	4b4f      	ldr	r3, [pc, #316]	; (8002f04 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8002dc8:	61fb      	str	r3, [r7, #28]
          break;
 8002dca:	e00c      	b.n	8002de6 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002dcc:	4b4b      	ldr	r3, [pc, #300]	; (8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d107      	bne.n	8002dea <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8002dda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dde:	61fb      	str	r3, [r7, #28]
          break;
 8002de0:	e003      	b.n	8002dea <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8002de2:	bf00      	nop
 8002de4:	e320      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002de6:	bf00      	nop
 8002de8:	e31e      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002dea:	bf00      	nop
        break;
 8002dec:	e31c      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8002dee:	4b43      	ldr	r3, [pc, #268]	; (8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df4:	f003 030c 	and.w	r3, r3, #12
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	2b0c      	cmp	r3, #12
 8002dfe:	d83a      	bhi.n	8002e76 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8002e00:	a201      	add	r2, pc, #4	; (adr r2, 8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8002e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e06:	bf00      	nop
 8002e08:	08002e3d 	.word	0x08002e3d
 8002e0c:	08002e77 	.word	0x08002e77
 8002e10:	08002e77 	.word	0x08002e77
 8002e14:	08002e77 	.word	0x08002e77
 8002e18:	08002e45 	.word	0x08002e45
 8002e1c:	08002e77 	.word	0x08002e77
 8002e20:	08002e77 	.word	0x08002e77
 8002e24:	08002e77 	.word	0x08002e77
 8002e28:	08002e4d 	.word	0x08002e4d
 8002e2c:	08002e77 	.word	0x08002e77
 8002e30:	08002e77 	.word	0x08002e77
 8002e34:	08002e77 	.word	0x08002e77
 8002e38:	08002e61 	.word	0x08002e61
          frequency = HAL_RCC_GetPCLK1Freq();
 8002e3c:	f7ff fa1a 	bl	8002274 <HAL_RCC_GetPCLK1Freq>
 8002e40:	61f8      	str	r0, [r7, #28]
          break;
 8002e42:	e01d      	b.n	8002e80 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8002e44:	f7ff f97e 	bl	8002144 <HAL_RCC_GetSysClockFreq>
 8002e48:	61f8      	str	r0, [r7, #28]
          break;
 8002e4a:	e019      	b.n	8002e80 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002e4c:	4b2b      	ldr	r3, [pc, #172]	; (8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e58:	d10f      	bne.n	8002e7a <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8002e5a:	4b2a      	ldr	r3, [pc, #168]	; (8002f04 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8002e5c:	61fb      	str	r3, [r7, #28]
          break;
 8002e5e:	e00c      	b.n	8002e7a <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002e60:	4b26      	ldr	r3, [pc, #152]	; (8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d107      	bne.n	8002e7e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8002e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e72:	61fb      	str	r3, [r7, #28]
          break;
 8002e74:	e003      	b.n	8002e7e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8002e76:	bf00      	nop
 8002e78:	e2d6      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002e7a:	bf00      	nop
 8002e7c:	e2d4      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002e7e:	bf00      	nop
        break;
 8002e80:	e2d2      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8002e82:	4b1e      	ldr	r3, [pc, #120]	; (8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e88:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e8c:	613b      	str	r3, [r7, #16]
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	2b30      	cmp	r3, #48	; 0x30
 8002e92:	d021      	beq.n	8002ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	2b30      	cmp	r3, #48	; 0x30
 8002e98:	d829      	bhi.n	8002eee <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	d011      	beq.n	8002ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	2b20      	cmp	r3, #32
 8002ea4:	d823      	bhi.n	8002eee <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	2b10      	cmp	r3, #16
 8002eb0:	d004      	beq.n	8002ebc <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8002eb2:	e01c      	b.n	8002eee <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002eb4:	f7ff f9de 	bl	8002274 <HAL_RCC_GetPCLK1Freq>
 8002eb8:	61f8      	str	r0, [r7, #28]
          break;
 8002eba:	e01d      	b.n	8002ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8002ebc:	f7ff f942 	bl	8002144 <HAL_RCC_GetSysClockFreq>
 8002ec0:	61f8      	str	r0, [r7, #28]
          break;
 8002ec2:	e019      	b.n	8002ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002ec4:	4b0d      	ldr	r3, [pc, #52]	; (8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ed0:	d10f      	bne.n	8002ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8002ed2:	4b0c      	ldr	r3, [pc, #48]	; (8002f04 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8002ed4:	61fb      	str	r3, [r7, #28]
          break;
 8002ed6:	e00c      	b.n	8002ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002ed8:	4b08      	ldr	r3, [pc, #32]	; (8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d107      	bne.n	8002ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8002ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eea:	61fb      	str	r3, [r7, #28]
          break;
 8002eec:	e003      	b.n	8002ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8002eee:	bf00      	nop
 8002ef0:	e29a      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002ef2:	bf00      	nop
 8002ef4:	e298      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002ef6:	bf00      	nop
        break;
 8002ef8:	e296      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8002efa:	bf00      	nop
 8002efc:	40021000 	.word	0x40021000
 8002f00:	08004c0c 	.word	0x08004c0c
 8002f04:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8002f08:	4b9b      	ldr	r3, [pc, #620]	; (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	2bc0      	cmp	r3, #192	; 0xc0
 8002f18:	d021      	beq.n	8002f5e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	2bc0      	cmp	r3, #192	; 0xc0
 8002f1e:	d829      	bhi.n	8002f74 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	2b80      	cmp	r3, #128	; 0x80
 8002f24:	d011      	beq.n	8002f4a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	2b80      	cmp	r3, #128	; 0x80
 8002f2a:	d823      	bhi.n	8002f74 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	2b40      	cmp	r3, #64	; 0x40
 8002f36:	d004      	beq.n	8002f42 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8002f38:	e01c      	b.n	8002f74 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002f3a:	f7ff f99b 	bl	8002274 <HAL_RCC_GetPCLK1Freq>
 8002f3e:	61f8      	str	r0, [r7, #28]
          break;
 8002f40:	e01d      	b.n	8002f7e <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8002f42:	f7ff f8ff 	bl	8002144 <HAL_RCC_GetSysClockFreq>
 8002f46:	61f8      	str	r0, [r7, #28]
          break;
 8002f48:	e019      	b.n	8002f7e <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002f4a:	4b8b      	ldr	r3, [pc, #556]	; (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f56:	d10f      	bne.n	8002f78 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8002f58:	4b88      	ldr	r3, [pc, #544]	; (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8002f5a:	61fb      	str	r3, [r7, #28]
          break;
 8002f5c:	e00c      	b.n	8002f78 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002f5e:	4b86      	ldr	r3, [pc, #536]	; (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d107      	bne.n	8002f7c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8002f6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f70:	61fb      	str	r3, [r7, #28]
          break;
 8002f72:	e003      	b.n	8002f7c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8002f74:	bf00      	nop
 8002f76:	e257      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002f78:	bf00      	nop
 8002f7a:	e255      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002f7c:	bf00      	nop
        break;
 8002f7e:	e253      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8002f80:	4b7d      	ldr	r3, [pc, #500]	; (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f92:	d025      	beq.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f9a:	d82c      	bhi.n	8002ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa2:	d013      	beq.n	8002fcc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002faa:	d824      	bhi.n	8002ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d004      	beq.n	8002fbc <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb8:	d004      	beq.n	8002fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8002fba:	e01c      	b.n	8002ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002fbc:	f7ff f95a 	bl	8002274 <HAL_RCC_GetPCLK1Freq>
 8002fc0:	61f8      	str	r0, [r7, #28]
          break;
 8002fc2:	e01d      	b.n	8003000 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8002fc4:	f7ff f8be 	bl	8002144 <HAL_RCC_GetSysClockFreq>
 8002fc8:	61f8      	str	r0, [r7, #28]
          break;
 8002fca:	e019      	b.n	8003000 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002fcc:	4b6a      	ldr	r3, [pc, #424]	; (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fd8:	d10f      	bne.n	8002ffa <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8002fda:	4b68      	ldr	r3, [pc, #416]	; (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8002fdc:	61fb      	str	r3, [r7, #28]
          break;
 8002fde:	e00c      	b.n	8002ffa <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002fe0:	4b65      	ldr	r3, [pc, #404]	; (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d107      	bne.n	8002ffe <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8002fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ff2:	61fb      	str	r3, [r7, #28]
          break;
 8002ff4:	e003      	b.n	8002ffe <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8002ff6:	bf00      	nop
 8002ff8:	e216      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002ffa:	bf00      	nop
 8002ffc:	e214      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002ffe:	bf00      	nop
        break;
 8003000:	e212      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003002:	4b5d      	ldr	r3, [pc, #372]	; (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003008:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800300c:	613b      	str	r3, [r7, #16]
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003014:	d025      	beq.n	8003062 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800301c:	d82c      	bhi.n	8003078 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003024:	d013      	beq.n	800304e <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800302c:	d824      	bhi.n	8003078 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d004      	beq.n	800303e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800303a:	d004      	beq.n	8003046 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 800303c:	e01c      	b.n	8003078 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 800303e:	f7ff f919 	bl	8002274 <HAL_RCC_GetPCLK1Freq>
 8003042:	61f8      	str	r0, [r7, #28]
          break;
 8003044:	e01d      	b.n	8003082 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8003046:	f7ff f87d 	bl	8002144 <HAL_RCC_GetSysClockFreq>
 800304a:	61f8      	str	r0, [r7, #28]
          break;
 800304c:	e019      	b.n	8003082 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800304e:	4b4a      	ldr	r3, [pc, #296]	; (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800305a:	d10f      	bne.n	800307c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 800305c:	4b47      	ldr	r3, [pc, #284]	; (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800305e:	61fb      	str	r3, [r7, #28]
          break;
 8003060:	e00c      	b.n	800307c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003062:	4b45      	ldr	r3, [pc, #276]	; (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b02      	cmp	r3, #2
 800306e:	d107      	bne.n	8003080 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8003070:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003074:	61fb      	str	r3, [r7, #28]
          break;
 8003076:	e003      	b.n	8003080 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8003078:	bf00      	nop
 800307a:	e1d5      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800307c:	bf00      	nop
 800307e:	e1d3      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003080:	bf00      	nop
        break;
 8003082:	e1d1      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8003084:	4b3c      	ldr	r3, [pc, #240]	; (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800308e:	613b      	str	r3, [r7, #16]
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003096:	d00c      	beq.n	80030b2 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800309e:	d864      	bhi.n	800316a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030a6:	d008      	beq.n	80030ba <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030ae:	d030      	beq.n	8003112 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 80030b0:	e05b      	b.n	800316a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 80030b2:	f7ff f847 	bl	8002144 <HAL_RCC_GetSysClockFreq>
 80030b6:	61f8      	str	r0, [r7, #28]
          break;
 80030b8:	e05c      	b.n	8003174 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80030ba:	4b2f      	ldr	r3, [pc, #188]	; (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030c6:	d152      	bne.n	800316e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 80030c8:	4b2b      	ldr	r3, [pc, #172]	; (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d04c      	beq.n	800316e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80030d4:	4b28      	ldr	r3, [pc, #160]	; (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	0a1b      	lsrs	r3, r3, #8
 80030da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030de:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	fb03 f202 	mul.w	r2, r3, r2
 80030e8:	4b23      	ldr	r3, [pc, #140]	; (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	091b      	lsrs	r3, r3, #4
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	3301      	adds	r3, #1
 80030f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f8:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80030fa:	4b1f      	ldr	r3, [pc, #124]	; (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	0e5b      	lsrs	r3, r3, #25
 8003100:	f003 0303 	and.w	r3, r3, #3
 8003104:	3301      	adds	r3, #1
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	fbb2 f3f3 	udiv	r3, r2, r3
 800310e:	61fb      	str	r3, [r7, #28]
          break;
 8003110:	e02d      	b.n	800316e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8003112:	4b19      	ldr	r3, [pc, #100]	; (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800311a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800311e:	d128      	bne.n	8003172 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8003120:	4b15      	ldr	r3, [pc, #84]	; (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d022      	beq.n	8003172 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800312c:	4b12      	ldr	r3, [pc, #72]	; (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	0a1b      	lsrs	r3, r3, #8
 8003132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003136:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	fb03 f202 	mul.w	r2, r3, r2
 8003140:	4b0d      	ldr	r3, [pc, #52]	; (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	091b      	lsrs	r3, r3, #4
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	3301      	adds	r3, #1
 800314c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003150:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8003152:	4b09      	ldr	r3, [pc, #36]	; (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	0e5b      	lsrs	r3, r3, #25
 8003158:	f003 0303 	and.w	r3, r3, #3
 800315c:	3301      	adds	r3, #1
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	fbb2 f3f3 	udiv	r3, r2, r3
 8003166:	61fb      	str	r3, [r7, #28]
          break;
 8003168:	e003      	b.n	8003172 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 800316a:	bf00      	nop
 800316c:	e15c      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800316e:	bf00      	nop
 8003170:	e15a      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003172:	bf00      	nop
        break;
 8003174:	e158      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8003176:	bf00      	nop
 8003178:	40021000 	.word	0x40021000
 800317c:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8003180:	4b9d      	ldr	r3, [pc, #628]	; (80033f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003186:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800318a:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d103      	bne.n	800319a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8003192:	f7ff f885 	bl	80022a0 <HAL_RCC_GetPCLK2Freq>
 8003196:	61f8      	str	r0, [r7, #28]
        break;
 8003198:	e146      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 800319a:	f7fe ffd3 	bl	8002144 <HAL_RCC_GetSysClockFreq>
 800319e:	61f8      	str	r0, [r7, #28]
        break;
 80031a0:	e142      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80031a2:	4b95      	ldr	r3, [pc, #596]	; (80033f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80031a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80031ac:	613b      	str	r3, [r7, #16]
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031b4:	d013      	beq.n	80031de <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031bc:	d819      	bhi.n	80031f2 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d004      	beq.n	80031ce <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ca:	d004      	beq.n	80031d6 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 80031cc:	e011      	b.n	80031f2 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 80031ce:	f7ff f851 	bl	8002274 <HAL_RCC_GetPCLK1Freq>
 80031d2:	61f8      	str	r0, [r7, #28]
          break;
 80031d4:	e010      	b.n	80031f8 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 80031d6:	f7fe ffb5 	bl	8002144 <HAL_RCC_GetSysClockFreq>
 80031da:	61f8      	str	r0, [r7, #28]
          break;
 80031dc:	e00c      	b.n	80031f8 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80031de:	4b86      	ldr	r3, [pc, #536]	; (80033f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ea:	d104      	bne.n	80031f6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 80031ec:	4b83      	ldr	r3, [pc, #524]	; (80033fc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80031ee:	61fb      	str	r3, [r7, #28]
          break;
 80031f0:	e001      	b.n	80031f6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 80031f2:	bf00      	nop
 80031f4:	e118      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80031f6:	bf00      	nop
        break;
 80031f8:	e116      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80031fa:	4b7f      	ldr	r3, [pc, #508]	; (80033f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80031fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003200:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800320c:	d013      	beq.n	8003236 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003214:	d819      	bhi.n	800324a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d004      	beq.n	8003226 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003222:	d004      	beq.n	800322e <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8003224:	e011      	b.n	800324a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003226:	f7ff f825 	bl	8002274 <HAL_RCC_GetPCLK1Freq>
 800322a:	61f8      	str	r0, [r7, #28]
          break;
 800322c:	e010      	b.n	8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800322e:	f7fe ff89 	bl	8002144 <HAL_RCC_GetSysClockFreq>
 8003232:	61f8      	str	r0, [r7, #28]
          break;
 8003234:	e00c      	b.n	8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003236:	4b70      	ldr	r3, [pc, #448]	; (80033f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003242:	d104      	bne.n	800324e <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8003244:	4b6d      	ldr	r3, [pc, #436]	; (80033fc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003246:	61fb      	str	r3, [r7, #28]
          break;
 8003248:	e001      	b.n	800324e <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 800324a:	bf00      	nop
 800324c:	e0ec      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800324e:	bf00      	nop
        break;
 8003250:	e0ea      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8003252:	4b69      	ldr	r3, [pc, #420]	; (80033f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003258:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800325c:	613b      	str	r3, [r7, #16]
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003264:	d013      	beq.n	800328e <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800326c:	d819      	bhi.n	80032a2 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d004      	beq.n	800327e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800327a:	d004      	beq.n	8003286 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 800327c:	e011      	b.n	80032a2 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 800327e:	f7fe fff9 	bl	8002274 <HAL_RCC_GetPCLK1Freq>
 8003282:	61f8      	str	r0, [r7, #28]
          break;
 8003284:	e010      	b.n	80032a8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8003286:	f7fe ff5d 	bl	8002144 <HAL_RCC_GetSysClockFreq>
 800328a:	61f8      	str	r0, [r7, #28]
          break;
 800328c:	e00c      	b.n	80032a8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800328e:	4b5a      	ldr	r3, [pc, #360]	; (80033f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800329a:	d104      	bne.n	80032a6 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 800329c:	4b57      	ldr	r3, [pc, #348]	; (80033fc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800329e:	61fb      	str	r3, [r7, #28]
          break;
 80032a0:	e001      	b.n	80032a6 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 80032a2:	bf00      	nop
 80032a4:	e0c0      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80032a6:	bf00      	nop
        break;
 80032a8:	e0be      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80032aa:	4b53      	ldr	r3, [pc, #332]	; (80033f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80032ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80032b4:	613b      	str	r3, [r7, #16]
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80032bc:	d02c      	beq.n	8003318 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80032c4:	d833      	bhi.n	800332e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80032cc:	d01a      	beq.n	8003304 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80032d4:	d82b      	bhi.n	800332e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d004      	beq.n	80032e6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032e2:	d004      	beq.n	80032ee <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 80032e4:	e023      	b.n	800332e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 80032e6:	f7fe ffc5 	bl	8002274 <HAL_RCC_GetPCLK1Freq>
 80032ea:	61f8      	str	r0, [r7, #28]
          break;
 80032ec:	e026      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80032ee:	4b42      	ldr	r3, [pc, #264]	; (80033f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80032f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d11a      	bne.n	8003332 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 80032fc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003300:	61fb      	str	r3, [r7, #28]
          break;
 8003302:	e016      	b.n	8003332 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003304:	4b3c      	ldr	r3, [pc, #240]	; (80033f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800330c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003310:	d111      	bne.n	8003336 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8003312:	4b3a      	ldr	r3, [pc, #232]	; (80033fc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003314:	61fb      	str	r3, [r7, #28]
          break;
 8003316:	e00e      	b.n	8003336 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003318:	4b37      	ldr	r3, [pc, #220]	; (80033f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800331a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b02      	cmp	r3, #2
 8003324:	d109      	bne.n	800333a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8003326:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800332a:	61fb      	str	r3, [r7, #28]
          break;
 800332c:	e005      	b.n	800333a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 800332e:	bf00      	nop
 8003330:	e07a      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003332:	bf00      	nop
 8003334:	e078      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003336:	bf00      	nop
 8003338:	e076      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800333a:	bf00      	nop
        break;
 800333c:	e074      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800333e:	4b2e      	ldr	r3, [pc, #184]	; (80033f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003344:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003348:	613b      	str	r3, [r7, #16]
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003350:	d02c      	beq.n	80033ac <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003358:	d833      	bhi.n	80033c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003360:	d01a      	beq.n	8003398 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003368:	d82b      	bhi.n	80033c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d004      	beq.n	800337a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003376:	d004      	beq.n	8003382 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8003378:	e023      	b.n	80033c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 800337a:	f7fe ff7b 	bl	8002274 <HAL_RCC_GetPCLK1Freq>
 800337e:	61f8      	str	r0, [r7, #28]
          break;
 8003380:	e026      	b.n	80033d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003382:	4b1d      	ldr	r3, [pc, #116]	; (80033f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003384:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b02      	cmp	r3, #2
 800338e:	d11a      	bne.n	80033c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8003390:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003394:	61fb      	str	r3, [r7, #28]
          break;
 8003396:	e016      	b.n	80033c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003398:	4b17      	ldr	r3, [pc, #92]	; (80033f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a4:	d111      	bne.n	80033ca <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 80033a6:	4b15      	ldr	r3, [pc, #84]	; (80033fc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80033a8:	61fb      	str	r3, [r7, #28]
          break;
 80033aa:	e00e      	b.n	80033ca <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80033ac:	4b12      	ldr	r3, [pc, #72]	; (80033f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80033ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d109      	bne.n	80033ce <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 80033ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033be:	61fb      	str	r3, [r7, #28]
          break;
 80033c0:	e005      	b.n	80033ce <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 80033c2:	bf00      	nop
 80033c4:	e030      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80033c6:	bf00      	nop
 80033c8:	e02e      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80033ca:	bf00      	nop
 80033cc:	e02c      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80033ce:	bf00      	nop
        break;
 80033d0:	e02a      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 80033d2:	4b09      	ldr	r3, [pc, #36]	; (80033f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80033d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d004      	beq.n	80033ee <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ea:	d009      	beq.n	8003400 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 80033ec:	e012      	b.n	8003414 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 80033ee:	f7fe ff41 	bl	8002274 <HAL_RCC_GetPCLK1Freq>
 80033f2:	61f8      	str	r0, [r7, #28]
          break;
 80033f4:	e00e      	b.n	8003414 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 80033f6:	bf00      	nop
 80033f8:	40021000 	.word	0x40021000
 80033fc:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003400:	4b0c      	ldr	r3, [pc, #48]	; (8003434 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800340c:	d101      	bne.n	8003412 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 800340e:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8003410:	61fb      	str	r3, [r7, #28]
          break;
 8003412:	bf00      	nop
        break;
 8003414:	e008      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003416:	bf00      	nop
 8003418:	e006      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800341a:	bf00      	nop
 800341c:	e004      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800341e:	bf00      	nop
 8003420:	e002      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003422:	bf00      	nop
 8003424:	e000      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003426:	bf00      	nop
    }
  }

  return(frequency);
 8003428:	69fb      	ldr	r3, [r7, #28]
}
 800342a:	4618      	mov	r0, r3
 800342c:	3720      	adds	r7, #32
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	40021000 	.word	0x40021000
 8003438:	00f42400 	.word	0x00f42400

0800343c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003440:	4b05      	ldr	r3, [pc, #20]	; (8003458 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a04      	ldr	r2, [pc, #16]	; (8003458 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003446:	f043 0304 	orr.w	r3, r3, #4
 800344a:	6013      	str	r3, [r2, #0]
}
 800344c:	bf00      	nop
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	40021000 	.word	0x40021000

0800345c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003466:	2300      	movs	r3, #0
 8003468:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800346a:	4b75      	ldr	r3, [pc, #468]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d018      	beq.n	80034a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003476:	4b72      	ldr	r3, [pc, #456]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	f003 0203 	and.w	r2, r3, #3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	429a      	cmp	r2, r3
 8003484:	d10d      	bne.n	80034a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
       ||
 800348a:	2b00      	cmp	r3, #0
 800348c:	d009      	beq.n	80034a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800348e:	4b6c      	ldr	r3, [pc, #432]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	091b      	lsrs	r3, r3, #4
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
       ||
 800349e:	429a      	cmp	r2, r3
 80034a0:	d047      	beq.n	8003532 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	73fb      	strb	r3, [r7, #15]
 80034a6:	e044      	b.n	8003532 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	d018      	beq.n	80034e2 <RCCEx_PLLSAI1_Config+0x86>
 80034b0:	2b03      	cmp	r3, #3
 80034b2:	d825      	bhi.n	8003500 <RCCEx_PLLSAI1_Config+0xa4>
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d002      	beq.n	80034be <RCCEx_PLLSAI1_Config+0x62>
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d009      	beq.n	80034d0 <RCCEx_PLLSAI1_Config+0x74>
 80034bc:	e020      	b.n	8003500 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034be:	4b60      	ldr	r3, [pc, #384]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d11d      	bne.n	8003506 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034ce:	e01a      	b.n	8003506 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034d0:	4b5b      	ldr	r3, [pc, #364]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d116      	bne.n	800350a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034e0:	e013      	b.n	800350a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034e2:	4b57      	ldr	r3, [pc, #348]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10f      	bne.n	800350e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034ee:	4b54      	ldr	r3, [pc, #336]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d109      	bne.n	800350e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034fe:	e006      	b.n	800350e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	73fb      	strb	r3, [r7, #15]
      break;
 8003504:	e004      	b.n	8003510 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003506:	bf00      	nop
 8003508:	e002      	b.n	8003510 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800350a:	bf00      	nop
 800350c:	e000      	b.n	8003510 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800350e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003510:	7bfb      	ldrb	r3, [r7, #15]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10d      	bne.n	8003532 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003516:	4b4a      	ldr	r3, [pc, #296]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6819      	ldr	r1, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	3b01      	subs	r3, #1
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	430b      	orrs	r3, r1
 800352c:	4944      	ldr	r1, [pc, #272]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 800352e:	4313      	orrs	r3, r2
 8003530:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003532:	7bfb      	ldrb	r3, [r7, #15]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d17d      	bne.n	8003634 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003538:	4b41      	ldr	r3, [pc, #260]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a40      	ldr	r2, [pc, #256]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 800353e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003542:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003544:	f7fd fc7e 	bl	8000e44 <HAL_GetTick>
 8003548:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800354a:	e009      	b.n	8003560 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800354c:	f7fd fc7a 	bl	8000e44 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d902      	bls.n	8003560 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	73fb      	strb	r3, [r7, #15]
        break;
 800355e:	e005      	b.n	800356c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003560:	4b37      	ldr	r3, [pc, #220]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1ef      	bne.n	800354c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800356c:	7bfb      	ldrb	r3, [r7, #15]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d160      	bne.n	8003634 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d111      	bne.n	800359c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003578:	4b31      	ldr	r3, [pc, #196]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	6892      	ldr	r2, [r2, #8]
 8003588:	0211      	lsls	r1, r2, #8
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	68d2      	ldr	r2, [r2, #12]
 800358e:	0912      	lsrs	r2, r2, #4
 8003590:	0452      	lsls	r2, r2, #17
 8003592:	430a      	orrs	r2, r1
 8003594:	492a      	ldr	r1, [pc, #168]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003596:	4313      	orrs	r3, r2
 8003598:	610b      	str	r3, [r1, #16]
 800359a:	e027      	b.n	80035ec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d112      	bne.n	80035c8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035a2:	4b27      	ldr	r3, [pc, #156]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80035aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6892      	ldr	r2, [r2, #8]
 80035b2:	0211      	lsls	r1, r2, #8
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6912      	ldr	r2, [r2, #16]
 80035b8:	0852      	lsrs	r2, r2, #1
 80035ba:	3a01      	subs	r2, #1
 80035bc:	0552      	lsls	r2, r2, #21
 80035be:	430a      	orrs	r2, r1
 80035c0:	491f      	ldr	r1, [pc, #124]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	610b      	str	r3, [r1, #16]
 80035c6:	e011      	b.n	80035ec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035c8:	4b1d      	ldr	r3, [pc, #116]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6892      	ldr	r2, [r2, #8]
 80035d8:	0211      	lsls	r1, r2, #8
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6952      	ldr	r2, [r2, #20]
 80035de:	0852      	lsrs	r2, r2, #1
 80035e0:	3a01      	subs	r2, #1
 80035e2:	0652      	lsls	r2, r2, #25
 80035e4:	430a      	orrs	r2, r1
 80035e6:	4916      	ldr	r1, [pc, #88]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80035ec:	4b14      	ldr	r3, [pc, #80]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a13      	ldr	r2, [pc, #76]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f8:	f7fd fc24 	bl	8000e44 <HAL_GetTick>
 80035fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035fe:	e009      	b.n	8003614 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003600:	f7fd fc20 	bl	8000e44 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d902      	bls.n	8003614 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	73fb      	strb	r3, [r7, #15]
          break;
 8003612:	e005      	b.n	8003620 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003614:	4b0a      	ldr	r3, [pc, #40]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0ef      	beq.n	8003600 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003620:	7bfb      	ldrb	r3, [r7, #15]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d106      	bne.n	8003634 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003626:	4b06      	ldr	r3, [pc, #24]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003628:	691a      	ldr	r2, [r3, #16]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	4904      	ldr	r1, [pc, #16]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003630:	4313      	orrs	r3, r2
 8003632:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003634:	7bfb      	ldrb	r3, [r7, #15]
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	40021000 	.word	0x40021000

08003644 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800364e:	2300      	movs	r3, #0
 8003650:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003652:	4b6a      	ldr	r3, [pc, #424]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d018      	beq.n	8003690 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800365e:	4b67      	ldr	r3, [pc, #412]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f003 0203 	and.w	r2, r3, #3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	429a      	cmp	r2, r3
 800366c:	d10d      	bne.n	800368a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
       ||
 8003672:	2b00      	cmp	r3, #0
 8003674:	d009      	beq.n	800368a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003676:	4b61      	ldr	r3, [pc, #388]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	091b      	lsrs	r3, r3, #4
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
       ||
 8003686:	429a      	cmp	r2, r3
 8003688:	d047      	beq.n	800371a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	73fb      	strb	r3, [r7, #15]
 800368e:	e044      	b.n	800371a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b03      	cmp	r3, #3
 8003696:	d018      	beq.n	80036ca <RCCEx_PLLSAI2_Config+0x86>
 8003698:	2b03      	cmp	r3, #3
 800369a:	d825      	bhi.n	80036e8 <RCCEx_PLLSAI2_Config+0xa4>
 800369c:	2b01      	cmp	r3, #1
 800369e:	d002      	beq.n	80036a6 <RCCEx_PLLSAI2_Config+0x62>
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d009      	beq.n	80036b8 <RCCEx_PLLSAI2_Config+0x74>
 80036a4:	e020      	b.n	80036e8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036a6:	4b55      	ldr	r3, [pc, #340]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d11d      	bne.n	80036ee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036b6:	e01a      	b.n	80036ee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036b8:	4b50      	ldr	r3, [pc, #320]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d116      	bne.n	80036f2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036c8:	e013      	b.n	80036f2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036ca:	4b4c      	ldr	r3, [pc, #304]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10f      	bne.n	80036f6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036d6:	4b49      	ldr	r3, [pc, #292]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d109      	bne.n	80036f6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036e6:	e006      	b.n	80036f6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	73fb      	strb	r3, [r7, #15]
      break;
 80036ec:	e004      	b.n	80036f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036ee:	bf00      	nop
 80036f0:	e002      	b.n	80036f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036f2:	bf00      	nop
 80036f4:	e000      	b.n	80036f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10d      	bne.n	800371a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036fe:	4b3f      	ldr	r3, [pc, #252]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6819      	ldr	r1, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	3b01      	subs	r3, #1
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	430b      	orrs	r3, r1
 8003714:	4939      	ldr	r1, [pc, #228]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003716:	4313      	orrs	r3, r2
 8003718:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800371a:	7bfb      	ldrb	r3, [r7, #15]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d167      	bne.n	80037f0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003720:	4b36      	ldr	r3, [pc, #216]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a35      	ldr	r2, [pc, #212]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800372a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800372c:	f7fd fb8a 	bl	8000e44 <HAL_GetTick>
 8003730:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003732:	e009      	b.n	8003748 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003734:	f7fd fb86 	bl	8000e44 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d902      	bls.n	8003748 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	73fb      	strb	r3, [r7, #15]
        break;
 8003746:	e005      	b.n	8003754 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003748:	4b2c      	ldr	r3, [pc, #176]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1ef      	bne.n	8003734 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003754:	7bfb      	ldrb	r3, [r7, #15]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d14a      	bne.n	80037f0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d111      	bne.n	8003784 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003760:	4b26      	ldr	r3, [pc, #152]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6892      	ldr	r2, [r2, #8]
 8003770:	0211      	lsls	r1, r2, #8
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	68d2      	ldr	r2, [r2, #12]
 8003776:	0912      	lsrs	r2, r2, #4
 8003778:	0452      	lsls	r2, r2, #17
 800377a:	430a      	orrs	r2, r1
 800377c:	491f      	ldr	r1, [pc, #124]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800377e:	4313      	orrs	r3, r2
 8003780:	614b      	str	r3, [r1, #20]
 8003782:	e011      	b.n	80037a8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003784:	4b1d      	ldr	r3, [pc, #116]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800378c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6892      	ldr	r2, [r2, #8]
 8003794:	0211      	lsls	r1, r2, #8
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6912      	ldr	r2, [r2, #16]
 800379a:	0852      	lsrs	r2, r2, #1
 800379c:	3a01      	subs	r2, #1
 800379e:	0652      	lsls	r2, r2, #25
 80037a0:	430a      	orrs	r2, r1
 80037a2:	4916      	ldr	r1, [pc, #88]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80037a8:	4b14      	ldr	r3, [pc, #80]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a13      	ldr	r2, [pc, #76]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b4:	f7fd fb46 	bl	8000e44 <HAL_GetTick>
 80037b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037ba:	e009      	b.n	80037d0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037bc:	f7fd fb42 	bl	8000e44 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d902      	bls.n	80037d0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	73fb      	strb	r3, [r7, #15]
          break;
 80037ce:	e005      	b.n	80037dc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037d0:	4b0a      	ldr	r3, [pc, #40]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0ef      	beq.n	80037bc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d106      	bne.n	80037f0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80037e2:	4b06      	ldr	r3, [pc, #24]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e4:	695a      	ldr	r2, [r3, #20]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	4904      	ldr	r1, [pc, #16]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	40021000 	.word	0x40021000

08003800 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8003800:	b480      	push	{r7}
 8003802:	b089      	sub	sp, #36	; 0x24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800380a:	2300      	movs	r3, #0
 800380c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800380e:	2300      	movs	r3, #0
 8003810:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800381c:	d10c      	bne.n	8003838 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800381e:	4b6e      	ldr	r3, [pc, #440]	; (80039d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003824:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003828:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003830:	d112      	bne.n	8003858 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8003832:	4b6a      	ldr	r3, [pc, #424]	; (80039dc <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8003834:	61fb      	str	r3, [r7, #28]
 8003836:	e00f      	b.n	8003858 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800383e:	d10b      	bne.n	8003858 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8003840:	4b65      	ldr	r3, [pc, #404]	; (80039d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003846:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800384a:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003852:	d101      	bne.n	8003858 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8003854:	4b61      	ldr	r3, [pc, #388]	; (80039dc <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8003856:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	2b00      	cmp	r3, #0
 800385c:	f040 80b4 	bne.w	80039c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800386a:	d003      	beq.n	8003874 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003872:	d135      	bne.n	80038e0 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8003874:	4b58      	ldr	r3, [pc, #352]	; (80039d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003880:	f040 80a1 	bne.w	80039c6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8003884:	4b54      	ldr	r3, [pc, #336]	; (80039d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 809a 	beq.w	80039c6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003892:	4b51      	ldr	r3, [pc, #324]	; (80039d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	091b      	lsrs	r3, r3, #4
 8003898:	f003 0307 	and.w	r3, r3, #7
 800389c:	3301      	adds	r3, #1
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80038a6:	4b4c      	ldr	r3, [pc, #304]	; (80039d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	0a1b      	lsrs	r3, r3, #8
 80038ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038b0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10a      	bne.n	80038ce <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80038b8:	4b47      	ldr	r3, [pc, #284]	; (80039d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d002      	beq.n	80038ca <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 80038c4:	2311      	movs	r3, #17
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	e001      	b.n	80038ce <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 80038ca:	2307      	movs	r3, #7
 80038cc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	fb03 f202 	mul.w	r2, r3, r2
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038dc:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80038de:	e072      	b.n	80039c6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d133      	bne.n	800394e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80038e6:	4b3c      	ldr	r3, [pc, #240]	; (80039d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038f2:	d169      	bne.n	80039c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80038f4:	4b38      	ldr	r3, [pc, #224]	; (80039d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d063      	beq.n	80039c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003900:	4b35      	ldr	r3, [pc, #212]	; (80039d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	091b      	lsrs	r3, r3, #4
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	3301      	adds	r3, #1
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003912:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003914:	4b30      	ldr	r3, [pc, #192]	; (80039d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	0a1b      	lsrs	r3, r3, #8
 800391a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800391e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10a      	bne.n	800393c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8003926:	4b2c      	ldr	r3, [pc, #176]	; (80039d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8003932:	2311      	movs	r3, #17
 8003934:	617b      	str	r3, [r7, #20]
 8003936:	e001      	b.n	800393c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8003938:	2307      	movs	r3, #7
 800393a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	fb03 f202 	mul.w	r2, r3, r2
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	fbb2 f3f3 	udiv	r3, r2, r3
 800394a:	61fb      	str	r3, [r7, #28]
 800394c:	e03c      	b.n	80039c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003954:	d003      	beq.n	800395e <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800395c:	d134      	bne.n	80039c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800395e:	4b1e      	ldr	r3, [pc, #120]	; (80039d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003966:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800396a:	d12d      	bne.n	80039c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 800396c:	4b1a      	ldr	r3, [pc, #104]	; (80039d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d027      	beq.n	80039c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003978:	4b17      	ldr	r3, [pc, #92]	; (80039d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	091b      	lsrs	r3, r3, #4
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	3301      	adds	r3, #1
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	fbb2 f3f3 	udiv	r3, r2, r3
 800398a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800398c:	4b12      	ldr	r3, [pc, #72]	; (80039d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	0a1b      	lsrs	r3, r3, #8
 8003992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003996:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10a      	bne.n	80039b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800399e:	4b0e      	ldr	r3, [pc, #56]	; (80039d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 80039aa:	2311      	movs	r3, #17
 80039ac:	617b      	str	r3, [r7, #20]
 80039ae:	e001      	b.n	80039b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 80039b0:	2307      	movs	r3, #7
 80039b2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	fb03 f202 	mul.w	r2, r3, r2
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c2:	61fb      	str	r3, [r7, #28]
 80039c4:	e000      	b.n	80039c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80039c6:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80039c8:	69fb      	ldr	r3, [r7, #28]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3724      	adds	r7, #36	; 0x24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	40021000 	.word	0x40021000
 80039dc:	001fff68 	.word	0x001fff68

080039e0 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
 80039ec:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d904      	bls.n	80039fe <HAL_SAI_InitProtocol+0x1e>
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	3b03      	subs	r3, #3
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d812      	bhi.n	8003a22 <HAL_SAI_InitProtocol+0x42>
 80039fc:	e008      	b.n	8003a10 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	68b9      	ldr	r1, [r7, #8]
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 f98f 	bl	8003d28 <SAI_InitI2S>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a0e:	e00b      	b.n	8003a28 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	68b9      	ldr	r1, [r7, #8]
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 fa38 	bl	8003e8c <SAI_InitPCM>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a20:	e002      	b.n	8003a28 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	75fb      	strb	r3, [r7, #23]
      break;
 8003a26:	bf00      	nop
  }

  if (status == HAL_OK)
 8003a28:	7dfb      	ldrb	r3, [r7, #23]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d104      	bne.n	8003a38 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 f808 	bl	8003a44 <HAL_SAI_Init>
 8003a34:	4603      	mov	r3, r0
 8003a36:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
	...

08003a44 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e155      	b.n	8003d02 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d106      	bne.n	8003a70 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7fc ffe0 	bl	8000a30 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 fa8d 	bl	8003f90 <SAI_Disable>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e140      	b.n	8003d02 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2202      	movs	r2, #2
 8003a84:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d00c      	beq.n	8003aaa <HAL_SAI_Init+0x66>
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d80d      	bhi.n	8003ab0 <HAL_SAI_Init+0x6c>
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <HAL_SAI_Init+0x5a>
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d003      	beq.n	8003aa4 <HAL_SAI_Init+0x60>
 8003a9c:	e008      	b.n	8003ab0 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61fb      	str	r3, [r7, #28]
      break;
 8003aa2:	e008      	b.n	8003ab6 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8003aa4:	2310      	movs	r3, #16
 8003aa6:	61fb      	str	r3, [r7, #28]
      break;
 8003aa8:	e005      	b.n	8003ab6 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8003aaa:	2320      	movs	r3, #32
 8003aac:	61fb      	str	r3, [r7, #28]
      break;
 8003aae:	e002      	b.n	8003ab6 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	61fb      	str	r3, [r7, #28]
      break;
 8003ab4:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	2b03      	cmp	r3, #3
 8003abc:	d81d      	bhi.n	8003afa <HAL_SAI_Init+0xb6>
 8003abe:	a201      	add	r2, pc, #4	; (adr r2, 8003ac4 <HAL_SAI_Init+0x80>)
 8003ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac4:	08003ad5 	.word	0x08003ad5
 8003ac8:	08003adb 	.word	0x08003adb
 8003acc:	08003ae3 	.word	0x08003ae3
 8003ad0:	08003aeb 	.word	0x08003aeb
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	617b      	str	r3, [r7, #20]
      break;
 8003ad8:	e012      	b.n	8003b00 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8003ada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ade:	617b      	str	r3, [r7, #20]
      break;
 8003ae0:	e00e      	b.n	8003b00 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8003ae2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ae6:	617b      	str	r3, [r7, #20]
      break;
 8003ae8:	e00a      	b.n	8003b00 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8003aea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003aee:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	f043 0301 	orr.w	r3, r3, #1
 8003af6:	61fb      	str	r3, [r7, #28]
      break;
 8003af8:	e002      	b.n	8003b00 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8003afa:	2300      	movs	r3, #0
 8003afc:	617b      	str	r3, [r7, #20]
      break;
 8003afe:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a81      	ldr	r2, [pc, #516]	; (8003d0c <HAL_SAI_Init+0x2c8>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d004      	beq.n	8003b14 <HAL_SAI_Init+0xd0>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a80      	ldr	r2, [pc, #512]	; (8003d10 <HAL_SAI_Init+0x2cc>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d103      	bne.n	8003b1c <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8003b14:	4a7f      	ldr	r2, [pc, #508]	; (8003d14 <HAL_SAI_Init+0x2d0>)
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	e002      	b.n	8003b22 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8003b1c:	4a7e      	ldr	r2, [pc, #504]	; (8003d18 <HAL_SAI_Init+0x2d4>)
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d041      	beq.n	8003bae <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a77      	ldr	r2, [pc, #476]	; (8003d0c <HAL_SAI_Init+0x2c8>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d004      	beq.n	8003b3e <HAL_SAI_Init+0xfa>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a75      	ldr	r2, [pc, #468]	; (8003d10 <HAL_SAI_Init+0x2cc>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d105      	bne.n	8003b4a <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8003b3e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003b42:	f7fe ff0d 	bl	8002960 <HAL_RCCEx_GetPeriphCLKFreq>
 8003b46:	6138      	str	r0, [r7, #16]
 8003b48:	e004      	b.n	8003b54 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8003b4a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003b4e:	f7fe ff07 	bl	8002960 <HAL_RCCEx_GetPeriphCLKFreq>
 8003b52:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	4613      	mov	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	4413      	add	r3, r2
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	461a      	mov	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	025b      	lsls	r3, r3, #9
 8003b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6a:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4a6b      	ldr	r2, [pc, #428]	; (8003d1c <HAL_SAI_Init+0x2d8>)
 8003b70:	fba2 2303 	umull	r2, r3, r2, r3
 8003b74:	08da      	lsrs	r2, r3, #3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8003b7a:	68f9      	ldr	r1, [r7, #12]
 8003b7c:	4b67      	ldr	r3, [pc, #412]	; (8003d1c <HAL_SAI_Init+0x2d8>)
 8003b7e:	fba3 2301 	umull	r2, r3, r3, r1
 8003b82:	08da      	lsrs	r2, r3, #3
 8003b84:	4613      	mov	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4413      	add	r3, r2
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	1aca      	subs	r2, r1, r3
 8003b8e:	2a08      	cmp	r2, #8
 8003b90:	d904      	bls.n	8003b9c <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	1c5a      	adds	r2, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba0:	2b04      	cmp	r3, #4
 8003ba2:	d104      	bne.n	8003bae <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	085a      	lsrs	r2, r3, #1
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_SAI_Init+0x17a>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d109      	bne.n	8003bd2 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d101      	bne.n	8003bca <HAL_SAI_Init+0x186>
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	e001      	b.n	8003bce <HAL_SAI_Init+0x18a>
 8003bca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bce:	61bb      	str	r3, [r7, #24]
 8003bd0:	e008      	b.n	8003be4 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d102      	bne.n	8003be0 <HAL_SAI_Init+0x19c>
 8003bda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bde:	e000      	b.n	8003be2 <HAL_SAI_Init+0x19e>
 8003be0:	2300      	movs	r3, #0
 8003be2:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6819      	ldr	r1, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	4b4c      	ldr	r3, [pc, #304]	; (8003d20 <HAL_SAI_Init+0x2dc>)
 8003bf0:	400b      	ands	r3, r1
 8003bf2:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6819      	ldr	r1, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003c08:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8003c1c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003c28:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	051b      	lsls	r3, r3, #20
 8003c30:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6812      	ldr	r2, [r2, #0]
 8003c44:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003c48:	f023 030f 	bic.w	r3, r3, #15
 8003c4c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6859      	ldr	r1, [r3, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	699a      	ldr	r2, [r3, #24]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6899      	ldr	r1, [r3, #8]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	4b2b      	ldr	r3, [pc, #172]	; (8003d24 <HAL_SAI_Init+0x2e0>)
 8003c78:	400b      	ands	r3, r1
 8003c7a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6899      	ldr	r1, [r3, #8]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8003c8c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8003c92:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8003c98:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8003ca2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68d9      	ldr	r1, [r3, #12]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	f24f 0320 	movw	r3, #61472	; 0xf020
 8003cba:	400b      	ands	r3, r1
 8003cbc:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68d9      	ldr	r1, [r3, #12]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ccc:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cd2:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8003cd4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	021b      	lsls	r3, r3, #8
 8003cde:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3720      	adds	r7, #32
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40015404 	.word	0x40015404
 8003d10:	40015424 	.word	0x40015424
 8003d14:	40015400 	.word	0x40015400
 8003d18:	40015800 	.word	0x40015800
 8003d1c:	cccccccd 	.word	0xcccccccd
 8003d20:	ff05c010 	.word	0xff05c010
 8003d24:	fff88000 	.word	0xfff88000

08003d28 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b087      	sub	sp, #28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
 8003d34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d36:	2300      	movs	r3, #0
 8003d38:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <SAI_InitI2S+0x2e>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d103      	bne.n	8003d5e <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d5c:	e002      	b.n	8003d64 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2201      	movs	r2, #1
 8003d62:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003d6a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d72:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e077      	b.n	8003e7e <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d107      	bne.n	8003da4 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003da0:	651a      	str	r2, [r3, #80]	; 0x50
 8003da2:	e006      	b.n	8003db2 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003daa:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Frame definition */
  switch (datasize)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b03      	cmp	r3, #3
 8003db6:	d84f      	bhi.n	8003e58 <SAI_InitI2S+0x130>
 8003db8:	a201      	add	r2, pc, #4	; (adr r2, 8003dc0 <SAI_InitI2S+0x98>)
 8003dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dbe:	bf00      	nop
 8003dc0:	08003dd1 	.word	0x08003dd1
 8003dc4:	08003df3 	.word	0x08003df3
 8003dc8:	08003e15 	.word	0x08003e15
 8003dcc:	08003e37 	.word	0x08003e37
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2280      	movs	r2, #128	; 0x80
 8003dd4:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	085b      	lsrs	r3, r3, #1
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	085b      	lsrs	r3, r3, #1
 8003de4:	011a      	lsls	r2, r3, #4
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2240      	movs	r2, #64	; 0x40
 8003dee:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8003df0:	e035      	b.n	8003e5e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2280      	movs	r2, #128	; 0x80
 8003df6:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	085b      	lsrs	r3, r3, #1
 8003dfc:	019a      	lsls	r2, r3, #6
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	085b      	lsrs	r3, r3, #1
 8003e06:	015a      	lsls	r2, r3, #5
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2280      	movs	r2, #128	; 0x80
 8003e10:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8003e12:	e024      	b.n	8003e5e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	22c0      	movs	r2, #192	; 0xc0
 8003e18:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	085b      	lsrs	r3, r3, #1
 8003e1e:	019a      	lsls	r2, r3, #6
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	085b      	lsrs	r3, r3, #1
 8003e28:	015a      	lsls	r2, r3, #5
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2280      	movs	r2, #128	; 0x80
 8003e32:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8003e34:	e013      	b.n	8003e5e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	22e0      	movs	r2, #224	; 0xe0
 8003e3a:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	085b      	lsrs	r3, r3, #1
 8003e40:	019a      	lsls	r2, r3, #6
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	085b      	lsrs	r3, r3, #1
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2280      	movs	r2, #128	; 0x80
 8003e54:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8003e56:	e002      	b.n	8003e5e <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e5c:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d10b      	bne.n	8003e7c <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d102      	bne.n	8003e70 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2210      	movs	r2, #16
 8003e6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d102      	bne.n	8003e7c <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2208      	movs	r2, #8
 8003e7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  return status;
 8003e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	371c      	adds	r7, #28
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop

08003e8c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b087      	sub	sp, #28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
 8003e98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <SAI_InitPCM+0x2e>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d103      	bne.n	8003ec2 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ec0:	e002      	b.n	8003ec8 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ed4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003edc:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ef0:	661a      	str	r2, [r3, #96]	; 0x60

  if (protocol == SAI_PCM_SHORT)
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2b04      	cmp	r3, #4
 8003ef6:	d103      	bne.n	8003f00 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2201      	movs	r2, #1
 8003efc:	645a      	str	r2, [r3, #68]	; 0x44
 8003efe:	e002      	b.n	8003f06 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	220d      	movs	r2, #13
 8003f04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  switch (datasize)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	d837      	bhi.n	8003f7c <SAI_InitPCM+0xf0>
 8003f0c:	a201      	add	r2, pc, #4	; (adr r2, 8003f14 <SAI_InitPCM+0x88>)
 8003f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f12:	bf00      	nop
 8003f14:	08003f25 	.word	0x08003f25
 8003f18:	08003f3b 	.word	0x08003f3b
 8003f1c:	08003f51 	.word	0x08003f51
 8003f20:	08003f67 	.word	0x08003f67
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2280      	movs	r2, #128	; 0x80
 8003f28:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	011a      	lsls	r2, r3, #4
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2240      	movs	r2, #64	; 0x40
 8003f36:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8003f38:	e023      	b.n	8003f82 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2280      	movs	r2, #128	; 0x80
 8003f3e:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	015a      	lsls	r2, r3, #5
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2280      	movs	r2, #128	; 0x80
 8003f4c:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8003f4e:	e018      	b.n	8003f82 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	22c0      	movs	r2, #192	; 0xc0
 8003f54:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	015a      	lsls	r2, r3, #5
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2280      	movs	r2, #128	; 0x80
 8003f62:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8003f64:	e00d      	b.n	8003f82 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	22e0      	movs	r2, #224	; 0xe0
 8003f6a:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	015a      	lsls	r2, r3, #5
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2280      	movs	r2, #128	; 0x80
 8003f78:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8003f7a:	e002      	b.n	8003f82 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f80:	bf00      	nop
  }

  return status;
 8003f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	371c      	adds	r7, #28
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8003f98:	4b18      	ldr	r3, [pc, #96]	; (8003ffc <SAI_Disable+0x6c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a18      	ldr	r2, [pc, #96]	; (8004000 <SAI_Disable+0x70>)
 8003f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa2:	0b1b      	lsrs	r3, r3, #12
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003fba:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10a      	bne.n	8003fd8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fc8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	72fb      	strb	r3, [r7, #11]
      break;
 8003fd6:	e009      	b.n	8003fec <SAI_Disable+0x5c>
    }
    count--;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1e7      	bne.n	8003fbc <SAI_Disable+0x2c>

  return status;
 8003fec:	7afb      	ldrb	r3, [r7, #11]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	20000000 	.word	0x20000000
 8004000:	95cbec1b 	.word	0x95cbec1b

08004004 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e095      	b.n	8004142 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	2b00      	cmp	r3, #0
 800401c:	d108      	bne.n	8004030 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004026:	d009      	beq.n	800403c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	61da      	str	r2, [r3, #28]
 800402e:	e005      	b.n	800403c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d106      	bne.n	800405c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7fc fc4c 	bl	80008f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004072:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800407c:	d902      	bls.n	8004084 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800407e:	2300      	movs	r3, #0
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	e002      	b.n	800408a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004084:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004088:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004092:	d007      	beq.n	80040a4 <HAL_SPI_Init+0xa0>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800409c:	d002      	beq.n	80040a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80040b4:	431a      	orrs	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	431a      	orrs	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	69db      	ldr	r3, [r3, #28]
 80040d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040dc:	431a      	orrs	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e6:	ea42 0103 	orr.w	r1, r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	0c1b      	lsrs	r3, r3, #16
 8004100:	f003 0204 	and.w	r2, r3, #4
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	f003 0310 	and.w	r3, r3, #16
 800410c:	431a      	orrs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004112:	f003 0308 	and.w	r3, r3, #8
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004120:	ea42 0103 	orr.w	r1, r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b082      	sub	sp, #8
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e040      	b.n	80041de <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004160:	2b00      	cmp	r3, #0
 8004162:	d106      	bne.n	8004172 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7fc fc03 	bl	8000978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2224      	movs	r2, #36	; 0x24
 8004176:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f022 0201 	bic.w	r2, r2, #1
 8004186:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	2b00      	cmp	r3, #0
 800418e:	d002      	beq.n	8004196 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 fae1 	bl	8004758 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f826 	bl	80041e8 <UART_SetConfig>
 800419c:	4603      	mov	r3, r0
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d101      	bne.n	80041a6 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e01b      	b.n	80041de <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041c4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f042 0201 	orr.w	r2, r2, #1
 80041d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 fb60 	bl	800489c <UART_CheckIdleState>
 80041dc:	4603      	mov	r3, r0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
	...

080041e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041ec:	b08a      	sub	sp, #40	; 0x28
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	431a      	orrs	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	431a      	orrs	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	69db      	ldr	r3, [r3, #28]
 800420c:	4313      	orrs	r3, r2
 800420e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	4ba4      	ldr	r3, [pc, #656]	; (80044a8 <UART_SetConfig+0x2c0>)
 8004218:	4013      	ands	r3, r2
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	6812      	ldr	r2, [r2, #0]
 800421e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004220:	430b      	orrs	r3, r1
 8004222:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a99      	ldr	r2, [pc, #612]	; (80044ac <UART_SetConfig+0x2c4>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d004      	beq.n	8004254 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004250:	4313      	orrs	r3, r2
 8004252:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004264:	430a      	orrs	r2, r1
 8004266:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a90      	ldr	r2, [pc, #576]	; (80044b0 <UART_SetConfig+0x2c8>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d126      	bne.n	80042c0 <UART_SetConfig+0xd8>
 8004272:	4b90      	ldr	r3, [pc, #576]	; (80044b4 <UART_SetConfig+0x2cc>)
 8004274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004278:	f003 0303 	and.w	r3, r3, #3
 800427c:	2b03      	cmp	r3, #3
 800427e:	d81b      	bhi.n	80042b8 <UART_SetConfig+0xd0>
 8004280:	a201      	add	r2, pc, #4	; (adr r2, 8004288 <UART_SetConfig+0xa0>)
 8004282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004286:	bf00      	nop
 8004288:	08004299 	.word	0x08004299
 800428c:	080042a9 	.word	0x080042a9
 8004290:	080042a1 	.word	0x080042a1
 8004294:	080042b1 	.word	0x080042b1
 8004298:	2301      	movs	r3, #1
 800429a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800429e:	e116      	b.n	80044ce <UART_SetConfig+0x2e6>
 80042a0:	2302      	movs	r3, #2
 80042a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042a6:	e112      	b.n	80044ce <UART_SetConfig+0x2e6>
 80042a8:	2304      	movs	r3, #4
 80042aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ae:	e10e      	b.n	80044ce <UART_SetConfig+0x2e6>
 80042b0:	2308      	movs	r3, #8
 80042b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042b6:	e10a      	b.n	80044ce <UART_SetConfig+0x2e6>
 80042b8:	2310      	movs	r3, #16
 80042ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042be:	e106      	b.n	80044ce <UART_SetConfig+0x2e6>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a7c      	ldr	r2, [pc, #496]	; (80044b8 <UART_SetConfig+0x2d0>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d138      	bne.n	800433c <UART_SetConfig+0x154>
 80042ca:	4b7a      	ldr	r3, [pc, #488]	; (80044b4 <UART_SetConfig+0x2cc>)
 80042cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d0:	f003 030c 	and.w	r3, r3, #12
 80042d4:	2b0c      	cmp	r3, #12
 80042d6:	d82d      	bhi.n	8004334 <UART_SetConfig+0x14c>
 80042d8:	a201      	add	r2, pc, #4	; (adr r2, 80042e0 <UART_SetConfig+0xf8>)
 80042da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042de:	bf00      	nop
 80042e0:	08004315 	.word	0x08004315
 80042e4:	08004335 	.word	0x08004335
 80042e8:	08004335 	.word	0x08004335
 80042ec:	08004335 	.word	0x08004335
 80042f0:	08004325 	.word	0x08004325
 80042f4:	08004335 	.word	0x08004335
 80042f8:	08004335 	.word	0x08004335
 80042fc:	08004335 	.word	0x08004335
 8004300:	0800431d 	.word	0x0800431d
 8004304:	08004335 	.word	0x08004335
 8004308:	08004335 	.word	0x08004335
 800430c:	08004335 	.word	0x08004335
 8004310:	0800432d 	.word	0x0800432d
 8004314:	2300      	movs	r3, #0
 8004316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800431a:	e0d8      	b.n	80044ce <UART_SetConfig+0x2e6>
 800431c:	2302      	movs	r3, #2
 800431e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004322:	e0d4      	b.n	80044ce <UART_SetConfig+0x2e6>
 8004324:	2304      	movs	r3, #4
 8004326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800432a:	e0d0      	b.n	80044ce <UART_SetConfig+0x2e6>
 800432c:	2308      	movs	r3, #8
 800432e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004332:	e0cc      	b.n	80044ce <UART_SetConfig+0x2e6>
 8004334:	2310      	movs	r3, #16
 8004336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800433a:	e0c8      	b.n	80044ce <UART_SetConfig+0x2e6>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a5e      	ldr	r2, [pc, #376]	; (80044bc <UART_SetConfig+0x2d4>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d125      	bne.n	8004392 <UART_SetConfig+0x1aa>
 8004346:	4b5b      	ldr	r3, [pc, #364]	; (80044b4 <UART_SetConfig+0x2cc>)
 8004348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004350:	2b30      	cmp	r3, #48	; 0x30
 8004352:	d016      	beq.n	8004382 <UART_SetConfig+0x19a>
 8004354:	2b30      	cmp	r3, #48	; 0x30
 8004356:	d818      	bhi.n	800438a <UART_SetConfig+0x1a2>
 8004358:	2b20      	cmp	r3, #32
 800435a:	d00a      	beq.n	8004372 <UART_SetConfig+0x18a>
 800435c:	2b20      	cmp	r3, #32
 800435e:	d814      	bhi.n	800438a <UART_SetConfig+0x1a2>
 8004360:	2b00      	cmp	r3, #0
 8004362:	d002      	beq.n	800436a <UART_SetConfig+0x182>
 8004364:	2b10      	cmp	r3, #16
 8004366:	d008      	beq.n	800437a <UART_SetConfig+0x192>
 8004368:	e00f      	b.n	800438a <UART_SetConfig+0x1a2>
 800436a:	2300      	movs	r3, #0
 800436c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004370:	e0ad      	b.n	80044ce <UART_SetConfig+0x2e6>
 8004372:	2302      	movs	r3, #2
 8004374:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004378:	e0a9      	b.n	80044ce <UART_SetConfig+0x2e6>
 800437a:	2304      	movs	r3, #4
 800437c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004380:	e0a5      	b.n	80044ce <UART_SetConfig+0x2e6>
 8004382:	2308      	movs	r3, #8
 8004384:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004388:	e0a1      	b.n	80044ce <UART_SetConfig+0x2e6>
 800438a:	2310      	movs	r3, #16
 800438c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004390:	e09d      	b.n	80044ce <UART_SetConfig+0x2e6>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a4a      	ldr	r2, [pc, #296]	; (80044c0 <UART_SetConfig+0x2d8>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d125      	bne.n	80043e8 <UART_SetConfig+0x200>
 800439c:	4b45      	ldr	r3, [pc, #276]	; (80044b4 <UART_SetConfig+0x2cc>)
 800439e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80043a6:	2bc0      	cmp	r3, #192	; 0xc0
 80043a8:	d016      	beq.n	80043d8 <UART_SetConfig+0x1f0>
 80043aa:	2bc0      	cmp	r3, #192	; 0xc0
 80043ac:	d818      	bhi.n	80043e0 <UART_SetConfig+0x1f8>
 80043ae:	2b80      	cmp	r3, #128	; 0x80
 80043b0:	d00a      	beq.n	80043c8 <UART_SetConfig+0x1e0>
 80043b2:	2b80      	cmp	r3, #128	; 0x80
 80043b4:	d814      	bhi.n	80043e0 <UART_SetConfig+0x1f8>
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d002      	beq.n	80043c0 <UART_SetConfig+0x1d8>
 80043ba:	2b40      	cmp	r3, #64	; 0x40
 80043bc:	d008      	beq.n	80043d0 <UART_SetConfig+0x1e8>
 80043be:	e00f      	b.n	80043e0 <UART_SetConfig+0x1f8>
 80043c0:	2300      	movs	r3, #0
 80043c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043c6:	e082      	b.n	80044ce <UART_SetConfig+0x2e6>
 80043c8:	2302      	movs	r3, #2
 80043ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ce:	e07e      	b.n	80044ce <UART_SetConfig+0x2e6>
 80043d0:	2304      	movs	r3, #4
 80043d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043d6:	e07a      	b.n	80044ce <UART_SetConfig+0x2e6>
 80043d8:	2308      	movs	r3, #8
 80043da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043de:	e076      	b.n	80044ce <UART_SetConfig+0x2e6>
 80043e0:	2310      	movs	r3, #16
 80043e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043e6:	e072      	b.n	80044ce <UART_SetConfig+0x2e6>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a35      	ldr	r2, [pc, #212]	; (80044c4 <UART_SetConfig+0x2dc>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d12a      	bne.n	8004448 <UART_SetConfig+0x260>
 80043f2:	4b30      	ldr	r3, [pc, #192]	; (80044b4 <UART_SetConfig+0x2cc>)
 80043f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004400:	d01a      	beq.n	8004438 <UART_SetConfig+0x250>
 8004402:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004406:	d81b      	bhi.n	8004440 <UART_SetConfig+0x258>
 8004408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800440c:	d00c      	beq.n	8004428 <UART_SetConfig+0x240>
 800440e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004412:	d815      	bhi.n	8004440 <UART_SetConfig+0x258>
 8004414:	2b00      	cmp	r3, #0
 8004416:	d003      	beq.n	8004420 <UART_SetConfig+0x238>
 8004418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800441c:	d008      	beq.n	8004430 <UART_SetConfig+0x248>
 800441e:	e00f      	b.n	8004440 <UART_SetConfig+0x258>
 8004420:	2300      	movs	r3, #0
 8004422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004426:	e052      	b.n	80044ce <UART_SetConfig+0x2e6>
 8004428:	2302      	movs	r3, #2
 800442a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800442e:	e04e      	b.n	80044ce <UART_SetConfig+0x2e6>
 8004430:	2304      	movs	r3, #4
 8004432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004436:	e04a      	b.n	80044ce <UART_SetConfig+0x2e6>
 8004438:	2308      	movs	r3, #8
 800443a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800443e:	e046      	b.n	80044ce <UART_SetConfig+0x2e6>
 8004440:	2310      	movs	r3, #16
 8004442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004446:	e042      	b.n	80044ce <UART_SetConfig+0x2e6>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a17      	ldr	r2, [pc, #92]	; (80044ac <UART_SetConfig+0x2c4>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d13a      	bne.n	80044c8 <UART_SetConfig+0x2e0>
 8004452:	4b18      	ldr	r3, [pc, #96]	; (80044b4 <UART_SetConfig+0x2cc>)
 8004454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004458:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800445c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004460:	d01a      	beq.n	8004498 <UART_SetConfig+0x2b0>
 8004462:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004466:	d81b      	bhi.n	80044a0 <UART_SetConfig+0x2b8>
 8004468:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800446c:	d00c      	beq.n	8004488 <UART_SetConfig+0x2a0>
 800446e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004472:	d815      	bhi.n	80044a0 <UART_SetConfig+0x2b8>
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <UART_SetConfig+0x298>
 8004478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800447c:	d008      	beq.n	8004490 <UART_SetConfig+0x2a8>
 800447e:	e00f      	b.n	80044a0 <UART_SetConfig+0x2b8>
 8004480:	2300      	movs	r3, #0
 8004482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004486:	e022      	b.n	80044ce <UART_SetConfig+0x2e6>
 8004488:	2302      	movs	r3, #2
 800448a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800448e:	e01e      	b.n	80044ce <UART_SetConfig+0x2e6>
 8004490:	2304      	movs	r3, #4
 8004492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004496:	e01a      	b.n	80044ce <UART_SetConfig+0x2e6>
 8004498:	2308      	movs	r3, #8
 800449a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800449e:	e016      	b.n	80044ce <UART_SetConfig+0x2e6>
 80044a0:	2310      	movs	r3, #16
 80044a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044a6:	e012      	b.n	80044ce <UART_SetConfig+0x2e6>
 80044a8:	efff69f3 	.word	0xefff69f3
 80044ac:	40008000 	.word	0x40008000
 80044b0:	40013800 	.word	0x40013800
 80044b4:	40021000 	.word	0x40021000
 80044b8:	40004400 	.word	0x40004400
 80044bc:	40004800 	.word	0x40004800
 80044c0:	40004c00 	.word	0x40004c00
 80044c4:	40005000 	.word	0x40005000
 80044c8:	2310      	movs	r3, #16
 80044ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a9f      	ldr	r2, [pc, #636]	; (8004750 <UART_SetConfig+0x568>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d17a      	bne.n	80045ce <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044dc:	2b08      	cmp	r3, #8
 80044de:	d824      	bhi.n	800452a <UART_SetConfig+0x342>
 80044e0:	a201      	add	r2, pc, #4	; (adr r2, 80044e8 <UART_SetConfig+0x300>)
 80044e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e6:	bf00      	nop
 80044e8:	0800450d 	.word	0x0800450d
 80044ec:	0800452b 	.word	0x0800452b
 80044f0:	08004515 	.word	0x08004515
 80044f4:	0800452b 	.word	0x0800452b
 80044f8:	0800451b 	.word	0x0800451b
 80044fc:	0800452b 	.word	0x0800452b
 8004500:	0800452b 	.word	0x0800452b
 8004504:	0800452b 	.word	0x0800452b
 8004508:	08004523 	.word	0x08004523
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800450c:	f7fd feb2 	bl	8002274 <HAL_RCC_GetPCLK1Freq>
 8004510:	61f8      	str	r0, [r7, #28]
        break;
 8004512:	e010      	b.n	8004536 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004514:	4b8f      	ldr	r3, [pc, #572]	; (8004754 <UART_SetConfig+0x56c>)
 8004516:	61fb      	str	r3, [r7, #28]
        break;
 8004518:	e00d      	b.n	8004536 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800451a:	f7fd fe13 	bl	8002144 <HAL_RCC_GetSysClockFreq>
 800451e:	61f8      	str	r0, [r7, #28]
        break;
 8004520:	e009      	b.n	8004536 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004526:	61fb      	str	r3, [r7, #28]
        break;
 8004528:	e005      	b.n	8004536 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800452a:	2300      	movs	r3, #0
 800452c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004534:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 80fb 	beq.w	8004734 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	4613      	mov	r3, r2
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	4413      	add	r3, r2
 8004548:	69fa      	ldr	r2, [r7, #28]
 800454a:	429a      	cmp	r2, r3
 800454c:	d305      	bcc.n	800455a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004554:	69fa      	ldr	r2, [r7, #28]
 8004556:	429a      	cmp	r2, r3
 8004558:	d903      	bls.n	8004562 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004560:	e0e8      	b.n	8004734 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	2200      	movs	r2, #0
 8004566:	461c      	mov	r4, r3
 8004568:	4615      	mov	r5, r2
 800456a:	f04f 0200 	mov.w	r2, #0
 800456e:	f04f 0300 	mov.w	r3, #0
 8004572:	022b      	lsls	r3, r5, #8
 8004574:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004578:	0222      	lsls	r2, r4, #8
 800457a:	68f9      	ldr	r1, [r7, #12]
 800457c:	6849      	ldr	r1, [r1, #4]
 800457e:	0849      	lsrs	r1, r1, #1
 8004580:	2000      	movs	r0, #0
 8004582:	4688      	mov	r8, r1
 8004584:	4681      	mov	r9, r0
 8004586:	eb12 0a08 	adds.w	sl, r2, r8
 800458a:	eb43 0b09 	adc.w	fp, r3, r9
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	603b      	str	r3, [r7, #0]
 8004596:	607a      	str	r2, [r7, #4]
 8004598:	e9d7 2300 	ldrd	r2, r3, [r7]
 800459c:	4650      	mov	r0, sl
 800459e:	4659      	mov	r1, fp
 80045a0:	f7fb fe12 	bl	80001c8 <__aeabi_uldivmod>
 80045a4:	4602      	mov	r2, r0
 80045a6:	460b      	mov	r3, r1
 80045a8:	4613      	mov	r3, r2
 80045aa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045b2:	d308      	bcc.n	80045c6 <UART_SetConfig+0x3de>
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ba:	d204      	bcs.n	80045c6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	60da      	str	r2, [r3, #12]
 80045c4:	e0b6      	b.n	8004734 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80045cc:	e0b2      	b.n	8004734 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045d6:	d15e      	bne.n	8004696 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80045d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045dc:	2b08      	cmp	r3, #8
 80045de:	d828      	bhi.n	8004632 <UART_SetConfig+0x44a>
 80045e0:	a201      	add	r2, pc, #4	; (adr r2, 80045e8 <UART_SetConfig+0x400>)
 80045e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e6:	bf00      	nop
 80045e8:	0800460d 	.word	0x0800460d
 80045ec:	08004615 	.word	0x08004615
 80045f0:	0800461d 	.word	0x0800461d
 80045f4:	08004633 	.word	0x08004633
 80045f8:	08004623 	.word	0x08004623
 80045fc:	08004633 	.word	0x08004633
 8004600:	08004633 	.word	0x08004633
 8004604:	08004633 	.word	0x08004633
 8004608:	0800462b 	.word	0x0800462b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800460c:	f7fd fe32 	bl	8002274 <HAL_RCC_GetPCLK1Freq>
 8004610:	61f8      	str	r0, [r7, #28]
        break;
 8004612:	e014      	b.n	800463e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004614:	f7fd fe44 	bl	80022a0 <HAL_RCC_GetPCLK2Freq>
 8004618:	61f8      	str	r0, [r7, #28]
        break;
 800461a:	e010      	b.n	800463e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800461c:	4b4d      	ldr	r3, [pc, #308]	; (8004754 <UART_SetConfig+0x56c>)
 800461e:	61fb      	str	r3, [r7, #28]
        break;
 8004620:	e00d      	b.n	800463e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004622:	f7fd fd8f 	bl	8002144 <HAL_RCC_GetSysClockFreq>
 8004626:	61f8      	str	r0, [r7, #28]
        break;
 8004628:	e009      	b.n	800463e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800462a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800462e:	61fb      	str	r3, [r7, #28]
        break;
 8004630:	e005      	b.n	800463e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800463c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d077      	beq.n	8004734 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	005a      	lsls	r2, r3, #1
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	085b      	lsrs	r3, r3, #1
 800464e:	441a      	add	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	fbb2 f3f3 	udiv	r3, r2, r3
 8004658:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	2b0f      	cmp	r3, #15
 800465e:	d916      	bls.n	800468e <UART_SetConfig+0x4a6>
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004666:	d212      	bcs.n	800468e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	b29b      	uxth	r3, r3
 800466c:	f023 030f 	bic.w	r3, r3, #15
 8004670:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	085b      	lsrs	r3, r3, #1
 8004676:	b29b      	uxth	r3, r3
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	b29a      	uxth	r2, r3
 800467e:	8afb      	ldrh	r3, [r7, #22]
 8004680:	4313      	orrs	r3, r2
 8004682:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	8afa      	ldrh	r2, [r7, #22]
 800468a:	60da      	str	r2, [r3, #12]
 800468c:	e052      	b.n	8004734 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004694:	e04e      	b.n	8004734 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004696:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800469a:	2b08      	cmp	r3, #8
 800469c:	d827      	bhi.n	80046ee <UART_SetConfig+0x506>
 800469e:	a201      	add	r2, pc, #4	; (adr r2, 80046a4 <UART_SetConfig+0x4bc>)
 80046a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a4:	080046c9 	.word	0x080046c9
 80046a8:	080046d1 	.word	0x080046d1
 80046ac:	080046d9 	.word	0x080046d9
 80046b0:	080046ef 	.word	0x080046ef
 80046b4:	080046df 	.word	0x080046df
 80046b8:	080046ef 	.word	0x080046ef
 80046bc:	080046ef 	.word	0x080046ef
 80046c0:	080046ef 	.word	0x080046ef
 80046c4:	080046e7 	.word	0x080046e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046c8:	f7fd fdd4 	bl	8002274 <HAL_RCC_GetPCLK1Freq>
 80046cc:	61f8      	str	r0, [r7, #28]
        break;
 80046ce:	e014      	b.n	80046fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046d0:	f7fd fde6 	bl	80022a0 <HAL_RCC_GetPCLK2Freq>
 80046d4:	61f8      	str	r0, [r7, #28]
        break;
 80046d6:	e010      	b.n	80046fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046d8:	4b1e      	ldr	r3, [pc, #120]	; (8004754 <UART_SetConfig+0x56c>)
 80046da:	61fb      	str	r3, [r7, #28]
        break;
 80046dc:	e00d      	b.n	80046fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046de:	f7fd fd31 	bl	8002144 <HAL_RCC_GetSysClockFreq>
 80046e2:	61f8      	str	r0, [r7, #28]
        break;
 80046e4:	e009      	b.n	80046fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046ea:	61fb      	str	r3, [r7, #28]
        break;
 80046ec:	e005      	b.n	80046fa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80046ee:	2300      	movs	r3, #0
 80046f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80046f8:	bf00      	nop
    }

    if (pclk != 0U)
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d019      	beq.n	8004734 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	085a      	lsrs	r2, r3, #1
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	441a      	add	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004712:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	2b0f      	cmp	r3, #15
 8004718:	d909      	bls.n	800472e <UART_SetConfig+0x546>
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004720:	d205      	bcs.n	800472e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	b29a      	uxth	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	60da      	str	r2, [r3, #12]
 800472c:	e002      	b.n	8004734 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004740:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004744:	4618      	mov	r0, r3
 8004746:	3728      	adds	r7, #40	; 0x28
 8004748:	46bd      	mov	sp, r7
 800474a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800474e:	bf00      	nop
 8004750:	40008000 	.word	0x40008000
 8004754:	00f42400 	.word	0x00f42400

08004758 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	f003 0308 	and.w	r3, r3, #8
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00a      	beq.n	8004782 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00a      	beq.n	80047a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00a      	beq.n	80047c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	f003 0304 	and.w	r3, r3, #4
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00a      	beq.n	80047e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	430a      	orrs	r2, r1
 80047e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	f003 0310 	and.w	r3, r3, #16
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00a      	beq.n	800480a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	f003 0320 	and.w	r3, r3, #32
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00a      	beq.n	800482c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004834:	2b00      	cmp	r3, #0
 8004836:	d01a      	beq.n	800486e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004856:	d10a      	bne.n	800486e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	605a      	str	r2, [r3, #4]
  }
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b098      	sub	sp, #96	; 0x60
 80048a0:	af02      	add	r7, sp, #8
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048ac:	f7fc faca 	bl	8000e44 <HAL_GetTick>
 80048b0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0308 	and.w	r3, r3, #8
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d12e      	bne.n	800491e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048c4:	9300      	str	r3, [sp, #0]
 80048c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048c8:	2200      	movs	r2, #0
 80048ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f88c 	bl	80049ec <UART_WaitOnFlagUntilTimeout>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d021      	beq.n	800491e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e2:	e853 3f00 	ldrex	r3, [r3]
 80048e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048ee:	653b      	str	r3, [r7, #80]	; 0x50
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	461a      	mov	r2, r3
 80048f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048f8:	647b      	str	r3, [r7, #68]	; 0x44
 80048fa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004900:	e841 2300 	strex	r3, r2, [r1]
 8004904:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1e6      	bne.n	80048da <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2220      	movs	r2, #32
 8004910:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e062      	b.n	80049e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b04      	cmp	r3, #4
 800492a:	d149      	bne.n	80049c0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800492c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004934:	2200      	movs	r2, #0
 8004936:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f856 	bl	80049ec <UART_WaitOnFlagUntilTimeout>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d03c      	beq.n	80049c0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494e:	e853 3f00 	ldrex	r3, [r3]
 8004952:	623b      	str	r3, [r7, #32]
   return(result);
 8004954:	6a3b      	ldr	r3, [r7, #32]
 8004956:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800495a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	461a      	mov	r2, r3
 8004962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004964:	633b      	str	r3, [r7, #48]	; 0x30
 8004966:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004968:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800496a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800496c:	e841 2300 	strex	r3, r2, [r1]
 8004970:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1e6      	bne.n	8004946 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	3308      	adds	r3, #8
 800497e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	e853 3f00 	ldrex	r3, [r3]
 8004986:	60fb      	str	r3, [r7, #12]
   return(result);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f023 0301 	bic.w	r3, r3, #1
 800498e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	3308      	adds	r3, #8
 8004996:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004998:	61fa      	str	r2, [r7, #28]
 800499a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499c:	69b9      	ldr	r1, [r7, #24]
 800499e:	69fa      	ldr	r2, [r7, #28]
 80049a0:	e841 2300 	strex	r3, r2, [r1]
 80049a4:	617b      	str	r3, [r7, #20]
   return(result);
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1e5      	bne.n	8004978 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e011      	b.n	80049e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2220      	movs	r2, #32
 80049c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2220      	movs	r2, #32
 80049ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3758      	adds	r7, #88	; 0x58
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	603b      	str	r3, [r7, #0]
 80049f8:	4613      	mov	r3, r2
 80049fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049fc:	e049      	b.n	8004a92 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a04:	d045      	beq.n	8004a92 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a06:	f7fc fa1d 	bl	8000e44 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d302      	bcc.n	8004a1c <UART_WaitOnFlagUntilTimeout+0x30>
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e048      	b.n	8004ab2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0304 	and.w	r3, r3, #4
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d031      	beq.n	8004a92 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	d110      	bne.n	8004a5e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2208      	movs	r2, #8
 8004a42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f000 f838 	bl	8004aba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2208      	movs	r2, #8
 8004a4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e029      	b.n	8004ab2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	69db      	ldr	r3, [r3, #28]
 8004a64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a6c:	d111      	bne.n	8004a92 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 f81e 	bl	8004aba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2220      	movs	r2, #32
 8004a82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e00f      	b.n	8004ab2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	69da      	ldr	r2, [r3, #28]
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	bf0c      	ite	eq
 8004aa2:	2301      	moveq	r3, #1
 8004aa4:	2300      	movne	r3, #0
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	79fb      	ldrb	r3, [r7, #7]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d0a6      	beq.n	80049fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b095      	sub	sp, #84	; 0x54
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aca:	e853 3f00 	ldrex	r3, [r3]
 8004ace:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	461a      	mov	r2, r3
 8004ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ae0:	643b      	str	r3, [r7, #64]	; 0x40
 8004ae2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ae6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ae8:	e841 2300 	strex	r3, r2, [r1]
 8004aec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1e6      	bne.n	8004ac2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3308      	adds	r3, #8
 8004afa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afc:	6a3b      	ldr	r3, [r7, #32]
 8004afe:	e853 3f00 	ldrex	r3, [r3]
 8004b02:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	f023 0301 	bic.w	r3, r3, #1
 8004b0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	3308      	adds	r3, #8
 8004b12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b1c:	e841 2300 	strex	r3, r2, [r1]
 8004b20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1e5      	bne.n	8004af4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d118      	bne.n	8004b62 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	e853 3f00 	ldrex	r3, [r3]
 8004b3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	f023 0310 	bic.w	r3, r3, #16
 8004b44:	647b      	str	r3, [r7, #68]	; 0x44
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b4e:	61bb      	str	r3, [r7, #24]
 8004b50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b52:	6979      	ldr	r1, [r7, #20]
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	e841 2300 	strex	r3, r2, [r1]
 8004b5a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1e6      	bne.n	8004b30 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2220      	movs	r2, #32
 8004b66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004b76:	bf00      	nop
 8004b78:	3754      	adds	r7, #84	; 0x54
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <memset>:
 8004b82:	4402      	add	r2, r0
 8004b84:	4603      	mov	r3, r0
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d100      	bne.n	8004b8c <memset+0xa>
 8004b8a:	4770      	bx	lr
 8004b8c:	f803 1b01 	strb.w	r1, [r3], #1
 8004b90:	e7f9      	b.n	8004b86 <memset+0x4>
	...

08004b94 <__libc_init_array>:
 8004b94:	b570      	push	{r4, r5, r6, lr}
 8004b96:	4d0d      	ldr	r5, [pc, #52]	; (8004bcc <__libc_init_array+0x38>)
 8004b98:	4c0d      	ldr	r4, [pc, #52]	; (8004bd0 <__libc_init_array+0x3c>)
 8004b9a:	1b64      	subs	r4, r4, r5
 8004b9c:	10a4      	asrs	r4, r4, #2
 8004b9e:	2600      	movs	r6, #0
 8004ba0:	42a6      	cmp	r6, r4
 8004ba2:	d109      	bne.n	8004bb8 <__libc_init_array+0x24>
 8004ba4:	4d0b      	ldr	r5, [pc, #44]	; (8004bd4 <__libc_init_array+0x40>)
 8004ba6:	4c0c      	ldr	r4, [pc, #48]	; (8004bd8 <__libc_init_array+0x44>)
 8004ba8:	f000 f818 	bl	8004bdc <_init>
 8004bac:	1b64      	subs	r4, r4, r5
 8004bae:	10a4      	asrs	r4, r4, #2
 8004bb0:	2600      	movs	r6, #0
 8004bb2:	42a6      	cmp	r6, r4
 8004bb4:	d105      	bne.n	8004bc2 <__libc_init_array+0x2e>
 8004bb6:	bd70      	pop	{r4, r5, r6, pc}
 8004bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bbc:	4798      	blx	r3
 8004bbe:	3601      	adds	r6, #1
 8004bc0:	e7ee      	b.n	8004ba0 <__libc_init_array+0xc>
 8004bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bc6:	4798      	blx	r3
 8004bc8:	3601      	adds	r6, #1
 8004bca:	e7f2      	b.n	8004bb2 <__libc_init_array+0x1e>
 8004bcc:	08004c44 	.word	0x08004c44
 8004bd0:	08004c44 	.word	0x08004c44
 8004bd4:	08004c44 	.word	0x08004c44
 8004bd8:	08004c48 	.word	0x08004c48

08004bdc <_init>:
 8004bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bde:	bf00      	nop
 8004be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004be2:	bc08      	pop	{r3}
 8004be4:	469e      	mov	lr, r3
 8004be6:	4770      	bx	lr

08004be8 <_fini>:
 8004be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bea:	bf00      	nop
 8004bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bee:	bc08      	pop	{r3}
 8004bf0:	469e      	mov	lr, r3
 8004bf2:	4770      	bx	lr
