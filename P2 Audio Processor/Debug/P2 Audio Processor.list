
P2 Audio Processor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005768  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080058f8  080058f8  000158f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059e8  080059e8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080059e8  080059e8  000159e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059f0  080059f0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059f0  080059f0  000159f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059f4  080059f4  000159f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080059f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012c8  2000005c  08005a54  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001324  08005a54  00021324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d4a3  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002008  00000000  00000000  0002d572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bb0  00000000  00000000  0002f580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000900  00000000  00000000  00030130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002644c  00000000  00000000  00030a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e1a9  00000000  00000000  00056e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea615  00000000  00000000  00065025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000034bc  00000000  00000000  0014f63c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00152af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080058e0 	.word	0x080058e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080058e0 	.word	0x080058e0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_SAI_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Callback function for completed DMA transfer
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
//
//    DebugPrint("CpltCallback - DMA Counter After Swap: %lu\n",
//                __HAL_DMA_GET_COUNTER(&hdma_sai2_a));

    // Start receiving into the new currentBuffer
    HAL_SAI_Receive_DMA(&hsai_BlockA2, (uint8_t*)audioBuffer1, AUDIO_BUFFER_SIZE);
 8000584:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000588:	4906      	ldr	r1, [pc, #24]	; (80005a4 <HAL_SAI_RxCpltCallback+0x28>)
 800058a:	4807      	ldr	r0, [pc, #28]	; (80005a8 <HAL_SAI_RxCpltCallback+0x2c>)
 800058c:	f003 fc68 	bl	8003e60 <HAL_SAI_Receive_DMA>
    //PrintDMAandSAIState();

    // Signal or start processing data in processingBuffer
    ProcessAudioData(audioBuffer1, AUDIO_BUFFER_SIZE);
 8000590:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <HAL_SAI_RxCpltCallback+0x28>)
 8000596:	f000 f813 	bl	80005c0 <ProcessAudioData>
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000078 	.word	0x20000078
 80005a8:	2000107c 	.word	0x2000107c

080005ac <HAL_SAI_RxHalfCpltCallback>:

// Callback function for half completed DMA transfer
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
//
//	DebugPrint("HalfCpltCallback - DMA Counter: %lu\n",
//	               __HAL_DMA_GET_COUNTER(&hdma_sai2_a));
//
//	PrintDMAandSAIState();
}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <ProcessAudioData>:
//	           snprintf(uartBuffer, sizeof(uartBuffer), "Sample %d: %lu\r\n", i, buffer[i]);
//	           TransmitDataOverUART(uartBuffer);
//	       }
//}

void ProcessAudioData(uint32_t* buffer, uint32_t size) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	; 0x50
 80005c4:	af02      	add	r7, sp, #8
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < size; ++i) {
 80005ca:	2300      	movs	r3, #0
 80005cc:	647b      	str	r3, [r7, #68]	; 0x44
 80005ce:	e023      	b.n	8000618 <ProcessAudioData+0x58>
        // Assuming left-aligned data
        int32_t sample = buffer[i] >> 8; // Shift right to align 24-bit data
 80005d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	4413      	add	r3, r2
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	0a1b      	lsrs	r3, r3, #8
 80005dc:	643b      	str	r3, [r7, #64]	; 0x40

        // If the data is signed, perform sign extension for negative values
        if (sample & 0x00800000) { // Check if the 24th bit (sign bit) is set
 80005de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80005e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d003      	beq.n	80005f0 <ProcessAudioData+0x30>
            sample |= 0xFF000000; // Extend the sign to 32 bits
 80005e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80005ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80005ee:	643b      	str	r3, [r7, #64]	; 0x40
        }

        // Process the sample as required
        // Example: Print the first few samples
        if (i < 10) {
 80005f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80005f2:	2b09      	cmp	r3, #9
 80005f4:	d80d      	bhi.n	8000612 <ProcessAudioData+0x52>
            char uartBuffer[50];
            snprintf(uartBuffer, sizeof(uartBuffer), "Sample %d: %ld\r\n", i, sample);
 80005f6:	f107 000c 	add.w	r0, r7, #12
 80005fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000600:	4a0a      	ldr	r2, [pc, #40]	; (800062c <ProcessAudioData+0x6c>)
 8000602:	2132      	movs	r1, #50	; 0x32
 8000604:	f004 fc7a 	bl	8004efc <sniprintf>
            TransmitDataOverUART(uartBuffer);
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	4618      	mov	r0, r3
 800060e:	f000 f82b 	bl	8000668 <TransmitDataOverUART>
    for (uint32_t i = 0; i < size; ++i) {
 8000612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000614:	3301      	adds	r3, #1
 8000616:	647b      	str	r3, [r7, #68]	; 0x44
 8000618:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	429a      	cmp	r2, r3
 800061e:	d3d7      	bcc.n	80005d0 <ProcessAudioData+0x10>
        }

        // Further processing can be added here
    }
}
 8000620:	bf00      	nop
 8000622:	bf00      	nop
 8000624:	3748      	adds	r7, #72	; 0x48
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	080058f8 	.word	0x080058f8

08000630 <DebugPrint>:


void DebugPrint(const char* format, ...) {
 8000630:	b40f      	push	{r0, r1, r2, r3}
 8000632:	b580      	push	{r7, lr}
 8000634:	b0a2      	sub	sp, #136	; 0x88
 8000636:	af00      	add	r7, sp, #0
    char debugBuffer[128];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 8000638:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800063c:	607b      	str	r3, [r7, #4]
    vsnprintf(debugBuffer, sizeof(debugBuffer), format, args);
 800063e:	f107 0008 	add.w	r0, r7, #8
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000648:	2180      	movs	r1, #128	; 0x80
 800064a:	f004 fcb7 	bl	8004fbc <vsniprintf>
    va_end(args);

    TransmitDataOverUART(debugBuffer);
 800064e:	f107 0308 	add.w	r3, r7, #8
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f808 	bl	8000668 <TransmitDataOverUART>
}
 8000658:	bf00      	nop
 800065a:	3788      	adds	r7, #136	; 0x88
 800065c:	46bd      	mov	sp, r7
 800065e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000662:	b004      	add	sp, #16
 8000664:	4770      	bx	lr
	...

08000668 <TransmitDataOverUART>:

void TransmitDataOverUART(const char* data)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)data, strlen(data), 1000);
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f7ff fdad 	bl	80001d0 <strlen>
 8000676:	4603      	mov	r3, r0
 8000678:	b29a      	uxth	r2, r3
 800067a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067e:	6879      	ldr	r1, [r7, #4]
 8000680:	4803      	ldr	r0, [pc, #12]	; (8000690 <TransmitDataOverUART+0x28>)
 8000682:	f003 fee3 	bl	800444c <HAL_UART_Transmit>
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20001148 	.word	0x20001148

08000694 <HAL_SAI_ErrorCallback>:
        TransmitDataOverUART(temp);
    }
    TransmitDataOverUART("\n");
}

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
    uint32_t saiError = HAL_SAI_GetError(hsai);
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f003 fc6d 	bl	8003f7c <HAL_SAI_GetError>
 80006a2:	60f8      	str	r0, [r7, #12]
    DebugPrint("SAI Error: %lu\n", saiError);
 80006a4:	68f9      	ldr	r1, [r7, #12]
 80006a6:	4803      	ldr	r0, [pc, #12]	; (80006b4 <HAL_SAI_ErrorCallback+0x20>)
 80006a8:	f7ff ffc2 	bl	8000630 <DebugPrint>
}
 80006ac:	bf00      	nop
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	0800592c 	.word	0x0800592c

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006bc:	f000 fb46 	bl	8000d4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c0:	f000 f818 	bl	80006f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c4:	f000 f922 	bl	800090c <MX_GPIO_Init>
  MX_DMA_Init();
 80006c8:	f000 f902 	bl	80008d0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80006cc:	f000 f8d0 	bl	8000870 <MX_USART2_UART_Init>
  MX_SAI2_Init();
 80006d0:	f000 f872 	bl	80007b8 <MX_SAI2_Init>
  /* USER CODE BEGIN 2 */

  currentBuffer = audioBuffer1;
 80006d4:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <main+0x30>)
 80006d6:	4a05      	ldr	r2, [pc, #20]	; (80006ec <main+0x34>)
 80006d8:	601a      	str	r2, [r3, #0]
  //processingBuffer = audioBuffer2;

  HAL_SAI_Receive_DMA(&hsai_BlockA2, (uint8_t*)audioBuffer1, AUDIO_BUFFER_SIZE);
 80006da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006de:	4903      	ldr	r1, [pc, #12]	; (80006ec <main+0x34>)
 80006e0:	4803      	ldr	r0, [pc, #12]	; (80006f0 <main+0x38>)
 80006e2:	f003 fbbd 	bl	8003e60 <HAL_SAI_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <main+0x2e>
 80006e8:	20001078 	.word	0x20001078
 80006ec:	20000078 	.word	0x20000078
 80006f0:	2000107c 	.word	0x2000107c

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b096      	sub	sp, #88	; 0x58
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	2244      	movs	r2, #68	; 0x44
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f004 fc68 	bl	8004fd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	463b      	mov	r3, r7
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000716:	f44f 7000 	mov.w	r0, #512	; 0x200
 800071a:	f001 f87d 	bl	8001818 <HAL_PWREx_ControlVoltageScaling>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000724:	f000 f958 	bl	80009d8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000728:	f001 f858 	bl	80017dc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800072c:	4b21      	ldr	r3, [pc, #132]	; (80007b4 <SystemClock_Config+0xc0>)
 800072e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000732:	4a20      	ldr	r2, [pc, #128]	; (80007b4 <SystemClock_Config+0xc0>)
 8000734:	f023 0318 	bic.w	r3, r3, #24
 8000738:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800073c:	2314      	movs	r3, #20
 800073e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000740:	2301      	movs	r3, #1
 8000742:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000744:	2301      	movs	r3, #1
 8000746:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 800074c:	23a0      	movs	r3, #160	; 0xa0
 800074e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000750:	2302      	movs	r3, #2
 8000752:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000754:	2301      	movs	r3, #1
 8000756:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000758:	2305      	movs	r3, #5
 800075a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 37;
 800075c:	2325      	movs	r3, #37	; 0x25
 800075e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV17;
 8000760:	2311      	movs	r3, #17
 8000762:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000764:	2302      	movs	r3, #2
 8000766:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000768:	2304      	movs	r3, #4
 800076a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	4618      	mov	r0, r3
 8000772:	f001 f8a7 	bl	80018c4 <HAL_RCC_OscConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800077c:	f000 f92c 	bl	80009d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000780:	230f      	movs	r3, #15
 8000782:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000784:	2303      	movs	r3, #3
 8000786:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000794:	463b      	mov	r3, r7
 8000796:	2103      	movs	r1, #3
 8000798:	4618      	mov	r0, r3
 800079a:	f001 fc6f 	bl	800207c <HAL_RCC_ClockConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007a4:	f000 f918 	bl	80009d8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007a8:	f002 fee4 	bl	8003574 <HAL_RCCEx_EnableMSIPLLMode>
}
 80007ac:	bf00      	nop
 80007ae:	3758      	adds	r7, #88	; 0x58
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40021000 	.word	0x40021000

080007b8 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80007bc:	4b28      	ldr	r3, [pc, #160]	; (8000860 <MX_SAI2_Init+0xa8>)
 80007be:	4a29      	ldr	r2, [pc, #164]	; (8000864 <MX_SAI2_Init+0xac>)
 80007c0:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_RX;
 80007c2:	4b27      	ldr	r3, [pc, #156]	; (8000860 <MX_SAI2_Init+0xa8>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80007c8:	4b25      	ldr	r3, [pc, #148]	; (8000860 <MX_SAI2_Init+0xa8>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80007ce:	4b24      	ldr	r3, [pc, #144]	; (8000860 <MX_SAI2_Init+0xa8>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80007d4:	4b22      	ldr	r3, [pc, #136]	; (8000860 <MX_SAI2_Init+0xa8>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80007da:	4b21      	ldr	r3, [pc, #132]	; (8000860 <MX_SAI2_Init+0xa8>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80007e0:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <MX_SAI2_Init+0xa8>)
 80007e2:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80007e6:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80007e8:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <MX_SAI2_Init+0xa8>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_MONOMODE;
 80007ee:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <MX_SAI2_Init+0xa8>)
 80007f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007f4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80007f6:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <MX_SAI2_Init+0xa8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 80007fc:	2302      	movs	r3, #2
 80007fe:	2203      	movs	r2, #3
 8000800:	2100      	movs	r1, #0
 8000802:	4817      	ldr	r0, [pc, #92]	; (8000860 <MX_SAI2_Init+0xa8>)
 8000804:	f003 f988 	bl	8003b18 <HAL_SAI_InitProtocol>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_SAI2_Init+0x5a>
  {
    Error_Handler();
 800080e:	f000 f8e3 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  // Configure the DMA handler for reception process
  hdma_sai2_a.Instance                 = DMA1_Channel6;
 8000812:	4b15      	ldr	r3, [pc, #84]	; (8000868 <MX_SAI2_Init+0xb0>)
 8000814:	4a15      	ldr	r2, [pc, #84]	; (800086c <MX_SAI2_Init+0xb4>)
 8000816:	601a      	str	r2, [r3, #0]
  hdma_sai2_a.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8000818:	4b13      	ldr	r3, [pc, #76]	; (8000868 <MX_SAI2_Init+0xb0>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  hdma_sai2_a.Init.PeriphInc           = DMA_PINC_DISABLE;
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_SAI2_Init+0xb0>)
 8000820:	2200      	movs	r2, #0
 8000822:	60da      	str	r2, [r3, #12]
  hdma_sai2_a.Init.MemInc              = DMA_MINC_ENABLE;
 8000824:	4b10      	ldr	r3, [pc, #64]	; (8000868 <MX_SAI2_Init+0xb0>)
 8000826:	2280      	movs	r2, #128	; 0x80
 8000828:	611a      	str	r2, [r3, #16]
  hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_SAI2_Init+0xb0>)
 800082c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000830:	615a      	str	r2, [r3, #20]
  hdma_sai2_a.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8000832:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <MX_SAI2_Init+0xb0>)
 8000834:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000838:	619a      	str	r2, [r3, #24]
  hdma_sai2_a.Init.Mode                = DMA_CIRCULAR;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_SAI2_Init+0xb0>)
 800083c:	2220      	movs	r2, #32
 800083e:	61da      	str	r2, [r3, #28]
  hdma_sai2_a.Init.Priority            = DMA_PRIORITY_HIGH;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_SAI2_Init+0xb0>)
 8000842:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000846:	621a      	str	r2, [r3, #32]

  HAL_DMA_Init(&hdma_sai2_a);
 8000848:	4807      	ldr	r0, [pc, #28]	; (8000868 <MX_SAI2_Init+0xb0>)
 800084a:	f000 fc0d 	bl	8001068 <HAL_DMA_Init>

  // Associate the initialized DMA handle to the SAI handle
  __HAL_LINKDMA(&hsai_BlockA2, hdmarx, hdma_sai2_a);
 800084e:	4b04      	ldr	r3, [pc, #16]	; (8000860 <MX_SAI2_Init+0xa8>)
 8000850:	4a05      	ldr	r2, [pc, #20]	; (8000868 <MX_SAI2_Init+0xb0>)
 8000852:	671a      	str	r2, [r3, #112]	; 0x70
 8000854:	4b04      	ldr	r3, [pc, #16]	; (8000868 <MX_SAI2_Init+0xb0>)
 8000856:	4a02      	ldr	r2, [pc, #8]	; (8000860 <MX_SAI2_Init+0xa8>)
 8000858:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE END SAI2_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	2000107c 	.word	0x2000107c
 8000864:	40015804 	.word	0x40015804
 8000868:	20001100 	.word	0x20001100
 800086c:	4002006c 	.word	0x4002006c

08000870 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 8000876:	4a15      	ldr	r2, [pc, #84]	; (80008cc <MX_USART2_UART_Init+0x5c>)
 8000878:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800087a:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 800087c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000880:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 8000896:	220c      	movs	r2, #12
 8000898:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 80008b4:	f003 fd7c 	bl	80043b0 <HAL_UART_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008be:	f000 f88b 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20001148 	.word	0x20001148
 80008cc:	40004400 	.word	0x40004400

080008d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_DMA_Init+0x38>)
 80008d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008da:	4a0b      	ldr	r2, [pc, #44]	; (8000908 <MX_DMA_Init+0x38>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6493      	str	r3, [r2, #72]	; 0x48
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_DMA_Init+0x38>)
 80008e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2100      	movs	r1, #0
 80008f2:	2010      	movs	r0, #16
 80008f4:	f000 fb81 	bl	8000ffa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80008f8:	2010      	movs	r0, #16
 80008fa:	f000 fb9a 	bl	8001032 <HAL_NVIC_EnableIRQ>

}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40021000 	.word	0x40021000

0800090c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	; 0x28
 8000910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	4b2b      	ldr	r3, [pc, #172]	; (80009d0 <MX_GPIO_Init+0xc4>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	4a2a      	ldr	r2, [pc, #168]	; (80009d0 <MX_GPIO_Init+0xc4>)
 8000928:	f043 0304 	orr.w	r3, r3, #4
 800092c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092e:	4b28      	ldr	r3, [pc, #160]	; (80009d0 <MX_GPIO_Init+0xc4>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	f003 0304 	and.w	r3, r3, #4
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093a:	4b25      	ldr	r3, [pc, #148]	; (80009d0 <MX_GPIO_Init+0xc4>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	4a24      	ldr	r2, [pc, #144]	; (80009d0 <MX_GPIO_Init+0xc4>)
 8000940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000946:	4b22      	ldr	r3, [pc, #136]	; (80009d0 <MX_GPIO_Init+0xc4>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	4b1f      	ldr	r3, [pc, #124]	; (80009d0 <MX_GPIO_Init+0xc4>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000956:	4a1e      	ldr	r2, [pc, #120]	; (80009d0 <MX_GPIO_Init+0xc4>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095e:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <MX_GPIO_Init+0xc4>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <MX_GPIO_Init+0xc4>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	4a18      	ldr	r2, [pc, #96]	; (80009d0 <MX_GPIO_Init+0xc4>)
 8000970:	f043 0302 	orr.w	r3, r3, #2
 8000974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000976:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <MX_GPIO_Init+0xc4>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2120      	movs	r1, #32
 8000986:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098a:	f000 ff0f 	bl	80017ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800098e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000994:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	480b      	ldr	r0, [pc, #44]	; (80009d4 <MX_GPIO_Init+0xc8>)
 80009a6:	f000 fd57 	bl	8001458 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009aa:	2320      	movs	r3, #32
 80009ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c4:	f000 fd48 	bl	8001458 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009c8:	bf00      	nop
 80009ca:	3728      	adds	r7, #40	; 0x28
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40021000 	.word	0x40021000
 80009d4:	48000800 	.word	0x48000800

080009d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009dc:	b672      	cpsid	i
}
 80009de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <Error_Handler+0x8>
	...

080009e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <HAL_MspInit+0x44>)
 80009ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ee:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <HAL_MspInit+0x44>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6613      	str	r3, [r2, #96]	; 0x60
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <HAL_MspInit+0x44>)
 80009f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <HAL_MspInit+0x44>)
 8000a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a06:	4a08      	ldr	r2, [pc, #32]	; (8000a28 <HAL_MspInit+0x44>)
 8000a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_MspInit+0x44>)
 8000a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	40021000 	.word	0x40021000

08000a2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b0ac      	sub	sp, #176	; 0xb0
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	2288      	movs	r2, #136	; 0x88
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f004 fac3 	bl	8004fd8 <memset>
  if(huart->Instance==USART2)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a21      	ldr	r2, [pc, #132]	; (8000adc <HAL_UART_MspInit+0xb0>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d13b      	bne.n	8000ad4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f001 fd2b 	bl	80024c4 <HAL_RCCEx_PeriphCLKConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a74:	f7ff ffb0 	bl	80009d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a78:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <HAL_UART_MspInit+0xb4>)
 8000a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7c:	4a18      	ldr	r2, [pc, #96]	; (8000ae0 <HAL_UART_MspInit+0xb4>)
 8000a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a82:	6593      	str	r3, [r2, #88]	; 0x58
 8000a84:	4b16      	ldr	r3, [pc, #88]	; (8000ae0 <HAL_UART_MspInit+0xb4>)
 8000a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a90:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <HAL_UART_MspInit+0xb4>)
 8000a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a94:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <HAL_UART_MspInit+0xb4>)
 8000a96:	f043 0301 	orr.w	r3, r3, #1
 8000a9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9c:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <HAL_UART_MspInit+0xb4>)
 8000a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aa8:	230c      	movs	r3, #12
 8000aaa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aba:	2303      	movs	r3, #3
 8000abc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ac0:	2307      	movs	r3, #7
 8000ac2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000aca:	4619      	mov	r1, r3
 8000acc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad0:	f000 fcc2 	bl	8001458 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ad4:	bf00      	nop
 8000ad6:	37b0      	adds	r7, #176	; 0xb0
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40004400 	.word	0x40004400
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_a;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b0aa      	sub	sp, #168	; 0xa8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aec:	f107 030c 	add.w	r3, r7, #12
 8000af0:	2288      	movs	r2, #136	; 0x88
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f004 fa6f 	bl	8004fd8 <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a3a      	ldr	r2, [pc, #232]	; (8000be8 <HAL_SAI_MspInit+0x104>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d16c      	bne.n	8000bde <HAL_SAI_MspInit+0xfa>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b08:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLL;
 8000b0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b0e:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b10:	f107 030c 	add.w	r3, r7, #12
 8000b14:	4618      	mov	r0, r3
 8000b16:	f001 fcd5 	bl	80024c4 <HAL_RCCEx_PeriphCLKConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <HAL_SAI_MspInit+0x40>
    {
      Error_Handler();
 8000b20:	f7ff ff5a 	bl	80009d8 <Error_Handler>
    }

    if (SAI2_client == 0)
 8000b24:	4b31      	ldr	r3, [pc, #196]	; (8000bec <HAL_SAI_MspInit+0x108>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d10b      	bne.n	8000b44 <HAL_SAI_MspInit+0x60>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000b2c:	4b30      	ldr	r3, [pc, #192]	; (8000bf0 <HAL_SAI_MspInit+0x10c>)
 8000b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b30:	4a2f      	ldr	r2, [pc, #188]	; (8000bf0 <HAL_SAI_MspInit+0x10c>)
 8000b32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b36:	6613      	str	r3, [r2, #96]	; 0x60
 8000b38:	4b2d      	ldr	r3, [pc, #180]	; (8000bf0 <HAL_SAI_MspInit+0x10c>)
 8000b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 8000b44:	4b29      	ldr	r3, [pc, #164]	; (8000bec <HAL_SAI_MspInit+0x108>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	4a28      	ldr	r2, [pc, #160]	; (8000bec <HAL_SAI_MspInit+0x108>)
 8000b4c:	6013      	str	r3, [r2, #0]
    /**SAI2_A_Block_A GPIO Configuration
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000b4e:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000b52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000b68:	230d      	movs	r3, #13
 8000b6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000b72:	4619      	mov	r1, r3
 8000b74:	481f      	ldr	r0, [pc, #124]	; (8000bf4 <HAL_SAI_MspInit+0x110>)
 8000b76:	f000 fc6f 	bl	8001458 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 8000b7a:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <HAL_SAI_MspInit+0x114>)
 8000b7c:	4a1f      	ldr	r2, [pc, #124]	; (8000bfc <HAL_SAI_MspInit+0x118>)
 8000b7e:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8000b80:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <HAL_SAI_MspInit+0x114>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b86:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <HAL_SAI_MspInit+0x114>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <HAL_SAI_MspInit+0x114>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8000b92:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <HAL_SAI_MspInit+0x114>)
 8000b94:	2280      	movs	r2, #128	; 0x80
 8000b96:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b98:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <HAL_SAI_MspInit+0x114>)
 8000b9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b9e:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ba0:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <HAL_SAI_MspInit+0x114>)
 8000ba2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ba6:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8000ba8:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <HAL_SAI_MspInit+0x114>)
 8000baa:	2220      	movs	r2, #32
 8000bac:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000bae:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <HAL_SAI_MspInit+0x114>)
 8000bb0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000bb4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8000bb6:	4810      	ldr	r0, [pc, #64]	; (8000bf8 <HAL_SAI_MspInit+0x114>)
 8000bb8:	f000 fa56 	bl	8001068 <HAL_DMA_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <HAL_SAI_MspInit+0xe2>
    {
      Error_Handler();
 8000bc2:	f7ff ff09 	bl	80009d8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a0b      	ldr	r2, [pc, #44]	; (8000bf8 <HAL_SAI_MspInit+0x114>)
 8000bca:	671a      	str	r2, [r3, #112]	; 0x70
 8000bcc:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <HAL_SAI_MspInit+0x114>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6293      	str	r3, [r2, #40]	; 0x28

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a08      	ldr	r2, [pc, #32]	; (8000bf8 <HAL_SAI_MspInit+0x114>)
 8000bd6:	66da      	str	r2, [r3, #108]	; 0x6c
 8000bd8:	4a07      	ldr	r2, [pc, #28]	; (8000bf8 <HAL_SAI_MspInit+0x114>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6293      	str	r3, [r2, #40]	; 0x28

    }
}
 8000bde:	bf00      	nop
 8000be0:	37a8      	adds	r7, #168	; 0xa8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40015804 	.word	0x40015804
 8000bec:	200011d0 	.word	0x200011d0
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	48000400 	.word	0x48000400
 8000bf8:	20001100 	.word	0x20001100
 8000bfc:	4002006c 	.word	0x4002006c

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <NMI_Handler+0x4>

08000c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <HardFault_Handler+0x4>

08000c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <MemManage_Handler+0x4>

08000c12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <BusFault_Handler+0x4>

08000c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <UsageFault_Handler+0x4>

08000c1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c4c:	f000 f8da 	bl	8000e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8000c58:	4802      	ldr	r0, [pc, #8]	; (8000c64 <DMA1_Channel6_IRQHandler+0x10>)
 8000c5a:	f000 fb1d 	bl	8001298 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20001100 	.word	0x20001100

08000c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c70:	4a14      	ldr	r2, [pc, #80]	; (8000cc4 <_sbrk+0x5c>)
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <_sbrk+0x60>)
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c7c:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <_sbrk+0x64>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d102      	bne.n	8000c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <_sbrk+0x64>)
 8000c86:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <_sbrk+0x68>)
 8000c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <_sbrk+0x64>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d207      	bcs.n	8000ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c98:	f004 f9a6 	bl	8004fe8 <__errno>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca6:	e009      	b.n	8000cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <_sbrk+0x64>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cae:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <_sbrk+0x64>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	4a05      	ldr	r2, [pc, #20]	; (8000ccc <_sbrk+0x64>)
 8000cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cba:	68fb      	ldr	r3, [r7, #12]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3718      	adds	r7, #24
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20018000 	.word	0x20018000
 8000cc8:	00000400 	.word	0x00000400
 8000ccc:	200011d4 	.word	0x200011d4
 8000cd0:	20001328 	.word	0x20001328

08000cd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <SystemInit+0x20>)
 8000cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cde:	4a05      	ldr	r2, [pc, #20]	; (8000cf4 <SystemInit+0x20>)
 8000ce0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cfc:	f7ff ffea 	bl	8000cd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d00:	480c      	ldr	r0, [pc, #48]	; (8000d34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d02:	490d      	ldr	r1, [pc, #52]	; (8000d38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d04:	4a0d      	ldr	r2, [pc, #52]	; (8000d3c <LoopForever+0xe>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d08:	e002      	b.n	8000d10 <LoopCopyDataInit>

08000d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0e:	3304      	adds	r3, #4

08000d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d14:	d3f9      	bcc.n	8000d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d16:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d18:	4c0a      	ldr	r4, [pc, #40]	; (8000d44 <LoopForever+0x16>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d1c:	e001      	b.n	8000d22 <LoopFillZerobss>

08000d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d20:	3204      	adds	r2, #4

08000d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d24:	d3fb      	bcc.n	8000d1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d26:	f004 f965 	bl	8004ff4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d2a:	f7ff fcc5 	bl	80006b8 <main>

08000d2e <LoopForever>:

LoopForever:
    b LoopForever
 8000d2e:	e7fe      	b.n	8000d2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d30:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d38:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d3c:	080059f8 	.word	0x080059f8
  ldr r2, =_sbss
 8000d40:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d44:	20001324 	.word	0x20001324

08000d48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d48:	e7fe      	b.n	8000d48 <ADC1_2_IRQHandler>
	...

08000d4c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d52:	2300      	movs	r3, #0
 8000d54:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <HAL_Init+0x3c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a0b      	ldr	r2, [pc, #44]	; (8000d88 <HAL_Init+0x3c>)
 8000d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d60:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d62:	2003      	movs	r0, #3
 8000d64:	f000 f93e 	bl	8000fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d68:	2000      	movs	r0, #0
 8000d6a:	f000 f80f 	bl	8000d8c <HAL_InitTick>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d002      	beq.n	8000d7a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	71fb      	strb	r3, [r7, #7]
 8000d78:	e001      	b.n	8000d7e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d7a:	f7ff fe33 	bl	80009e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40022000 	.word	0x40022000

08000d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d94:	2300      	movs	r3, #0
 8000d96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d98:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <HAL_InitTick+0x6c>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d023      	beq.n	8000de8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000da0:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <HAL_InitTick+0x70>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <HAL_InitTick+0x6c>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	4619      	mov	r1, r3
 8000daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 f949 	bl	800104e <HAL_SYSTICK_Config>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d10f      	bne.n	8000de2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d809      	bhi.n	8000ddc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	f000 f913 	bl	8000ffa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dd4:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <HAL_InitTick+0x74>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6013      	str	r3, [r2, #0]
 8000dda:	e007      	b.n	8000dec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	73fb      	strb	r3, [r7, #15]
 8000de0:	e004      	b.n	8000dec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	73fb      	strb	r3, [r7, #15]
 8000de6:	e001      	b.n	8000dec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000008 	.word	0x20000008
 8000dfc:	20000000 	.word	0x20000000
 8000e00:	20000004 	.word	0x20000004

08000e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_IncTick+0x20>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_IncTick+0x24>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4413      	add	r3, r2
 8000e14:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <HAL_IncTick+0x24>)
 8000e16:	6013      	str	r3, [r2, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000008 	.word	0x20000008
 8000e28:	200011d8 	.word	0x200011d8

08000e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <HAL_GetTick+0x14>)
 8000e32:	681b      	ldr	r3, [r3, #0]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	200011d8 	.word	0x200011d8

08000e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e60:	4013      	ands	r3, r2
 8000e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e76:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	60d3      	str	r3, [r2, #12]
}
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	0a1b      	lsrs	r3, r3, #8
 8000e96:	f003 0307 	and.w	r3, r3, #7
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	db0b      	blt.n	8000ed2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	f003 021f 	and.w	r2, r3, #31
 8000ec0:	4907      	ldr	r1, [pc, #28]	; (8000ee0 <__NVIC_EnableIRQ+0x38>)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	095b      	lsrs	r3, r3, #5
 8000ec8:	2001      	movs	r0, #1
 8000eca:	fa00 f202 	lsl.w	r2, r0, r2
 8000ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000e100 	.word	0xe000e100

08000ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	6039      	str	r1, [r7, #0]
 8000eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	db0a      	blt.n	8000f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	490c      	ldr	r1, [pc, #48]	; (8000f30 <__NVIC_SetPriority+0x4c>)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	0112      	lsls	r2, r2, #4
 8000f04:	b2d2      	uxtb	r2, r2
 8000f06:	440b      	add	r3, r1
 8000f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f0c:	e00a      	b.n	8000f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	4908      	ldr	r1, [pc, #32]	; (8000f34 <__NVIC_SetPriority+0x50>)
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	f003 030f 	and.w	r3, r3, #15
 8000f1a:	3b04      	subs	r3, #4
 8000f1c:	0112      	lsls	r2, r2, #4
 8000f1e:	b2d2      	uxtb	r2, r2
 8000f20:	440b      	add	r3, r1
 8000f22:	761a      	strb	r2, [r3, #24]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000e100 	.word	0xe000e100
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b089      	sub	sp, #36	; 0x24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	f1c3 0307 	rsb	r3, r3, #7
 8000f52:	2b04      	cmp	r3, #4
 8000f54:	bf28      	it	cs
 8000f56:	2304      	movcs	r3, #4
 8000f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	2b06      	cmp	r3, #6
 8000f60:	d902      	bls.n	8000f68 <NVIC_EncodePriority+0x30>
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3b03      	subs	r3, #3
 8000f66:	e000      	b.n	8000f6a <NVIC_EncodePriority+0x32>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43da      	mvns	r2, r3
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f80:	f04f 31ff 	mov.w	r1, #4294967295
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8a:	43d9      	mvns	r1, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	4313      	orrs	r3, r2
         );
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3724      	adds	r7, #36	; 0x24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
	...

08000fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb0:	d301      	bcc.n	8000fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00f      	b.n	8000fd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <SysTick_Config+0x40>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fbe:	210f      	movs	r1, #15
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc4:	f7ff ff8e 	bl	8000ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <SysTick_Config+0x40>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fce:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <SysTick_Config+0x40>)
 8000fd0:	2207      	movs	r2, #7
 8000fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	e000e010 	.word	0xe000e010

08000fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff ff29 	bl	8000e44 <__NVIC_SetPriorityGrouping>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b086      	sub	sp, #24
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
 8001006:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800100c:	f7ff ff3e 	bl	8000e8c <__NVIC_GetPriorityGrouping>
 8001010:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	68b9      	ldr	r1, [r7, #8]
 8001016:	6978      	ldr	r0, [r7, #20]
 8001018:	f7ff ff8e 	bl	8000f38 <NVIC_EncodePriority>
 800101c:	4602      	mov	r2, r0
 800101e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff5d 	bl	8000ee4 <__NVIC_SetPriority>
}
 800102a:	bf00      	nop
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	4603      	mov	r3, r0
 800103a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff31 	bl	8000ea8 <__NVIC_EnableIRQ>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ffa2 	bl	8000fa0 <SysTick_Config>
 800105c:	4603      	mov	r3, r0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e098      	b.n	80011ac <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	4b4d      	ldr	r3, [pc, #308]	; (80011b8 <HAL_DMA_Init+0x150>)
 8001082:	429a      	cmp	r2, r3
 8001084:	d80f      	bhi.n	80010a6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	4b4b      	ldr	r3, [pc, #300]	; (80011bc <HAL_DMA_Init+0x154>)
 800108e:	4413      	add	r3, r2
 8001090:	4a4b      	ldr	r2, [pc, #300]	; (80011c0 <HAL_DMA_Init+0x158>)
 8001092:	fba2 2303 	umull	r2, r3, r2, r3
 8001096:	091b      	lsrs	r3, r3, #4
 8001098:	009a      	lsls	r2, r3, #2
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a48      	ldr	r2, [pc, #288]	; (80011c4 <HAL_DMA_Init+0x15c>)
 80010a2:	641a      	str	r2, [r3, #64]	; 0x40
 80010a4:	e00e      	b.n	80010c4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b46      	ldr	r3, [pc, #280]	; (80011c8 <HAL_DMA_Init+0x160>)
 80010ae:	4413      	add	r3, r2
 80010b0:	4a43      	ldr	r2, [pc, #268]	; (80011c0 <HAL_DMA_Init+0x158>)
 80010b2:	fba2 2303 	umull	r2, r3, r2, r3
 80010b6:	091b      	lsrs	r3, r3, #4
 80010b8:	009a      	lsls	r2, r3, #2
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a42      	ldr	r2, [pc, #264]	; (80011cc <HAL_DMA_Init+0x164>)
 80010c2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2202      	movs	r2, #2
 80010c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80010da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80010e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001100:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a1b      	ldr	r3, [r3, #32]
 8001106:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	4313      	orrs	r3, r2
 800110c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800111e:	d039      	beq.n	8001194 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	4a27      	ldr	r2, [pc, #156]	; (80011c4 <HAL_DMA_Init+0x15c>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d11a      	bne.n	8001160 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800112a:	4b29      	ldr	r3, [pc, #164]	; (80011d0 <HAL_DMA_Init+0x168>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f003 031c 	and.w	r3, r3, #28
 8001136:	210f      	movs	r1, #15
 8001138:	fa01 f303 	lsl.w	r3, r1, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	4924      	ldr	r1, [pc, #144]	; (80011d0 <HAL_DMA_Init+0x168>)
 8001140:	4013      	ands	r3, r2
 8001142:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001144:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <HAL_DMA_Init+0x168>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6859      	ldr	r1, [r3, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001150:	f003 031c 	and.w	r3, r3, #28
 8001154:	fa01 f303 	lsl.w	r3, r1, r3
 8001158:	491d      	ldr	r1, [pc, #116]	; (80011d0 <HAL_DMA_Init+0x168>)
 800115a:	4313      	orrs	r3, r2
 800115c:	600b      	str	r3, [r1, #0]
 800115e:	e019      	b.n	8001194 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001160:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <HAL_DMA_Init+0x16c>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001168:	f003 031c 	and.w	r3, r3, #28
 800116c:	210f      	movs	r1, #15
 800116e:	fa01 f303 	lsl.w	r3, r1, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	4917      	ldr	r1, [pc, #92]	; (80011d4 <HAL_DMA_Init+0x16c>)
 8001176:	4013      	ands	r3, r2
 8001178:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <HAL_DMA_Init+0x16c>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6859      	ldr	r1, [r3, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	f003 031c 	and.w	r3, r3, #28
 800118a:	fa01 f303 	lsl.w	r3, r1, r3
 800118e:	4911      	ldr	r1, [pc, #68]	; (80011d4 <HAL_DMA_Init+0x16c>)
 8001190:	4313      	orrs	r3, r2
 8001192:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2201      	movs	r2, #1
 800119e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	40020407 	.word	0x40020407
 80011bc:	bffdfff8 	.word	0xbffdfff8
 80011c0:	cccccccd 	.word	0xcccccccd
 80011c4:	40020000 	.word	0x40020000
 80011c8:	bffdfbf8 	.word	0xbffdfbf8
 80011cc:	40020400 	.word	0x40020400
 80011d0:	400200a8 	.word	0x400200a8
 80011d4:	400204a8 	.word	0x400204a8

080011d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
 80011e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011e6:	2300      	movs	r3, #0
 80011e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d101      	bne.n	80011f8 <HAL_DMA_Start_IT+0x20>
 80011f4:	2302      	movs	r3, #2
 80011f6:	e04b      	b.n	8001290 <HAL_DMA_Start_IT+0xb8>
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2201      	movs	r2, #1
 80011fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001206:	b2db      	uxtb	r3, r3
 8001208:	2b01      	cmp	r3, #1
 800120a:	d13a      	bne.n	8001282 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2202      	movs	r2, #2
 8001210:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2200      	movs	r2, #0
 8001218:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f022 0201 	bic.w	r2, r2, #1
 8001228:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	68b9      	ldr	r1, [r7, #8]
 8001230:	68f8      	ldr	r0, [r7, #12]
 8001232:	f000 f8e0 	bl	80013f6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	2b00      	cmp	r3, #0
 800123c:	d008      	beq.n	8001250 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f042 020e 	orr.w	r2, r2, #14
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	e00f      	b.n	8001270 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 0204 	bic.w	r2, r2, #4
 800125e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f042 020a 	orr.w	r2, r2, #10
 800126e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f042 0201 	orr.w	r2, r2, #1
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	e005      	b.n	800128e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2200      	movs	r2, #0
 8001286:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800128a:	2302      	movs	r3, #2
 800128c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800128e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b4:	f003 031c 	and.w	r3, r3, #28
 80012b8:	2204      	movs	r2, #4
 80012ba:	409a      	lsls	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4013      	ands	r3, r2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d026      	beq.n	8001312 <HAL_DMA_IRQHandler+0x7a>
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	f003 0304 	and.w	r3, r3, #4
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d021      	beq.n	8001312 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0320 	and.w	r3, r3, #32
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d107      	bne.n	80012ec <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f022 0204 	bic.w	r2, r2, #4
 80012ea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f0:	f003 021c 	and.w	r2, r3, #28
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	2104      	movs	r1, #4
 80012fa:	fa01 f202 	lsl.w	r2, r1, r2
 80012fe:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001304:	2b00      	cmp	r3, #0
 8001306:	d071      	beq.n	80013ec <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001310:	e06c      	b.n	80013ec <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	f003 031c 	and.w	r3, r3, #28
 800131a:	2202      	movs	r2, #2
 800131c:	409a      	lsls	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4013      	ands	r3, r2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d02e      	beq.n	8001384 <HAL_DMA_IRQHandler+0xec>
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d029      	beq.n	8001384 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0320 	and.w	r3, r3, #32
 800133a:	2b00      	cmp	r3, #0
 800133c:	d10b      	bne.n	8001356 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f022 020a 	bic.w	r2, r2, #10
 800134c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2201      	movs	r2, #1
 8001352:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	f003 021c 	and.w	r2, r3, #28
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	2102      	movs	r1, #2
 8001364:	fa01 f202 	lsl.w	r2, r1, r2
 8001368:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001376:	2b00      	cmp	r3, #0
 8001378:	d038      	beq.n	80013ec <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001382:	e033      	b.n	80013ec <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001388:	f003 031c 	and.w	r3, r3, #28
 800138c:	2208      	movs	r2, #8
 800138e:	409a      	lsls	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4013      	ands	r3, r2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d02a      	beq.n	80013ee <HAL_DMA_IRQHandler+0x156>
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d025      	beq.n	80013ee <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f022 020e 	bic.w	r2, r2, #14
 80013b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	f003 021c 	and.w	r2, r3, #28
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	2101      	movs	r1, #1
 80013c0:	fa01 f202 	lsl.w	r2, r1, r2
 80013c4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2201      	movs	r2, #1
 80013ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d004      	beq.n	80013ee <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
}
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b085      	sub	sp, #20
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	60f8      	str	r0, [r7, #12]
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
 8001402:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001408:	f003 021c 	and.w	r2, r3, #28
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	2101      	movs	r1, #1
 8001412:	fa01 f202 	lsl.w	r2, r1, r2
 8001416:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	2b10      	cmp	r3, #16
 8001426:	d108      	bne.n	800143a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	68ba      	ldr	r2, [r7, #8]
 8001436:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001438:	e007      	b.n	800144a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	60da      	str	r2, [r3, #12]
}
 800144a:	bf00      	nop
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
	...

08001458 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001458:	b480      	push	{r7}
 800145a:	b087      	sub	sp, #28
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001466:	e17f      	b.n	8001768 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	2101      	movs	r1, #1
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	fa01 f303 	lsl.w	r3, r1, r3
 8001474:	4013      	ands	r3, r2
 8001476:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 8171 	beq.w	8001762 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	2b01      	cmp	r3, #1
 800148a:	d005      	beq.n	8001498 <HAL_GPIO_Init+0x40>
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d130      	bne.n	80014fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	2203      	movs	r2, #3
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4013      	ands	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	68da      	ldr	r2, [r3, #12]
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4313      	orrs	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014ce:	2201      	movs	r2, #1
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43db      	mvns	r3, r3
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	4013      	ands	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	091b      	lsrs	r3, r3, #4
 80014e4:	f003 0201 	and.w	r2, r3, #1
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f003 0303 	and.w	r3, r3, #3
 8001502:	2b03      	cmp	r3, #3
 8001504:	d118      	bne.n	8001538 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800150c:	2201      	movs	r2, #1
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	4013      	ands	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	08db      	lsrs	r3, r3, #3
 8001522:	f003 0201 	and.w	r2, r3, #1
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4313      	orrs	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 0303 	and.w	r3, r3, #3
 8001540:	2b03      	cmp	r3, #3
 8001542:	d017      	beq.n	8001574 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	2203      	movs	r2, #3
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	4013      	ands	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	4313      	orrs	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0303 	and.w	r3, r3, #3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d123      	bne.n	80015c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	08da      	lsrs	r2, r3, #3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3208      	adds	r2, #8
 8001588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800158c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	f003 0307 	and.w	r3, r3, #7
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	220f      	movs	r2, #15
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4013      	ands	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	691a      	ldr	r2, [r3, #16]
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	08da      	lsrs	r2, r3, #3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3208      	adds	r2, #8
 80015c2:	6939      	ldr	r1, [r7, #16]
 80015c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	2203      	movs	r2, #3
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4013      	ands	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 0203 	and.w	r2, r3, #3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001604:	2b00      	cmp	r3, #0
 8001606:	f000 80ac 	beq.w	8001762 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160a:	4b5f      	ldr	r3, [pc, #380]	; (8001788 <HAL_GPIO_Init+0x330>)
 800160c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800160e:	4a5e      	ldr	r2, [pc, #376]	; (8001788 <HAL_GPIO_Init+0x330>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6613      	str	r3, [r2, #96]	; 0x60
 8001616:	4b5c      	ldr	r3, [pc, #368]	; (8001788 <HAL_GPIO_Init+0x330>)
 8001618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001622:	4a5a      	ldr	r2, [pc, #360]	; (800178c <HAL_GPIO_Init+0x334>)
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	089b      	lsrs	r3, r3, #2
 8001628:	3302      	adds	r3, #2
 800162a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	f003 0303 	and.w	r3, r3, #3
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	220f      	movs	r2, #15
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4013      	ands	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800164c:	d025      	beq.n	800169a <HAL_GPIO_Init+0x242>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a4f      	ldr	r2, [pc, #316]	; (8001790 <HAL_GPIO_Init+0x338>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d01f      	beq.n	8001696 <HAL_GPIO_Init+0x23e>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a4e      	ldr	r2, [pc, #312]	; (8001794 <HAL_GPIO_Init+0x33c>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d019      	beq.n	8001692 <HAL_GPIO_Init+0x23a>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a4d      	ldr	r2, [pc, #308]	; (8001798 <HAL_GPIO_Init+0x340>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d013      	beq.n	800168e <HAL_GPIO_Init+0x236>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a4c      	ldr	r2, [pc, #304]	; (800179c <HAL_GPIO_Init+0x344>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d00d      	beq.n	800168a <HAL_GPIO_Init+0x232>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a4b      	ldr	r2, [pc, #300]	; (80017a0 <HAL_GPIO_Init+0x348>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d007      	beq.n	8001686 <HAL_GPIO_Init+0x22e>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a4a      	ldr	r2, [pc, #296]	; (80017a4 <HAL_GPIO_Init+0x34c>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d101      	bne.n	8001682 <HAL_GPIO_Init+0x22a>
 800167e:	2306      	movs	r3, #6
 8001680:	e00c      	b.n	800169c <HAL_GPIO_Init+0x244>
 8001682:	2307      	movs	r3, #7
 8001684:	e00a      	b.n	800169c <HAL_GPIO_Init+0x244>
 8001686:	2305      	movs	r3, #5
 8001688:	e008      	b.n	800169c <HAL_GPIO_Init+0x244>
 800168a:	2304      	movs	r3, #4
 800168c:	e006      	b.n	800169c <HAL_GPIO_Init+0x244>
 800168e:	2303      	movs	r3, #3
 8001690:	e004      	b.n	800169c <HAL_GPIO_Init+0x244>
 8001692:	2302      	movs	r3, #2
 8001694:	e002      	b.n	800169c <HAL_GPIO_Init+0x244>
 8001696:	2301      	movs	r3, #1
 8001698:	e000      	b.n	800169c <HAL_GPIO_Init+0x244>
 800169a:	2300      	movs	r3, #0
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	f002 0203 	and.w	r2, r2, #3
 80016a2:	0092      	lsls	r2, r2, #2
 80016a4:	4093      	lsls	r3, r2
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016ac:	4937      	ldr	r1, [pc, #220]	; (800178c <HAL_GPIO_Init+0x334>)
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	089b      	lsrs	r3, r3, #2
 80016b2:	3302      	adds	r3, #2
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016ba:	4b3b      	ldr	r3, [pc, #236]	; (80017a8 <HAL_GPIO_Init+0x350>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	43db      	mvns	r3, r3
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4013      	ands	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4313      	orrs	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016de:	4a32      	ldr	r2, [pc, #200]	; (80017a8 <HAL_GPIO_Init+0x350>)
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016e4:	4b30      	ldr	r3, [pc, #192]	; (80017a8 <HAL_GPIO_Init+0x350>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4013      	ands	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001708:	4a27      	ldr	r2, [pc, #156]	; (80017a8 <HAL_GPIO_Init+0x350>)
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800170e:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <HAL_GPIO_Init+0x350>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	43db      	mvns	r3, r3
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4013      	ands	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4313      	orrs	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001732:	4a1d      	ldr	r2, [pc, #116]	; (80017a8 <HAL_GPIO_Init+0x350>)
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001738:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <HAL_GPIO_Init+0x350>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	43db      	mvns	r3, r3
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	4013      	ands	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4313      	orrs	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800175c:	4a12      	ldr	r2, [pc, #72]	; (80017a8 <HAL_GPIO_Init+0x350>)
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	3301      	adds	r3, #1
 8001766:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	fa22 f303 	lsr.w	r3, r2, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	f47f ae78 	bne.w	8001468 <HAL_GPIO_Init+0x10>
  }
}
 8001778:	bf00      	nop
 800177a:	bf00      	nop
 800177c:	371c      	adds	r7, #28
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	40021000 	.word	0x40021000
 800178c:	40010000 	.word	0x40010000
 8001790:	48000400 	.word	0x48000400
 8001794:	48000800 	.word	0x48000800
 8001798:	48000c00 	.word	0x48000c00
 800179c:	48001000 	.word	0x48001000
 80017a0:	48001400 	.word	0x48001400
 80017a4:	48001800 	.word	0x48001800
 80017a8:	40010400 	.word	0x40010400

080017ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	807b      	strh	r3, [r7, #2]
 80017b8:	4613      	mov	r3, r2
 80017ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017bc:	787b      	ldrb	r3, [r7, #1]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017c2:	887a      	ldrh	r2, [r7, #2]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017c8:	e002      	b.n	80017d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017ca:	887a      	ldrh	r2, [r7, #2]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a04      	ldr	r2, [pc, #16]	; (80017f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ea:	6013      	str	r3, [r2, #0]
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40007000 	.word	0x40007000

080017fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001800:	4b04      	ldr	r3, [pc, #16]	; (8001814 <HAL_PWREx_GetVoltageRange+0x18>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001808:	4618      	mov	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40007000 	.word	0x40007000

08001818 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001826:	d130      	bne.n	800188a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001828:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001834:	d038      	beq.n	80018a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001836:	4b20      	ldr	r3, [pc, #128]	; (80018b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800183e:	4a1e      	ldr	r2, [pc, #120]	; (80018b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001840:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001844:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001846:	4b1d      	ldr	r3, [pc, #116]	; (80018bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2232      	movs	r2, #50	; 0x32
 800184c:	fb02 f303 	mul.w	r3, r2, r3
 8001850:	4a1b      	ldr	r2, [pc, #108]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001852:	fba2 2303 	umull	r2, r3, r2, r3
 8001856:	0c9b      	lsrs	r3, r3, #18
 8001858:	3301      	adds	r3, #1
 800185a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800185c:	e002      	b.n	8001864 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	3b01      	subs	r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001864:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001866:	695b      	ldr	r3, [r3, #20]
 8001868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800186c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001870:	d102      	bne.n	8001878 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1f2      	bne.n	800185e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001878:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001884:	d110      	bne.n	80018a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e00f      	b.n	80018aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800188a:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001896:	d007      	beq.n	80018a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001898:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018a0:	4a05      	ldr	r2, [pc, #20]	; (80018b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40007000 	.word	0x40007000
 80018bc:	20000000 	.word	0x20000000
 80018c0:	431bde83 	.word	0x431bde83

080018c4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b088      	sub	sp, #32
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e3ca      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018d6:	4b97      	ldr	r3, [pc, #604]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018e0:	4b94      	ldr	r3, [pc, #592]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	f003 0303 	and.w	r3, r3, #3
 80018e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0310 	and.w	r3, r3, #16
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f000 80e4 	beq.w	8001ac0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d007      	beq.n	800190e <HAL_RCC_OscConfig+0x4a>
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	2b0c      	cmp	r3, #12
 8001902:	f040 808b 	bne.w	8001a1c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	2b01      	cmp	r3, #1
 800190a:	f040 8087 	bne.w	8001a1c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800190e:	4b89      	ldr	r3, [pc, #548]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d005      	beq.n	8001926 <HAL_RCC_OscConfig+0x62>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e3a2      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a1a      	ldr	r2, [r3, #32]
 800192a:	4b82      	ldr	r3, [pc, #520]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	2b00      	cmp	r3, #0
 8001934:	d004      	beq.n	8001940 <HAL_RCC_OscConfig+0x7c>
 8001936:	4b7f      	ldr	r3, [pc, #508]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800193e:	e005      	b.n	800194c <HAL_RCC_OscConfig+0x88>
 8001940:	4b7c      	ldr	r3, [pc, #496]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001946:	091b      	lsrs	r3, r3, #4
 8001948:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800194c:	4293      	cmp	r3, r2
 800194e:	d223      	bcs.n	8001998 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	4618      	mov	r0, r3
 8001956:	f000 fd55 	bl	8002404 <RCC_SetFlashLatencyFromMSIRange>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e383      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001964:	4b73      	ldr	r3, [pc, #460]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a72      	ldr	r2, [pc, #456]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 800196a:	f043 0308 	orr.w	r3, r3, #8
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	4b70      	ldr	r3, [pc, #448]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	496d      	ldr	r1, [pc, #436]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 800197e:	4313      	orrs	r3, r2
 8001980:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001982:	4b6c      	ldr	r3, [pc, #432]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	021b      	lsls	r3, r3, #8
 8001990:	4968      	ldr	r1, [pc, #416]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001992:	4313      	orrs	r3, r2
 8001994:	604b      	str	r3, [r1, #4]
 8001996:	e025      	b.n	80019e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001998:	4b66      	ldr	r3, [pc, #408]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a65      	ldr	r2, [pc, #404]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 800199e:	f043 0308 	orr.w	r3, r3, #8
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	4b63      	ldr	r3, [pc, #396]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	4960      	ldr	r1, [pc, #384]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019b6:	4b5f      	ldr	r3, [pc, #380]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	021b      	lsls	r3, r3, #8
 80019c4:	495b      	ldr	r1, [pc, #364]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d109      	bne.n	80019e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f000 fd15 	bl	8002404 <RCC_SetFlashLatencyFromMSIRange>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e343      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019e4:	f000 fc4a 	bl	800227c <HAL_RCC_GetSysClockFreq>
 80019e8:	4602      	mov	r2, r0
 80019ea:	4b52      	ldr	r3, [pc, #328]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	091b      	lsrs	r3, r3, #4
 80019f0:	f003 030f 	and.w	r3, r3, #15
 80019f4:	4950      	ldr	r1, [pc, #320]	; (8001b38 <HAL_RCC_OscConfig+0x274>)
 80019f6:	5ccb      	ldrb	r3, [r1, r3]
 80019f8:	f003 031f 	and.w	r3, r3, #31
 80019fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001a00:	4a4e      	ldr	r2, [pc, #312]	; (8001b3c <HAL_RCC_OscConfig+0x278>)
 8001a02:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a04:	4b4e      	ldr	r3, [pc, #312]	; (8001b40 <HAL_RCC_OscConfig+0x27c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff f9bf 	bl	8000d8c <HAL_InitTick>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d052      	beq.n	8001abe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
 8001a1a:	e327      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d032      	beq.n	8001a8a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a24:	4b43      	ldr	r3, [pc, #268]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a42      	ldr	r2, [pc, #264]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a30:	f7ff f9fc 	bl	8000e2c <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a38:	f7ff f9f8 	bl	8000e2c <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e310      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a4a:	4b3a      	ldr	r3, [pc, #232]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0f0      	beq.n	8001a38 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a56:	4b37      	ldr	r3, [pc, #220]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a36      	ldr	r2, [pc, #216]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a5c:	f043 0308 	orr.w	r3, r3, #8
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	4b34      	ldr	r3, [pc, #208]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	4931      	ldr	r1, [pc, #196]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a74:	4b2f      	ldr	r3, [pc, #188]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	69db      	ldr	r3, [r3, #28]
 8001a80:	021b      	lsls	r3, r3, #8
 8001a82:	492c      	ldr	r1, [pc, #176]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	604b      	str	r3, [r1, #4]
 8001a88:	e01a      	b.n	8001ac0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a8a:	4b2a      	ldr	r3, [pc, #168]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a29      	ldr	r2, [pc, #164]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a90:	f023 0301 	bic.w	r3, r3, #1
 8001a94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a96:	f7ff f9c9 	bl	8000e2c <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a9e:	f7ff f9c5 	bl	8000e2c <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e2dd      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ab0:	4b20      	ldr	r3, [pc, #128]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f0      	bne.n	8001a9e <HAL_RCC_OscConfig+0x1da>
 8001abc:	e000      	b.n	8001ac0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001abe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d074      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	2b08      	cmp	r3, #8
 8001ad0:	d005      	beq.n	8001ade <HAL_RCC_OscConfig+0x21a>
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	2b0c      	cmp	r3, #12
 8001ad6:	d10e      	bne.n	8001af6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	d10b      	bne.n	8001af6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d064      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x2f0>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d160      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e2ba      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001afe:	d106      	bne.n	8001b0e <HAL_RCC_OscConfig+0x24a>
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a0b      	ldr	r2, [pc, #44]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	e026      	b.n	8001b5c <HAL_RCC_OscConfig+0x298>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b16:	d115      	bne.n	8001b44 <HAL_RCC_OscConfig+0x280>
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a05      	ldr	r2, [pc, #20]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001b1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	4b03      	ldr	r3, [pc, #12]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a02      	ldr	r2, [pc, #8]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	e014      	b.n	8001b5c <HAL_RCC_OscConfig+0x298>
 8001b32:	bf00      	nop
 8001b34:	40021000 	.word	0x40021000
 8001b38:	0800596c 	.word	0x0800596c
 8001b3c:	20000000 	.word	0x20000000
 8001b40:	20000004 	.word	0x20000004
 8001b44:	4ba0      	ldr	r3, [pc, #640]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a9f      	ldr	r2, [pc, #636]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	4b9d      	ldr	r3, [pc, #628]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a9c      	ldr	r2, [pc, #624]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001b56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d013      	beq.n	8001b8c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b64:	f7ff f962 	bl	8000e2c <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b6c:	f7ff f95e 	bl	8000e2c <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b64      	cmp	r3, #100	; 0x64
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e276      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b7e:	4b92      	ldr	r3, [pc, #584]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0f0      	beq.n	8001b6c <HAL_RCC_OscConfig+0x2a8>
 8001b8a:	e014      	b.n	8001bb6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8c:	f7ff f94e 	bl	8000e2c <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b94:	f7ff f94a 	bl	8000e2c <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b64      	cmp	r3, #100	; 0x64
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e262      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ba6:	4b88      	ldr	r3, [pc, #544]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f0      	bne.n	8001b94 <HAL_RCC_OscConfig+0x2d0>
 8001bb2:	e000      	b.n	8001bb6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d060      	beq.n	8001c84 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d005      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x310>
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	2b0c      	cmp	r3, #12
 8001bcc:	d119      	bne.n	8001c02 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d116      	bne.n	8001c02 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bd4:	4b7c      	ldr	r3, [pc, #496]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d005      	beq.n	8001bec <HAL_RCC_OscConfig+0x328>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e23f      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bec:	4b76      	ldr	r3, [pc, #472]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	061b      	lsls	r3, r3, #24
 8001bfa:	4973      	ldr	r1, [pc, #460]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c00:	e040      	b.n	8001c84 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d023      	beq.n	8001c52 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c0a:	4b6f      	ldr	r3, [pc, #444]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a6e      	ldr	r2, [pc, #440]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c16:	f7ff f909 	bl	8000e2c <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c1e:	f7ff f905 	bl	8000e2c <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e21d      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c30:	4b65      	ldr	r3, [pc, #404]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0f0      	beq.n	8001c1e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3c:	4b62      	ldr	r3, [pc, #392]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	061b      	lsls	r3, r3, #24
 8001c4a:	495f      	ldr	r1, [pc, #380]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	604b      	str	r3, [r1, #4]
 8001c50:	e018      	b.n	8001c84 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c52:	4b5d      	ldr	r3, [pc, #372]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a5c      	ldr	r2, [pc, #368]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001c58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5e:	f7ff f8e5 	bl	8000e2c <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c66:	f7ff f8e1 	bl	8000e2c <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e1f9      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c78:	4b53      	ldr	r3, [pc, #332]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1f0      	bne.n	8001c66 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d03c      	beq.n	8001d0a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d01c      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c98:	4b4b      	ldr	r3, [pc, #300]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c9e:	4a4a      	ldr	r2, [pc, #296]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca8:	f7ff f8c0 	bl	8000e2c <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb0:	f7ff f8bc 	bl	8000e2c <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e1d4      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cc2:	4b41      	ldr	r3, [pc, #260]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001cc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0ef      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x3ec>
 8001cd0:	e01b      	b.n	8001d0a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cd2:	4b3d      	ldr	r3, [pc, #244]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001cd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cd8:	4a3b      	ldr	r2, [pc, #236]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001cda:	f023 0301 	bic.w	r3, r3, #1
 8001cde:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce2:	f7ff f8a3 	bl	8000e2c <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cea:	f7ff f89f 	bl	8000e2c <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e1b7      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cfc:	4b32      	ldr	r3, [pc, #200]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1ef      	bne.n	8001cea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 80a6 	beq.w	8001e64 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d1c:	4b2a      	ldr	r3, [pc, #168]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d10d      	bne.n	8001d44 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d28:	4b27      	ldr	r3, [pc, #156]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2c:	4a26      	ldr	r2, [pc, #152]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d32:	6593      	str	r3, [r2, #88]	; 0x58
 8001d34:	4b24      	ldr	r3, [pc, #144]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d40:	2301      	movs	r3, #1
 8001d42:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d44:	4b21      	ldr	r3, [pc, #132]	; (8001dcc <HAL_RCC_OscConfig+0x508>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d118      	bne.n	8001d82 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d50:	4b1e      	ldr	r3, [pc, #120]	; (8001dcc <HAL_RCC_OscConfig+0x508>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a1d      	ldr	r2, [pc, #116]	; (8001dcc <HAL_RCC_OscConfig+0x508>)
 8001d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d5c:	f7ff f866 	bl	8000e2c <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d64:	f7ff f862 	bl	8000e2c <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e17a      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d76:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <HAL_RCC_OscConfig+0x508>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0f0      	beq.n	8001d64 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d108      	bne.n	8001d9c <HAL_RCC_OscConfig+0x4d8>
 8001d8a:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d90:	4a0d      	ldr	r2, [pc, #52]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d9a:	e029      	b.n	8001df0 <HAL_RCC_OscConfig+0x52c>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	2b05      	cmp	r3, #5
 8001da2:	d115      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x50c>
 8001da4:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001daa:	4a07      	ldr	r2, [pc, #28]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001dac:	f043 0304 	orr.w	r3, r3, #4
 8001db0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001db4:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dba:	4a03      	ldr	r2, [pc, #12]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dc4:	e014      	b.n	8001df0 <HAL_RCC_OscConfig+0x52c>
 8001dc6:	bf00      	nop
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40007000 	.word	0x40007000
 8001dd0:	4b9c      	ldr	r3, [pc, #624]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd6:	4a9b      	ldr	r2, [pc, #620]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001dd8:	f023 0301 	bic.w	r3, r3, #1
 8001ddc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001de0:	4b98      	ldr	r3, [pc, #608]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de6:	4a97      	ldr	r2, [pc, #604]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001de8:	f023 0304 	bic.w	r3, r3, #4
 8001dec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d016      	beq.n	8001e26 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df8:	f7ff f818 	bl	8000e2c <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dfe:	e00a      	b.n	8001e16 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e00:	f7ff f814 	bl	8000e2c <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e12a      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e16:	4b8b      	ldr	r3, [pc, #556]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0ed      	beq.n	8001e00 <HAL_RCC_OscConfig+0x53c>
 8001e24:	e015      	b.n	8001e52 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e26:	f7ff f801 	bl	8000e2c <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e2c:	e00a      	b.n	8001e44 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2e:	f7fe fffd 	bl	8000e2c <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e113      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e44:	4b7f      	ldr	r3, [pc, #508]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1ed      	bne.n	8001e2e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e52:	7ffb      	ldrb	r3, [r7, #31]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d105      	bne.n	8001e64 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e58:	4b7a      	ldr	r3, [pc, #488]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5c:	4a79      	ldr	r2, [pc, #484]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001e5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e62:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 80fe 	beq.w	800206a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	f040 80d0 	bne.w	8002018 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e78:	4b72      	ldr	r3, [pc, #456]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f003 0203 	and.w	r2, r3, #3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d130      	bne.n	8001eee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	3b01      	subs	r3, #1
 8001e98:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d127      	bne.n	8001eee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d11f      	bne.n	8001eee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001eb8:	2a07      	cmp	r2, #7
 8001eba:	bf14      	ite	ne
 8001ebc:	2201      	movne	r2, #1
 8001ebe:	2200      	moveq	r2, #0
 8001ec0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d113      	bne.n	8001eee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed0:	085b      	lsrs	r3, r3, #1
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d109      	bne.n	8001eee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	085b      	lsrs	r3, r3, #1
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d06e      	beq.n	8001fcc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	2b0c      	cmp	r3, #12
 8001ef2:	d069      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ef4:	4b53      	ldr	r3, [pc, #332]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d105      	bne.n	8001f0c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f00:	4b50      	ldr	r3, [pc, #320]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0ad      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f10:	4b4c      	ldr	r3, [pc, #304]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a4b      	ldr	r2, [pc, #300]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001f16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f1a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f1c:	f7fe ff86 	bl	8000e2c <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f24:	f7fe ff82 	bl	8000e2c <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e09a      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f36:	4b43      	ldr	r3, [pc, #268]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f42:	4b40      	ldr	r3, [pc, #256]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	4b40      	ldr	r3, [pc, #256]	; (8002048 <HAL_RCC_OscConfig+0x784>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f52:	3a01      	subs	r2, #1
 8001f54:	0112      	lsls	r2, r2, #4
 8001f56:	4311      	orrs	r1, r2
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f5c:	0212      	lsls	r2, r2, #8
 8001f5e:	4311      	orrs	r1, r2
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f64:	0852      	lsrs	r2, r2, #1
 8001f66:	3a01      	subs	r2, #1
 8001f68:	0552      	lsls	r2, r2, #21
 8001f6a:	4311      	orrs	r1, r2
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f70:	0852      	lsrs	r2, r2, #1
 8001f72:	3a01      	subs	r2, #1
 8001f74:	0652      	lsls	r2, r2, #25
 8001f76:	4311      	orrs	r1, r2
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f7c:	0912      	lsrs	r2, r2, #4
 8001f7e:	0452      	lsls	r2, r2, #17
 8001f80:	430a      	orrs	r2, r1
 8001f82:	4930      	ldr	r1, [pc, #192]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f88:	4b2e      	ldr	r3, [pc, #184]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a2d      	ldr	r2, [pc, #180]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001f8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f94:	4b2b      	ldr	r3, [pc, #172]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	4a2a      	ldr	r2, [pc, #168]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001f9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fa0:	f7fe ff44 	bl	8000e2c <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa8:	f7fe ff40 	bl	8000e2c <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e058      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fba:	4b22      	ldr	r3, [pc, #136]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0f0      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fc6:	e050      	b.n	800206a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e04f      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fcc:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d148      	bne.n	800206a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001fd8:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a19      	ldr	r2, [pc, #100]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001fde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fe2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fe4:	4b17      	ldr	r3, [pc, #92]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	4a16      	ldr	r2, [pc, #88]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001fea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ff0:	f7fe ff1c 	bl	8000e2c <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff8:	f7fe ff18 	bl	8000e2c <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e030      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800200a:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x734>
 8002016:	e028      	b.n	800206a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	2b0c      	cmp	r3, #12
 800201c:	d023      	beq.n	8002066 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201e:	4b09      	ldr	r3, [pc, #36]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a08      	ldr	r2, [pc, #32]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8002024:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002028:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202a:	f7fe feff 	bl	8000e2c <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002030:	e00c      	b.n	800204c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002032:	f7fe fefb 	bl	8000e2c <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d905      	bls.n	800204c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e013      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
 8002044:	40021000 	.word	0x40021000
 8002048:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800204c:	4b09      	ldr	r3, [pc, #36]	; (8002074 <HAL_RCC_OscConfig+0x7b0>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1ec      	bne.n	8002032 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <HAL_RCC_OscConfig+0x7b0>)
 800205a:	68da      	ldr	r2, [r3, #12]
 800205c:	4905      	ldr	r1, [pc, #20]	; (8002074 <HAL_RCC_OscConfig+0x7b0>)
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_RCC_OscConfig+0x7b4>)
 8002060:	4013      	ands	r3, r2
 8002062:	60cb      	str	r3, [r1, #12]
 8002064:	e001      	b.n	800206a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3720      	adds	r7, #32
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40021000 	.word	0x40021000
 8002078:	feeefffc 	.word	0xfeeefffc

0800207c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0e7      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002090:	4b75      	ldr	r3, [pc, #468]	; (8002268 <HAL_RCC_ClockConfig+0x1ec>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d910      	bls.n	80020c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209e:	4b72      	ldr	r3, [pc, #456]	; (8002268 <HAL_RCC_ClockConfig+0x1ec>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f023 0207 	bic.w	r2, r3, #7
 80020a6:	4970      	ldr	r1, [pc, #448]	; (8002268 <HAL_RCC_ClockConfig+0x1ec>)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ae:	4b6e      	ldr	r3, [pc, #440]	; (8002268 <HAL_RCC_ClockConfig+0x1ec>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d001      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e0cf      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d010      	beq.n	80020ee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	4b66      	ldr	r3, [pc, #408]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020d8:	429a      	cmp	r2, r3
 80020da:	d908      	bls.n	80020ee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020dc:	4b63      	ldr	r3, [pc, #396]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	4960      	ldr	r1, [pc, #384]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d04c      	beq.n	8002194 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b03      	cmp	r3, #3
 8002100:	d107      	bne.n	8002112 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002102:	4b5a      	ldr	r3, [pc, #360]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d121      	bne.n	8002152 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e0a6      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b02      	cmp	r3, #2
 8002118:	d107      	bne.n	800212a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800211a:	4b54      	ldr	r3, [pc, #336]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d115      	bne.n	8002152 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e09a      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d107      	bne.n	8002142 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002132:	4b4e      	ldr	r3, [pc, #312]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d109      	bne.n	8002152 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e08e      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002142:	4b4a      	ldr	r3, [pc, #296]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e086      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002152:	4b46      	ldr	r3, [pc, #280]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f023 0203 	bic.w	r2, r3, #3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	4943      	ldr	r1, [pc, #268]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 8002160:	4313      	orrs	r3, r2
 8002162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002164:	f7fe fe62 	bl	8000e2c <HAL_GetTick>
 8002168:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216a:	e00a      	b.n	8002182 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800216c:	f7fe fe5e 	bl	8000e2c <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	f241 3288 	movw	r2, #5000	; 0x1388
 800217a:	4293      	cmp	r3, r2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e06e      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002182:	4b3a      	ldr	r3, [pc, #232]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 020c 	and.w	r2, r3, #12
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	429a      	cmp	r2, r3
 8002192:	d1eb      	bne.n	800216c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d010      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	4b31      	ldr	r3, [pc, #196]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d208      	bcs.n	80021c2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b0:	4b2e      	ldr	r3, [pc, #184]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	492b      	ldr	r1, [pc, #172]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021c2:	4b29      	ldr	r3, [pc, #164]	; (8002268 <HAL_RCC_ClockConfig+0x1ec>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d210      	bcs.n	80021f2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d0:	4b25      	ldr	r3, [pc, #148]	; (8002268 <HAL_RCC_ClockConfig+0x1ec>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f023 0207 	bic.w	r2, r3, #7
 80021d8:	4923      	ldr	r1, [pc, #140]	; (8002268 <HAL_RCC_ClockConfig+0x1ec>)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	4313      	orrs	r3, r2
 80021de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e0:	4b21      	ldr	r3, [pc, #132]	; (8002268 <HAL_RCC_ClockConfig+0x1ec>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d001      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e036      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d008      	beq.n	8002210 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021fe:	4b1b      	ldr	r3, [pc, #108]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	4918      	ldr	r1, [pc, #96]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 800220c:	4313      	orrs	r3, r2
 800220e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	2b00      	cmp	r3, #0
 800221a:	d009      	beq.n	8002230 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800221c:	4b13      	ldr	r3, [pc, #76]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4910      	ldr	r1, [pc, #64]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 800222c:	4313      	orrs	r3, r2
 800222e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002230:	f000 f824 	bl	800227c <HAL_RCC_GetSysClockFreq>
 8002234:	4602      	mov	r2, r0
 8002236:	4b0d      	ldr	r3, [pc, #52]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	091b      	lsrs	r3, r3, #4
 800223c:	f003 030f 	and.w	r3, r3, #15
 8002240:	490b      	ldr	r1, [pc, #44]	; (8002270 <HAL_RCC_ClockConfig+0x1f4>)
 8002242:	5ccb      	ldrb	r3, [r1, r3]
 8002244:	f003 031f 	and.w	r3, r3, #31
 8002248:	fa22 f303 	lsr.w	r3, r2, r3
 800224c:	4a09      	ldr	r2, [pc, #36]	; (8002274 <HAL_RCC_ClockConfig+0x1f8>)
 800224e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002250:	4b09      	ldr	r3, [pc, #36]	; (8002278 <HAL_RCC_ClockConfig+0x1fc>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f7fe fd99 	bl	8000d8c <HAL_InitTick>
 800225a:	4603      	mov	r3, r0
 800225c:	72fb      	strb	r3, [r7, #11]

  return status;
 800225e:	7afb      	ldrb	r3, [r7, #11]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40022000 	.word	0x40022000
 800226c:	40021000 	.word	0x40021000
 8002270:	0800596c 	.word	0x0800596c
 8002274:	20000000 	.word	0x20000000
 8002278:	20000004 	.word	0x20000004

0800227c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800227c:	b480      	push	{r7}
 800227e:	b089      	sub	sp, #36	; 0x24
 8002280:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800228a:	4b3e      	ldr	r3, [pc, #248]	; (8002384 <HAL_RCC_GetSysClockFreq+0x108>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 030c 	and.w	r3, r3, #12
 8002292:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002294:	4b3b      	ldr	r3, [pc, #236]	; (8002384 <HAL_RCC_GetSysClockFreq+0x108>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d005      	beq.n	80022b0 <HAL_RCC_GetSysClockFreq+0x34>
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	2b0c      	cmp	r3, #12
 80022a8:	d121      	bne.n	80022ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d11e      	bne.n	80022ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022b0:	4b34      	ldr	r3, [pc, #208]	; (8002384 <HAL_RCC_GetSysClockFreq+0x108>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0308 	and.w	r3, r3, #8
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d107      	bne.n	80022cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022bc:	4b31      	ldr	r3, [pc, #196]	; (8002384 <HAL_RCC_GetSysClockFreq+0x108>)
 80022be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022c2:	0a1b      	lsrs	r3, r3, #8
 80022c4:	f003 030f 	and.w	r3, r3, #15
 80022c8:	61fb      	str	r3, [r7, #28]
 80022ca:	e005      	b.n	80022d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022cc:	4b2d      	ldr	r3, [pc, #180]	; (8002384 <HAL_RCC_GetSysClockFreq+0x108>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022d8:	4a2b      	ldr	r2, [pc, #172]	; (8002388 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10d      	bne.n	8002304 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022ec:	e00a      	b.n	8002304 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	2b04      	cmp	r3, #4
 80022f2:	d102      	bne.n	80022fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022f4:	4b25      	ldr	r3, [pc, #148]	; (800238c <HAL_RCC_GetSysClockFreq+0x110>)
 80022f6:	61bb      	str	r3, [r7, #24]
 80022f8:	e004      	b.n	8002304 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	d101      	bne.n	8002304 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002300:	4b23      	ldr	r3, [pc, #140]	; (8002390 <HAL_RCC_GetSysClockFreq+0x114>)
 8002302:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	2b0c      	cmp	r3, #12
 8002308:	d134      	bne.n	8002374 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800230a:	4b1e      	ldr	r3, [pc, #120]	; (8002384 <HAL_RCC_GetSysClockFreq+0x108>)
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2b02      	cmp	r3, #2
 8002318:	d003      	beq.n	8002322 <HAL_RCC_GetSysClockFreq+0xa6>
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2b03      	cmp	r3, #3
 800231e:	d003      	beq.n	8002328 <HAL_RCC_GetSysClockFreq+0xac>
 8002320:	e005      	b.n	800232e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002322:	4b1a      	ldr	r3, [pc, #104]	; (800238c <HAL_RCC_GetSysClockFreq+0x110>)
 8002324:	617b      	str	r3, [r7, #20]
      break;
 8002326:	e005      	b.n	8002334 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002328:	4b19      	ldr	r3, [pc, #100]	; (8002390 <HAL_RCC_GetSysClockFreq+0x114>)
 800232a:	617b      	str	r3, [r7, #20]
      break;
 800232c:	e002      	b.n	8002334 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	617b      	str	r3, [r7, #20]
      break;
 8002332:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002334:	4b13      	ldr	r3, [pc, #76]	; (8002384 <HAL_RCC_GetSysClockFreq+0x108>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	091b      	lsrs	r3, r3, #4
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	3301      	adds	r3, #1
 8002340:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <HAL_RCC_GetSysClockFreq+0x108>)
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	0a1b      	lsrs	r3, r3, #8
 8002348:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	fb03 f202 	mul.w	r2, r3, r2
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	fbb2 f3f3 	udiv	r3, r2, r3
 8002358:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800235a:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <HAL_RCC_GetSysClockFreq+0x108>)
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	0e5b      	lsrs	r3, r3, #25
 8002360:	f003 0303 	and.w	r3, r3, #3
 8002364:	3301      	adds	r3, #1
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002372:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002374:	69bb      	ldr	r3, [r7, #24]
}
 8002376:	4618      	mov	r0, r3
 8002378:	3724      	adds	r7, #36	; 0x24
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40021000 	.word	0x40021000
 8002388:	08005984 	.word	0x08005984
 800238c:	00f42400 	.word	0x00f42400
 8002390:	007a1200 	.word	0x007a1200

08002394 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002398:	4b03      	ldr	r3, [pc, #12]	; (80023a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800239a:	681b      	ldr	r3, [r3, #0]
}
 800239c:	4618      	mov	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	20000000 	.word	0x20000000

080023ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023b0:	f7ff fff0 	bl	8002394 <HAL_RCC_GetHCLKFreq>
 80023b4:	4602      	mov	r2, r0
 80023b6:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	0a1b      	lsrs	r3, r3, #8
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	4904      	ldr	r1, [pc, #16]	; (80023d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023c2:	5ccb      	ldrb	r3, [r1, r3]
 80023c4:	f003 031f 	and.w	r3, r3, #31
 80023c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40021000 	.word	0x40021000
 80023d4:	0800597c 	.word	0x0800597c

080023d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80023dc:	f7ff ffda 	bl	8002394 <HAL_RCC_GetHCLKFreq>
 80023e0:	4602      	mov	r2, r0
 80023e2:	4b06      	ldr	r3, [pc, #24]	; (80023fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	0adb      	lsrs	r3, r3, #11
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	4904      	ldr	r1, [pc, #16]	; (8002400 <HAL_RCC_GetPCLK2Freq+0x28>)
 80023ee:	5ccb      	ldrb	r3, [r1, r3]
 80023f0:	f003 031f 	and.w	r3, r3, #31
 80023f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40021000 	.word	0x40021000
 8002400:	0800597c 	.word	0x0800597c

08002404 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800240c:	2300      	movs	r3, #0
 800240e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002410:	4b2a      	ldr	r3, [pc, #168]	; (80024bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800241c:	f7ff f9ee 	bl	80017fc <HAL_PWREx_GetVoltageRange>
 8002420:	6178      	str	r0, [r7, #20]
 8002422:	e014      	b.n	800244e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002424:	4b25      	ldr	r3, [pc, #148]	; (80024bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002428:	4a24      	ldr	r2, [pc, #144]	; (80024bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800242a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800242e:	6593      	str	r3, [r2, #88]	; 0x58
 8002430:	4b22      	ldr	r3, [pc, #136]	; (80024bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800243c:	f7ff f9de 	bl	80017fc <HAL_PWREx_GetVoltageRange>
 8002440:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002442:	4b1e      	ldr	r3, [pc, #120]	; (80024bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002446:	4a1d      	ldr	r2, [pc, #116]	; (80024bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800244c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002454:	d10b      	bne.n	800246e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b80      	cmp	r3, #128	; 0x80
 800245a:	d919      	bls.n	8002490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2ba0      	cmp	r3, #160	; 0xa0
 8002460:	d902      	bls.n	8002468 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002462:	2302      	movs	r3, #2
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	e013      	b.n	8002490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002468:	2301      	movs	r3, #1
 800246a:	613b      	str	r3, [r7, #16]
 800246c:	e010      	b.n	8002490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b80      	cmp	r3, #128	; 0x80
 8002472:	d902      	bls.n	800247a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002474:	2303      	movs	r3, #3
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	e00a      	b.n	8002490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b80      	cmp	r3, #128	; 0x80
 800247e:	d102      	bne.n	8002486 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002480:	2302      	movs	r3, #2
 8002482:	613b      	str	r3, [r7, #16]
 8002484:	e004      	b.n	8002490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b70      	cmp	r3, #112	; 0x70
 800248a:	d101      	bne.n	8002490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800248c:	2301      	movs	r3, #1
 800248e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f023 0207 	bic.w	r2, r3, #7
 8002498:	4909      	ldr	r1, [pc, #36]	; (80024c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024a0:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d001      	beq.n	80024b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40022000 	.word	0x40022000

080024c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024cc:	2300      	movs	r3, #0
 80024ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024d0:	2300      	movs	r3, #0
 80024d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d041      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024e8:	d02a      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80024ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024ee:	d824      	bhi.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024f4:	d008      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80024f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024fa:	d81e      	bhi.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00a      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002500:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002504:	d010      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002506:	e018      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002508:	4b86      	ldr	r3, [pc, #536]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	4a85      	ldr	r2, [pc, #532]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800250e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002512:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002514:	e015      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3304      	adds	r3, #4
 800251a:	2100      	movs	r1, #0
 800251c:	4618      	mov	r0, r3
 800251e:	f001 f839 	bl	8003594 <RCCEx_PLLSAI1_Config>
 8002522:	4603      	mov	r3, r0
 8002524:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002526:	e00c      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3320      	adds	r3, #32
 800252c:	2100      	movs	r1, #0
 800252e:	4618      	mov	r0, r3
 8002530:	f001 f924 	bl	800377c <RCCEx_PLLSAI2_Config>
 8002534:	4603      	mov	r3, r0
 8002536:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002538:	e003      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	74fb      	strb	r3, [r7, #19]
      break;
 800253e:	e000      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002540:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002542:	7cfb      	ldrb	r3, [r7, #19]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10b      	bne.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002548:	4b76      	ldr	r3, [pc, #472]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800254a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002556:	4973      	ldr	r1, [pc, #460]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002558:	4313      	orrs	r3, r2
 800255a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800255e:	e001      	b.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002560:	7cfb      	ldrb	r3, [r7, #19]
 8002562:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d041      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002574:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002578:	d02a      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800257a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800257e:	d824      	bhi.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002580:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002584:	d008      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002586:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800258a:	d81e      	bhi.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00a      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002590:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002594:	d010      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002596:	e018      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002598:	4b62      	ldr	r3, [pc, #392]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	4a61      	ldr	r2, [pc, #388]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800259e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025a4:	e015      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3304      	adds	r3, #4
 80025aa:	2100      	movs	r1, #0
 80025ac:	4618      	mov	r0, r3
 80025ae:	f000 fff1 	bl	8003594 <RCCEx_PLLSAI1_Config>
 80025b2:	4603      	mov	r3, r0
 80025b4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025b6:	e00c      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3320      	adds	r3, #32
 80025bc:	2100      	movs	r1, #0
 80025be:	4618      	mov	r0, r3
 80025c0:	f001 f8dc 	bl	800377c <RCCEx_PLLSAI2_Config>
 80025c4:	4603      	mov	r3, r0
 80025c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025c8:	e003      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	74fb      	strb	r3, [r7, #19]
      break;
 80025ce:	e000      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80025d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025d2:	7cfb      	ldrb	r3, [r7, #19]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10b      	bne.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025d8:	4b52      	ldr	r3, [pc, #328]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025de:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025e6:	494f      	ldr	r1, [pc, #316]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025ee:	e001      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025f0:	7cfb      	ldrb	r3, [r7, #19]
 80025f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 80a0 	beq.w	8002742 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002602:	2300      	movs	r3, #0
 8002604:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002606:	4b47      	ldr	r3, [pc, #284]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002616:	2300      	movs	r3, #0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00d      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800261c:	4b41      	ldr	r3, [pc, #260]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800261e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002620:	4a40      	ldr	r2, [pc, #256]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002626:	6593      	str	r3, [r2, #88]	; 0x58
 8002628:	4b3e      	ldr	r3, [pc, #248]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800262a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002634:	2301      	movs	r3, #1
 8002636:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002638:	4b3b      	ldr	r3, [pc, #236]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a3a      	ldr	r2, [pc, #232]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800263e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002642:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002644:	f7fe fbf2 	bl	8000e2c <HAL_GetTick>
 8002648:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800264a:	e009      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800264c:	f7fe fbee 	bl	8000e2c <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d902      	bls.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	74fb      	strb	r3, [r7, #19]
        break;
 800265e:	e005      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002660:	4b31      	ldr	r3, [pc, #196]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0ef      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800266c:	7cfb      	ldrb	r3, [r7, #19]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d15c      	bne.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002672:	4b2c      	ldr	r3, [pc, #176]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002678:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800267c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d01f      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	429a      	cmp	r2, r3
 800268e:	d019      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002690:	4b24      	ldr	r3, [pc, #144]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800269a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800269c:	4b21      	ldr	r3, [pc, #132]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800269e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a2:	4a20      	ldr	r2, [pc, #128]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026ac:	4b1d      	ldr	r3, [pc, #116]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b2:	4a1c      	ldr	r2, [pc, #112]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026bc:	4a19      	ldr	r2, [pc, #100]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d016      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ce:	f7fe fbad 	bl	8000e2c <HAL_GetTick>
 80026d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026d4:	e00b      	b.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d6:	f7fe fba9 	bl	8000e2c <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d902      	bls.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	74fb      	strb	r3, [r7, #19]
            break;
 80026ec:	e006      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ee:	4b0d      	ldr	r3, [pc, #52]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0ec      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80026fc:	7cfb      	ldrb	r3, [r7, #19]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10c      	bne.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002702:	4b08      	ldr	r3, [pc, #32]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002708:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002712:	4904      	ldr	r1, [pc, #16]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800271a:	e009      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800271c:	7cfb      	ldrb	r3, [r7, #19]
 800271e:	74bb      	strb	r3, [r7, #18]
 8002720:	e006      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002722:	bf00      	nop
 8002724:	40021000 	.word	0x40021000
 8002728:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800272c:	7cfb      	ldrb	r3, [r7, #19]
 800272e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002730:	7c7b      	ldrb	r3, [r7, #17]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d105      	bne.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002736:	4b9e      	ldr	r3, [pc, #632]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273a:	4a9d      	ldr	r2, [pc, #628]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002740:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00a      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800274e:	4b98      	ldr	r3, [pc, #608]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002754:	f023 0203 	bic.w	r2, r3, #3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275c:	4994      	ldr	r1, [pc, #592]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275e:	4313      	orrs	r3, r2
 8002760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00a      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002770:	4b8f      	ldr	r3, [pc, #572]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002776:	f023 020c 	bic.w	r2, r3, #12
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277e:	498c      	ldr	r1, [pc, #560]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002780:	4313      	orrs	r3, r2
 8002782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00a      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002792:	4b87      	ldr	r3, [pc, #540]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002798:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a0:	4983      	ldr	r1, [pc, #524]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0308 	and.w	r3, r3, #8
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00a      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027b4:	4b7e      	ldr	r3, [pc, #504]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	497b      	ldr	r1, [pc, #492]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0310 	and.w	r3, r3, #16
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00a      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027d6:	4b76      	ldr	r3, [pc, #472]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e4:	4972      	ldr	r1, [pc, #456]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0320 	and.w	r3, r3, #32
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00a      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027f8:	4b6d      	ldr	r3, [pc, #436]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002806:	496a      	ldr	r1, [pc, #424]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002808:	4313      	orrs	r3, r2
 800280a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00a      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800281a:	4b65      	ldr	r3, [pc, #404]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002820:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002828:	4961      	ldr	r1, [pc, #388]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282a:	4313      	orrs	r3, r2
 800282c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00a      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800283c:	4b5c      	ldr	r3, [pc, #368]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800283e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002842:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800284a:	4959      	ldr	r1, [pc, #356]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284c:	4313      	orrs	r3, r2
 800284e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800285e:	4b54      	ldr	r3, [pc, #336]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002864:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800286c:	4950      	ldr	r1, [pc, #320]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286e:	4313      	orrs	r3, r2
 8002870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00a      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002880:	4b4b      	ldr	r3, [pc, #300]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002886:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288e:	4948      	ldr	r1, [pc, #288]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00a      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028a2:	4b43      	ldr	r3, [pc, #268]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b0:	493f      	ldr	r1, [pc, #252]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d028      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028c4:	4b3a      	ldr	r3, [pc, #232]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028d2:	4937      	ldr	r1, [pc, #220]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028e2:	d106      	bne.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028e4:	4b32      	ldr	r3, [pc, #200]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	4a31      	ldr	r2, [pc, #196]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ee:	60d3      	str	r3, [r2, #12]
 80028f0:	e011      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028fa:	d10c      	bne.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3304      	adds	r3, #4
 8002900:	2101      	movs	r1, #1
 8002902:	4618      	mov	r0, r3
 8002904:	f000 fe46 	bl	8003594 <RCCEx_PLLSAI1_Config>
 8002908:	4603      	mov	r3, r0
 800290a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800290c:	7cfb      	ldrb	r3, [r7, #19]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002912:	7cfb      	ldrb	r3, [r7, #19]
 8002914:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d028      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002922:	4b23      	ldr	r3, [pc, #140]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002928:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002930:	491f      	ldr	r1, [pc, #124]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002932:	4313      	orrs	r3, r2
 8002934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002940:	d106      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002942:	4b1b      	ldr	r3, [pc, #108]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	4a1a      	ldr	r2, [pc, #104]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002948:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800294c:	60d3      	str	r3, [r2, #12]
 800294e:	e011      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002954:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002958:	d10c      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	3304      	adds	r3, #4
 800295e:	2101      	movs	r1, #1
 8002960:	4618      	mov	r0, r3
 8002962:	f000 fe17 	bl	8003594 <RCCEx_PLLSAI1_Config>
 8002966:	4603      	mov	r3, r0
 8002968:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800296a:	7cfb      	ldrb	r3, [r7, #19]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002970:	7cfb      	ldrb	r3, [r7, #19]
 8002972:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d02b      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002980:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002986:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800298e:	4908      	ldr	r1, [pc, #32]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800299a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800299e:	d109      	bne.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029a0:	4b03      	ldr	r3, [pc, #12]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	4a02      	ldr	r2, [pc, #8]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029aa:	60d3      	str	r3, [r2, #12]
 80029ac:	e014      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80029ae:	bf00      	nop
 80029b0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029bc:	d10c      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3304      	adds	r3, #4
 80029c2:	2101      	movs	r1, #1
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 fde5 	bl	8003594 <RCCEx_PLLSAI1_Config>
 80029ca:	4603      	mov	r3, r0
 80029cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029ce:	7cfb      	ldrb	r3, [r7, #19]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80029d4:	7cfb      	ldrb	r3, [r7, #19]
 80029d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d02f      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029e4:	4b2b      	ldr	r3, [pc, #172]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029f2:	4928      	ldr	r1, [pc, #160]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a02:	d10d      	bne.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3304      	adds	r3, #4
 8002a08:	2102      	movs	r1, #2
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 fdc2 	bl	8003594 <RCCEx_PLLSAI1_Config>
 8002a10:	4603      	mov	r3, r0
 8002a12:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a14:	7cfb      	ldrb	r3, [r7, #19]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d014      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a1a:	7cfb      	ldrb	r3, [r7, #19]
 8002a1c:	74bb      	strb	r3, [r7, #18]
 8002a1e:	e011      	b.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a28:	d10c      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	3320      	adds	r3, #32
 8002a2e:	2102      	movs	r1, #2
 8002a30:	4618      	mov	r0, r3
 8002a32:	f000 fea3 	bl	800377c <RCCEx_PLLSAI2_Config>
 8002a36:	4603      	mov	r3, r0
 8002a38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a3a:	7cfb      	ldrb	r3, [r7, #19]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a40:	7cfb      	ldrb	r3, [r7, #19]
 8002a42:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00a      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a50:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a56:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a5e:	490d      	ldr	r1, [pc, #52]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00b      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a72:	4b08      	ldr	r3, [pc, #32]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a82:	4904      	ldr	r1, [pc, #16]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a8a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40021000 	.word	0x40021000

08002a98 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002aaa:	d13e      	bne.n	8002b2a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8002aac:	4bb2      	ldr	r3, [pc, #712]	; (8002d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ab6:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002abe:	d028      	beq.n	8002b12 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ac6:	f200 8542 	bhi.w	800354e <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ad0:	d005      	beq.n	8002ade <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ad8:	d00e      	beq.n	8002af8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8002ada:	f000 bd38 	b.w	800354e <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002ade:	4ba6      	ldr	r3, [pc, #664]	; (8002d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	f040 8532 	bne.w	8003552 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8002aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002af2:	61fb      	str	r3, [r7, #28]
      break;
 8002af4:	f000 bd2d 	b.w	8003552 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002af8:	4b9f      	ldr	r3, [pc, #636]	; (8002d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	f040 8527 	bne.w	8003556 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8002b08:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002b0c:	61fb      	str	r3, [r7, #28]
      break;
 8002b0e:	f000 bd22 	b.w	8003556 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002b12:	4b99      	ldr	r3, [pc, #612]	; (8002d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b1e:	f040 851c 	bne.w	800355a <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 8002b22:	4b96      	ldr	r3, [pc, #600]	; (8002d7c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8002b24:	61fb      	str	r3, [r7, #28]
      break;
 8002b26:	f000 bd18 	b.w	800355a <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b2a:	4b93      	ldr	r3, [pc, #588]	; (8002d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	d036      	beq.n	8002ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2b03      	cmp	r3, #3
 8002b3e:	d840      	bhi.n	8002bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d003      	beq.n	8002b4e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d020      	beq.n	8002b8e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8002b4c:	e039      	b.n	8002bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002b4e:	4b8a      	ldr	r3, [pc, #552]	; (8002d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d116      	bne.n	8002b88 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002b5a:	4b87      	ldr	r3, [pc, #540]	; (8002d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d005      	beq.n	8002b72 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8002b66:	4b84      	ldr	r3, [pc, #528]	; (8002d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	091b      	lsrs	r3, r3, #4
 8002b6c:	f003 030f 	and.w	r3, r3, #15
 8002b70:	e005      	b.n	8002b7e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8002b72:	4b81      	ldr	r3, [pc, #516]	; (8002d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002b74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b78:	0a1b      	lsrs	r3, r3, #8
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	4a80      	ldr	r2, [pc, #512]	; (8002d80 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8002b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b84:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002b86:	e01f      	b.n	8002bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	61bb      	str	r3, [r7, #24]
      break;
 8002b8c:	e01c      	b.n	8002bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002b8e:	4b7a      	ldr	r3, [pc, #488]	; (8002d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b9a:	d102      	bne.n	8002ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8002b9c:	4b79      	ldr	r3, [pc, #484]	; (8002d84 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002b9e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002ba0:	e012      	b.n	8002bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61bb      	str	r3, [r7, #24]
      break;
 8002ba6:	e00f      	b.n	8002bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002ba8:	4b73      	ldr	r3, [pc, #460]	; (8002d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bb4:	d102      	bne.n	8002bbc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8002bb6:	4b74      	ldr	r3, [pc, #464]	; (8002d88 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8002bb8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002bba:	e005      	b.n	8002bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	61bb      	str	r3, [r7, #24]
      break;
 8002bc0:	e002      	b.n	8002bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61bb      	str	r3, [r7, #24]
      break;
 8002bc6:	bf00      	nop
    }

    switch(PeriphClk)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002bce:	f000 80dd 	beq.w	8002d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002bd8:	f200 84c1 	bhi.w	800355e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002be2:	f000 80d3 	beq.w	8002d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bec:	f200 84b7 	bhi.w	800355e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf6:	f000 835f 	beq.w	80032b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c00:	f200 84ad 	bhi.w	800355e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c0a:	f000 847e 	beq.w	800350a <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c14:	f200 84a3 	bhi.w	800355e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c1e:	f000 82cd 	beq.w	80031bc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c28:	f200 8499 	bhi.w	800355e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c32:	f000 80ab 	beq.w	8002d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c3c:	f200 848f 	bhi.w	800355e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c46:	f000 8090 	beq.w	8002d6a <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c50:	f200 8485 	bhi.w	800355e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c5a:	d07f      	beq.n	8002d5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c62:	f200 847c 	bhi.w	800355e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c6c:	f000 8403 	beq.w	8003476 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c76:	f200 8472 	bhi.w	800355e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c80:	f000 83af 	beq.w	80033e2 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c8a:	f200 8468 	bhi.w	800355e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c94:	f000 8379 	beq.w	800338a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c9e:	f200 845e 	bhi.w	800355e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b80      	cmp	r3, #128	; 0x80
 8002ca6:	f000 8344 	beq.w	8003332 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b80      	cmp	r3, #128	; 0x80
 8002cae:	f200 8456 	bhi.w	800355e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b20      	cmp	r3, #32
 8002cb6:	d84b      	bhi.n	8002d50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 844f 	beq.w	800355e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	2b1f      	cmp	r3, #31
 8002cc6:	f200 844a 	bhi.w	800355e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002cca:	a201      	add	r2, pc, #4	; (adr r2, 8002cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8002ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd0:	08002eb9 	.word	0x08002eb9
 8002cd4:	08002f27 	.word	0x08002f27
 8002cd8:	0800355f 	.word	0x0800355f
 8002cdc:	08002fbb 	.word	0x08002fbb
 8002ce0:	0800355f 	.word	0x0800355f
 8002ce4:	0800355f 	.word	0x0800355f
 8002ce8:	0800355f 	.word	0x0800355f
 8002cec:	08003041 	.word	0x08003041
 8002cf0:	0800355f 	.word	0x0800355f
 8002cf4:	0800355f 	.word	0x0800355f
 8002cf8:	0800355f 	.word	0x0800355f
 8002cfc:	0800355f 	.word	0x0800355f
 8002d00:	0800355f 	.word	0x0800355f
 8002d04:	0800355f 	.word	0x0800355f
 8002d08:	0800355f 	.word	0x0800355f
 8002d0c:	080030b9 	.word	0x080030b9
 8002d10:	0800355f 	.word	0x0800355f
 8002d14:	0800355f 	.word	0x0800355f
 8002d18:	0800355f 	.word	0x0800355f
 8002d1c:	0800355f 	.word	0x0800355f
 8002d20:	0800355f 	.word	0x0800355f
 8002d24:	0800355f 	.word	0x0800355f
 8002d28:	0800355f 	.word	0x0800355f
 8002d2c:	0800355f 	.word	0x0800355f
 8002d30:	0800355f 	.word	0x0800355f
 8002d34:	0800355f 	.word	0x0800355f
 8002d38:	0800355f 	.word	0x0800355f
 8002d3c:	0800355f 	.word	0x0800355f
 8002d40:	0800355f 	.word	0x0800355f
 8002d44:	0800355f 	.word	0x0800355f
 8002d48:	0800355f 	.word	0x0800355f
 8002d4c:	0800313b 	.word	0x0800313b
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b40      	cmp	r3, #64	; 0x40
 8002d54:	f000 82c1 	beq.w	80032da <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8002d58:	f000 bc01 	b.w	800355e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8002d5c:	69b9      	ldr	r1, [r7, #24]
 8002d5e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002d62:	f000 fde9 	bl	8003938 <RCCEx_GetSAIxPeriphCLKFreq>
 8002d66:	61f8      	str	r0, [r7, #28]
      break;
 8002d68:	e3fa      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8002d6a:	69b9      	ldr	r1, [r7, #24]
 8002d6c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002d70:	f000 fde2 	bl	8003938 <RCCEx_GetSAIxPeriphCLKFreq>
 8002d74:	61f8      	str	r0, [r7, #28]
      break;
 8002d76:	e3f3      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	0003d090 	.word	0x0003d090
 8002d80:	08005984 	.word	0x08005984
 8002d84:	00f42400 	.word	0x00f42400
 8002d88:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8002d8c:	4ba9      	ldr	r3, [pc, #676]	; (8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d92:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002d9e:	d00c      	beq.n	8002dba <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002da6:	d87f      	bhi.n	8002ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dae:	d04e      	beq.n	8002e4e <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002db6:	d01d      	beq.n	8002df4 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8002db8:	e076      	b.n	8002ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002dba:	4b9e      	ldr	r3, [pc, #632]	; (8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d172      	bne.n	8002eac <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002dc6:	4b9b      	ldr	r3, [pc, #620]	; (8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d005      	beq.n	8002dde <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8002dd2:	4b98      	ldr	r3, [pc, #608]	; (8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	091b      	lsrs	r3, r3, #4
 8002dd8:	f003 030f 	and.w	r3, r3, #15
 8002ddc:	e005      	b.n	8002dea <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8002dde:	4b95      	ldr	r3, [pc, #596]	; (8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002de4:	0a1b      	lsrs	r3, r3, #8
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	4a93      	ldr	r2, [pc, #588]	; (8003038 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8002dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df0:	61fb      	str	r3, [r7, #28]
          break;
 8002df2:	e05b      	b.n	8002eac <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8002df4:	4b8f      	ldr	r3, [pc, #572]	; (8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e00:	d156      	bne.n	8002eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8002e02:	4b8c      	ldr	r3, [pc, #560]	; (8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e0e:	d14f      	bne.n	8002eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8002e10:	4b88      	ldr	r3, [pc, #544]	; (8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	0a1b      	lsrs	r3, r3, #8
 8002e16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e1a:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	fb03 f202 	mul.w	r2, r3, r2
 8002e24:	4b83      	ldr	r3, [pc, #524]	; (8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	091b      	lsrs	r3, r3, #4
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	3301      	adds	r3, #1
 8002e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e34:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8002e36:	4b7f      	ldr	r3, [pc, #508]	; (8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	0d5b      	lsrs	r3, r3, #21
 8002e3c:	f003 0303 	and.w	r3, r3, #3
 8002e40:	3301      	adds	r3, #1
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4a:	61fb      	str	r3, [r7, #28]
          break;
 8002e4c:	e030      	b.n	8002eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8002e4e:	4b79      	ldr	r3, [pc, #484]	; (8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e5a:	d12b      	bne.n	8002eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8002e5c:	4b75      	ldr	r3, [pc, #468]	; (8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e68:	d124      	bne.n	8002eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002e6a:	4b72      	ldr	r3, [pc, #456]	; (8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	0a1b      	lsrs	r3, r3, #8
 8002e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e74:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	fb03 f202 	mul.w	r2, r3, r2
 8002e7e:	4b6d      	ldr	r3, [pc, #436]	; (8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	091b      	lsrs	r3, r3, #4
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	3301      	adds	r3, #1
 8002e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8002e90:	4b68      	ldr	r3, [pc, #416]	; (8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	0d5b      	lsrs	r3, r3, #21
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea4:	61fb      	str	r3, [r7, #28]
          break;
 8002ea6:	e005      	b.n	8002eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8002ea8:	bf00      	nop
 8002eaa:	e359      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002eac:	bf00      	nop
 8002eae:	e357      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002eb0:	bf00      	nop
 8002eb2:	e355      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002eb4:	bf00      	nop
        break;
 8002eb6:	e353      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8002eb8:	4b5e      	ldr	r3, [pc, #376]	; (8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebe:	f003 0303 	and.w	r3, r3, #3
 8002ec2:	613b      	str	r3, [r7, #16]
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	2b03      	cmp	r3, #3
 8002ec8:	d827      	bhi.n	8002f1a <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8002eca:	a201      	add	r2, pc, #4	; (adr r2, 8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8002ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed0:	08002ee1 	.word	0x08002ee1
 8002ed4:	08002ee9 	.word	0x08002ee9
 8002ed8:	08002ef1 	.word	0x08002ef1
 8002edc:	08002f05 	.word	0x08002f05
          frequency = HAL_RCC_GetPCLK2Freq();
 8002ee0:	f7ff fa7a 	bl	80023d8 <HAL_RCC_GetPCLK2Freq>
 8002ee4:	61f8      	str	r0, [r7, #28]
          break;
 8002ee6:	e01d      	b.n	8002f24 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8002ee8:	f7ff f9c8 	bl	800227c <HAL_RCC_GetSysClockFreq>
 8002eec:	61f8      	str	r0, [r7, #28]
          break;
 8002eee:	e019      	b.n	8002f24 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002ef0:	4b50      	ldr	r3, [pc, #320]	; (8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002efc:	d10f      	bne.n	8002f1e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8002efe:	4b4f      	ldr	r3, [pc, #316]	; (800303c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8002f00:	61fb      	str	r3, [r7, #28]
          break;
 8002f02:	e00c      	b.n	8002f1e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002f04:	4b4b      	ldr	r3, [pc, #300]	; (8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d107      	bne.n	8002f22 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8002f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f16:	61fb      	str	r3, [r7, #28]
          break;
 8002f18:	e003      	b.n	8002f22 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8002f1a:	bf00      	nop
 8002f1c:	e320      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002f1e:	bf00      	nop
 8002f20:	e31e      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002f22:	bf00      	nop
        break;
 8002f24:	e31c      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8002f26:	4b43      	ldr	r3, [pc, #268]	; (8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2c:	f003 030c 	and.w	r3, r3, #12
 8002f30:	613b      	str	r3, [r7, #16]
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	2b0c      	cmp	r3, #12
 8002f36:	d83a      	bhi.n	8002fae <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8002f38:	a201      	add	r2, pc, #4	; (adr r2, 8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8002f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3e:	bf00      	nop
 8002f40:	08002f75 	.word	0x08002f75
 8002f44:	08002faf 	.word	0x08002faf
 8002f48:	08002faf 	.word	0x08002faf
 8002f4c:	08002faf 	.word	0x08002faf
 8002f50:	08002f7d 	.word	0x08002f7d
 8002f54:	08002faf 	.word	0x08002faf
 8002f58:	08002faf 	.word	0x08002faf
 8002f5c:	08002faf 	.word	0x08002faf
 8002f60:	08002f85 	.word	0x08002f85
 8002f64:	08002faf 	.word	0x08002faf
 8002f68:	08002faf 	.word	0x08002faf
 8002f6c:	08002faf 	.word	0x08002faf
 8002f70:	08002f99 	.word	0x08002f99
          frequency = HAL_RCC_GetPCLK1Freq();
 8002f74:	f7ff fa1a 	bl	80023ac <HAL_RCC_GetPCLK1Freq>
 8002f78:	61f8      	str	r0, [r7, #28]
          break;
 8002f7a:	e01d      	b.n	8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8002f7c:	f7ff f97e 	bl	800227c <HAL_RCC_GetSysClockFreq>
 8002f80:	61f8      	str	r0, [r7, #28]
          break;
 8002f82:	e019      	b.n	8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002f84:	4b2b      	ldr	r3, [pc, #172]	; (8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f90:	d10f      	bne.n	8002fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8002f92:	4b2a      	ldr	r3, [pc, #168]	; (800303c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8002f94:	61fb      	str	r3, [r7, #28]
          break;
 8002f96:	e00c      	b.n	8002fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002f98:	4b26      	ldr	r3, [pc, #152]	; (8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d107      	bne.n	8002fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8002fa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002faa:	61fb      	str	r3, [r7, #28]
          break;
 8002fac:	e003      	b.n	8002fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8002fae:	bf00      	nop
 8002fb0:	e2d6      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002fb2:	bf00      	nop
 8002fb4:	e2d4      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002fb6:	bf00      	nop
        break;
 8002fb8:	e2d2      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8002fba:	4b1e      	ldr	r3, [pc, #120]	; (8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002fc4:	613b      	str	r3, [r7, #16]
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	2b30      	cmp	r3, #48	; 0x30
 8002fca:	d021      	beq.n	8003010 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	2b30      	cmp	r3, #48	; 0x30
 8002fd0:	d829      	bhi.n	8003026 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	2b20      	cmp	r3, #32
 8002fd6:	d011      	beq.n	8002ffc <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	2b20      	cmp	r3, #32
 8002fdc:	d823      	bhi.n	8003026 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d003      	beq.n	8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	2b10      	cmp	r3, #16
 8002fe8:	d004      	beq.n	8002ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8002fea:	e01c      	b.n	8003026 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002fec:	f7ff f9de 	bl	80023ac <HAL_RCC_GetPCLK1Freq>
 8002ff0:	61f8      	str	r0, [r7, #28]
          break;
 8002ff2:	e01d      	b.n	8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8002ff4:	f7ff f942 	bl	800227c <HAL_RCC_GetSysClockFreq>
 8002ff8:	61f8      	str	r0, [r7, #28]
          break;
 8002ffa:	e019      	b.n	8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002ffc:	4b0d      	ldr	r3, [pc, #52]	; (8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003008:	d10f      	bne.n	800302a <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 800300a:	4b0c      	ldr	r3, [pc, #48]	; (800303c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800300c:	61fb      	str	r3, [r7, #28]
          break;
 800300e:	e00c      	b.n	800302a <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003010:	4b08      	ldr	r3, [pc, #32]	; (8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b02      	cmp	r3, #2
 800301c:	d107      	bne.n	800302e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 800301e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003022:	61fb      	str	r3, [r7, #28]
          break;
 8003024:	e003      	b.n	800302e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8003026:	bf00      	nop
 8003028:	e29a      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800302a:	bf00      	nop
 800302c:	e298      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800302e:	bf00      	nop
        break;
 8003030:	e296      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8003032:	bf00      	nop
 8003034:	40021000 	.word	0x40021000
 8003038:	08005984 	.word	0x08005984
 800303c:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003040:	4b9b      	ldr	r3, [pc, #620]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003046:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800304a:	613b      	str	r3, [r7, #16]
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	2bc0      	cmp	r3, #192	; 0xc0
 8003050:	d021      	beq.n	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	2bc0      	cmp	r3, #192	; 0xc0
 8003056:	d829      	bhi.n	80030ac <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	2b80      	cmp	r3, #128	; 0x80
 800305c:	d011      	beq.n	8003082 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	2b80      	cmp	r3, #128	; 0x80
 8003062:	d823      	bhi.n	80030ac <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	2b40      	cmp	r3, #64	; 0x40
 800306e:	d004      	beq.n	800307a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8003070:	e01c      	b.n	80030ac <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003072:	f7ff f99b 	bl	80023ac <HAL_RCC_GetPCLK1Freq>
 8003076:	61f8      	str	r0, [r7, #28]
          break;
 8003078:	e01d      	b.n	80030b6 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 800307a:	f7ff f8ff 	bl	800227c <HAL_RCC_GetSysClockFreq>
 800307e:	61f8      	str	r0, [r7, #28]
          break;
 8003080:	e019      	b.n	80030b6 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003082:	4b8b      	ldr	r3, [pc, #556]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800308a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800308e:	d10f      	bne.n	80030b0 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8003090:	4b88      	ldr	r3, [pc, #544]	; (80032b4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003092:	61fb      	str	r3, [r7, #28]
          break;
 8003094:	e00c      	b.n	80030b0 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003096:	4b86      	ldr	r3, [pc, #536]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d107      	bne.n	80030b4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 80030a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030a8:	61fb      	str	r3, [r7, #28]
          break;
 80030aa:	e003      	b.n	80030b4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 80030ac:	bf00      	nop
 80030ae:	e257      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80030b0:	bf00      	nop
 80030b2:	e255      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80030b4:	bf00      	nop
        break;
 80030b6:	e253      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80030b8:	4b7d      	ldr	r3, [pc, #500]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80030ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030ca:	d025      	beq.n	8003118 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030d2:	d82c      	bhi.n	800312e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030da:	d013      	beq.n	8003104 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030e2:	d824      	bhi.n	800312e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d004      	beq.n	80030f4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030f0:	d004      	beq.n	80030fc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 80030f2:	e01c      	b.n	800312e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 80030f4:	f7ff f95a 	bl	80023ac <HAL_RCC_GetPCLK1Freq>
 80030f8:	61f8      	str	r0, [r7, #28]
          break;
 80030fa:	e01d      	b.n	8003138 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 80030fc:	f7ff f8be 	bl	800227c <HAL_RCC_GetSysClockFreq>
 8003100:	61f8      	str	r0, [r7, #28]
          break;
 8003102:	e019      	b.n	8003138 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003104:	4b6a      	ldr	r3, [pc, #424]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800310c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003110:	d10f      	bne.n	8003132 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8003112:	4b68      	ldr	r3, [pc, #416]	; (80032b4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003114:	61fb      	str	r3, [r7, #28]
          break;
 8003116:	e00c      	b.n	8003132 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003118:	4b65      	ldr	r3, [pc, #404]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b02      	cmp	r3, #2
 8003124:	d107      	bne.n	8003136 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8003126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800312a:	61fb      	str	r3, [r7, #28]
          break;
 800312c:	e003      	b.n	8003136 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 800312e:	bf00      	nop
 8003130:	e216      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003132:	bf00      	nop
 8003134:	e214      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003136:	bf00      	nop
        break;
 8003138:	e212      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800313a:	4b5d      	ldr	r3, [pc, #372]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800313c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003140:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003144:	613b      	str	r3, [r7, #16]
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800314c:	d025      	beq.n	800319a <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003154:	d82c      	bhi.n	80031b0 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800315c:	d013      	beq.n	8003186 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003164:	d824      	bhi.n	80031b0 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d004      	beq.n	8003176 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003172:	d004      	beq.n	800317e <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8003174:	e01c      	b.n	80031b0 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003176:	f7ff f919 	bl	80023ac <HAL_RCC_GetPCLK1Freq>
 800317a:	61f8      	str	r0, [r7, #28]
          break;
 800317c:	e01d      	b.n	80031ba <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 800317e:	f7ff f87d 	bl	800227c <HAL_RCC_GetSysClockFreq>
 8003182:	61f8      	str	r0, [r7, #28]
          break;
 8003184:	e019      	b.n	80031ba <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003186:	4b4a      	ldr	r3, [pc, #296]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800318e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003192:	d10f      	bne.n	80031b4 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8003194:	4b47      	ldr	r3, [pc, #284]	; (80032b4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003196:	61fb      	str	r3, [r7, #28]
          break;
 8003198:	e00c      	b.n	80031b4 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800319a:	4b45      	ldr	r3, [pc, #276]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800319c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d107      	bne.n	80031b8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 80031a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031ac:	61fb      	str	r3, [r7, #28]
          break;
 80031ae:	e003      	b.n	80031b8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 80031b0:	bf00      	nop
 80031b2:	e1d5      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80031b4:	bf00      	nop
 80031b6:	e1d3      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80031b8:	bf00      	nop
        break;
 80031ba:	e1d1      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80031bc:	4b3c      	ldr	r3, [pc, #240]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80031be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031c6:	613b      	str	r3, [r7, #16]
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80031ce:	d00c      	beq.n	80031ea <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80031d6:	d864      	bhi.n	80032a2 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031de:	d008      	beq.n	80031f2 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031e6:	d030      	beq.n	800324a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 80031e8:	e05b      	b.n	80032a2 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 80031ea:	f7ff f847 	bl	800227c <HAL_RCC_GetSysClockFreq>
 80031ee:	61f8      	str	r0, [r7, #28]
          break;
 80031f0:	e05c      	b.n	80032ac <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80031f2:	4b2f      	ldr	r3, [pc, #188]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031fe:	d152      	bne.n	80032a6 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8003200:	4b2b      	ldr	r3, [pc, #172]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d04c      	beq.n	80032a6 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800320c:	4b28      	ldr	r3, [pc, #160]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	0a1b      	lsrs	r3, r3, #8
 8003212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003216:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	fb03 f202 	mul.w	r2, r3, r2
 8003220:	4b23      	ldr	r3, [pc, #140]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	091b      	lsrs	r3, r3, #4
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	3301      	adds	r3, #1
 800322c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003230:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8003232:	4b1f      	ldr	r3, [pc, #124]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	0e5b      	lsrs	r3, r3, #25
 8003238:	f003 0303 	and.w	r3, r3, #3
 800323c:	3301      	adds	r3, #1
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	fbb2 f3f3 	udiv	r3, r2, r3
 8003246:	61fb      	str	r3, [r7, #28]
          break;
 8003248:	e02d      	b.n	80032a6 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800324a:	4b19      	ldr	r3, [pc, #100]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003252:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003256:	d128      	bne.n	80032aa <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8003258:	4b15      	ldr	r3, [pc, #84]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d022      	beq.n	80032aa <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8003264:	4b12      	ldr	r3, [pc, #72]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	0a1b      	lsrs	r3, r3, #8
 800326a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800326e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	fb03 f202 	mul.w	r2, r3, r2
 8003278:	4b0d      	ldr	r3, [pc, #52]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	091b      	lsrs	r3, r3, #4
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	3301      	adds	r3, #1
 8003284:	fbb2 f3f3 	udiv	r3, r2, r3
 8003288:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800328a:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	0e5b      	lsrs	r3, r3, #25
 8003290:	f003 0303 	and.w	r3, r3, #3
 8003294:	3301      	adds	r3, #1
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	fbb2 f3f3 	udiv	r3, r2, r3
 800329e:	61fb      	str	r3, [r7, #28]
          break;
 80032a0:	e003      	b.n	80032aa <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 80032a2:	bf00      	nop
 80032a4:	e15c      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80032a6:	bf00      	nop
 80032a8:	e15a      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80032aa:	bf00      	nop
        break;
 80032ac:	e158      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80032ae:	bf00      	nop
 80032b0:	40021000 	.word	0x40021000
 80032b4:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80032b8:	4b9d      	ldr	r3, [pc, #628]	; (8003530 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80032ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032c2:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d103      	bne.n	80032d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 80032ca:	f7ff f885 	bl	80023d8 <HAL_RCC_GetPCLK2Freq>
 80032ce:	61f8      	str	r0, [r7, #28]
        break;
 80032d0:	e146      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 80032d2:	f7fe ffd3 	bl	800227c <HAL_RCC_GetSysClockFreq>
 80032d6:	61f8      	str	r0, [r7, #28]
        break;
 80032d8:	e142      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80032da:	4b95      	ldr	r3, [pc, #596]	; (8003530 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80032dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80032e4:	613b      	str	r3, [r7, #16]
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ec:	d013      	beq.n	8003316 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032f4:	d819      	bhi.n	800332a <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d004      	beq.n	8003306 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003302:	d004      	beq.n	800330e <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8003304:	e011      	b.n	800332a <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003306:	f7ff f851 	bl	80023ac <HAL_RCC_GetPCLK1Freq>
 800330a:	61f8      	str	r0, [r7, #28]
          break;
 800330c:	e010      	b.n	8003330 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 800330e:	f7fe ffb5 	bl	800227c <HAL_RCC_GetSysClockFreq>
 8003312:	61f8      	str	r0, [r7, #28]
          break;
 8003314:	e00c      	b.n	8003330 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003316:	4b86      	ldr	r3, [pc, #536]	; (8003530 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800331e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003322:	d104      	bne.n	800332e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8003324:	4b83      	ldr	r3, [pc, #524]	; (8003534 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003326:	61fb      	str	r3, [r7, #28]
          break;
 8003328:	e001      	b.n	800332e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 800332a:	bf00      	nop
 800332c:	e118      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800332e:	bf00      	nop
        break;
 8003330:	e116      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8003332:	4b7f      	ldr	r3, [pc, #508]	; (8003530 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003338:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003344:	d013      	beq.n	800336e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800334c:	d819      	bhi.n	8003382 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d004      	beq.n	800335e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800335a:	d004      	beq.n	8003366 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 800335c:	e011      	b.n	8003382 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 800335e:	f7ff f825 	bl	80023ac <HAL_RCC_GetPCLK1Freq>
 8003362:	61f8      	str	r0, [r7, #28]
          break;
 8003364:	e010      	b.n	8003388 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003366:	f7fe ff89 	bl	800227c <HAL_RCC_GetSysClockFreq>
 800336a:	61f8      	str	r0, [r7, #28]
          break;
 800336c:	e00c      	b.n	8003388 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800336e:	4b70      	ldr	r3, [pc, #448]	; (8003530 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800337a:	d104      	bne.n	8003386 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 800337c:	4b6d      	ldr	r3, [pc, #436]	; (8003534 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800337e:	61fb      	str	r3, [r7, #28]
          break;
 8003380:	e001      	b.n	8003386 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8003382:	bf00      	nop
 8003384:	e0ec      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003386:	bf00      	nop
        break;
 8003388:	e0ea      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800338a:	4b69      	ldr	r3, [pc, #420]	; (8003530 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800338c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003390:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003394:	613b      	str	r3, [r7, #16]
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800339c:	d013      	beq.n	80033c6 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033a4:	d819      	bhi.n	80033da <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d004      	beq.n	80033b6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b2:	d004      	beq.n	80033be <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 80033b4:	e011      	b.n	80033da <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 80033b6:	f7fe fff9 	bl	80023ac <HAL_RCC_GetPCLK1Freq>
 80033ba:	61f8      	str	r0, [r7, #28]
          break;
 80033bc:	e010      	b.n	80033e0 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 80033be:	f7fe ff5d 	bl	800227c <HAL_RCC_GetSysClockFreq>
 80033c2:	61f8      	str	r0, [r7, #28]
          break;
 80033c4:	e00c      	b.n	80033e0 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80033c6:	4b5a      	ldr	r3, [pc, #360]	; (8003530 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033d2:	d104      	bne.n	80033de <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 80033d4:	4b57      	ldr	r3, [pc, #348]	; (8003534 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80033d6:	61fb      	str	r3, [r7, #28]
          break;
 80033d8:	e001      	b.n	80033de <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 80033da:	bf00      	nop
 80033dc:	e0c0      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80033de:	bf00      	nop
        break;
 80033e0:	e0be      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80033e2:	4b53      	ldr	r3, [pc, #332]	; (8003530 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80033e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80033ec:	613b      	str	r3, [r7, #16]
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033f4:	d02c      	beq.n	8003450 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033fc:	d833      	bhi.n	8003466 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003404:	d01a      	beq.n	800343c <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800340c:	d82b      	bhi.n	8003466 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d004      	beq.n	800341e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800341a:	d004      	beq.n	8003426 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 800341c:	e023      	b.n	8003466 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 800341e:	f7fe ffc5 	bl	80023ac <HAL_RCC_GetPCLK1Freq>
 8003422:	61f8      	str	r0, [r7, #28]
          break;
 8003424:	e026      	b.n	8003474 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003426:	4b42      	ldr	r3, [pc, #264]	; (8003530 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003428:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b02      	cmp	r3, #2
 8003432:	d11a      	bne.n	800346a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8003434:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003438:	61fb      	str	r3, [r7, #28]
          break;
 800343a:	e016      	b.n	800346a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800343c:	4b3c      	ldr	r3, [pc, #240]	; (8003530 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003448:	d111      	bne.n	800346e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 800344a:	4b3a      	ldr	r3, [pc, #232]	; (8003534 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800344c:	61fb      	str	r3, [r7, #28]
          break;
 800344e:	e00e      	b.n	800346e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003450:	4b37      	ldr	r3, [pc, #220]	; (8003530 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b02      	cmp	r3, #2
 800345c:	d109      	bne.n	8003472 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 800345e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003462:	61fb      	str	r3, [r7, #28]
          break;
 8003464:	e005      	b.n	8003472 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8003466:	bf00      	nop
 8003468:	e07a      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800346a:	bf00      	nop
 800346c:	e078      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800346e:	bf00      	nop
 8003470:	e076      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003472:	bf00      	nop
        break;
 8003474:	e074      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003476:	4b2e      	ldr	r3, [pc, #184]	; (8003530 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003480:	613b      	str	r3, [r7, #16]
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003488:	d02c      	beq.n	80034e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003490:	d833      	bhi.n	80034fa <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003498:	d01a      	beq.n	80034d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034a0:	d82b      	bhi.n	80034fa <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d004      	beq.n	80034b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ae:	d004      	beq.n	80034ba <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 80034b0:	e023      	b.n	80034fa <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 80034b2:	f7fe ff7b 	bl	80023ac <HAL_RCC_GetPCLK1Freq>
 80034b6:	61f8      	str	r0, [r7, #28]
          break;
 80034b8:	e026      	b.n	8003508 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80034ba:	4b1d      	ldr	r3, [pc, #116]	; (8003530 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80034bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d11a      	bne.n	80034fe <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 80034c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80034cc:	61fb      	str	r3, [r7, #28]
          break;
 80034ce:	e016      	b.n	80034fe <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80034d0:	4b17      	ldr	r3, [pc, #92]	; (8003530 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034dc:	d111      	bne.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 80034de:	4b15      	ldr	r3, [pc, #84]	; (8003534 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80034e0:	61fb      	str	r3, [r7, #28]
          break;
 80034e2:	e00e      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80034e4:	4b12      	ldr	r3, [pc, #72]	; (8003530 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80034e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d109      	bne.n	8003506 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 80034f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034f6:	61fb      	str	r3, [r7, #28]
          break;
 80034f8:	e005      	b.n	8003506 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 80034fa:	bf00      	nop
 80034fc:	e030      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80034fe:	bf00      	nop
 8003500:	e02e      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003502:	bf00      	nop
 8003504:	e02c      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003506:	bf00      	nop
        break;
 8003508:	e02a      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800350a:	4b09      	ldr	r3, [pc, #36]	; (8003530 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800350c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003510:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d004      	beq.n	8003526 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003522:	d009      	beq.n	8003538 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8003524:	e012      	b.n	800354c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003526:	f7fe ff41 	bl	80023ac <HAL_RCC_GetPCLK1Freq>
 800352a:	61f8      	str	r0, [r7, #28]
          break;
 800352c:	e00e      	b.n	800354c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 800352e:	bf00      	nop
 8003530:	40021000 	.word	0x40021000
 8003534:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003538:	4b0c      	ldr	r3, [pc, #48]	; (800356c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003544:	d101      	bne.n	800354a <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8003546:	4b0a      	ldr	r3, [pc, #40]	; (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8003548:	61fb      	str	r3, [r7, #28]
          break;
 800354a:	bf00      	nop
        break;
 800354c:	e008      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800354e:	bf00      	nop
 8003550:	e006      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003552:	bf00      	nop
 8003554:	e004      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003556:	bf00      	nop
 8003558:	e002      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800355a:	bf00      	nop
 800355c:	e000      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800355e:	bf00      	nop
    }
  }

  return(frequency);
 8003560:	69fb      	ldr	r3, [r7, #28]
}
 8003562:	4618      	mov	r0, r3
 8003564:	3720      	adds	r7, #32
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40021000 	.word	0x40021000
 8003570:	00f42400 	.word	0x00f42400

08003574 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003578:	4b05      	ldr	r3, [pc, #20]	; (8003590 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a04      	ldr	r2, [pc, #16]	; (8003590 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800357e:	f043 0304 	orr.w	r3, r3, #4
 8003582:	6013      	str	r3, [r2, #0]
}
 8003584:	bf00      	nop
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	40021000 	.word	0x40021000

08003594 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035a2:	4b75      	ldr	r3, [pc, #468]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	f003 0303 	and.w	r3, r3, #3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d018      	beq.n	80035e0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035ae:	4b72      	ldr	r3, [pc, #456]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f003 0203 	and.w	r2, r3, #3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d10d      	bne.n	80035da <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
       ||
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d009      	beq.n	80035da <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80035c6:	4b6c      	ldr	r3, [pc, #432]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	091b      	lsrs	r3, r3, #4
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
       ||
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d047      	beq.n	800366a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	73fb      	strb	r3, [r7, #15]
 80035de:	e044      	b.n	800366a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b03      	cmp	r3, #3
 80035e6:	d018      	beq.n	800361a <RCCEx_PLLSAI1_Config+0x86>
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d825      	bhi.n	8003638 <RCCEx_PLLSAI1_Config+0xa4>
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d002      	beq.n	80035f6 <RCCEx_PLLSAI1_Config+0x62>
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d009      	beq.n	8003608 <RCCEx_PLLSAI1_Config+0x74>
 80035f4:	e020      	b.n	8003638 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035f6:	4b60      	ldr	r3, [pc, #384]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d11d      	bne.n	800363e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003606:	e01a      	b.n	800363e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003608:	4b5b      	ldr	r3, [pc, #364]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003610:	2b00      	cmp	r3, #0
 8003612:	d116      	bne.n	8003642 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003618:	e013      	b.n	8003642 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800361a:	4b57      	ldr	r3, [pc, #348]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10f      	bne.n	8003646 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003626:	4b54      	ldr	r3, [pc, #336]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d109      	bne.n	8003646 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003636:	e006      	b.n	8003646 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	73fb      	strb	r3, [r7, #15]
      break;
 800363c:	e004      	b.n	8003648 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800363e:	bf00      	nop
 8003640:	e002      	b.n	8003648 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003642:	bf00      	nop
 8003644:	e000      	b.n	8003648 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003646:	bf00      	nop
    }

    if(status == HAL_OK)
 8003648:	7bfb      	ldrb	r3, [r7, #15]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10d      	bne.n	800366a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800364e:	4b4a      	ldr	r3, [pc, #296]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6819      	ldr	r1, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	3b01      	subs	r3, #1
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	430b      	orrs	r3, r1
 8003664:	4944      	ldr	r1, [pc, #272]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003666:	4313      	orrs	r3, r2
 8003668:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800366a:	7bfb      	ldrb	r3, [r7, #15]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d17d      	bne.n	800376c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003670:	4b41      	ldr	r3, [pc, #260]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a40      	ldr	r2, [pc, #256]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003676:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800367a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800367c:	f7fd fbd6 	bl	8000e2c <HAL_GetTick>
 8003680:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003682:	e009      	b.n	8003698 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003684:	f7fd fbd2 	bl	8000e2c <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d902      	bls.n	8003698 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	73fb      	strb	r3, [r7, #15]
        break;
 8003696:	e005      	b.n	80036a4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003698:	4b37      	ldr	r3, [pc, #220]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1ef      	bne.n	8003684 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d160      	bne.n	800376c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d111      	bne.n	80036d4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036b0:	4b31      	ldr	r3, [pc, #196]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80036b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6892      	ldr	r2, [r2, #8]
 80036c0:	0211      	lsls	r1, r2, #8
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	68d2      	ldr	r2, [r2, #12]
 80036c6:	0912      	lsrs	r2, r2, #4
 80036c8:	0452      	lsls	r2, r2, #17
 80036ca:	430a      	orrs	r2, r1
 80036cc:	492a      	ldr	r1, [pc, #168]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	610b      	str	r3, [r1, #16]
 80036d2:	e027      	b.n	8003724 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d112      	bne.n	8003700 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036da:	4b27      	ldr	r3, [pc, #156]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80036e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6892      	ldr	r2, [r2, #8]
 80036ea:	0211      	lsls	r1, r2, #8
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	6912      	ldr	r2, [r2, #16]
 80036f0:	0852      	lsrs	r2, r2, #1
 80036f2:	3a01      	subs	r2, #1
 80036f4:	0552      	lsls	r2, r2, #21
 80036f6:	430a      	orrs	r2, r1
 80036f8:	491f      	ldr	r1, [pc, #124]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	610b      	str	r3, [r1, #16]
 80036fe:	e011      	b.n	8003724 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003700:	4b1d      	ldr	r3, [pc, #116]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003708:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6892      	ldr	r2, [r2, #8]
 8003710:	0211      	lsls	r1, r2, #8
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	6952      	ldr	r2, [r2, #20]
 8003716:	0852      	lsrs	r2, r2, #1
 8003718:	3a01      	subs	r2, #1
 800371a:	0652      	lsls	r2, r2, #25
 800371c:	430a      	orrs	r2, r1
 800371e:	4916      	ldr	r1, [pc, #88]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003720:	4313      	orrs	r3, r2
 8003722:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003724:	4b14      	ldr	r3, [pc, #80]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a13      	ldr	r2, [pc, #76]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 800372a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800372e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003730:	f7fd fb7c 	bl	8000e2c <HAL_GetTick>
 8003734:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003736:	e009      	b.n	800374c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003738:	f7fd fb78 	bl	8000e2c <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d902      	bls.n	800374c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	73fb      	strb	r3, [r7, #15]
          break;
 800374a:	e005      	b.n	8003758 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800374c:	4b0a      	ldr	r3, [pc, #40]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0ef      	beq.n	8003738 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003758:	7bfb      	ldrb	r3, [r7, #15]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d106      	bne.n	800376c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800375e:	4b06      	ldr	r3, [pc, #24]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003760:	691a      	ldr	r2, [r3, #16]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	4904      	ldr	r1, [pc, #16]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003768:	4313      	orrs	r3, r2
 800376a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800376c:	7bfb      	ldrb	r3, [r7, #15]
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40021000 	.word	0x40021000

0800377c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003786:	2300      	movs	r3, #0
 8003788:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800378a:	4b6a      	ldr	r3, [pc, #424]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d018      	beq.n	80037c8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003796:	4b67      	ldr	r3, [pc, #412]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	f003 0203 	and.w	r2, r3, #3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d10d      	bne.n	80037c2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
       ||
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d009      	beq.n	80037c2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80037ae:	4b61      	ldr	r3, [pc, #388]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	091b      	lsrs	r3, r3, #4
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
       ||
 80037be:	429a      	cmp	r2, r3
 80037c0:	d047      	beq.n	8003852 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	73fb      	strb	r3, [r7, #15]
 80037c6:	e044      	b.n	8003852 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b03      	cmp	r3, #3
 80037ce:	d018      	beq.n	8003802 <RCCEx_PLLSAI2_Config+0x86>
 80037d0:	2b03      	cmp	r3, #3
 80037d2:	d825      	bhi.n	8003820 <RCCEx_PLLSAI2_Config+0xa4>
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d002      	beq.n	80037de <RCCEx_PLLSAI2_Config+0x62>
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d009      	beq.n	80037f0 <RCCEx_PLLSAI2_Config+0x74>
 80037dc:	e020      	b.n	8003820 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037de:	4b55      	ldr	r3, [pc, #340]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d11d      	bne.n	8003826 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ee:	e01a      	b.n	8003826 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037f0:	4b50      	ldr	r3, [pc, #320]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d116      	bne.n	800382a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003800:	e013      	b.n	800382a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003802:	4b4c      	ldr	r3, [pc, #304]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10f      	bne.n	800382e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800380e:	4b49      	ldr	r3, [pc, #292]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d109      	bne.n	800382e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800381e:	e006      	b.n	800382e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	73fb      	strb	r3, [r7, #15]
      break;
 8003824:	e004      	b.n	8003830 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003826:	bf00      	nop
 8003828:	e002      	b.n	8003830 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800382a:	bf00      	nop
 800382c:	e000      	b.n	8003830 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800382e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003830:	7bfb      	ldrb	r3, [r7, #15]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10d      	bne.n	8003852 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003836:	4b3f      	ldr	r3, [pc, #252]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6819      	ldr	r1, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	3b01      	subs	r3, #1
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	430b      	orrs	r3, r1
 800384c:	4939      	ldr	r1, [pc, #228]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 800384e:	4313      	orrs	r3, r2
 8003850:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003852:	7bfb      	ldrb	r3, [r7, #15]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d167      	bne.n	8003928 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003858:	4b36      	ldr	r3, [pc, #216]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a35      	ldr	r2, [pc, #212]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 800385e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003862:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003864:	f7fd fae2 	bl	8000e2c <HAL_GetTick>
 8003868:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800386a:	e009      	b.n	8003880 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800386c:	f7fd fade 	bl	8000e2c <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d902      	bls.n	8003880 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	73fb      	strb	r3, [r7, #15]
        break;
 800387e:	e005      	b.n	800388c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003880:	4b2c      	ldr	r3, [pc, #176]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1ef      	bne.n	800386c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800388c:	7bfb      	ldrb	r3, [r7, #15]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d14a      	bne.n	8003928 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d111      	bne.n	80038bc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003898:	4b26      	ldr	r3, [pc, #152]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6892      	ldr	r2, [r2, #8]
 80038a8:	0211      	lsls	r1, r2, #8
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	68d2      	ldr	r2, [r2, #12]
 80038ae:	0912      	lsrs	r2, r2, #4
 80038b0:	0452      	lsls	r2, r2, #17
 80038b2:	430a      	orrs	r2, r1
 80038b4:	491f      	ldr	r1, [pc, #124]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	614b      	str	r3, [r1, #20]
 80038ba:	e011      	b.n	80038e0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038bc:	4b1d      	ldr	r3, [pc, #116]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6892      	ldr	r2, [r2, #8]
 80038cc:	0211      	lsls	r1, r2, #8
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6912      	ldr	r2, [r2, #16]
 80038d2:	0852      	lsrs	r2, r2, #1
 80038d4:	3a01      	subs	r2, #1
 80038d6:	0652      	lsls	r2, r2, #25
 80038d8:	430a      	orrs	r2, r1
 80038da:	4916      	ldr	r1, [pc, #88]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80038e0:	4b14      	ldr	r3, [pc, #80]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a13      	ldr	r2, [pc, #76]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ec:	f7fd fa9e 	bl	8000e2c <HAL_GetTick>
 80038f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038f2:	e009      	b.n	8003908 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038f4:	f7fd fa9a 	bl	8000e2c <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d902      	bls.n	8003908 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	73fb      	strb	r3, [r7, #15]
          break;
 8003906:	e005      	b.n	8003914 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003908:	4b0a      	ldr	r3, [pc, #40]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0ef      	beq.n	80038f4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003914:	7bfb      	ldrb	r3, [r7, #15]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d106      	bne.n	8003928 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800391a:	4b06      	ldr	r3, [pc, #24]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 800391c:	695a      	ldr	r2, [r3, #20]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	4904      	ldr	r1, [pc, #16]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003924:	4313      	orrs	r3, r2
 8003926:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003928:	7bfb      	ldrb	r3, [r7, #15]
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40021000 	.word	0x40021000

08003938 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8003938:	b480      	push	{r7}
 800393a:	b089      	sub	sp, #36	; 0x24
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8003942:	2300      	movs	r3, #0
 8003944:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8003946:	2300      	movs	r3, #0
 8003948:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800394a:	2300      	movs	r3, #0
 800394c:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003954:	d10c      	bne.n	8003970 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8003956:	4b6e      	ldr	r3, [pc, #440]	; (8003b10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003960:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003968:	d112      	bne.n	8003990 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800396a:	4b6a      	ldr	r3, [pc, #424]	; (8003b14 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800396c:	61fb      	str	r3, [r7, #28]
 800396e:	e00f      	b.n	8003990 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003976:	d10b      	bne.n	8003990 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8003978:	4b65      	ldr	r3, [pc, #404]	; (8003b10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800397a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8003982:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800398a:	d101      	bne.n	8003990 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800398c:	4b61      	ldr	r3, [pc, #388]	; (8003b14 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800398e:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	2b00      	cmp	r3, #0
 8003994:	f040 80b4 	bne.w	8003b00 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039a2:	d003      	beq.n	80039ac <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039aa:	d135      	bne.n	8003a18 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80039ac:	4b58      	ldr	r3, [pc, #352]	; (8003b10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039b8:	f040 80a1 	bne.w	8003afe <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 80039bc:	4b54      	ldr	r3, [pc, #336]	; (8003b10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 809a 	beq.w	8003afe <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80039ca:	4b51      	ldr	r3, [pc, #324]	; (8003b10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	091b      	lsrs	r3, r3, #4
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	3301      	adds	r3, #1
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039dc:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80039de:	4b4c      	ldr	r3, [pc, #304]	; (8003b10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	0a1b      	lsrs	r3, r3, #8
 80039e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039e8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10a      	bne.n	8003a06 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80039f0:	4b47      	ldr	r3, [pc, #284]	; (8003b10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d002      	beq.n	8003a02 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 80039fc:	2311      	movs	r3, #17
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	e001      	b.n	8003a06 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8003a02:	2307      	movs	r3, #7
 8003a04:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	fb03 f202 	mul.w	r2, r3, r2
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a14:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8003a16:	e072      	b.n	8003afe <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d133      	bne.n	8003a86 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8003a1e:	4b3c      	ldr	r3, [pc, #240]	; (8003b10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a2a:	d169      	bne.n	8003b00 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8003a2c:	4b38      	ldr	r3, [pc, #224]	; (8003b10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d063      	beq.n	8003b00 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003a38:	4b35      	ldr	r3, [pc, #212]	; (8003b10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	091b      	lsrs	r3, r3, #4
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	3301      	adds	r3, #1
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003a4c:	4b30      	ldr	r3, [pc, #192]	; (8003b10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	0a1b      	lsrs	r3, r3, #8
 8003a52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a56:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10a      	bne.n	8003a74 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8003a5e:	4b2c      	ldr	r3, [pc, #176]	; (8003b10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8003a6a:	2311      	movs	r3, #17
 8003a6c:	617b      	str	r3, [r7, #20]
 8003a6e:	e001      	b.n	8003a74 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8003a70:	2307      	movs	r3, #7
 8003a72:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	fb03 f202 	mul.w	r2, r3, r2
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a82:	61fb      	str	r3, [r7, #28]
 8003a84:	e03c      	b.n	8003b00 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a8c:	d003      	beq.n	8003a96 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a94:	d134      	bne.n	8003b00 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8003a96:	4b1e      	ldr	r3, [pc, #120]	; (8003b10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aa2:	d12d      	bne.n	8003b00 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8003aa4:	4b1a      	ldr	r3, [pc, #104]	; (8003b10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d027      	beq.n	8003b00 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003ab0:	4b17      	ldr	r3, [pc, #92]	; (8003b10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	091b      	lsrs	r3, r3, #4
 8003ab6:	f003 0307 	and.w	r3, r3, #7
 8003aba:	3301      	adds	r3, #1
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac2:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8003ac4:	4b12      	ldr	r3, [pc, #72]	; (8003b10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	0a1b      	lsrs	r3, r3, #8
 8003aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ace:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10a      	bne.n	8003aec <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8003ad6:	4b0e      	ldr	r3, [pc, #56]	; (8003b10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8003ae2:	2311      	movs	r3, #17
 8003ae4:	617b      	str	r3, [r7, #20]
 8003ae6:	e001      	b.n	8003aec <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8003ae8:	2307      	movs	r3, #7
 8003aea:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	fb03 f202 	mul.w	r2, r3, r2
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afa:	61fb      	str	r3, [r7, #28]
 8003afc:	e000      	b.n	8003b00 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8003afe:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8003b00:	69fb      	ldr	r3, [r7, #28]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3724      	adds	r7, #36	; 0x24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	40021000 	.word	0x40021000
 8003b14:	001fff68 	.word	0x001fff68

08003b18 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
 8003b24:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d904      	bls.n	8003b36 <HAL_SAI_InitProtocol+0x1e>
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	3b03      	subs	r3, #3
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d812      	bhi.n	8003b5a <HAL_SAI_InitProtocol+0x42>
 8003b34:	e008      	b.n	8003b48 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	68b9      	ldr	r1, [r7, #8]
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f000 fa2b 	bl	8003f98 <SAI_InitI2S>
 8003b42:	4603      	mov	r3, r0
 8003b44:	75fb      	strb	r3, [r7, #23]
      break;
 8003b46:	e00b      	b.n	8003b60 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	68b9      	ldr	r1, [r7, #8]
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 fad4 	bl	80040fc <SAI_InitPCM>
 8003b54:	4603      	mov	r3, r0
 8003b56:	75fb      	strb	r3, [r7, #23]
      break;
 8003b58:	e002      	b.n	8003b60 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	75fb      	strb	r3, [r7, #23]
      break;
 8003b5e:	bf00      	nop
  }

  if (status == HAL_OK)
 8003b60:	7dfb      	ldrb	r3, [r7, #23]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d104      	bne.n	8003b70 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 f808 	bl	8003b7c <HAL_SAI_Init>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3718      	adds	r7, #24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
	...

08003b7c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e155      	b.n	8003e3a <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d106      	bne.n	8003ba8 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7fc ff9e 	bl	8000ae4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 fb61 	bl	8004270 <SAI_Disable>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e140      	b.n	8003e3a <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d00c      	beq.n	8003be2 <HAL_SAI_Init+0x66>
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d80d      	bhi.n	8003be8 <HAL_SAI_Init+0x6c>
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d002      	beq.n	8003bd6 <HAL_SAI_Init+0x5a>
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d003      	beq.n	8003bdc <HAL_SAI_Init+0x60>
 8003bd4:	e008      	b.n	8003be8 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	61fb      	str	r3, [r7, #28]
      break;
 8003bda:	e008      	b.n	8003bee <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8003bdc:	2310      	movs	r3, #16
 8003bde:	61fb      	str	r3, [r7, #28]
      break;
 8003be0:	e005      	b.n	8003bee <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8003be2:	2320      	movs	r3, #32
 8003be4:	61fb      	str	r3, [r7, #28]
      break;
 8003be6:	e002      	b.n	8003bee <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8003be8:	2300      	movs	r3, #0
 8003bea:	61fb      	str	r3, [r7, #28]
      break;
 8003bec:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	2b03      	cmp	r3, #3
 8003bf4:	d81d      	bhi.n	8003c32 <HAL_SAI_Init+0xb6>
 8003bf6:	a201      	add	r2, pc, #4	; (adr r2, 8003bfc <HAL_SAI_Init+0x80>)
 8003bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfc:	08003c0d 	.word	0x08003c0d
 8003c00:	08003c13 	.word	0x08003c13
 8003c04:	08003c1b 	.word	0x08003c1b
 8003c08:	08003c23 	.word	0x08003c23
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	617b      	str	r3, [r7, #20]
      break;
 8003c10:	e012      	b.n	8003c38 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8003c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c16:	617b      	str	r3, [r7, #20]
      break;
 8003c18:	e00e      	b.n	8003c38 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8003c1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c1e:	617b      	str	r3, [r7, #20]
      break;
 8003c20:	e00a      	b.n	8003c38 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8003c22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c26:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	f043 0301 	orr.w	r3, r3, #1
 8003c2e:	61fb      	str	r3, [r7, #28]
      break;
 8003c30:	e002      	b.n	8003c38 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8003c32:	2300      	movs	r3, #0
 8003c34:	617b      	str	r3, [r7, #20]
      break;
 8003c36:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a81      	ldr	r2, [pc, #516]	; (8003e44 <HAL_SAI_Init+0x2c8>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d004      	beq.n	8003c4c <HAL_SAI_Init+0xd0>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a80      	ldr	r2, [pc, #512]	; (8003e48 <HAL_SAI_Init+0x2cc>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d103      	bne.n	8003c54 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8003c4c:	4a7f      	ldr	r2, [pc, #508]	; (8003e4c <HAL_SAI_Init+0x2d0>)
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	6013      	str	r3, [r2, #0]
 8003c52:	e002      	b.n	8003c5a <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8003c54:	4a7e      	ldr	r2, [pc, #504]	; (8003e50 <HAL_SAI_Init+0x2d4>)
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d041      	beq.n	8003ce6 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a77      	ldr	r2, [pc, #476]	; (8003e44 <HAL_SAI_Init+0x2c8>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d004      	beq.n	8003c76 <HAL_SAI_Init+0xfa>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a75      	ldr	r2, [pc, #468]	; (8003e48 <HAL_SAI_Init+0x2cc>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d105      	bne.n	8003c82 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8003c76:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003c7a:	f7fe ff0d 	bl	8002a98 <HAL_RCCEx_GetPeriphCLKFreq>
 8003c7e:	6138      	str	r0, [r7, #16]
 8003c80:	e004      	b.n	8003c8c <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8003c82:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003c86:	f7fe ff07 	bl	8002a98 <HAL_RCCEx_GetPeriphCLKFreq>
 8003c8a:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	461a      	mov	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	025b      	lsls	r3, r3, #9
 8003c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca2:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4a6b      	ldr	r2, [pc, #428]	; (8003e54 <HAL_SAI_Init+0x2d8>)
 8003ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cac:	08da      	lsrs	r2, r3, #3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8003cb2:	68f9      	ldr	r1, [r7, #12]
 8003cb4:	4b67      	ldr	r3, [pc, #412]	; (8003e54 <HAL_SAI_Init+0x2d8>)
 8003cb6:	fba3 2301 	umull	r2, r3, r3, r1
 8003cba:	08da      	lsrs	r2, r3, #3
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4413      	add	r3, r2
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	1aca      	subs	r2, r1, r3
 8003cc6:	2a08      	cmp	r2, #8
 8003cc8:	d904      	bls.n	8003cd4 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd8:	2b04      	cmp	r3, #4
 8003cda:	d104      	bne.n	8003ce6 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	085a      	lsrs	r2, r3, #1
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <HAL_SAI_Init+0x17a>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d109      	bne.n	8003d0a <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d101      	bne.n	8003d02 <HAL_SAI_Init+0x186>
 8003cfe:	2300      	movs	r3, #0
 8003d00:	e001      	b.n	8003d06 <HAL_SAI_Init+0x18a>
 8003d02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d06:	61bb      	str	r3, [r7, #24]
 8003d08:	e008      	b.n	8003d1c <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d102      	bne.n	8003d18 <HAL_SAI_Init+0x19c>
 8003d12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d16:	e000      	b.n	8003d1a <HAL_SAI_Init+0x19e>
 8003d18:	2300      	movs	r3, #0
 8003d1a:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6819      	ldr	r1, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	4b4c      	ldr	r3, [pc, #304]	; (8003e58 <HAL_SAI_Init+0x2dc>)
 8003d28:	400b      	ands	r3, r1
 8003d2a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6819      	ldr	r1, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003d40:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d46:	431a      	orrs	r2, r3
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8003d54:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003d60:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	051b      	lsls	r3, r3, #20
 8003d68:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	6812      	ldr	r2, [r2, #0]
 8003d7c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003d80:	f023 030f 	bic.w	r3, r3, #15
 8003d84:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	6859      	ldr	r1, [r3, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	699a      	ldr	r2, [r3, #24]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d94:	431a      	orrs	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6899      	ldr	r1, [r3, #8]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	4b2b      	ldr	r3, [pc, #172]	; (8003e5c <HAL_SAI_Init+0x2e0>)
 8003db0:	400b      	ands	r3, r1
 8003db2:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6899      	ldr	r1, [r3, #8]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8003dc4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8003dca:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8003dd0:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8003dda:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68d9      	ldr	r1, [r3, #12]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	f24f 0320 	movw	r3, #61472	; 0xf020
 8003df2:	400b      	ands	r3, r1
 8003df4:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68d9      	ldr	r1, [r3, #12]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e04:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e0a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8003e0c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e12:	3b01      	subs	r3, #1
 8003e14:	021b      	lsls	r3, r3, #8
 8003e16:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3720      	adds	r7, #32
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	40015404 	.word	0x40015404
 8003e48:	40015424 	.word	0x40015424
 8003e4c:	40015400 	.word	0x40015400
 8003e50:	40015800 	.word	0x40015800
 8003e54:	cccccccd 	.word	0xcccccccd
 8003e58:	ff05c010 	.word	0xff05c010
 8003e5c:	fff88000 	.word	0xfff88000

08003e60 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <HAL_SAI_Receive_DMA+0x1a>
 8003e74:	88fb      	ldrh	r3, [r7, #6]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e074      	b.n	8003f68 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d16d      	bne.n	8003f66 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d101      	bne.n	8003e98 <HAL_SAI_Receive_DMA+0x38>
 8003e94:	2302      	movs	r3, #2
 8003e96:	e067      	b.n	8003f68 <HAL_SAI_Receive_DMA+0x108>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	88fa      	ldrh	r2, [r7, #6]
 8003eaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	88fa      	ldrh	r2, [r7, #6]
 8003eb2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2222      	movs	r2, #34	; 0x22
 8003ec2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eca:	4a29      	ldr	r2, [pc, #164]	; (8003f70 <HAL_SAI_Receive_DMA+0x110>)
 8003ecc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed2:	4a28      	ldr	r2, [pc, #160]	; (8003f74 <HAL_SAI_Receive_DMA+0x114>)
 8003ed4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eda:	4a27      	ldr	r2, [pc, #156]	; (8003f78 <HAL_SAI_Receive_DMA+0x118>)
 8003edc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	331c      	adds	r3, #28
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003efe:	f7fd f96b 	bl	80011d8 <HAL_DMA_Start_IT>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d005      	beq.n	8003f14 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e029      	b.n	8003f68 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8003f14:	2100      	movs	r1, #0
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 f972 	bl	8004200 <SAI_InterruptFlag>
 8003f1c:	4601      	mov	r1, r0
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003f3a:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d107      	bne.n	8003f5a <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003f58:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003f62:	2300      	movs	r3, #0
 8003f64:	e000      	b.n	8003f68 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8003f66:	2302      	movs	r3, #2
  }
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	08004343 	.word	0x08004343
 8003f74:	080042e5 	.word	0x080042e5
 8003f78:	0800435f 	.word	0x0800435f

08003f7c <HAL_SAI_GetError>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for the specified SAI Block.
  * @retval SAI Error Code
  */
uint32_t HAL_SAI_GetError(const SAI_HandleTypeDef *hsai)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  return hsai->ErrorCode;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
	...

08003f98 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
 8003fa4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <SAI_InitI2S+0x2e>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d103      	bne.n	8003fce <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	63da      	str	r2, [r3, #60]	; 0x3c
 8003fcc:	e002      	b.n	8003fd4 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003fda:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fe2:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e077      	b.n	80040ee <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d107      	bne.n	8004014 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004010:	651a      	str	r2, [r3, #80]	; 0x50
 8004012:	e006      	b.n	8004022 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800401a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Frame definition */
  switch (datasize)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b03      	cmp	r3, #3
 8004026:	d84f      	bhi.n	80040c8 <SAI_InitI2S+0x130>
 8004028:	a201      	add	r2, pc, #4	; (adr r2, 8004030 <SAI_InitI2S+0x98>)
 800402a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402e:	bf00      	nop
 8004030:	08004041 	.word	0x08004041
 8004034:	08004063 	.word	0x08004063
 8004038:	08004085 	.word	0x08004085
 800403c:	080040a7 	.word	0x080040a7
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2280      	movs	r2, #128	; 0x80
 8004044:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	085b      	lsrs	r3, r3, #1
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	085b      	lsrs	r3, r3, #1
 8004054:	011a      	lsls	r2, r3, #4
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2240      	movs	r2, #64	; 0x40
 800405e:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8004060:	e035      	b.n	80040ce <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2280      	movs	r2, #128	; 0x80
 8004066:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	085b      	lsrs	r3, r3, #1
 800406c:	019a      	lsls	r2, r3, #6
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	085b      	lsrs	r3, r3, #1
 8004076:	015a      	lsls	r2, r3, #5
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2280      	movs	r2, #128	; 0x80
 8004080:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8004082:	e024      	b.n	80040ce <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	22c0      	movs	r2, #192	; 0xc0
 8004088:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	085b      	lsrs	r3, r3, #1
 800408e:	019a      	lsls	r2, r3, #6
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	085b      	lsrs	r3, r3, #1
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2280      	movs	r2, #128	; 0x80
 80040a2:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80040a4:	e013      	b.n	80040ce <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	22e0      	movs	r2, #224	; 0xe0
 80040aa:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	085b      	lsrs	r3, r3, #1
 80040b0:	019a      	lsls	r2, r3, #6
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	085b      	lsrs	r3, r3, #1
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2280      	movs	r2, #128	; 0x80
 80040c4:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80040c6:	e002      	b.n	80040ce <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	75fb      	strb	r3, [r7, #23]
      break;
 80040cc:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d10b      	bne.n	80040ec <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d102      	bne.n	80040e0 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2210      	movs	r2, #16
 80040de:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d102      	bne.n	80040ec <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2208      	movs	r2, #8
 80040ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  return status;
 80040ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	371c      	adds	r7, #28
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop

080040fc <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b087      	sub	sp, #28
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
 8004108:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800410a:	2300      	movs	r3, #0
 800410c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <SAI_InitPCM+0x2e>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b02      	cmp	r3, #2
 8004128:	d103      	bne.n	8004132 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2201      	movs	r2, #1
 800412e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004130:	e002      	b.n	8004138 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004144:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800414c:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004160:	661a      	str	r2, [r3, #96]	; 0x60

  if (protocol == SAI_PCM_SHORT)
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2b04      	cmp	r3, #4
 8004166:	d103      	bne.n	8004170 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2201      	movs	r2, #1
 800416c:	645a      	str	r2, [r3, #68]	; 0x44
 800416e:	e002      	b.n	8004176 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	220d      	movs	r2, #13
 8004174:	645a      	str	r2, [r3, #68]	; 0x44
  }

  switch (datasize)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b03      	cmp	r3, #3
 800417a:	d837      	bhi.n	80041ec <SAI_InitPCM+0xf0>
 800417c:	a201      	add	r2, pc, #4	; (adr r2, 8004184 <SAI_InitPCM+0x88>)
 800417e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004182:	bf00      	nop
 8004184:	08004195 	.word	0x08004195
 8004188:	080041ab 	.word	0x080041ab
 800418c:	080041c1 	.word	0x080041c1
 8004190:	080041d7 	.word	0x080041d7
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2280      	movs	r2, #128	; 0x80
 8004198:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	011a      	lsls	r2, r3, #4
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2240      	movs	r2, #64	; 0x40
 80041a6:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80041a8:	e023      	b.n	80041f2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2280      	movs	r2, #128	; 0x80
 80041ae:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2280      	movs	r2, #128	; 0x80
 80041bc:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80041be:	e018      	b.n	80041f2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	22c0      	movs	r2, #192	; 0xc0
 80041c4:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2280      	movs	r2, #128	; 0x80
 80041d2:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80041d4:	e00d      	b.n	80041f2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	22e0      	movs	r2, #224	; 0xe0
 80041da:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2280      	movs	r2, #128	; 0x80
 80041e8:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80041ea:	e002      	b.n	80041f2 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	75fb      	strb	r3, [r7, #23]
      break;
 80041f0:	bf00      	nop
  }

  return status;
 80041f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	371c      	adds	r7, #28
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	460b      	mov	r3, r1
 800420a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800420c:	2301      	movs	r3, #1
 800420e:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8004210:	78fb      	ldrb	r3, [r7, #3]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d103      	bne.n	800421e <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f043 0308 	orr.w	r3, r3, #8
 800421c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004222:	2b08      	cmp	r3, #8
 8004224:	d10b      	bne.n	800423e <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800422a:	2b03      	cmp	r3, #3
 800422c:	d003      	beq.n	8004236 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d103      	bne.n	800423e <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f043 0310 	orr.w	r3, r3, #16
 800423c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	2b03      	cmp	r3, #3
 8004244:	d003      	beq.n	800424e <SAI_InterruptFlag+0x4e>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b02      	cmp	r3, #2
 800424c:	d104      	bne.n	8004258 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	e003      	b.n	8004260 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f043 0304 	orr.w	r3, r3, #4
 800425e:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8004260:	68fb      	ldr	r3, [r7, #12]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
	...

08004270 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004278:	4b18      	ldr	r3, [pc, #96]	; (80042dc <SAI_Disable+0x6c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a18      	ldr	r2, [pc, #96]	; (80042e0 <SAI_Disable+0x70>)
 800427e:	fba2 2303 	umull	r2, r3, r2, r3
 8004282:	0b1b      	lsrs	r3, r3, #12
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004288:	2300      	movs	r3, #0
 800428a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800429a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10a      	bne.n	80042b8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	72fb      	strb	r3, [r7, #11]
      break;
 80042b6:	e009      	b.n	80042cc <SAI_Disable+0x5c>
    }
    count--;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1e7      	bne.n	800429c <SAI_Disable+0x2c>

  return status;
 80042cc:	7afb      	ldrb	r3, [r7, #11]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	20000000 	.word	0x20000000
 80042e0:	95cbec1b 	.word	0x95cbec1b

080042e4 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f0:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	2b20      	cmp	r3, #32
 80042f8:	d01c      	beq.n	8004334 <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004308:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004312:	2100      	movs	r1, #0
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f7ff ff73 	bl	8004200 <SAI_InterruptFlag>
 800431a:	4603      	mov	r3, r0
 800431c:	43d9      	mvns	r1, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	691a      	ldr	r2, [r3, #16]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	400a      	ands	r2, r1
 800432a:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f7fc f921 	bl	800057c <HAL_SAI_RxCpltCallback>
#endif
}
 800433a:	bf00      	nop
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b084      	sub	sp, #16
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f7fc f92b 	bl	80005ac <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8004356:	bf00      	nop
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b084      	sub	sp, #16
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436a:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004372:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800438a:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f7ff ff6f 	bl	8004270 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f7fc f976 	bl	8000694 <HAL_SAI_ErrorCallback>
#endif
}
 80043a8:	bf00      	nop
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e040      	b.n	8004444 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d106      	bne.n	80043d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7fc fb2a 	bl	8000a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2224      	movs	r2, #36	; 0x24
 80043dc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0201 	bic.w	r2, r2, #1
 80043ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d002      	beq.n	80043fc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 fb6a 	bl	8004ad0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 f8af 	bl	8004560 <UART_SetConfig>
 8004402:	4603      	mov	r3, r0
 8004404:	2b01      	cmp	r3, #1
 8004406:	d101      	bne.n	800440c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e01b      	b.n	8004444 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800441a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689a      	ldr	r2, [r3, #8]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800442a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0201 	orr.w	r2, r2, #1
 800443a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 fbe9 	bl	8004c14 <UART_CheckIdleState>
 8004442:	4603      	mov	r3, r0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b08a      	sub	sp, #40	; 0x28
 8004450:	af02      	add	r7, sp, #8
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	603b      	str	r3, [r7, #0]
 8004458:	4613      	mov	r3, r2
 800445a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004460:	2b20      	cmp	r3, #32
 8004462:	d178      	bne.n	8004556 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d002      	beq.n	8004470 <HAL_UART_Transmit+0x24>
 800446a:	88fb      	ldrh	r3, [r7, #6]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e071      	b.n	8004558 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2221      	movs	r2, #33	; 0x21
 8004480:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004482:	f7fc fcd3 	bl	8000e2c <HAL_GetTick>
 8004486:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	88fa      	ldrh	r2, [r7, #6]
 800448c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	88fa      	ldrh	r2, [r7, #6]
 8004494:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044a0:	d108      	bne.n	80044b4 <HAL_UART_Transmit+0x68>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d104      	bne.n	80044b4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80044aa:	2300      	movs	r3, #0
 80044ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	61bb      	str	r3, [r7, #24]
 80044b2:	e003      	b.n	80044bc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044b8:	2300      	movs	r3, #0
 80044ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044bc:	e030      	b.n	8004520 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	2200      	movs	r2, #0
 80044c6:	2180      	movs	r1, #128	; 0x80
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 fc4b 	bl	8004d64 <UART_WaitOnFlagUntilTimeout>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d004      	beq.n	80044de <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2220      	movs	r2, #32
 80044d8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e03c      	b.n	8004558 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10b      	bne.n	80044fc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	881a      	ldrh	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044f0:	b292      	uxth	r2, r2
 80044f2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	3302      	adds	r3, #2
 80044f8:	61bb      	str	r3, [r7, #24]
 80044fa:	e008      	b.n	800450e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	781a      	ldrb	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	b292      	uxth	r2, r2
 8004506:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	3301      	adds	r3, #1
 800450c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004514:	b29b      	uxth	r3, r3
 8004516:	3b01      	subs	r3, #1
 8004518:	b29a      	uxth	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004526:	b29b      	uxth	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1c8      	bne.n	80044be <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	2200      	movs	r2, #0
 8004534:	2140      	movs	r1, #64	; 0x40
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 fc14 	bl	8004d64 <UART_WaitOnFlagUntilTimeout>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d004      	beq.n	800454c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2220      	movs	r2, #32
 8004546:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e005      	b.n	8004558 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2220      	movs	r2, #32
 8004550:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004552:	2300      	movs	r3, #0
 8004554:	e000      	b.n	8004558 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004556:	2302      	movs	r3, #2
  }
}
 8004558:	4618      	mov	r0, r3
 800455a:	3720      	adds	r7, #32
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004564:	b08a      	sub	sp, #40	; 0x28
 8004566:	af00      	add	r7, sp, #0
 8004568:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800456a:	2300      	movs	r3, #0
 800456c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	431a      	orrs	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	431a      	orrs	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	69db      	ldr	r3, [r3, #28]
 8004584:	4313      	orrs	r3, r2
 8004586:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	4ba4      	ldr	r3, [pc, #656]	; (8004820 <UART_SetConfig+0x2c0>)
 8004590:	4013      	ands	r3, r2
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	6812      	ldr	r2, [r2, #0]
 8004596:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004598:	430b      	orrs	r3, r1
 800459a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	68da      	ldr	r2, [r3, #12]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a99      	ldr	r2, [pc, #612]	; (8004824 <UART_SetConfig+0x2c4>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d004      	beq.n	80045cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c8:	4313      	orrs	r3, r2
 80045ca:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045dc:	430a      	orrs	r2, r1
 80045de:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a90      	ldr	r2, [pc, #576]	; (8004828 <UART_SetConfig+0x2c8>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d126      	bne.n	8004638 <UART_SetConfig+0xd8>
 80045ea:	4b90      	ldr	r3, [pc, #576]	; (800482c <UART_SetConfig+0x2cc>)
 80045ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f0:	f003 0303 	and.w	r3, r3, #3
 80045f4:	2b03      	cmp	r3, #3
 80045f6:	d81b      	bhi.n	8004630 <UART_SetConfig+0xd0>
 80045f8:	a201      	add	r2, pc, #4	; (adr r2, 8004600 <UART_SetConfig+0xa0>)
 80045fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fe:	bf00      	nop
 8004600:	08004611 	.word	0x08004611
 8004604:	08004621 	.word	0x08004621
 8004608:	08004619 	.word	0x08004619
 800460c:	08004629 	.word	0x08004629
 8004610:	2301      	movs	r3, #1
 8004612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004616:	e116      	b.n	8004846 <UART_SetConfig+0x2e6>
 8004618:	2302      	movs	r3, #2
 800461a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800461e:	e112      	b.n	8004846 <UART_SetConfig+0x2e6>
 8004620:	2304      	movs	r3, #4
 8004622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004626:	e10e      	b.n	8004846 <UART_SetConfig+0x2e6>
 8004628:	2308      	movs	r3, #8
 800462a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800462e:	e10a      	b.n	8004846 <UART_SetConfig+0x2e6>
 8004630:	2310      	movs	r3, #16
 8004632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004636:	e106      	b.n	8004846 <UART_SetConfig+0x2e6>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a7c      	ldr	r2, [pc, #496]	; (8004830 <UART_SetConfig+0x2d0>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d138      	bne.n	80046b4 <UART_SetConfig+0x154>
 8004642:	4b7a      	ldr	r3, [pc, #488]	; (800482c <UART_SetConfig+0x2cc>)
 8004644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004648:	f003 030c 	and.w	r3, r3, #12
 800464c:	2b0c      	cmp	r3, #12
 800464e:	d82d      	bhi.n	80046ac <UART_SetConfig+0x14c>
 8004650:	a201      	add	r2, pc, #4	; (adr r2, 8004658 <UART_SetConfig+0xf8>)
 8004652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004656:	bf00      	nop
 8004658:	0800468d 	.word	0x0800468d
 800465c:	080046ad 	.word	0x080046ad
 8004660:	080046ad 	.word	0x080046ad
 8004664:	080046ad 	.word	0x080046ad
 8004668:	0800469d 	.word	0x0800469d
 800466c:	080046ad 	.word	0x080046ad
 8004670:	080046ad 	.word	0x080046ad
 8004674:	080046ad 	.word	0x080046ad
 8004678:	08004695 	.word	0x08004695
 800467c:	080046ad 	.word	0x080046ad
 8004680:	080046ad 	.word	0x080046ad
 8004684:	080046ad 	.word	0x080046ad
 8004688:	080046a5 	.word	0x080046a5
 800468c:	2300      	movs	r3, #0
 800468e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004692:	e0d8      	b.n	8004846 <UART_SetConfig+0x2e6>
 8004694:	2302      	movs	r3, #2
 8004696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800469a:	e0d4      	b.n	8004846 <UART_SetConfig+0x2e6>
 800469c:	2304      	movs	r3, #4
 800469e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046a2:	e0d0      	b.n	8004846 <UART_SetConfig+0x2e6>
 80046a4:	2308      	movs	r3, #8
 80046a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046aa:	e0cc      	b.n	8004846 <UART_SetConfig+0x2e6>
 80046ac:	2310      	movs	r3, #16
 80046ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046b2:	e0c8      	b.n	8004846 <UART_SetConfig+0x2e6>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a5e      	ldr	r2, [pc, #376]	; (8004834 <UART_SetConfig+0x2d4>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d125      	bne.n	800470a <UART_SetConfig+0x1aa>
 80046be:	4b5b      	ldr	r3, [pc, #364]	; (800482c <UART_SetConfig+0x2cc>)
 80046c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80046c8:	2b30      	cmp	r3, #48	; 0x30
 80046ca:	d016      	beq.n	80046fa <UART_SetConfig+0x19a>
 80046cc:	2b30      	cmp	r3, #48	; 0x30
 80046ce:	d818      	bhi.n	8004702 <UART_SetConfig+0x1a2>
 80046d0:	2b20      	cmp	r3, #32
 80046d2:	d00a      	beq.n	80046ea <UART_SetConfig+0x18a>
 80046d4:	2b20      	cmp	r3, #32
 80046d6:	d814      	bhi.n	8004702 <UART_SetConfig+0x1a2>
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d002      	beq.n	80046e2 <UART_SetConfig+0x182>
 80046dc:	2b10      	cmp	r3, #16
 80046de:	d008      	beq.n	80046f2 <UART_SetConfig+0x192>
 80046e0:	e00f      	b.n	8004702 <UART_SetConfig+0x1a2>
 80046e2:	2300      	movs	r3, #0
 80046e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046e8:	e0ad      	b.n	8004846 <UART_SetConfig+0x2e6>
 80046ea:	2302      	movs	r3, #2
 80046ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046f0:	e0a9      	b.n	8004846 <UART_SetConfig+0x2e6>
 80046f2:	2304      	movs	r3, #4
 80046f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046f8:	e0a5      	b.n	8004846 <UART_SetConfig+0x2e6>
 80046fa:	2308      	movs	r3, #8
 80046fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004700:	e0a1      	b.n	8004846 <UART_SetConfig+0x2e6>
 8004702:	2310      	movs	r3, #16
 8004704:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004708:	e09d      	b.n	8004846 <UART_SetConfig+0x2e6>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a4a      	ldr	r2, [pc, #296]	; (8004838 <UART_SetConfig+0x2d8>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d125      	bne.n	8004760 <UART_SetConfig+0x200>
 8004714:	4b45      	ldr	r3, [pc, #276]	; (800482c <UART_SetConfig+0x2cc>)
 8004716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800471e:	2bc0      	cmp	r3, #192	; 0xc0
 8004720:	d016      	beq.n	8004750 <UART_SetConfig+0x1f0>
 8004722:	2bc0      	cmp	r3, #192	; 0xc0
 8004724:	d818      	bhi.n	8004758 <UART_SetConfig+0x1f8>
 8004726:	2b80      	cmp	r3, #128	; 0x80
 8004728:	d00a      	beq.n	8004740 <UART_SetConfig+0x1e0>
 800472a:	2b80      	cmp	r3, #128	; 0x80
 800472c:	d814      	bhi.n	8004758 <UART_SetConfig+0x1f8>
 800472e:	2b00      	cmp	r3, #0
 8004730:	d002      	beq.n	8004738 <UART_SetConfig+0x1d8>
 8004732:	2b40      	cmp	r3, #64	; 0x40
 8004734:	d008      	beq.n	8004748 <UART_SetConfig+0x1e8>
 8004736:	e00f      	b.n	8004758 <UART_SetConfig+0x1f8>
 8004738:	2300      	movs	r3, #0
 800473a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800473e:	e082      	b.n	8004846 <UART_SetConfig+0x2e6>
 8004740:	2302      	movs	r3, #2
 8004742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004746:	e07e      	b.n	8004846 <UART_SetConfig+0x2e6>
 8004748:	2304      	movs	r3, #4
 800474a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800474e:	e07a      	b.n	8004846 <UART_SetConfig+0x2e6>
 8004750:	2308      	movs	r3, #8
 8004752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004756:	e076      	b.n	8004846 <UART_SetConfig+0x2e6>
 8004758:	2310      	movs	r3, #16
 800475a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800475e:	e072      	b.n	8004846 <UART_SetConfig+0x2e6>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a35      	ldr	r2, [pc, #212]	; (800483c <UART_SetConfig+0x2dc>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d12a      	bne.n	80047c0 <UART_SetConfig+0x260>
 800476a:	4b30      	ldr	r3, [pc, #192]	; (800482c <UART_SetConfig+0x2cc>)
 800476c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004770:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004774:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004778:	d01a      	beq.n	80047b0 <UART_SetConfig+0x250>
 800477a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800477e:	d81b      	bhi.n	80047b8 <UART_SetConfig+0x258>
 8004780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004784:	d00c      	beq.n	80047a0 <UART_SetConfig+0x240>
 8004786:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800478a:	d815      	bhi.n	80047b8 <UART_SetConfig+0x258>
 800478c:	2b00      	cmp	r3, #0
 800478e:	d003      	beq.n	8004798 <UART_SetConfig+0x238>
 8004790:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004794:	d008      	beq.n	80047a8 <UART_SetConfig+0x248>
 8004796:	e00f      	b.n	80047b8 <UART_SetConfig+0x258>
 8004798:	2300      	movs	r3, #0
 800479a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800479e:	e052      	b.n	8004846 <UART_SetConfig+0x2e6>
 80047a0:	2302      	movs	r3, #2
 80047a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047a6:	e04e      	b.n	8004846 <UART_SetConfig+0x2e6>
 80047a8:	2304      	movs	r3, #4
 80047aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ae:	e04a      	b.n	8004846 <UART_SetConfig+0x2e6>
 80047b0:	2308      	movs	r3, #8
 80047b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047b6:	e046      	b.n	8004846 <UART_SetConfig+0x2e6>
 80047b8:	2310      	movs	r3, #16
 80047ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047be:	e042      	b.n	8004846 <UART_SetConfig+0x2e6>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a17      	ldr	r2, [pc, #92]	; (8004824 <UART_SetConfig+0x2c4>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d13a      	bne.n	8004840 <UART_SetConfig+0x2e0>
 80047ca:	4b18      	ldr	r3, [pc, #96]	; (800482c <UART_SetConfig+0x2cc>)
 80047cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80047d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047d8:	d01a      	beq.n	8004810 <UART_SetConfig+0x2b0>
 80047da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047de:	d81b      	bhi.n	8004818 <UART_SetConfig+0x2b8>
 80047e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047e4:	d00c      	beq.n	8004800 <UART_SetConfig+0x2a0>
 80047e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047ea:	d815      	bhi.n	8004818 <UART_SetConfig+0x2b8>
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d003      	beq.n	80047f8 <UART_SetConfig+0x298>
 80047f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f4:	d008      	beq.n	8004808 <UART_SetConfig+0x2a8>
 80047f6:	e00f      	b.n	8004818 <UART_SetConfig+0x2b8>
 80047f8:	2300      	movs	r3, #0
 80047fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047fe:	e022      	b.n	8004846 <UART_SetConfig+0x2e6>
 8004800:	2302      	movs	r3, #2
 8004802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004806:	e01e      	b.n	8004846 <UART_SetConfig+0x2e6>
 8004808:	2304      	movs	r3, #4
 800480a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800480e:	e01a      	b.n	8004846 <UART_SetConfig+0x2e6>
 8004810:	2308      	movs	r3, #8
 8004812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004816:	e016      	b.n	8004846 <UART_SetConfig+0x2e6>
 8004818:	2310      	movs	r3, #16
 800481a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800481e:	e012      	b.n	8004846 <UART_SetConfig+0x2e6>
 8004820:	efff69f3 	.word	0xefff69f3
 8004824:	40008000 	.word	0x40008000
 8004828:	40013800 	.word	0x40013800
 800482c:	40021000 	.word	0x40021000
 8004830:	40004400 	.word	0x40004400
 8004834:	40004800 	.word	0x40004800
 8004838:	40004c00 	.word	0x40004c00
 800483c:	40005000 	.word	0x40005000
 8004840:	2310      	movs	r3, #16
 8004842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a9f      	ldr	r2, [pc, #636]	; (8004ac8 <UART_SetConfig+0x568>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d17a      	bne.n	8004946 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004850:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004854:	2b08      	cmp	r3, #8
 8004856:	d824      	bhi.n	80048a2 <UART_SetConfig+0x342>
 8004858:	a201      	add	r2, pc, #4	; (adr r2, 8004860 <UART_SetConfig+0x300>)
 800485a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485e:	bf00      	nop
 8004860:	08004885 	.word	0x08004885
 8004864:	080048a3 	.word	0x080048a3
 8004868:	0800488d 	.word	0x0800488d
 800486c:	080048a3 	.word	0x080048a3
 8004870:	08004893 	.word	0x08004893
 8004874:	080048a3 	.word	0x080048a3
 8004878:	080048a3 	.word	0x080048a3
 800487c:	080048a3 	.word	0x080048a3
 8004880:	0800489b 	.word	0x0800489b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004884:	f7fd fd92 	bl	80023ac <HAL_RCC_GetPCLK1Freq>
 8004888:	61f8      	str	r0, [r7, #28]
        break;
 800488a:	e010      	b.n	80048ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800488c:	4b8f      	ldr	r3, [pc, #572]	; (8004acc <UART_SetConfig+0x56c>)
 800488e:	61fb      	str	r3, [r7, #28]
        break;
 8004890:	e00d      	b.n	80048ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004892:	f7fd fcf3 	bl	800227c <HAL_RCC_GetSysClockFreq>
 8004896:	61f8      	str	r0, [r7, #28]
        break;
 8004898:	e009      	b.n	80048ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800489a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800489e:	61fb      	str	r3, [r7, #28]
        break;
 80048a0:	e005      	b.n	80048ae <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80048a2:	2300      	movs	r3, #0
 80048a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80048ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 80fb 	beq.w	8004aac <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	4613      	mov	r3, r2
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	4413      	add	r3, r2
 80048c0:	69fa      	ldr	r2, [r7, #28]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d305      	bcc.n	80048d2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048cc:	69fa      	ldr	r2, [r7, #28]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d903      	bls.n	80048da <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80048d8:	e0e8      	b.n	8004aac <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	2200      	movs	r2, #0
 80048de:	461c      	mov	r4, r3
 80048e0:	4615      	mov	r5, r2
 80048e2:	f04f 0200 	mov.w	r2, #0
 80048e6:	f04f 0300 	mov.w	r3, #0
 80048ea:	022b      	lsls	r3, r5, #8
 80048ec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80048f0:	0222      	lsls	r2, r4, #8
 80048f2:	68f9      	ldr	r1, [r7, #12]
 80048f4:	6849      	ldr	r1, [r1, #4]
 80048f6:	0849      	lsrs	r1, r1, #1
 80048f8:	2000      	movs	r0, #0
 80048fa:	4688      	mov	r8, r1
 80048fc:	4681      	mov	r9, r0
 80048fe:	eb12 0a08 	adds.w	sl, r2, r8
 8004902:	eb43 0b09 	adc.w	fp, r3, r9
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	603b      	str	r3, [r7, #0]
 800490e:	607a      	str	r2, [r7, #4]
 8004910:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004914:	4650      	mov	r0, sl
 8004916:	4659      	mov	r1, fp
 8004918:	f7fb fcb2 	bl	8000280 <__aeabi_uldivmod>
 800491c:	4602      	mov	r2, r0
 800491e:	460b      	mov	r3, r1
 8004920:	4613      	mov	r3, r2
 8004922:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800492a:	d308      	bcc.n	800493e <UART_SetConfig+0x3de>
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004932:	d204      	bcs.n	800493e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	60da      	str	r2, [r3, #12]
 800493c:	e0b6      	b.n	8004aac <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004944:	e0b2      	b.n	8004aac <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800494e:	d15e      	bne.n	8004a0e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004950:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004954:	2b08      	cmp	r3, #8
 8004956:	d828      	bhi.n	80049aa <UART_SetConfig+0x44a>
 8004958:	a201      	add	r2, pc, #4	; (adr r2, 8004960 <UART_SetConfig+0x400>)
 800495a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495e:	bf00      	nop
 8004960:	08004985 	.word	0x08004985
 8004964:	0800498d 	.word	0x0800498d
 8004968:	08004995 	.word	0x08004995
 800496c:	080049ab 	.word	0x080049ab
 8004970:	0800499b 	.word	0x0800499b
 8004974:	080049ab 	.word	0x080049ab
 8004978:	080049ab 	.word	0x080049ab
 800497c:	080049ab 	.word	0x080049ab
 8004980:	080049a3 	.word	0x080049a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004984:	f7fd fd12 	bl	80023ac <HAL_RCC_GetPCLK1Freq>
 8004988:	61f8      	str	r0, [r7, #28]
        break;
 800498a:	e014      	b.n	80049b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800498c:	f7fd fd24 	bl	80023d8 <HAL_RCC_GetPCLK2Freq>
 8004990:	61f8      	str	r0, [r7, #28]
        break;
 8004992:	e010      	b.n	80049b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004994:	4b4d      	ldr	r3, [pc, #308]	; (8004acc <UART_SetConfig+0x56c>)
 8004996:	61fb      	str	r3, [r7, #28]
        break;
 8004998:	e00d      	b.n	80049b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800499a:	f7fd fc6f 	bl	800227c <HAL_RCC_GetSysClockFreq>
 800499e:	61f8      	str	r0, [r7, #28]
        break;
 80049a0:	e009      	b.n	80049b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049a6:	61fb      	str	r3, [r7, #28]
        break;
 80049a8:	e005      	b.n	80049b6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80049b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d077      	beq.n	8004aac <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	005a      	lsls	r2, r3, #1
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	085b      	lsrs	r3, r3, #1
 80049c6:	441a      	add	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	2b0f      	cmp	r3, #15
 80049d6:	d916      	bls.n	8004a06 <UART_SetConfig+0x4a6>
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049de:	d212      	bcs.n	8004a06 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	f023 030f 	bic.w	r3, r3, #15
 80049e8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	085b      	lsrs	r3, r3, #1
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	f003 0307 	and.w	r3, r3, #7
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	8afb      	ldrh	r3, [r7, #22]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	8afa      	ldrh	r2, [r7, #22]
 8004a02:	60da      	str	r2, [r3, #12]
 8004a04:	e052      	b.n	8004aac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a0c:	e04e      	b.n	8004aac <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a12:	2b08      	cmp	r3, #8
 8004a14:	d827      	bhi.n	8004a66 <UART_SetConfig+0x506>
 8004a16:	a201      	add	r2, pc, #4	; (adr r2, 8004a1c <UART_SetConfig+0x4bc>)
 8004a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1c:	08004a41 	.word	0x08004a41
 8004a20:	08004a49 	.word	0x08004a49
 8004a24:	08004a51 	.word	0x08004a51
 8004a28:	08004a67 	.word	0x08004a67
 8004a2c:	08004a57 	.word	0x08004a57
 8004a30:	08004a67 	.word	0x08004a67
 8004a34:	08004a67 	.word	0x08004a67
 8004a38:	08004a67 	.word	0x08004a67
 8004a3c:	08004a5f 	.word	0x08004a5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a40:	f7fd fcb4 	bl	80023ac <HAL_RCC_GetPCLK1Freq>
 8004a44:	61f8      	str	r0, [r7, #28]
        break;
 8004a46:	e014      	b.n	8004a72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a48:	f7fd fcc6 	bl	80023d8 <HAL_RCC_GetPCLK2Freq>
 8004a4c:	61f8      	str	r0, [r7, #28]
        break;
 8004a4e:	e010      	b.n	8004a72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a50:	4b1e      	ldr	r3, [pc, #120]	; (8004acc <UART_SetConfig+0x56c>)
 8004a52:	61fb      	str	r3, [r7, #28]
        break;
 8004a54:	e00d      	b.n	8004a72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a56:	f7fd fc11 	bl	800227c <HAL_RCC_GetSysClockFreq>
 8004a5a:	61f8      	str	r0, [r7, #28]
        break;
 8004a5c:	e009      	b.n	8004a72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a62:	61fb      	str	r3, [r7, #28]
        break;
 8004a64:	e005      	b.n	8004a72 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004a66:	2300      	movs	r3, #0
 8004a68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a70:	bf00      	nop
    }

    if (pclk != 0U)
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d019      	beq.n	8004aac <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	085a      	lsrs	r2, r3, #1
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	441a      	add	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	2b0f      	cmp	r3, #15
 8004a90:	d909      	bls.n	8004aa6 <UART_SetConfig+0x546>
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a98:	d205      	bcs.n	8004aa6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	60da      	str	r2, [r3, #12]
 8004aa4:	e002      	b.n	8004aac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004ab8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3728      	adds	r7, #40	; 0x28
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ac6:	bf00      	nop
 8004ac8:	40008000 	.word	0x40008000
 8004acc:	00f42400 	.word	0x00f42400

08004ad0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	f003 0308 	and.w	r3, r3, #8
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00a      	beq.n	8004afa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00a      	beq.n	8004b1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00a      	beq.n	8004b3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b42:	f003 0304 	and.w	r3, r3, #4
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	f003 0310 	and.w	r3, r3, #16
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00a      	beq.n	8004b82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	f003 0320 	and.w	r3, r3, #32
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d01a      	beq.n	8004be6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bce:	d10a      	bne.n	8004be6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00a      	beq.n	8004c08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	605a      	str	r2, [r3, #4]
  }
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b098      	sub	sp, #96	; 0x60
 8004c18:	af02      	add	r7, sp, #8
 8004c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c24:	f7fc f902 	bl	8000e2c <HAL_GetTick>
 8004c28:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0308 	and.w	r3, r3, #8
 8004c34:	2b08      	cmp	r3, #8
 8004c36:	d12e      	bne.n	8004c96 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c40:	2200      	movs	r2, #0
 8004c42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f88c 	bl	8004d64 <UART_WaitOnFlagUntilTimeout>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d021      	beq.n	8004c96 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5a:	e853 3f00 	ldrex	r3, [r3]
 8004c5e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c66:	653b      	str	r3, [r7, #80]	; 0x50
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c70:	647b      	str	r3, [r7, #68]	; 0x44
 8004c72:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c78:	e841 2300 	strex	r3, r2, [r1]
 8004c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1e6      	bne.n	8004c52 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2220      	movs	r2, #32
 8004c88:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e062      	b.n	8004d5c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b04      	cmp	r3, #4
 8004ca2:	d149      	bne.n	8004d38 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ca4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cac:	2200      	movs	r2, #0
 8004cae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f856 	bl	8004d64 <UART_WaitOnFlagUntilTimeout>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d03c      	beq.n	8004d38 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc6:	e853 3f00 	ldrex	r3, [r3]
 8004cca:	623b      	str	r3, [r7, #32]
   return(result);
 8004ccc:	6a3b      	ldr	r3, [r7, #32]
 8004cce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	461a      	mov	r2, r3
 8004cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cdc:	633b      	str	r3, [r7, #48]	; 0x30
 8004cde:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ce2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ce4:	e841 2300 	strex	r3, r2, [r1]
 8004ce8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1e6      	bne.n	8004cbe <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	3308      	adds	r3, #8
 8004cf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	e853 3f00 	ldrex	r3, [r3]
 8004cfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f023 0301 	bic.w	r3, r3, #1
 8004d06:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	3308      	adds	r3, #8
 8004d0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d10:	61fa      	str	r2, [r7, #28]
 8004d12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d14:	69b9      	ldr	r1, [r7, #24]
 8004d16:	69fa      	ldr	r2, [r7, #28]
 8004d18:	e841 2300 	strex	r3, r2, [r1]
 8004d1c:	617b      	str	r3, [r7, #20]
   return(result);
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1e5      	bne.n	8004cf0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2220      	movs	r2, #32
 8004d28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e011      	b.n	8004d5c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2220      	movs	r2, #32
 8004d42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3758      	adds	r7, #88	; 0x58
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	603b      	str	r3, [r7, #0]
 8004d70:	4613      	mov	r3, r2
 8004d72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d74:	e049      	b.n	8004e0a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7c:	d045      	beq.n	8004e0a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d7e:	f7fc f855 	bl	8000e2c <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d302      	bcc.n	8004d94 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e048      	b.n	8004e2a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0304 	and.w	r3, r3, #4
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d031      	beq.n	8004e0a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	69db      	ldr	r3, [r3, #28]
 8004dac:	f003 0308 	and.w	r3, r3, #8
 8004db0:	2b08      	cmp	r3, #8
 8004db2:	d110      	bne.n	8004dd6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2208      	movs	r2, #8
 8004dba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f000 f838 	bl	8004e32 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2208      	movs	r2, #8
 8004dc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e029      	b.n	8004e2a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	69db      	ldr	r3, [r3, #28]
 8004ddc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004de0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004de4:	d111      	bne.n	8004e0a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f000 f81e 	bl	8004e32 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e00f      	b.n	8004e2a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	69da      	ldr	r2, [r3, #28]
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	4013      	ands	r3, r2
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	bf0c      	ite	eq
 8004e1a:	2301      	moveq	r3, #1
 8004e1c:	2300      	movne	r3, #0
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	461a      	mov	r2, r3
 8004e22:	79fb      	ldrb	r3, [r7, #7]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d0a6      	beq.n	8004d76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b095      	sub	sp, #84	; 0x54
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e42:	e853 3f00 	ldrex	r3, [r3]
 8004e46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	461a      	mov	r2, r3
 8004e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e58:	643b      	str	r3, [r7, #64]	; 0x40
 8004e5a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e60:	e841 2300 	strex	r3, r2, [r1]
 8004e64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1e6      	bne.n	8004e3a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3308      	adds	r3, #8
 8004e72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e74:	6a3b      	ldr	r3, [r7, #32]
 8004e76:	e853 3f00 	ldrex	r3, [r3]
 8004e7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	f023 0301 	bic.w	r3, r3, #1
 8004e82:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	3308      	adds	r3, #8
 8004e8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e94:	e841 2300 	strex	r3, r2, [r1]
 8004e98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1e5      	bne.n	8004e6c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d118      	bne.n	8004eda <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	f023 0310 	bic.w	r3, r3, #16
 8004ebc:	647b      	str	r3, [r7, #68]	; 0x44
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ec6:	61bb      	str	r3, [r7, #24]
 8004ec8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eca:	6979      	ldr	r1, [r7, #20]
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	e841 2300 	strex	r3, r2, [r1]
 8004ed2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1e6      	bne.n	8004ea8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2220      	movs	r2, #32
 8004ede:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004eee:	bf00      	nop
 8004ef0:	3754      	adds	r7, #84	; 0x54
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
	...

08004efc <sniprintf>:
 8004efc:	b40c      	push	{r2, r3}
 8004efe:	b530      	push	{r4, r5, lr}
 8004f00:	4b17      	ldr	r3, [pc, #92]	; (8004f60 <sniprintf+0x64>)
 8004f02:	1e0c      	subs	r4, r1, #0
 8004f04:	681d      	ldr	r5, [r3, #0]
 8004f06:	b09d      	sub	sp, #116	; 0x74
 8004f08:	da08      	bge.n	8004f1c <sniprintf+0x20>
 8004f0a:	238b      	movs	r3, #139	; 0x8b
 8004f0c:	602b      	str	r3, [r5, #0]
 8004f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f12:	b01d      	add	sp, #116	; 0x74
 8004f14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f18:	b002      	add	sp, #8
 8004f1a:	4770      	bx	lr
 8004f1c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004f20:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004f24:	bf14      	ite	ne
 8004f26:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004f2a:	4623      	moveq	r3, r4
 8004f2c:	9304      	str	r3, [sp, #16]
 8004f2e:	9307      	str	r3, [sp, #28]
 8004f30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f34:	9002      	str	r0, [sp, #8]
 8004f36:	9006      	str	r0, [sp, #24]
 8004f38:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004f3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004f3e:	ab21      	add	r3, sp, #132	; 0x84
 8004f40:	a902      	add	r1, sp, #8
 8004f42:	4628      	mov	r0, r5
 8004f44:	9301      	str	r3, [sp, #4]
 8004f46:	f000 f9cd 	bl	80052e4 <_svfiprintf_r>
 8004f4a:	1c43      	adds	r3, r0, #1
 8004f4c:	bfbc      	itt	lt
 8004f4e:	238b      	movlt	r3, #139	; 0x8b
 8004f50:	602b      	strlt	r3, [r5, #0]
 8004f52:	2c00      	cmp	r4, #0
 8004f54:	d0dd      	beq.n	8004f12 <sniprintf+0x16>
 8004f56:	9b02      	ldr	r3, [sp, #8]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	701a      	strb	r2, [r3, #0]
 8004f5c:	e7d9      	b.n	8004f12 <sniprintf+0x16>
 8004f5e:	bf00      	nop
 8004f60:	20000058 	.word	0x20000058

08004f64 <_vsniprintf_r>:
 8004f64:	b530      	push	{r4, r5, lr}
 8004f66:	4614      	mov	r4, r2
 8004f68:	2c00      	cmp	r4, #0
 8004f6a:	b09b      	sub	sp, #108	; 0x6c
 8004f6c:	4605      	mov	r5, r0
 8004f6e:	461a      	mov	r2, r3
 8004f70:	da05      	bge.n	8004f7e <_vsniprintf_r+0x1a>
 8004f72:	238b      	movs	r3, #139	; 0x8b
 8004f74:	6003      	str	r3, [r0, #0]
 8004f76:	f04f 30ff 	mov.w	r0, #4294967295
 8004f7a:	b01b      	add	sp, #108	; 0x6c
 8004f7c:	bd30      	pop	{r4, r5, pc}
 8004f7e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004f82:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004f86:	bf14      	ite	ne
 8004f88:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004f8c:	4623      	moveq	r3, r4
 8004f8e:	9302      	str	r3, [sp, #8]
 8004f90:	9305      	str	r3, [sp, #20]
 8004f92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f96:	9100      	str	r1, [sp, #0]
 8004f98:	9104      	str	r1, [sp, #16]
 8004f9a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004f9e:	4669      	mov	r1, sp
 8004fa0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004fa2:	f000 f99f 	bl	80052e4 <_svfiprintf_r>
 8004fa6:	1c43      	adds	r3, r0, #1
 8004fa8:	bfbc      	itt	lt
 8004faa:	238b      	movlt	r3, #139	; 0x8b
 8004fac:	602b      	strlt	r3, [r5, #0]
 8004fae:	2c00      	cmp	r4, #0
 8004fb0:	d0e3      	beq.n	8004f7a <_vsniprintf_r+0x16>
 8004fb2:	9b00      	ldr	r3, [sp, #0]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	701a      	strb	r2, [r3, #0]
 8004fb8:	e7df      	b.n	8004f7a <_vsniprintf_r+0x16>
	...

08004fbc <vsniprintf>:
 8004fbc:	b507      	push	{r0, r1, r2, lr}
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	460a      	mov	r2, r1
 8004fc4:	4601      	mov	r1, r0
 8004fc6:	4803      	ldr	r0, [pc, #12]	; (8004fd4 <vsniprintf+0x18>)
 8004fc8:	6800      	ldr	r0, [r0, #0]
 8004fca:	f7ff ffcb 	bl	8004f64 <_vsniprintf_r>
 8004fce:	b003      	add	sp, #12
 8004fd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8004fd4:	20000058 	.word	0x20000058

08004fd8 <memset>:
 8004fd8:	4402      	add	r2, r0
 8004fda:	4603      	mov	r3, r0
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d100      	bne.n	8004fe2 <memset+0xa>
 8004fe0:	4770      	bx	lr
 8004fe2:	f803 1b01 	strb.w	r1, [r3], #1
 8004fe6:	e7f9      	b.n	8004fdc <memset+0x4>

08004fe8 <__errno>:
 8004fe8:	4b01      	ldr	r3, [pc, #4]	; (8004ff0 <__errno+0x8>)
 8004fea:	6818      	ldr	r0, [r3, #0]
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	20000058 	.word	0x20000058

08004ff4 <__libc_init_array>:
 8004ff4:	b570      	push	{r4, r5, r6, lr}
 8004ff6:	4d0d      	ldr	r5, [pc, #52]	; (800502c <__libc_init_array+0x38>)
 8004ff8:	4c0d      	ldr	r4, [pc, #52]	; (8005030 <__libc_init_array+0x3c>)
 8004ffa:	1b64      	subs	r4, r4, r5
 8004ffc:	10a4      	asrs	r4, r4, #2
 8004ffe:	2600      	movs	r6, #0
 8005000:	42a6      	cmp	r6, r4
 8005002:	d109      	bne.n	8005018 <__libc_init_array+0x24>
 8005004:	4d0b      	ldr	r5, [pc, #44]	; (8005034 <__libc_init_array+0x40>)
 8005006:	4c0c      	ldr	r4, [pc, #48]	; (8005038 <__libc_init_array+0x44>)
 8005008:	f000 fc6a 	bl	80058e0 <_init>
 800500c:	1b64      	subs	r4, r4, r5
 800500e:	10a4      	asrs	r4, r4, #2
 8005010:	2600      	movs	r6, #0
 8005012:	42a6      	cmp	r6, r4
 8005014:	d105      	bne.n	8005022 <__libc_init_array+0x2e>
 8005016:	bd70      	pop	{r4, r5, r6, pc}
 8005018:	f855 3b04 	ldr.w	r3, [r5], #4
 800501c:	4798      	blx	r3
 800501e:	3601      	adds	r6, #1
 8005020:	e7ee      	b.n	8005000 <__libc_init_array+0xc>
 8005022:	f855 3b04 	ldr.w	r3, [r5], #4
 8005026:	4798      	blx	r3
 8005028:	3601      	adds	r6, #1
 800502a:	e7f2      	b.n	8005012 <__libc_init_array+0x1e>
 800502c:	080059f0 	.word	0x080059f0
 8005030:	080059f0 	.word	0x080059f0
 8005034:	080059f0 	.word	0x080059f0
 8005038:	080059f4 	.word	0x080059f4

0800503c <__retarget_lock_acquire_recursive>:
 800503c:	4770      	bx	lr

0800503e <__retarget_lock_release_recursive>:
 800503e:	4770      	bx	lr

08005040 <_free_r>:
 8005040:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005042:	2900      	cmp	r1, #0
 8005044:	d044      	beq.n	80050d0 <_free_r+0x90>
 8005046:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800504a:	9001      	str	r0, [sp, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	f1a1 0404 	sub.w	r4, r1, #4
 8005052:	bfb8      	it	lt
 8005054:	18e4      	addlt	r4, r4, r3
 8005056:	f000 f8df 	bl	8005218 <__malloc_lock>
 800505a:	4a1e      	ldr	r2, [pc, #120]	; (80050d4 <_free_r+0x94>)
 800505c:	9801      	ldr	r0, [sp, #4]
 800505e:	6813      	ldr	r3, [r2, #0]
 8005060:	b933      	cbnz	r3, 8005070 <_free_r+0x30>
 8005062:	6063      	str	r3, [r4, #4]
 8005064:	6014      	str	r4, [r2, #0]
 8005066:	b003      	add	sp, #12
 8005068:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800506c:	f000 b8da 	b.w	8005224 <__malloc_unlock>
 8005070:	42a3      	cmp	r3, r4
 8005072:	d908      	bls.n	8005086 <_free_r+0x46>
 8005074:	6825      	ldr	r5, [r4, #0]
 8005076:	1961      	adds	r1, r4, r5
 8005078:	428b      	cmp	r3, r1
 800507a:	bf01      	itttt	eq
 800507c:	6819      	ldreq	r1, [r3, #0]
 800507e:	685b      	ldreq	r3, [r3, #4]
 8005080:	1949      	addeq	r1, r1, r5
 8005082:	6021      	streq	r1, [r4, #0]
 8005084:	e7ed      	b.n	8005062 <_free_r+0x22>
 8005086:	461a      	mov	r2, r3
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	b10b      	cbz	r3, 8005090 <_free_r+0x50>
 800508c:	42a3      	cmp	r3, r4
 800508e:	d9fa      	bls.n	8005086 <_free_r+0x46>
 8005090:	6811      	ldr	r1, [r2, #0]
 8005092:	1855      	adds	r5, r2, r1
 8005094:	42a5      	cmp	r5, r4
 8005096:	d10b      	bne.n	80050b0 <_free_r+0x70>
 8005098:	6824      	ldr	r4, [r4, #0]
 800509a:	4421      	add	r1, r4
 800509c:	1854      	adds	r4, r2, r1
 800509e:	42a3      	cmp	r3, r4
 80050a0:	6011      	str	r1, [r2, #0]
 80050a2:	d1e0      	bne.n	8005066 <_free_r+0x26>
 80050a4:	681c      	ldr	r4, [r3, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	6053      	str	r3, [r2, #4]
 80050aa:	440c      	add	r4, r1
 80050ac:	6014      	str	r4, [r2, #0]
 80050ae:	e7da      	b.n	8005066 <_free_r+0x26>
 80050b0:	d902      	bls.n	80050b8 <_free_r+0x78>
 80050b2:	230c      	movs	r3, #12
 80050b4:	6003      	str	r3, [r0, #0]
 80050b6:	e7d6      	b.n	8005066 <_free_r+0x26>
 80050b8:	6825      	ldr	r5, [r4, #0]
 80050ba:	1961      	adds	r1, r4, r5
 80050bc:	428b      	cmp	r3, r1
 80050be:	bf04      	itt	eq
 80050c0:	6819      	ldreq	r1, [r3, #0]
 80050c2:	685b      	ldreq	r3, [r3, #4]
 80050c4:	6063      	str	r3, [r4, #4]
 80050c6:	bf04      	itt	eq
 80050c8:	1949      	addeq	r1, r1, r5
 80050ca:	6021      	streq	r1, [r4, #0]
 80050cc:	6054      	str	r4, [r2, #4]
 80050ce:	e7ca      	b.n	8005066 <_free_r+0x26>
 80050d0:	b003      	add	sp, #12
 80050d2:	bd30      	pop	{r4, r5, pc}
 80050d4:	2000131c 	.word	0x2000131c

080050d8 <sbrk_aligned>:
 80050d8:	b570      	push	{r4, r5, r6, lr}
 80050da:	4e0e      	ldr	r6, [pc, #56]	; (8005114 <sbrk_aligned+0x3c>)
 80050dc:	460c      	mov	r4, r1
 80050de:	6831      	ldr	r1, [r6, #0]
 80050e0:	4605      	mov	r5, r0
 80050e2:	b911      	cbnz	r1, 80050ea <sbrk_aligned+0x12>
 80050e4:	f000 fba6 	bl	8005834 <_sbrk_r>
 80050e8:	6030      	str	r0, [r6, #0]
 80050ea:	4621      	mov	r1, r4
 80050ec:	4628      	mov	r0, r5
 80050ee:	f000 fba1 	bl	8005834 <_sbrk_r>
 80050f2:	1c43      	adds	r3, r0, #1
 80050f4:	d00a      	beq.n	800510c <sbrk_aligned+0x34>
 80050f6:	1cc4      	adds	r4, r0, #3
 80050f8:	f024 0403 	bic.w	r4, r4, #3
 80050fc:	42a0      	cmp	r0, r4
 80050fe:	d007      	beq.n	8005110 <sbrk_aligned+0x38>
 8005100:	1a21      	subs	r1, r4, r0
 8005102:	4628      	mov	r0, r5
 8005104:	f000 fb96 	bl	8005834 <_sbrk_r>
 8005108:	3001      	adds	r0, #1
 800510a:	d101      	bne.n	8005110 <sbrk_aligned+0x38>
 800510c:	f04f 34ff 	mov.w	r4, #4294967295
 8005110:	4620      	mov	r0, r4
 8005112:	bd70      	pop	{r4, r5, r6, pc}
 8005114:	20001320 	.word	0x20001320

08005118 <_malloc_r>:
 8005118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800511c:	1ccd      	adds	r5, r1, #3
 800511e:	f025 0503 	bic.w	r5, r5, #3
 8005122:	3508      	adds	r5, #8
 8005124:	2d0c      	cmp	r5, #12
 8005126:	bf38      	it	cc
 8005128:	250c      	movcc	r5, #12
 800512a:	2d00      	cmp	r5, #0
 800512c:	4607      	mov	r7, r0
 800512e:	db01      	blt.n	8005134 <_malloc_r+0x1c>
 8005130:	42a9      	cmp	r1, r5
 8005132:	d905      	bls.n	8005140 <_malloc_r+0x28>
 8005134:	230c      	movs	r3, #12
 8005136:	603b      	str	r3, [r7, #0]
 8005138:	2600      	movs	r6, #0
 800513a:	4630      	mov	r0, r6
 800513c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005140:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005214 <_malloc_r+0xfc>
 8005144:	f000 f868 	bl	8005218 <__malloc_lock>
 8005148:	f8d8 3000 	ldr.w	r3, [r8]
 800514c:	461c      	mov	r4, r3
 800514e:	bb5c      	cbnz	r4, 80051a8 <_malloc_r+0x90>
 8005150:	4629      	mov	r1, r5
 8005152:	4638      	mov	r0, r7
 8005154:	f7ff ffc0 	bl	80050d8 <sbrk_aligned>
 8005158:	1c43      	adds	r3, r0, #1
 800515a:	4604      	mov	r4, r0
 800515c:	d155      	bne.n	800520a <_malloc_r+0xf2>
 800515e:	f8d8 4000 	ldr.w	r4, [r8]
 8005162:	4626      	mov	r6, r4
 8005164:	2e00      	cmp	r6, #0
 8005166:	d145      	bne.n	80051f4 <_malloc_r+0xdc>
 8005168:	2c00      	cmp	r4, #0
 800516a:	d048      	beq.n	80051fe <_malloc_r+0xe6>
 800516c:	6823      	ldr	r3, [r4, #0]
 800516e:	4631      	mov	r1, r6
 8005170:	4638      	mov	r0, r7
 8005172:	eb04 0903 	add.w	r9, r4, r3
 8005176:	f000 fb5d 	bl	8005834 <_sbrk_r>
 800517a:	4581      	cmp	r9, r0
 800517c:	d13f      	bne.n	80051fe <_malloc_r+0xe6>
 800517e:	6821      	ldr	r1, [r4, #0]
 8005180:	1a6d      	subs	r5, r5, r1
 8005182:	4629      	mov	r1, r5
 8005184:	4638      	mov	r0, r7
 8005186:	f7ff ffa7 	bl	80050d8 <sbrk_aligned>
 800518a:	3001      	adds	r0, #1
 800518c:	d037      	beq.n	80051fe <_malloc_r+0xe6>
 800518e:	6823      	ldr	r3, [r4, #0]
 8005190:	442b      	add	r3, r5
 8005192:	6023      	str	r3, [r4, #0]
 8005194:	f8d8 3000 	ldr.w	r3, [r8]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d038      	beq.n	800520e <_malloc_r+0xf6>
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	42a2      	cmp	r2, r4
 80051a0:	d12b      	bne.n	80051fa <_malloc_r+0xe2>
 80051a2:	2200      	movs	r2, #0
 80051a4:	605a      	str	r2, [r3, #4]
 80051a6:	e00f      	b.n	80051c8 <_malloc_r+0xb0>
 80051a8:	6822      	ldr	r2, [r4, #0]
 80051aa:	1b52      	subs	r2, r2, r5
 80051ac:	d41f      	bmi.n	80051ee <_malloc_r+0xd6>
 80051ae:	2a0b      	cmp	r2, #11
 80051b0:	d917      	bls.n	80051e2 <_malloc_r+0xca>
 80051b2:	1961      	adds	r1, r4, r5
 80051b4:	42a3      	cmp	r3, r4
 80051b6:	6025      	str	r5, [r4, #0]
 80051b8:	bf18      	it	ne
 80051ba:	6059      	strne	r1, [r3, #4]
 80051bc:	6863      	ldr	r3, [r4, #4]
 80051be:	bf08      	it	eq
 80051c0:	f8c8 1000 	streq.w	r1, [r8]
 80051c4:	5162      	str	r2, [r4, r5]
 80051c6:	604b      	str	r3, [r1, #4]
 80051c8:	4638      	mov	r0, r7
 80051ca:	f104 060b 	add.w	r6, r4, #11
 80051ce:	f000 f829 	bl	8005224 <__malloc_unlock>
 80051d2:	f026 0607 	bic.w	r6, r6, #7
 80051d6:	1d23      	adds	r3, r4, #4
 80051d8:	1af2      	subs	r2, r6, r3
 80051da:	d0ae      	beq.n	800513a <_malloc_r+0x22>
 80051dc:	1b9b      	subs	r3, r3, r6
 80051de:	50a3      	str	r3, [r4, r2]
 80051e0:	e7ab      	b.n	800513a <_malloc_r+0x22>
 80051e2:	42a3      	cmp	r3, r4
 80051e4:	6862      	ldr	r2, [r4, #4]
 80051e6:	d1dd      	bne.n	80051a4 <_malloc_r+0x8c>
 80051e8:	f8c8 2000 	str.w	r2, [r8]
 80051ec:	e7ec      	b.n	80051c8 <_malloc_r+0xb0>
 80051ee:	4623      	mov	r3, r4
 80051f0:	6864      	ldr	r4, [r4, #4]
 80051f2:	e7ac      	b.n	800514e <_malloc_r+0x36>
 80051f4:	4634      	mov	r4, r6
 80051f6:	6876      	ldr	r6, [r6, #4]
 80051f8:	e7b4      	b.n	8005164 <_malloc_r+0x4c>
 80051fa:	4613      	mov	r3, r2
 80051fc:	e7cc      	b.n	8005198 <_malloc_r+0x80>
 80051fe:	230c      	movs	r3, #12
 8005200:	603b      	str	r3, [r7, #0]
 8005202:	4638      	mov	r0, r7
 8005204:	f000 f80e 	bl	8005224 <__malloc_unlock>
 8005208:	e797      	b.n	800513a <_malloc_r+0x22>
 800520a:	6025      	str	r5, [r4, #0]
 800520c:	e7dc      	b.n	80051c8 <_malloc_r+0xb0>
 800520e:	605b      	str	r3, [r3, #4]
 8005210:	deff      	udf	#255	; 0xff
 8005212:	bf00      	nop
 8005214:	2000131c 	.word	0x2000131c

08005218 <__malloc_lock>:
 8005218:	4801      	ldr	r0, [pc, #4]	; (8005220 <__malloc_lock+0x8>)
 800521a:	f7ff bf0f 	b.w	800503c <__retarget_lock_acquire_recursive>
 800521e:	bf00      	nop
 8005220:	20001318 	.word	0x20001318

08005224 <__malloc_unlock>:
 8005224:	4801      	ldr	r0, [pc, #4]	; (800522c <__malloc_unlock+0x8>)
 8005226:	f7ff bf0a 	b.w	800503e <__retarget_lock_release_recursive>
 800522a:	bf00      	nop
 800522c:	20001318 	.word	0x20001318

08005230 <__ssputs_r>:
 8005230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005234:	688e      	ldr	r6, [r1, #8]
 8005236:	461f      	mov	r7, r3
 8005238:	42be      	cmp	r6, r7
 800523a:	680b      	ldr	r3, [r1, #0]
 800523c:	4682      	mov	sl, r0
 800523e:	460c      	mov	r4, r1
 8005240:	4690      	mov	r8, r2
 8005242:	d82c      	bhi.n	800529e <__ssputs_r+0x6e>
 8005244:	898a      	ldrh	r2, [r1, #12]
 8005246:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800524a:	d026      	beq.n	800529a <__ssputs_r+0x6a>
 800524c:	6965      	ldr	r5, [r4, #20]
 800524e:	6909      	ldr	r1, [r1, #16]
 8005250:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005254:	eba3 0901 	sub.w	r9, r3, r1
 8005258:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800525c:	1c7b      	adds	r3, r7, #1
 800525e:	444b      	add	r3, r9
 8005260:	106d      	asrs	r5, r5, #1
 8005262:	429d      	cmp	r5, r3
 8005264:	bf38      	it	cc
 8005266:	461d      	movcc	r5, r3
 8005268:	0553      	lsls	r3, r2, #21
 800526a:	d527      	bpl.n	80052bc <__ssputs_r+0x8c>
 800526c:	4629      	mov	r1, r5
 800526e:	f7ff ff53 	bl	8005118 <_malloc_r>
 8005272:	4606      	mov	r6, r0
 8005274:	b360      	cbz	r0, 80052d0 <__ssputs_r+0xa0>
 8005276:	6921      	ldr	r1, [r4, #16]
 8005278:	464a      	mov	r2, r9
 800527a:	f000 faeb 	bl	8005854 <memcpy>
 800527e:	89a3      	ldrh	r3, [r4, #12]
 8005280:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005288:	81a3      	strh	r3, [r4, #12]
 800528a:	6126      	str	r6, [r4, #16]
 800528c:	6165      	str	r5, [r4, #20]
 800528e:	444e      	add	r6, r9
 8005290:	eba5 0509 	sub.w	r5, r5, r9
 8005294:	6026      	str	r6, [r4, #0]
 8005296:	60a5      	str	r5, [r4, #8]
 8005298:	463e      	mov	r6, r7
 800529a:	42be      	cmp	r6, r7
 800529c:	d900      	bls.n	80052a0 <__ssputs_r+0x70>
 800529e:	463e      	mov	r6, r7
 80052a0:	6820      	ldr	r0, [r4, #0]
 80052a2:	4632      	mov	r2, r6
 80052a4:	4641      	mov	r1, r8
 80052a6:	f000 faab 	bl	8005800 <memmove>
 80052aa:	68a3      	ldr	r3, [r4, #8]
 80052ac:	1b9b      	subs	r3, r3, r6
 80052ae:	60a3      	str	r3, [r4, #8]
 80052b0:	6823      	ldr	r3, [r4, #0]
 80052b2:	4433      	add	r3, r6
 80052b4:	6023      	str	r3, [r4, #0]
 80052b6:	2000      	movs	r0, #0
 80052b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052bc:	462a      	mov	r2, r5
 80052be:	f000 fad7 	bl	8005870 <_realloc_r>
 80052c2:	4606      	mov	r6, r0
 80052c4:	2800      	cmp	r0, #0
 80052c6:	d1e0      	bne.n	800528a <__ssputs_r+0x5a>
 80052c8:	6921      	ldr	r1, [r4, #16]
 80052ca:	4650      	mov	r0, sl
 80052cc:	f7ff feb8 	bl	8005040 <_free_r>
 80052d0:	230c      	movs	r3, #12
 80052d2:	f8ca 3000 	str.w	r3, [sl]
 80052d6:	89a3      	ldrh	r3, [r4, #12]
 80052d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052dc:	81a3      	strh	r3, [r4, #12]
 80052de:	f04f 30ff 	mov.w	r0, #4294967295
 80052e2:	e7e9      	b.n	80052b8 <__ssputs_r+0x88>

080052e4 <_svfiprintf_r>:
 80052e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052e8:	4698      	mov	r8, r3
 80052ea:	898b      	ldrh	r3, [r1, #12]
 80052ec:	061b      	lsls	r3, r3, #24
 80052ee:	b09d      	sub	sp, #116	; 0x74
 80052f0:	4607      	mov	r7, r0
 80052f2:	460d      	mov	r5, r1
 80052f4:	4614      	mov	r4, r2
 80052f6:	d50e      	bpl.n	8005316 <_svfiprintf_r+0x32>
 80052f8:	690b      	ldr	r3, [r1, #16]
 80052fa:	b963      	cbnz	r3, 8005316 <_svfiprintf_r+0x32>
 80052fc:	2140      	movs	r1, #64	; 0x40
 80052fe:	f7ff ff0b 	bl	8005118 <_malloc_r>
 8005302:	6028      	str	r0, [r5, #0]
 8005304:	6128      	str	r0, [r5, #16]
 8005306:	b920      	cbnz	r0, 8005312 <_svfiprintf_r+0x2e>
 8005308:	230c      	movs	r3, #12
 800530a:	603b      	str	r3, [r7, #0]
 800530c:	f04f 30ff 	mov.w	r0, #4294967295
 8005310:	e0d0      	b.n	80054b4 <_svfiprintf_r+0x1d0>
 8005312:	2340      	movs	r3, #64	; 0x40
 8005314:	616b      	str	r3, [r5, #20]
 8005316:	2300      	movs	r3, #0
 8005318:	9309      	str	r3, [sp, #36]	; 0x24
 800531a:	2320      	movs	r3, #32
 800531c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005320:	f8cd 800c 	str.w	r8, [sp, #12]
 8005324:	2330      	movs	r3, #48	; 0x30
 8005326:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80054cc <_svfiprintf_r+0x1e8>
 800532a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800532e:	f04f 0901 	mov.w	r9, #1
 8005332:	4623      	mov	r3, r4
 8005334:	469a      	mov	sl, r3
 8005336:	f813 2b01 	ldrb.w	r2, [r3], #1
 800533a:	b10a      	cbz	r2, 8005340 <_svfiprintf_r+0x5c>
 800533c:	2a25      	cmp	r2, #37	; 0x25
 800533e:	d1f9      	bne.n	8005334 <_svfiprintf_r+0x50>
 8005340:	ebba 0b04 	subs.w	fp, sl, r4
 8005344:	d00b      	beq.n	800535e <_svfiprintf_r+0x7a>
 8005346:	465b      	mov	r3, fp
 8005348:	4622      	mov	r2, r4
 800534a:	4629      	mov	r1, r5
 800534c:	4638      	mov	r0, r7
 800534e:	f7ff ff6f 	bl	8005230 <__ssputs_r>
 8005352:	3001      	adds	r0, #1
 8005354:	f000 80a9 	beq.w	80054aa <_svfiprintf_r+0x1c6>
 8005358:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800535a:	445a      	add	r2, fp
 800535c:	9209      	str	r2, [sp, #36]	; 0x24
 800535e:	f89a 3000 	ldrb.w	r3, [sl]
 8005362:	2b00      	cmp	r3, #0
 8005364:	f000 80a1 	beq.w	80054aa <_svfiprintf_r+0x1c6>
 8005368:	2300      	movs	r3, #0
 800536a:	f04f 32ff 	mov.w	r2, #4294967295
 800536e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005372:	f10a 0a01 	add.w	sl, sl, #1
 8005376:	9304      	str	r3, [sp, #16]
 8005378:	9307      	str	r3, [sp, #28]
 800537a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800537e:	931a      	str	r3, [sp, #104]	; 0x68
 8005380:	4654      	mov	r4, sl
 8005382:	2205      	movs	r2, #5
 8005384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005388:	4850      	ldr	r0, [pc, #320]	; (80054cc <_svfiprintf_r+0x1e8>)
 800538a:	f7fa ff29 	bl	80001e0 <memchr>
 800538e:	9a04      	ldr	r2, [sp, #16]
 8005390:	b9d8      	cbnz	r0, 80053ca <_svfiprintf_r+0xe6>
 8005392:	06d0      	lsls	r0, r2, #27
 8005394:	bf44      	itt	mi
 8005396:	2320      	movmi	r3, #32
 8005398:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800539c:	0711      	lsls	r1, r2, #28
 800539e:	bf44      	itt	mi
 80053a0:	232b      	movmi	r3, #43	; 0x2b
 80053a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053a6:	f89a 3000 	ldrb.w	r3, [sl]
 80053aa:	2b2a      	cmp	r3, #42	; 0x2a
 80053ac:	d015      	beq.n	80053da <_svfiprintf_r+0xf6>
 80053ae:	9a07      	ldr	r2, [sp, #28]
 80053b0:	4654      	mov	r4, sl
 80053b2:	2000      	movs	r0, #0
 80053b4:	f04f 0c0a 	mov.w	ip, #10
 80053b8:	4621      	mov	r1, r4
 80053ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053be:	3b30      	subs	r3, #48	; 0x30
 80053c0:	2b09      	cmp	r3, #9
 80053c2:	d94d      	bls.n	8005460 <_svfiprintf_r+0x17c>
 80053c4:	b1b0      	cbz	r0, 80053f4 <_svfiprintf_r+0x110>
 80053c6:	9207      	str	r2, [sp, #28]
 80053c8:	e014      	b.n	80053f4 <_svfiprintf_r+0x110>
 80053ca:	eba0 0308 	sub.w	r3, r0, r8
 80053ce:	fa09 f303 	lsl.w	r3, r9, r3
 80053d2:	4313      	orrs	r3, r2
 80053d4:	9304      	str	r3, [sp, #16]
 80053d6:	46a2      	mov	sl, r4
 80053d8:	e7d2      	b.n	8005380 <_svfiprintf_r+0x9c>
 80053da:	9b03      	ldr	r3, [sp, #12]
 80053dc:	1d19      	adds	r1, r3, #4
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	9103      	str	r1, [sp, #12]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	bfbb      	ittet	lt
 80053e6:	425b      	neglt	r3, r3
 80053e8:	f042 0202 	orrlt.w	r2, r2, #2
 80053ec:	9307      	strge	r3, [sp, #28]
 80053ee:	9307      	strlt	r3, [sp, #28]
 80053f0:	bfb8      	it	lt
 80053f2:	9204      	strlt	r2, [sp, #16]
 80053f4:	7823      	ldrb	r3, [r4, #0]
 80053f6:	2b2e      	cmp	r3, #46	; 0x2e
 80053f8:	d10c      	bne.n	8005414 <_svfiprintf_r+0x130>
 80053fa:	7863      	ldrb	r3, [r4, #1]
 80053fc:	2b2a      	cmp	r3, #42	; 0x2a
 80053fe:	d134      	bne.n	800546a <_svfiprintf_r+0x186>
 8005400:	9b03      	ldr	r3, [sp, #12]
 8005402:	1d1a      	adds	r2, r3, #4
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	9203      	str	r2, [sp, #12]
 8005408:	2b00      	cmp	r3, #0
 800540a:	bfb8      	it	lt
 800540c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005410:	3402      	adds	r4, #2
 8005412:	9305      	str	r3, [sp, #20]
 8005414:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80054dc <_svfiprintf_r+0x1f8>
 8005418:	7821      	ldrb	r1, [r4, #0]
 800541a:	2203      	movs	r2, #3
 800541c:	4650      	mov	r0, sl
 800541e:	f7fa fedf 	bl	80001e0 <memchr>
 8005422:	b138      	cbz	r0, 8005434 <_svfiprintf_r+0x150>
 8005424:	9b04      	ldr	r3, [sp, #16]
 8005426:	eba0 000a 	sub.w	r0, r0, sl
 800542a:	2240      	movs	r2, #64	; 0x40
 800542c:	4082      	lsls	r2, r0
 800542e:	4313      	orrs	r3, r2
 8005430:	3401      	adds	r4, #1
 8005432:	9304      	str	r3, [sp, #16]
 8005434:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005438:	4825      	ldr	r0, [pc, #148]	; (80054d0 <_svfiprintf_r+0x1ec>)
 800543a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800543e:	2206      	movs	r2, #6
 8005440:	f7fa fece 	bl	80001e0 <memchr>
 8005444:	2800      	cmp	r0, #0
 8005446:	d038      	beq.n	80054ba <_svfiprintf_r+0x1d6>
 8005448:	4b22      	ldr	r3, [pc, #136]	; (80054d4 <_svfiprintf_r+0x1f0>)
 800544a:	bb1b      	cbnz	r3, 8005494 <_svfiprintf_r+0x1b0>
 800544c:	9b03      	ldr	r3, [sp, #12]
 800544e:	3307      	adds	r3, #7
 8005450:	f023 0307 	bic.w	r3, r3, #7
 8005454:	3308      	adds	r3, #8
 8005456:	9303      	str	r3, [sp, #12]
 8005458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800545a:	4433      	add	r3, r6
 800545c:	9309      	str	r3, [sp, #36]	; 0x24
 800545e:	e768      	b.n	8005332 <_svfiprintf_r+0x4e>
 8005460:	fb0c 3202 	mla	r2, ip, r2, r3
 8005464:	460c      	mov	r4, r1
 8005466:	2001      	movs	r0, #1
 8005468:	e7a6      	b.n	80053b8 <_svfiprintf_r+0xd4>
 800546a:	2300      	movs	r3, #0
 800546c:	3401      	adds	r4, #1
 800546e:	9305      	str	r3, [sp, #20]
 8005470:	4619      	mov	r1, r3
 8005472:	f04f 0c0a 	mov.w	ip, #10
 8005476:	4620      	mov	r0, r4
 8005478:	f810 2b01 	ldrb.w	r2, [r0], #1
 800547c:	3a30      	subs	r2, #48	; 0x30
 800547e:	2a09      	cmp	r2, #9
 8005480:	d903      	bls.n	800548a <_svfiprintf_r+0x1a6>
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0c6      	beq.n	8005414 <_svfiprintf_r+0x130>
 8005486:	9105      	str	r1, [sp, #20]
 8005488:	e7c4      	b.n	8005414 <_svfiprintf_r+0x130>
 800548a:	fb0c 2101 	mla	r1, ip, r1, r2
 800548e:	4604      	mov	r4, r0
 8005490:	2301      	movs	r3, #1
 8005492:	e7f0      	b.n	8005476 <_svfiprintf_r+0x192>
 8005494:	ab03      	add	r3, sp, #12
 8005496:	9300      	str	r3, [sp, #0]
 8005498:	462a      	mov	r2, r5
 800549a:	4b0f      	ldr	r3, [pc, #60]	; (80054d8 <_svfiprintf_r+0x1f4>)
 800549c:	a904      	add	r1, sp, #16
 800549e:	4638      	mov	r0, r7
 80054a0:	f3af 8000 	nop.w
 80054a4:	1c42      	adds	r2, r0, #1
 80054a6:	4606      	mov	r6, r0
 80054a8:	d1d6      	bne.n	8005458 <_svfiprintf_r+0x174>
 80054aa:	89ab      	ldrh	r3, [r5, #12]
 80054ac:	065b      	lsls	r3, r3, #25
 80054ae:	f53f af2d 	bmi.w	800530c <_svfiprintf_r+0x28>
 80054b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054b4:	b01d      	add	sp, #116	; 0x74
 80054b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ba:	ab03      	add	r3, sp, #12
 80054bc:	9300      	str	r3, [sp, #0]
 80054be:	462a      	mov	r2, r5
 80054c0:	4b05      	ldr	r3, [pc, #20]	; (80054d8 <_svfiprintf_r+0x1f4>)
 80054c2:	a904      	add	r1, sp, #16
 80054c4:	4638      	mov	r0, r7
 80054c6:	f000 f879 	bl	80055bc <_printf_i>
 80054ca:	e7eb      	b.n	80054a4 <_svfiprintf_r+0x1c0>
 80054cc:	080059b4 	.word	0x080059b4
 80054d0:	080059be 	.word	0x080059be
 80054d4:	00000000 	.word	0x00000000
 80054d8:	08005231 	.word	0x08005231
 80054dc:	080059ba 	.word	0x080059ba

080054e0 <_printf_common>:
 80054e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054e4:	4616      	mov	r6, r2
 80054e6:	4699      	mov	r9, r3
 80054e8:	688a      	ldr	r2, [r1, #8]
 80054ea:	690b      	ldr	r3, [r1, #16]
 80054ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054f0:	4293      	cmp	r3, r2
 80054f2:	bfb8      	it	lt
 80054f4:	4613      	movlt	r3, r2
 80054f6:	6033      	str	r3, [r6, #0]
 80054f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054fc:	4607      	mov	r7, r0
 80054fe:	460c      	mov	r4, r1
 8005500:	b10a      	cbz	r2, 8005506 <_printf_common+0x26>
 8005502:	3301      	adds	r3, #1
 8005504:	6033      	str	r3, [r6, #0]
 8005506:	6823      	ldr	r3, [r4, #0]
 8005508:	0699      	lsls	r1, r3, #26
 800550a:	bf42      	ittt	mi
 800550c:	6833      	ldrmi	r3, [r6, #0]
 800550e:	3302      	addmi	r3, #2
 8005510:	6033      	strmi	r3, [r6, #0]
 8005512:	6825      	ldr	r5, [r4, #0]
 8005514:	f015 0506 	ands.w	r5, r5, #6
 8005518:	d106      	bne.n	8005528 <_printf_common+0x48>
 800551a:	f104 0a19 	add.w	sl, r4, #25
 800551e:	68e3      	ldr	r3, [r4, #12]
 8005520:	6832      	ldr	r2, [r6, #0]
 8005522:	1a9b      	subs	r3, r3, r2
 8005524:	42ab      	cmp	r3, r5
 8005526:	dc26      	bgt.n	8005576 <_printf_common+0x96>
 8005528:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800552c:	1e13      	subs	r3, r2, #0
 800552e:	6822      	ldr	r2, [r4, #0]
 8005530:	bf18      	it	ne
 8005532:	2301      	movne	r3, #1
 8005534:	0692      	lsls	r2, r2, #26
 8005536:	d42b      	bmi.n	8005590 <_printf_common+0xb0>
 8005538:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800553c:	4649      	mov	r1, r9
 800553e:	4638      	mov	r0, r7
 8005540:	47c0      	blx	r8
 8005542:	3001      	adds	r0, #1
 8005544:	d01e      	beq.n	8005584 <_printf_common+0xa4>
 8005546:	6823      	ldr	r3, [r4, #0]
 8005548:	6922      	ldr	r2, [r4, #16]
 800554a:	f003 0306 	and.w	r3, r3, #6
 800554e:	2b04      	cmp	r3, #4
 8005550:	bf02      	ittt	eq
 8005552:	68e5      	ldreq	r5, [r4, #12]
 8005554:	6833      	ldreq	r3, [r6, #0]
 8005556:	1aed      	subeq	r5, r5, r3
 8005558:	68a3      	ldr	r3, [r4, #8]
 800555a:	bf0c      	ite	eq
 800555c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005560:	2500      	movne	r5, #0
 8005562:	4293      	cmp	r3, r2
 8005564:	bfc4      	itt	gt
 8005566:	1a9b      	subgt	r3, r3, r2
 8005568:	18ed      	addgt	r5, r5, r3
 800556a:	2600      	movs	r6, #0
 800556c:	341a      	adds	r4, #26
 800556e:	42b5      	cmp	r5, r6
 8005570:	d11a      	bne.n	80055a8 <_printf_common+0xc8>
 8005572:	2000      	movs	r0, #0
 8005574:	e008      	b.n	8005588 <_printf_common+0xa8>
 8005576:	2301      	movs	r3, #1
 8005578:	4652      	mov	r2, sl
 800557a:	4649      	mov	r1, r9
 800557c:	4638      	mov	r0, r7
 800557e:	47c0      	blx	r8
 8005580:	3001      	adds	r0, #1
 8005582:	d103      	bne.n	800558c <_printf_common+0xac>
 8005584:	f04f 30ff 	mov.w	r0, #4294967295
 8005588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800558c:	3501      	adds	r5, #1
 800558e:	e7c6      	b.n	800551e <_printf_common+0x3e>
 8005590:	18e1      	adds	r1, r4, r3
 8005592:	1c5a      	adds	r2, r3, #1
 8005594:	2030      	movs	r0, #48	; 0x30
 8005596:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800559a:	4422      	add	r2, r4
 800559c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055a4:	3302      	adds	r3, #2
 80055a6:	e7c7      	b.n	8005538 <_printf_common+0x58>
 80055a8:	2301      	movs	r3, #1
 80055aa:	4622      	mov	r2, r4
 80055ac:	4649      	mov	r1, r9
 80055ae:	4638      	mov	r0, r7
 80055b0:	47c0      	blx	r8
 80055b2:	3001      	adds	r0, #1
 80055b4:	d0e6      	beq.n	8005584 <_printf_common+0xa4>
 80055b6:	3601      	adds	r6, #1
 80055b8:	e7d9      	b.n	800556e <_printf_common+0x8e>
	...

080055bc <_printf_i>:
 80055bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055c0:	7e0f      	ldrb	r7, [r1, #24]
 80055c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80055c4:	2f78      	cmp	r7, #120	; 0x78
 80055c6:	4691      	mov	r9, r2
 80055c8:	4680      	mov	r8, r0
 80055ca:	460c      	mov	r4, r1
 80055cc:	469a      	mov	sl, r3
 80055ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80055d2:	d807      	bhi.n	80055e4 <_printf_i+0x28>
 80055d4:	2f62      	cmp	r7, #98	; 0x62
 80055d6:	d80a      	bhi.n	80055ee <_printf_i+0x32>
 80055d8:	2f00      	cmp	r7, #0
 80055da:	f000 80d4 	beq.w	8005786 <_printf_i+0x1ca>
 80055de:	2f58      	cmp	r7, #88	; 0x58
 80055e0:	f000 80c0 	beq.w	8005764 <_printf_i+0x1a8>
 80055e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80055ec:	e03a      	b.n	8005664 <_printf_i+0xa8>
 80055ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80055f2:	2b15      	cmp	r3, #21
 80055f4:	d8f6      	bhi.n	80055e4 <_printf_i+0x28>
 80055f6:	a101      	add	r1, pc, #4	; (adr r1, 80055fc <_printf_i+0x40>)
 80055f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055fc:	08005655 	.word	0x08005655
 8005600:	08005669 	.word	0x08005669
 8005604:	080055e5 	.word	0x080055e5
 8005608:	080055e5 	.word	0x080055e5
 800560c:	080055e5 	.word	0x080055e5
 8005610:	080055e5 	.word	0x080055e5
 8005614:	08005669 	.word	0x08005669
 8005618:	080055e5 	.word	0x080055e5
 800561c:	080055e5 	.word	0x080055e5
 8005620:	080055e5 	.word	0x080055e5
 8005624:	080055e5 	.word	0x080055e5
 8005628:	0800576d 	.word	0x0800576d
 800562c:	08005695 	.word	0x08005695
 8005630:	08005727 	.word	0x08005727
 8005634:	080055e5 	.word	0x080055e5
 8005638:	080055e5 	.word	0x080055e5
 800563c:	0800578f 	.word	0x0800578f
 8005640:	080055e5 	.word	0x080055e5
 8005644:	08005695 	.word	0x08005695
 8005648:	080055e5 	.word	0x080055e5
 800564c:	080055e5 	.word	0x080055e5
 8005650:	0800572f 	.word	0x0800572f
 8005654:	682b      	ldr	r3, [r5, #0]
 8005656:	1d1a      	adds	r2, r3, #4
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	602a      	str	r2, [r5, #0]
 800565c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005660:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005664:	2301      	movs	r3, #1
 8005666:	e09f      	b.n	80057a8 <_printf_i+0x1ec>
 8005668:	6820      	ldr	r0, [r4, #0]
 800566a:	682b      	ldr	r3, [r5, #0]
 800566c:	0607      	lsls	r7, r0, #24
 800566e:	f103 0104 	add.w	r1, r3, #4
 8005672:	6029      	str	r1, [r5, #0]
 8005674:	d501      	bpl.n	800567a <_printf_i+0xbe>
 8005676:	681e      	ldr	r6, [r3, #0]
 8005678:	e003      	b.n	8005682 <_printf_i+0xc6>
 800567a:	0646      	lsls	r6, r0, #25
 800567c:	d5fb      	bpl.n	8005676 <_printf_i+0xba>
 800567e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005682:	2e00      	cmp	r6, #0
 8005684:	da03      	bge.n	800568e <_printf_i+0xd2>
 8005686:	232d      	movs	r3, #45	; 0x2d
 8005688:	4276      	negs	r6, r6
 800568a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800568e:	485a      	ldr	r0, [pc, #360]	; (80057f8 <_printf_i+0x23c>)
 8005690:	230a      	movs	r3, #10
 8005692:	e012      	b.n	80056ba <_printf_i+0xfe>
 8005694:	682b      	ldr	r3, [r5, #0]
 8005696:	6820      	ldr	r0, [r4, #0]
 8005698:	1d19      	adds	r1, r3, #4
 800569a:	6029      	str	r1, [r5, #0]
 800569c:	0605      	lsls	r5, r0, #24
 800569e:	d501      	bpl.n	80056a4 <_printf_i+0xe8>
 80056a0:	681e      	ldr	r6, [r3, #0]
 80056a2:	e002      	b.n	80056aa <_printf_i+0xee>
 80056a4:	0641      	lsls	r1, r0, #25
 80056a6:	d5fb      	bpl.n	80056a0 <_printf_i+0xe4>
 80056a8:	881e      	ldrh	r6, [r3, #0]
 80056aa:	4853      	ldr	r0, [pc, #332]	; (80057f8 <_printf_i+0x23c>)
 80056ac:	2f6f      	cmp	r7, #111	; 0x6f
 80056ae:	bf0c      	ite	eq
 80056b0:	2308      	moveq	r3, #8
 80056b2:	230a      	movne	r3, #10
 80056b4:	2100      	movs	r1, #0
 80056b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056ba:	6865      	ldr	r5, [r4, #4]
 80056bc:	60a5      	str	r5, [r4, #8]
 80056be:	2d00      	cmp	r5, #0
 80056c0:	bfa2      	ittt	ge
 80056c2:	6821      	ldrge	r1, [r4, #0]
 80056c4:	f021 0104 	bicge.w	r1, r1, #4
 80056c8:	6021      	strge	r1, [r4, #0]
 80056ca:	b90e      	cbnz	r6, 80056d0 <_printf_i+0x114>
 80056cc:	2d00      	cmp	r5, #0
 80056ce:	d04b      	beq.n	8005768 <_printf_i+0x1ac>
 80056d0:	4615      	mov	r5, r2
 80056d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80056d6:	fb03 6711 	mls	r7, r3, r1, r6
 80056da:	5dc7      	ldrb	r7, [r0, r7]
 80056dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80056e0:	4637      	mov	r7, r6
 80056e2:	42bb      	cmp	r3, r7
 80056e4:	460e      	mov	r6, r1
 80056e6:	d9f4      	bls.n	80056d2 <_printf_i+0x116>
 80056e8:	2b08      	cmp	r3, #8
 80056ea:	d10b      	bne.n	8005704 <_printf_i+0x148>
 80056ec:	6823      	ldr	r3, [r4, #0]
 80056ee:	07de      	lsls	r6, r3, #31
 80056f0:	d508      	bpl.n	8005704 <_printf_i+0x148>
 80056f2:	6923      	ldr	r3, [r4, #16]
 80056f4:	6861      	ldr	r1, [r4, #4]
 80056f6:	4299      	cmp	r1, r3
 80056f8:	bfde      	ittt	le
 80056fa:	2330      	movle	r3, #48	; 0x30
 80056fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005700:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005704:	1b52      	subs	r2, r2, r5
 8005706:	6122      	str	r2, [r4, #16]
 8005708:	f8cd a000 	str.w	sl, [sp]
 800570c:	464b      	mov	r3, r9
 800570e:	aa03      	add	r2, sp, #12
 8005710:	4621      	mov	r1, r4
 8005712:	4640      	mov	r0, r8
 8005714:	f7ff fee4 	bl	80054e0 <_printf_common>
 8005718:	3001      	adds	r0, #1
 800571a:	d14a      	bne.n	80057b2 <_printf_i+0x1f6>
 800571c:	f04f 30ff 	mov.w	r0, #4294967295
 8005720:	b004      	add	sp, #16
 8005722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	f043 0320 	orr.w	r3, r3, #32
 800572c:	6023      	str	r3, [r4, #0]
 800572e:	4833      	ldr	r0, [pc, #204]	; (80057fc <_printf_i+0x240>)
 8005730:	2778      	movs	r7, #120	; 0x78
 8005732:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005736:	6823      	ldr	r3, [r4, #0]
 8005738:	6829      	ldr	r1, [r5, #0]
 800573a:	061f      	lsls	r7, r3, #24
 800573c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005740:	d402      	bmi.n	8005748 <_printf_i+0x18c>
 8005742:	065f      	lsls	r7, r3, #25
 8005744:	bf48      	it	mi
 8005746:	b2b6      	uxthmi	r6, r6
 8005748:	07df      	lsls	r7, r3, #31
 800574a:	bf48      	it	mi
 800574c:	f043 0320 	orrmi.w	r3, r3, #32
 8005750:	6029      	str	r1, [r5, #0]
 8005752:	bf48      	it	mi
 8005754:	6023      	strmi	r3, [r4, #0]
 8005756:	b91e      	cbnz	r6, 8005760 <_printf_i+0x1a4>
 8005758:	6823      	ldr	r3, [r4, #0]
 800575a:	f023 0320 	bic.w	r3, r3, #32
 800575e:	6023      	str	r3, [r4, #0]
 8005760:	2310      	movs	r3, #16
 8005762:	e7a7      	b.n	80056b4 <_printf_i+0xf8>
 8005764:	4824      	ldr	r0, [pc, #144]	; (80057f8 <_printf_i+0x23c>)
 8005766:	e7e4      	b.n	8005732 <_printf_i+0x176>
 8005768:	4615      	mov	r5, r2
 800576a:	e7bd      	b.n	80056e8 <_printf_i+0x12c>
 800576c:	682b      	ldr	r3, [r5, #0]
 800576e:	6826      	ldr	r6, [r4, #0]
 8005770:	6961      	ldr	r1, [r4, #20]
 8005772:	1d18      	adds	r0, r3, #4
 8005774:	6028      	str	r0, [r5, #0]
 8005776:	0635      	lsls	r5, r6, #24
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	d501      	bpl.n	8005780 <_printf_i+0x1c4>
 800577c:	6019      	str	r1, [r3, #0]
 800577e:	e002      	b.n	8005786 <_printf_i+0x1ca>
 8005780:	0670      	lsls	r0, r6, #25
 8005782:	d5fb      	bpl.n	800577c <_printf_i+0x1c0>
 8005784:	8019      	strh	r1, [r3, #0]
 8005786:	2300      	movs	r3, #0
 8005788:	6123      	str	r3, [r4, #16]
 800578a:	4615      	mov	r5, r2
 800578c:	e7bc      	b.n	8005708 <_printf_i+0x14c>
 800578e:	682b      	ldr	r3, [r5, #0]
 8005790:	1d1a      	adds	r2, r3, #4
 8005792:	602a      	str	r2, [r5, #0]
 8005794:	681d      	ldr	r5, [r3, #0]
 8005796:	6862      	ldr	r2, [r4, #4]
 8005798:	2100      	movs	r1, #0
 800579a:	4628      	mov	r0, r5
 800579c:	f7fa fd20 	bl	80001e0 <memchr>
 80057a0:	b108      	cbz	r0, 80057a6 <_printf_i+0x1ea>
 80057a2:	1b40      	subs	r0, r0, r5
 80057a4:	6060      	str	r0, [r4, #4]
 80057a6:	6863      	ldr	r3, [r4, #4]
 80057a8:	6123      	str	r3, [r4, #16]
 80057aa:	2300      	movs	r3, #0
 80057ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057b0:	e7aa      	b.n	8005708 <_printf_i+0x14c>
 80057b2:	6923      	ldr	r3, [r4, #16]
 80057b4:	462a      	mov	r2, r5
 80057b6:	4649      	mov	r1, r9
 80057b8:	4640      	mov	r0, r8
 80057ba:	47d0      	blx	sl
 80057bc:	3001      	adds	r0, #1
 80057be:	d0ad      	beq.n	800571c <_printf_i+0x160>
 80057c0:	6823      	ldr	r3, [r4, #0]
 80057c2:	079b      	lsls	r3, r3, #30
 80057c4:	d413      	bmi.n	80057ee <_printf_i+0x232>
 80057c6:	68e0      	ldr	r0, [r4, #12]
 80057c8:	9b03      	ldr	r3, [sp, #12]
 80057ca:	4298      	cmp	r0, r3
 80057cc:	bfb8      	it	lt
 80057ce:	4618      	movlt	r0, r3
 80057d0:	e7a6      	b.n	8005720 <_printf_i+0x164>
 80057d2:	2301      	movs	r3, #1
 80057d4:	4632      	mov	r2, r6
 80057d6:	4649      	mov	r1, r9
 80057d8:	4640      	mov	r0, r8
 80057da:	47d0      	blx	sl
 80057dc:	3001      	adds	r0, #1
 80057de:	d09d      	beq.n	800571c <_printf_i+0x160>
 80057e0:	3501      	adds	r5, #1
 80057e2:	68e3      	ldr	r3, [r4, #12]
 80057e4:	9903      	ldr	r1, [sp, #12]
 80057e6:	1a5b      	subs	r3, r3, r1
 80057e8:	42ab      	cmp	r3, r5
 80057ea:	dcf2      	bgt.n	80057d2 <_printf_i+0x216>
 80057ec:	e7eb      	b.n	80057c6 <_printf_i+0x20a>
 80057ee:	2500      	movs	r5, #0
 80057f0:	f104 0619 	add.w	r6, r4, #25
 80057f4:	e7f5      	b.n	80057e2 <_printf_i+0x226>
 80057f6:	bf00      	nop
 80057f8:	080059c5 	.word	0x080059c5
 80057fc:	080059d6 	.word	0x080059d6

08005800 <memmove>:
 8005800:	4288      	cmp	r0, r1
 8005802:	b510      	push	{r4, lr}
 8005804:	eb01 0402 	add.w	r4, r1, r2
 8005808:	d902      	bls.n	8005810 <memmove+0x10>
 800580a:	4284      	cmp	r4, r0
 800580c:	4623      	mov	r3, r4
 800580e:	d807      	bhi.n	8005820 <memmove+0x20>
 8005810:	1e43      	subs	r3, r0, #1
 8005812:	42a1      	cmp	r1, r4
 8005814:	d008      	beq.n	8005828 <memmove+0x28>
 8005816:	f811 2b01 	ldrb.w	r2, [r1], #1
 800581a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800581e:	e7f8      	b.n	8005812 <memmove+0x12>
 8005820:	4402      	add	r2, r0
 8005822:	4601      	mov	r1, r0
 8005824:	428a      	cmp	r2, r1
 8005826:	d100      	bne.n	800582a <memmove+0x2a>
 8005828:	bd10      	pop	{r4, pc}
 800582a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800582e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005832:	e7f7      	b.n	8005824 <memmove+0x24>

08005834 <_sbrk_r>:
 8005834:	b538      	push	{r3, r4, r5, lr}
 8005836:	4d06      	ldr	r5, [pc, #24]	; (8005850 <_sbrk_r+0x1c>)
 8005838:	2300      	movs	r3, #0
 800583a:	4604      	mov	r4, r0
 800583c:	4608      	mov	r0, r1
 800583e:	602b      	str	r3, [r5, #0]
 8005840:	f7fb fa12 	bl	8000c68 <_sbrk>
 8005844:	1c43      	adds	r3, r0, #1
 8005846:	d102      	bne.n	800584e <_sbrk_r+0x1a>
 8005848:	682b      	ldr	r3, [r5, #0]
 800584a:	b103      	cbz	r3, 800584e <_sbrk_r+0x1a>
 800584c:	6023      	str	r3, [r4, #0]
 800584e:	bd38      	pop	{r3, r4, r5, pc}
 8005850:	20001314 	.word	0x20001314

08005854 <memcpy>:
 8005854:	440a      	add	r2, r1
 8005856:	4291      	cmp	r1, r2
 8005858:	f100 33ff 	add.w	r3, r0, #4294967295
 800585c:	d100      	bne.n	8005860 <memcpy+0xc>
 800585e:	4770      	bx	lr
 8005860:	b510      	push	{r4, lr}
 8005862:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005866:	f803 4f01 	strb.w	r4, [r3, #1]!
 800586a:	4291      	cmp	r1, r2
 800586c:	d1f9      	bne.n	8005862 <memcpy+0xe>
 800586e:	bd10      	pop	{r4, pc}

08005870 <_realloc_r>:
 8005870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005874:	4680      	mov	r8, r0
 8005876:	4614      	mov	r4, r2
 8005878:	460e      	mov	r6, r1
 800587a:	b921      	cbnz	r1, 8005886 <_realloc_r+0x16>
 800587c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005880:	4611      	mov	r1, r2
 8005882:	f7ff bc49 	b.w	8005118 <_malloc_r>
 8005886:	b92a      	cbnz	r2, 8005894 <_realloc_r+0x24>
 8005888:	f7ff fbda 	bl	8005040 <_free_r>
 800588c:	4625      	mov	r5, r4
 800588e:	4628      	mov	r0, r5
 8005890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005894:	f000 f81b 	bl	80058ce <_malloc_usable_size_r>
 8005898:	4284      	cmp	r4, r0
 800589a:	4607      	mov	r7, r0
 800589c:	d802      	bhi.n	80058a4 <_realloc_r+0x34>
 800589e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80058a2:	d812      	bhi.n	80058ca <_realloc_r+0x5a>
 80058a4:	4621      	mov	r1, r4
 80058a6:	4640      	mov	r0, r8
 80058a8:	f7ff fc36 	bl	8005118 <_malloc_r>
 80058ac:	4605      	mov	r5, r0
 80058ae:	2800      	cmp	r0, #0
 80058b0:	d0ed      	beq.n	800588e <_realloc_r+0x1e>
 80058b2:	42bc      	cmp	r4, r7
 80058b4:	4622      	mov	r2, r4
 80058b6:	4631      	mov	r1, r6
 80058b8:	bf28      	it	cs
 80058ba:	463a      	movcs	r2, r7
 80058bc:	f7ff ffca 	bl	8005854 <memcpy>
 80058c0:	4631      	mov	r1, r6
 80058c2:	4640      	mov	r0, r8
 80058c4:	f7ff fbbc 	bl	8005040 <_free_r>
 80058c8:	e7e1      	b.n	800588e <_realloc_r+0x1e>
 80058ca:	4635      	mov	r5, r6
 80058cc:	e7df      	b.n	800588e <_realloc_r+0x1e>

080058ce <_malloc_usable_size_r>:
 80058ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058d2:	1f18      	subs	r0, r3, #4
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	bfbc      	itt	lt
 80058d8:	580b      	ldrlt	r3, [r1, r0]
 80058da:	18c0      	addlt	r0, r0, r3
 80058dc:	4770      	bx	lr
	...

080058e0 <_init>:
 80058e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058e2:	bf00      	nop
 80058e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058e6:	bc08      	pop	{r3}
 80058e8:	469e      	mov	lr, r3
 80058ea:	4770      	bx	lr

080058ec <_fini>:
 80058ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ee:	bf00      	nop
 80058f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058f2:	bc08      	pop	{r3}
 80058f4:	469e      	mov	lr, r3
 80058f6:	4770      	bx	lr
