
P2 Audio Processor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006100  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08006290  08006290  00016290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006380  08006380  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08006380  08006380  00016380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006388  08006388  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006388  08006388  00016388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800638c  0800638c  0001638c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013f8  2000005c  080063ec  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001454  080063ec  00021454  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f101  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022ae  00000000  00000000  0002f1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db0  00000000  00000000  00031480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a98  00000000  00000000  00032230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026a3d  00000000  00000000  00032cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010580  00000000  00000000  00059705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec906  00000000  00000000  00069c85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003dc0  00000000  00000000  0015658c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0015a34c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006278 	.word	0x08006278

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08006278 	.word	0x08006278

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_SAI_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Callback function for completed DMA transfer
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
    // Start receiving into the new currentBuffer
    HAL_SAI_Receive_DMA(&hsai_BlockA2, (uint8_t*)audioBuffer1, AUDIO_BUFFER_SIZE);
 8000584:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000588:	4906      	ldr	r1, [pc, #24]	; (80005a4 <HAL_SAI_RxCpltCallback+0x28>)
 800058a:	4807      	ldr	r0, [pc, #28]	; (80005a8 <HAL_SAI_RxCpltCallback+0x2c>)
 800058c:	f003 fdb8 	bl	8004100 <HAL_SAI_Receive_DMA>

    // Signal or start processing data in processingBuffer
    ProcessAudioData(audioBuffer1, AUDIO_BUFFER_SIZE);
 8000590:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <HAL_SAI_RxCpltCallback+0x28>)
 8000596:	f000 f813 	bl	80005c0 <ProcessAudioData>
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000078 	.word	0x20000078
 80005a8:	2000107c 	.word	0x2000107c

080005ac <HAL_SAI_RxHalfCpltCallback>:

// Callback function for half completed DMA transfer
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]

}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <ProcessAudioData>:

void ProcessAudioData(uint32_t* buffer, uint32_t size) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	; 0x50
 80005c4:	af02      	add	r7, sp, #8
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < size; ++i) {
 80005ca:	2300      	movs	r3, #0
 80005cc:	647b      	str	r3, [r7, #68]	; 0x44
 80005ce:	e02a      	b.n	8000626 <ProcessAudioData+0x66>
       // Shift right to align 18-bit data within 32-bit word
        int32_t sample = buffer[i] >> 14;
 80005d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	4413      	add	r3, r2
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	0b9b      	lsrs	r3, r3, #14
 80005dc:	643b      	str	r3, [r7, #64]	; 0x40

        // If the data is signed (2's complement), perform sign extension for negative values
        if (sample & 0x20000) { // Check if the 18th bit (sign bit for 18-bit data) is set
 80005de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80005e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d005      	beq.n	80005f4 <ProcessAudioData+0x34>
            sample |= 0xFFFC0000; // Extend the sign to 32 bits
 80005e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80005ea:	ea6f 3383 	mvn.w	r3, r3, lsl #14
 80005ee:	ea6f 3393 	mvn.w	r3, r3, lsr #14
 80005f2:	643b      	str	r3, [r7, #64]	; 0x40
        // Downsample to 12 bits while preserving the sign
        //uint16_t dacSample = (sample / 64) + 2048;
        //int16_t dacSample = sample >> 6;

        // Print the first few samples
        if (i < 10) {
 80005f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80005f6:	2b09      	cmp	r3, #9
 80005f8:	d80d      	bhi.n	8000616 <ProcessAudioData+0x56>
            char uartBuffer[50];
            snprintf(uartBuffer, sizeof(uartBuffer), "Sample %lu: %ld\r\n", (unsigned long)i, sample);
 80005fa:	f107 000c 	add.w	r0, r7, #12
 80005fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000604:	4a0c      	ldr	r2, [pc, #48]	; (8000638 <ProcessAudioData+0x78>)
 8000606:	2132      	movs	r1, #50	; 0x32
 8000608:	f005 f944 	bl	8005894 <sniprintf>
            TransmitDataOverUART(uartBuffer);
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	4618      	mov	r0, r3
 8000612:	f000 f82f 	bl	8000674 <TransmitDataOverUART>
        }

        // Further processing can be added here
        DAC_write(sample);
 8000616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000618:	b29b      	uxth	r3, r3
 800061a:	4618      	mov	r0, r3
 800061c:	f000 f852 	bl	80006c4 <DAC_write>
    for (uint32_t i = 0; i < size; ++i) {
 8000620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000622:	3301      	adds	r3, #1
 8000624:	647b      	str	r3, [r7, #68]	; 0x44
 8000626:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	429a      	cmp	r2, r3
 800062c:	d3d0      	bcc.n	80005d0 <ProcessAudioData+0x10>
    }
}
 800062e:	bf00      	nop
 8000630:	bf00      	nop
 8000632:	3748      	adds	r7, #72	; 0x48
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	08006290 	.word	0x08006290

0800063c <DebugPrint>:


void DebugPrint(const char* format, ...) {
 800063c:	b40f      	push	{r0, r1, r2, r3}
 800063e:	b580      	push	{r7, lr}
 8000640:	b0a2      	sub	sp, #136	; 0x88
 8000642:	af00      	add	r7, sp, #0
    char debugBuffer[128];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 8000644:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000648:	607b      	str	r3, [r7, #4]
    vsnprintf(debugBuffer, sizeof(debugBuffer), format, args);
 800064a:	f107 0008 	add.w	r0, r7, #8
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000654:	2180      	movs	r1, #128	; 0x80
 8000656:	f005 f97d 	bl	8005954 <vsniprintf>
    va_end(args);

    TransmitDataOverUART(debugBuffer);
 800065a:	f107 0308 	add.w	r3, r7, #8
 800065e:	4618      	mov	r0, r3
 8000660:	f000 f808 	bl	8000674 <TransmitDataOverUART>
}
 8000664:	bf00      	nop
 8000666:	3788      	adds	r7, #136	; 0x88
 8000668:	46bd      	mov	sp, r7
 800066a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800066e:	b004      	add	sp, #16
 8000670:	4770      	bx	lr
	...

08000674 <TransmitDataOverUART>:

void TransmitDataOverUART(const char* data)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)data, strlen(data), 1000);
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f7ff fda7 	bl	80001d0 <strlen>
 8000682:	4603      	mov	r3, r0
 8000684:	b29a      	uxth	r2, r3
 8000686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800068a:	6879      	ldr	r1, [r7, #4]
 800068c:	4803      	ldr	r0, [pc, #12]	; (800069c <TransmitDataOverUART+0x28>)
 800068e:	f004 fba9 	bl	8004de4 <HAL_UART_Transmit>
}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20001278 	.word	0x20001278

080006a0 <HAL_SAI_ErrorCallback>:
        TransmitDataOverUART(temp);
    }
    TransmitDataOverUART("\n");
}

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
    uint32_t saiError = HAL_SAI_GetError(hsai);
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f003 fdb7 	bl	800421c <HAL_SAI_GetError>
 80006ae:	60f8      	str	r0, [r7, #12]
    DebugPrint("SAI Error: %lu\n", saiError);
 80006b0:	68f9      	ldr	r1, [r7, #12]
 80006b2:	4803      	ldr	r0, [pc, #12]	; (80006c0 <HAL_SAI_ErrorCallback+0x20>)
 80006b4:	f7ff ffc2 	bl	800063c <DebugPrint>
}
 80006b8:	bf00      	nop
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	080062c4 	.word	0x080062c4

080006c4 <DAC_write>:

    HAL_SAI_StateTypeDef saiState = HAL_SAI_GetState(&hsai_BlockA2);
    DebugPrint("SAI State: %d\n", saiState);
}

void DAC_write(uint16_t value) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	80fb      	strh	r3, [r7, #6]
    uint16_t spi_data = (value & 0x0FFF) | 0x3000;  // 12-bit value, OR 0x3000 sets the Gain and buffer in the DAC see page 18 of datasheet
 80006ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80006d6:	b21b      	sxth	r3, r3
 80006d8:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80006dc:	b21b      	sxth	r3, r3
 80006de:	b29b      	uxth	r3, r3
 80006e0:	81fb      	strh	r3, [r7, #14]
    //HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*)&spi_data, 1);
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&spi_data, 1, HAL_MAX_DELAY);
 80006e2:	f107 010e 	add.w	r1, r7, #14
 80006e6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ea:	2201      	movs	r2, #1
 80006ec:	4803      	ldr	r0, [pc, #12]	; (80006fc <DAC_write+0x38>)
 80006ee:	f004 f852 	bl	8004796 <HAL_SPI_Transmit>
}
 80006f2:	bf00      	nop
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20001214 	.word	0x20001214

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000704:	f000 fc8a 	bl	800101c <HAL_Init>
  void DAC_init();

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000708:	f000 f81a 	bl	8000740 <SystemClock_Config>
  // Start the timer

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070c:	f000 f99c 	bl	8000a48 <MX_GPIO_Init>
  MX_DMA_Init();
 8000710:	f000 f974 	bl	80009fc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000714:	f000 f942 	bl	800099c <MX_USART2_UART_Init>
  MX_SAI2_Init();
 8000718:	f000 f874 	bl	8000804 <MX_SAI2_Init>
  MX_SPI1_Init();
 800071c:	f000 f900 	bl	8000920 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  currentBuffer = audioBuffer1;
 8000720:	4b04      	ldr	r3, [pc, #16]	; (8000734 <main+0x34>)
 8000722:	4a05      	ldr	r2, [pc, #20]	; (8000738 <main+0x38>)
 8000724:	601a      	str	r2, [r3, #0]
  //processingBuffer = audioBuffer2;

  HAL_SAI_Receive_DMA(&hsai_BlockA2, (uint8_t*)audioBuffer1, AUDIO_BUFFER_SIZE);
 8000726:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800072a:	4903      	ldr	r1, [pc, #12]	; (8000738 <main+0x38>)
 800072c:	4803      	ldr	r0, [pc, #12]	; (800073c <main+0x3c>)
 800072e:	f003 fce7 	bl	8004100 <HAL_SAI_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000732:	e7fe      	b.n	8000732 <main+0x32>
 8000734:	20001078 	.word	0x20001078
 8000738:	20000078 	.word	0x20000078
 800073c:	2000107c 	.word	0x2000107c

08000740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b096      	sub	sp, #88	; 0x58
 8000744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	2244      	movs	r2, #68	; 0x44
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f005 f90e 	bl	8005970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000754:	463b      	mov	r3, r7
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000762:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000766:	f001 f9a7 	bl	8001ab8 <HAL_PWREx_ControlVoltageScaling>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000770:	f000 f9bc 	bl	8000aec <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000774:	f001 f982 	bl	8001a7c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000778:	4b21      	ldr	r3, [pc, #132]	; (8000800 <SystemClock_Config+0xc0>)
 800077a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800077e:	4a20      	ldr	r2, [pc, #128]	; (8000800 <SystemClock_Config+0xc0>)
 8000780:	f023 0318 	bic.w	r3, r3, #24
 8000784:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000788:	2314      	movs	r3, #20
 800078a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800078c:	2301      	movs	r3, #1
 800078e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000790:	2301      	movs	r3, #1
 8000792:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000798:	23a0      	movs	r3, #160	; 0xa0
 800079a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079c:	2302      	movs	r3, #2
 800079e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007a0:	2301      	movs	r3, #1
 80007a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 5;
 80007a4:	2305      	movs	r3, #5
 80007a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 37;
 80007a8:	2325      	movs	r3, #37	; 0x25
 80007aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV17;
 80007ac:	2311      	movs	r3, #17
 80007ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80007b4:	2304      	movs	r3, #4
 80007b6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	4618      	mov	r0, r3
 80007be:	f001 f9d1 	bl	8001b64 <HAL_RCC_OscConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80007c8:	f000 f990 	bl	8000aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007cc:	230f      	movs	r3, #15
 80007ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d0:	2303      	movs	r3, #3
 80007d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007e0:	463b      	mov	r3, r7
 80007e2:	2103      	movs	r1, #3
 80007e4:	4618      	mov	r0, r3
 80007e6:	f001 fd99 	bl	800231c <HAL_RCC_ClockConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007f0:	f000 f97c 	bl	8000aec <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007f4:	f003 f80e 	bl	8003814 <HAL_RCCEx_EnableMSIPLLMode>
}
 80007f8:	bf00      	nop
 80007fa:	3758      	adds	r7, #88	; 0x58
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40021000 	.word	0x40021000

08000804 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000808:	4b3f      	ldr	r3, [pc, #252]	; (8000908 <MX_SAI2_Init+0x104>)
 800080a:	4a40      	ldr	r2, [pc, #256]	; (800090c <MX_SAI2_Init+0x108>)
 800080c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_RX;
 800080e:	4b3e      	ldr	r3, [pc, #248]	; (8000908 <MX_SAI2_Init+0x104>)
 8000810:	2201      	movs	r2, #1
 8000812:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000814:	4b3c      	ldr	r3, [pc, #240]	; (8000908 <MX_SAI2_Init+0x104>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800081a:	4b3b      	ldr	r3, [pc, #236]	; (8000908 <MX_SAI2_Init+0x104>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000820:	4b39      	ldr	r3, [pc, #228]	; (8000908 <MX_SAI2_Init+0x104>)
 8000822:	2200      	movs	r2, #0
 8000824:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000826:	4b38      	ldr	r3, [pc, #224]	; (8000908 <MX_SAI2_Init+0x104>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800082c:	4b36      	ldr	r3, [pc, #216]	; (8000908 <MX_SAI2_Init+0x104>)
 800082e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000832:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000834:	4b34      	ldr	r3, [pc, #208]	; (8000908 <MX_SAI2_Init+0x104>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_MONOMODE;
 800083a:	4b33      	ldr	r3, [pc, #204]	; (8000908 <MX_SAI2_Init+0x104>)
 800083c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000840:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000842:	4b31      	ldr	r3, [pc, #196]	; (8000908 <MX_SAI2_Init+0x104>)
 8000844:	2200      	movs	r2, #0
 8000846:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 8000848:	2302      	movs	r3, #2
 800084a:	2203      	movs	r2, #3
 800084c:	2100      	movs	r1, #0
 800084e:	482e      	ldr	r0, [pc, #184]	; (8000908 <MX_SAI2_Init+0x104>)
 8000850:	f003 fab2 	bl	8003db8 <HAL_SAI_InitProtocol>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_SAI2_Init+0x5a>
  {
    Error_Handler();
 800085a:	f000 f947 	bl	8000aec <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 800085e:	4b2c      	ldr	r3, [pc, #176]	; (8000910 <MX_SAI2_Init+0x10c>)
 8000860:	4a2c      	ldr	r2, [pc, #176]	; (8000914 <MX_SAI2_Init+0x110>)
 8000862:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000864:	4b2a      	ldr	r3, [pc, #168]	; (8000910 <MX_SAI2_Init+0x10c>)
 8000866:	2200      	movs	r2, #0
 8000868:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 800086a:	4b29      	ldr	r3, [pc, #164]	; (8000910 <MX_SAI2_Init+0x10c>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000870:	4b27      	ldr	r3, [pc, #156]	; (8000910 <MX_SAI2_Init+0x10c>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000876:	4b26      	ldr	r3, [pc, #152]	; (8000910 <MX_SAI2_Init+0x10c>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800087c:	4b24      	ldr	r3, [pc, #144]	; (8000910 <MX_SAI2_Init+0x10c>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000882:	4b23      	ldr	r3, [pc, #140]	; (8000910 <MX_SAI2_Init+0x10c>)
 8000884:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000888:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800088a:	4b21      	ldr	r3, [pc, #132]	; (8000910 <MX_SAI2_Init+0x10c>)
 800088c:	2200      	movs	r2, #0
 800088e:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_MONOMODE;
 8000890:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <MX_SAI2_Init+0x10c>)
 8000892:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000896:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000898:	4b1d      	ldr	r3, [pc, #116]	; (8000910 <MX_SAI2_Init+0x10c>)
 800089a:	2200      	movs	r2, #0
 800089c:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800089e:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <MX_SAI2_Init+0x10c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 80008a4:	2302      	movs	r3, #2
 80008a6:	2200      	movs	r2, #0
 80008a8:	2100      	movs	r1, #0
 80008aa:	4819      	ldr	r0, [pc, #100]	; (8000910 <MX_SAI2_Init+0x10c>)
 80008ac:	f003 fa84 	bl	8003db8 <HAL_SAI_InitProtocol>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_SAI2_Init+0xb6>
  {
    Error_Handler();
 80008b6:	f000 f919 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  // Configure the DMA handler for reception process
  hdma_sai2_a.Instance                 = DMA1_Channel6;
 80008ba:	4b17      	ldr	r3, [pc, #92]	; (8000918 <MX_SAI2_Init+0x114>)
 80008bc:	4a17      	ldr	r2, [pc, #92]	; (800091c <MX_SAI2_Init+0x118>)
 80008be:	601a      	str	r2, [r3, #0]
  hdma_sai2_a.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80008c0:	4b15      	ldr	r3, [pc, #84]	; (8000918 <MX_SAI2_Init+0x114>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  hdma_sai2_a.Init.PeriphInc           = DMA_PINC_DISABLE;
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_SAI2_Init+0x114>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	60da      	str	r2, [r3, #12]
  hdma_sai2_a.Init.MemInc              = DMA_MINC_ENABLE;
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <MX_SAI2_Init+0x114>)
 80008ce:	2280      	movs	r2, #128	; 0x80
 80008d0:	611a      	str	r2, [r3, #16]
  hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_SAI2_Init+0x114>)
 80008d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d8:	615a      	str	r2, [r3, #20]
  hdma_sai2_a.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80008da:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_SAI2_Init+0x114>)
 80008dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008e0:	619a      	str	r2, [r3, #24]
  hdma_sai2_a.Init.Mode                = DMA_CIRCULAR;
 80008e2:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <MX_SAI2_Init+0x114>)
 80008e4:	2220      	movs	r2, #32
 80008e6:	61da      	str	r2, [r3, #28]
  hdma_sai2_a.Init.Priority            = DMA_PRIORITY_HIGH;
 80008e8:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_SAI2_Init+0x114>)
 80008ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008ee:	621a      	str	r2, [r3, #32]

  HAL_DMA_Init(&hdma_sai2_a);
 80008f0:	4809      	ldr	r0, [pc, #36]	; (8000918 <MX_SAI2_Init+0x114>)
 80008f2:	f000 fd21 	bl	8001338 <HAL_DMA_Init>

  // Associate the initialized DMA handle to the SAI handle
  __HAL_LINKDMA(&hsai_BlockA2, hdmarx, hdma_sai2_a);
 80008f6:	4b04      	ldr	r3, [pc, #16]	; (8000908 <MX_SAI2_Init+0x104>)
 80008f8:	4a07      	ldr	r2, [pc, #28]	; (8000918 <MX_SAI2_Init+0x114>)
 80008fa:	671a      	str	r2, [r3, #112]	; 0x70
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_SAI2_Init+0x114>)
 80008fe:	4a02      	ldr	r2, [pc, #8]	; (8000908 <MX_SAI2_Init+0x104>)
 8000900:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE END SAI2_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	2000107c 	.word	0x2000107c
 800090c:	40015804 	.word	0x40015804
 8000910:	20001100 	.word	0x20001100
 8000914:	40015824 	.word	0x40015824
 8000918:	20001184 	.word	0x20001184
 800091c:	4002006c 	.word	0x4002006c

08000920 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000924:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <MX_SPI1_Init+0x74>)
 8000926:	4a1c      	ldr	r2, [pc, #112]	; (8000998 <MX_SPI1_Init+0x78>)
 8000928:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800092a:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <MX_SPI1_Init+0x74>)
 800092c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000930:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <MX_SPI1_Init+0x74>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000938:	4b16      	ldr	r3, [pc, #88]	; (8000994 <MX_SPI1_Init+0x74>)
 800093a:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800093e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000940:	4b14      	ldr	r3, [pc, #80]	; (8000994 <MX_SPI1_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000946:	4b13      	ldr	r3, [pc, #76]	; (8000994 <MX_SPI1_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <MX_SPI1_Init+0x74>)
 800094e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000952:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <MX_SPI1_Init+0x74>)
 8000956:	2208      	movs	r2, #8
 8000958:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <MX_SPI1_Init+0x74>)
 800095c:	2200      	movs	r2, #0
 800095e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <MX_SPI1_Init+0x74>)
 8000962:	2200      	movs	r2, #0
 8000964:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <MX_SPI1_Init+0x74>)
 8000968:	2200      	movs	r2, #0
 800096a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800096c:	4b09      	ldr	r3, [pc, #36]	; (8000994 <MX_SPI1_Init+0x74>)
 800096e:	2207      	movs	r2, #7
 8000970:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <MX_SPI1_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <MX_SPI1_Init+0x74>)
 800097a:	2208      	movs	r2, #8
 800097c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800097e:	4805      	ldr	r0, [pc, #20]	; (8000994 <MX_SPI1_Init+0x74>)
 8000980:	f003 fe66 	bl	8004650 <HAL_SPI_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800098a:	f000 f8af 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20001214 	.word	0x20001214
 8000998:	40013000 	.word	0x40013000

0800099c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009a0:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <MX_USART2_UART_Init+0x58>)
 80009a2:	4a15      	ldr	r2, [pc, #84]	; (80009f8 <MX_USART2_UART_Init+0x5c>)
 80009a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009a6:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <MX_USART2_UART_Init+0x58>)
 80009a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_USART2_UART_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_USART2_UART_Init+0x58>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_USART2_UART_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_USART2_UART_Init+0x58>)
 80009c2:	220c      	movs	r2, #12
 80009c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <MX_USART2_UART_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_USART2_UART_Init+0x58>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <MX_USART2_UART_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_USART2_UART_Init+0x58>)
 80009da:	2200      	movs	r2, #0
 80009dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_USART2_UART_Init+0x58>)
 80009e0:	f004 f9b2 	bl	8004d48 <HAL_UART_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009ea:	f000 f87f 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20001278 	.word	0x20001278
 80009f8:	40004400 	.word	0x40004400

080009fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <MX_DMA_Init+0x48>)
 8000a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a06:	4a0f      	ldr	r2, [pc, #60]	; (8000a44 <MX_DMA_Init+0x48>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6493      	str	r3, [r2, #72]	; 0x48
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <MX_DMA_Init+0x48>)
 8000a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	2010      	movs	r0, #16
 8000a20:	f000 fc53 	bl	80012ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000a24:	2010      	movs	r0, #16
 8000a26:	f000 fc6c 	bl	8001302 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	2011      	movs	r0, #17
 8000a30:	f000 fc4b 	bl	80012ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000a34:	2011      	movs	r0, #17
 8000a36:	f000 fc64 	bl	8001302 <HAL_NVIC_EnableIRQ>

}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40021000 	.word	0x40021000

08000a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5e:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <MX_GPIO_Init+0x9c>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	4a20      	ldr	r2, [pc, #128]	; (8000ae4 <MX_GPIO_Init+0x9c>)
 8000a64:	f043 0304 	orr.w	r3, r3, #4
 8000a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <MX_GPIO_Init+0x9c>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	f003 0304 	and.w	r3, r3, #4
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a76:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <MX_GPIO_Init+0x9c>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	4a1a      	ldr	r2, [pc, #104]	; (8000ae4 <MX_GPIO_Init+0x9c>)
 8000a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <MX_GPIO_Init+0x9c>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <MX_GPIO_Init+0x9c>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	4a14      	ldr	r2, [pc, #80]	; (8000ae4 <MX_GPIO_Init+0x9c>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9a:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <MX_GPIO_Init+0x9c>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_GPIO_Init+0x9c>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <MX_GPIO_Init+0x9c>)
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_GPIO_Init+0x9c>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000abe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ac4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <MX_GPIO_Init+0xa0>)
 8000ad6:	f000 fe27 	bl	8001728 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ada:	bf00      	nop
 8000adc:	3728      	adds	r7, #40	; 0x28
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	48000800 	.word	0x48000800

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
}
 8000af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <Error_Handler+0x8>
	...

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <HAL_MspInit+0x44>)
 8000b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b02:	4a0e      	ldr	r2, [pc, #56]	; (8000b3c <HAL_MspInit+0x44>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6613      	str	r3, [r2, #96]	; 0x60
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <HAL_MspInit+0x44>)
 8000b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <HAL_MspInit+0x44>)
 8000b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1a:	4a08      	ldr	r2, [pc, #32]	; (8000b3c <HAL_MspInit+0x44>)
 8000b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b20:	6593      	str	r3, [r2, #88]	; 0x58
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_MspInit+0x44>)
 8000b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	40021000 	.word	0x40021000

08000b40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a17      	ldr	r2, [pc, #92]	; (8000bbc <HAL_SPI_MspInit+0x7c>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d128      	bne.n	8000bb4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b62:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <HAL_SPI_MspInit+0x80>)
 8000b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b66:	4a16      	ldr	r2, [pc, #88]	; (8000bc0 <HAL_SPI_MspInit+0x80>)
 8000b68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b6e:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <HAL_SPI_MspInit+0x80>)
 8000b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <HAL_SPI_MspInit+0x80>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7e:	4a10      	ldr	r2, [pc, #64]	; (8000bc0 <HAL_SPI_MspInit+0x80>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <HAL_SPI_MspInit+0x80>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000b92:	23b0      	movs	r3, #176	; 0xb0
 8000b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ba2:	2305      	movs	r3, #5
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb0:	f000 fdba 	bl	8001728 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bb4:	bf00      	nop
 8000bb6:	3728      	adds	r7, #40	; 0x28
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40013000 	.word	0x40013000
 8000bc0:	40021000 	.word	0x40021000

08000bc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b0ac      	sub	sp, #176	; 0xb0
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2288      	movs	r2, #136	; 0x88
 8000be2:	2100      	movs	r1, #0
 8000be4:	4618      	mov	r0, r3
 8000be6:	f004 fec3 	bl	8005970 <memset>
  if(huart->Instance==USART2)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a21      	ldr	r2, [pc, #132]	; (8000c74 <HAL_UART_MspInit+0xb0>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d13b      	bne.n	8000c6c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4618      	mov	r0, r3
 8000c02:	f001 fdaf 	bl	8002764 <HAL_RCCEx_PeriphCLKConfig>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c0c:	f7ff ff6e 	bl	8000aec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c10:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <HAL_UART_MspInit+0xb4>)
 8000c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c14:	4a18      	ldr	r2, [pc, #96]	; (8000c78 <HAL_UART_MspInit+0xb4>)
 8000c16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c1a:	6593      	str	r3, [r2, #88]	; 0x58
 8000c1c:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <HAL_UART_MspInit+0xb4>)
 8000c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c28:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <HAL_UART_MspInit+0xb4>)
 8000c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2c:	4a12      	ldr	r2, [pc, #72]	; (8000c78 <HAL_UART_MspInit+0xb4>)
 8000c2e:	f043 0301 	orr.w	r3, r3, #1
 8000c32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c34:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <HAL_UART_MspInit+0xb4>)
 8000c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c38:	f003 0301 	and.w	r3, r3, #1
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c40:	230c      	movs	r3, #12
 8000c42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c52:	2303      	movs	r3, #3
 8000c54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c58:	2307      	movs	r3, #7
 8000c5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c62:	4619      	mov	r1, r3
 8000c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c68:	f000 fd5e 	bl	8001728 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c6c:	bf00      	nop
 8000c6e:	37b0      	adds	r7, #176	; 0xb0
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40004400 	.word	0x40004400
 8000c78:	40021000 	.word	0x40021000

08000c7c <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b0ac      	sub	sp, #176	; 0xb0
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	2288      	movs	r2, #136	; 0x88
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f004 fe6f 	bl	8005970 <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a7f      	ldr	r2, [pc, #508]	; (8000e94 <HAL_SAI_MspInit+0x218>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d16c      	bne.n	8000d76 <HAL_SAI_MspInit+0xfa>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000c9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLL;
 8000ca2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ca6:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4618      	mov	r0, r3
 8000cae:	f001 fd59 	bl	8002764 <HAL_RCCEx_PeriphCLKConfig>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <HAL_SAI_MspInit+0x40>
    {
      Error_Handler();
 8000cb8:	f7ff ff18 	bl	8000aec <Error_Handler>
    }

    if (SAI2_client == 0)
 8000cbc:	4b76      	ldr	r3, [pc, #472]	; (8000e98 <HAL_SAI_MspInit+0x21c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d10b      	bne.n	8000cdc <HAL_SAI_MspInit+0x60>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000cc4:	4b75      	ldr	r3, [pc, #468]	; (8000e9c <HAL_SAI_MspInit+0x220>)
 8000cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc8:	4a74      	ldr	r2, [pc, #464]	; (8000e9c <HAL_SAI_MspInit+0x220>)
 8000cca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cce:	6613      	str	r3, [r2, #96]	; 0x60
 8000cd0:	4b72      	ldr	r3, [pc, #456]	; (8000e9c <HAL_SAI_MspInit+0x220>)
 8000cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8000cdc:	4b6e      	ldr	r3, [pc, #440]	; (8000e98 <HAL_SAI_MspInit+0x21c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	4a6d      	ldr	r2, [pc, #436]	; (8000e98 <HAL_SAI_MspInit+0x21c>)
 8000ce4:	6013      	str	r3, [r2, #0]
    /**SAI2_A_Block_A GPIO Configuration
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000ce6:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000cea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000d00:	230d      	movs	r3, #13
 8000d02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d06:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4864      	ldr	r0, [pc, #400]	; (8000ea0 <HAL_SAI_MspInit+0x224>)
 8000d0e:	f000 fd0b 	bl	8001728 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 8000d12:	4b64      	ldr	r3, [pc, #400]	; (8000ea4 <HAL_SAI_MspInit+0x228>)
 8000d14:	4a64      	ldr	r2, [pc, #400]	; (8000ea8 <HAL_SAI_MspInit+0x22c>)
 8000d16:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8000d18:	4b62      	ldr	r3, [pc, #392]	; (8000ea4 <HAL_SAI_MspInit+0x228>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d1e:	4b61      	ldr	r3, [pc, #388]	; (8000ea4 <HAL_SAI_MspInit+0x228>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d24:	4b5f      	ldr	r3, [pc, #380]	; (8000ea4 <HAL_SAI_MspInit+0x228>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8000d2a:	4b5e      	ldr	r3, [pc, #376]	; (8000ea4 <HAL_SAI_MspInit+0x228>)
 8000d2c:	2280      	movs	r2, #128	; 0x80
 8000d2e:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d30:	4b5c      	ldr	r3, [pc, #368]	; (8000ea4 <HAL_SAI_MspInit+0x228>)
 8000d32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d36:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d38:	4b5a      	ldr	r3, [pc, #360]	; (8000ea4 <HAL_SAI_MspInit+0x228>)
 8000d3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d3e:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8000d40:	4b58      	ldr	r3, [pc, #352]	; (8000ea4 <HAL_SAI_MspInit+0x228>)
 8000d42:	2220      	movs	r2, #32
 8000d44:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d46:	4b57      	ldr	r3, [pc, #348]	; (8000ea4 <HAL_SAI_MspInit+0x228>)
 8000d48:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000d4c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8000d4e:	4855      	ldr	r0, [pc, #340]	; (8000ea4 <HAL_SAI_MspInit+0x228>)
 8000d50:	f000 faf2 	bl	8001338 <HAL_DMA_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <HAL_SAI_MspInit+0xe2>
    {
      Error_Handler();
 8000d5a:	f7ff fec7 	bl	8000aec <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a50      	ldr	r2, [pc, #320]	; (8000ea4 <HAL_SAI_MspInit+0x228>)
 8000d62:	671a      	str	r2, [r3, #112]	; 0x70
 8000d64:	4a4f      	ldr	r2, [pc, #316]	; (8000ea4 <HAL_SAI_MspInit+0x228>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6293      	str	r3, [r2, #40]	; 0x28

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a4d      	ldr	r2, [pc, #308]	; (8000ea4 <HAL_SAI_MspInit+0x228>)
 8000d6e:	66da      	str	r2, [r3, #108]	; 0x6c
 8000d70:	4a4c      	ldr	r2, [pc, #304]	; (8000ea4 <HAL_SAI_MspInit+0x228>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6293      	str	r3, [r2, #40]	; 0x28

    }
    if(hsai->Instance==SAI2_Block_B)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a4c      	ldr	r2, [pc, #304]	; (8000eac <HAL_SAI_MspInit+0x230>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	f040 8084 	bne.w	8000e8a <HAL_SAI_MspInit+0x20e>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d86:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLL;
 8000d88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d8c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4618      	mov	r0, r3
 8000d94:	f001 fce6 	bl	8002764 <HAL_RCCEx_PeriphCLKConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <HAL_SAI_MspInit+0x126>
    {
      Error_Handler();
 8000d9e:	f7ff fea5 	bl	8000aec <Error_Handler>
    }

      if (SAI2_client == 0)
 8000da2:	4b3d      	ldr	r3, [pc, #244]	; (8000e98 <HAL_SAI_MspInit+0x21c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d10b      	bne.n	8000dc2 <HAL_SAI_MspInit+0x146>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000daa:	4b3c      	ldr	r3, [pc, #240]	; (8000e9c <HAL_SAI_MspInit+0x220>)
 8000dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dae:	4a3b      	ldr	r2, [pc, #236]	; (8000e9c <HAL_SAI_MspInit+0x220>)
 8000db0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000db4:	6613      	str	r3, [r2, #96]	; 0x60
 8000db6:	4b39      	ldr	r3, [pc, #228]	; (8000e9c <HAL_SAI_MspInit+0x220>)
 8000db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8000dc2:	4b35      	ldr	r3, [pc, #212]	; (8000e98 <HAL_SAI_MspInit+0x21c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	4a33      	ldr	r2, [pc, #204]	; (8000e98 <HAL_SAI_MspInit+0x21c>)
 8000dca:	6013      	str	r3, [r2, #0]
    /**SAI2_B_Block_B GPIO Configuration
    PA15 (JTDI)     ------> SAI2_FS_B
    PC10     ------> SAI2_SCK_B
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000dcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000de6:	230d      	movs	r3, #13
 8000de8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000df0:	4619      	mov	r1, r3
 8000df2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df6:	f000 fc97 	bl	8001728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000dfa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000e14:	230d      	movs	r3, #13
 8000e16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e1a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4823      	ldr	r0, [pc, #140]	; (8000eb0 <HAL_SAI_MspInit+0x234>)
 8000e22:	f000 fc81 	bl	8001728 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Channel7;
 8000e26:	4b23      	ldr	r3, [pc, #140]	; (8000eb4 <HAL_SAI_MspInit+0x238>)
 8000e28:	4a23      	ldr	r2, [pc, #140]	; (8000eb8 <HAL_SAI_MspInit+0x23c>)
 8000e2a:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_1;
 8000e2c:	4b21      	ldr	r3, [pc, #132]	; (8000eb4 <HAL_SAI_MspInit+0x238>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e32:	4b20      	ldr	r3, [pc, #128]	; (8000eb4 <HAL_SAI_MspInit+0x238>)
 8000e34:	2210      	movs	r2, #16
 8000e36:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e38:	4b1e      	ldr	r3, [pc, #120]	; (8000eb4 <HAL_SAI_MspInit+0x238>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8000e3e:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <HAL_SAI_MspInit+0x238>)
 8000e40:	2280      	movs	r2, #128	; 0x80
 8000e42:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e44:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <HAL_SAI_MspInit+0x238>)
 8000e46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e4a:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e4c:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <HAL_SAI_MspInit+0x238>)
 8000e4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e52:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8000e54:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <HAL_SAI_MspInit+0x238>)
 8000e56:	2220      	movs	r2, #32
 8000e58:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000e5a:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <HAL_SAI_MspInit+0x238>)
 8000e5c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000e60:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8000e62:	4814      	ldr	r0, [pc, #80]	; (8000eb4 <HAL_SAI_MspInit+0x238>)
 8000e64:	f000 fa68 	bl	8001338 <HAL_DMA_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_SAI_MspInit+0x1f6>
    {
      Error_Handler();
 8000e6e:	f7ff fe3d 	bl	8000aec <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a0f      	ldr	r2, [pc, #60]	; (8000eb4 <HAL_SAI_MspInit+0x238>)
 8000e76:	671a      	str	r2, [r3, #112]	; 0x70
 8000e78:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <HAL_SAI_MspInit+0x238>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a0c      	ldr	r2, [pc, #48]	; (8000eb4 <HAL_SAI_MspInit+0x238>)
 8000e82:	66da      	str	r2, [r3, #108]	; 0x6c
 8000e84:	4a0b      	ldr	r2, [pc, #44]	; (8000eb4 <HAL_SAI_MspInit+0x238>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6293      	str	r3, [r2, #40]	; 0x28
    }
}
 8000e8a:	bf00      	nop
 8000e8c:	37b0      	adds	r7, #176	; 0xb0
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40015804 	.word	0x40015804
 8000e98:	20001300 	.word	0x20001300
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	48000400 	.word	0x48000400
 8000ea4:	20001184 	.word	0x20001184
 8000ea8:	4002006c 	.word	0x4002006c
 8000eac:	40015824 	.word	0x40015824
 8000eb0:	48000800 	.word	0x48000800
 8000eb4:	200011cc 	.word	0x200011cc
 8000eb8:	40020080 	.word	0x40020080

08000ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <NMI_Handler+0x4>

08000ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <HardFault_Handler+0x4>

08000ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <MemManage_Handler+0x4>

08000ece <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <BusFault_Handler+0x4>

08000ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <UsageFault_Handler+0x4>

08000eda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f08:	f000 f8e4 	bl	80010d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8000f14:	4802      	ldr	r0, [pc, #8]	; (8000f20 <DMA1_Channel6_IRQHandler+0x10>)
 8000f16:	f000 fb27 	bl	8001568 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20001184 	.word	0x20001184

08000f24 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8000f28:	4802      	ldr	r0, [pc, #8]	; (8000f34 <DMA1_Channel7_IRQHandler+0x10>)
 8000f2a:	f000 fb1d 	bl	8001568 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200011cc 	.word	0x200011cc

08000f38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f40:	4a14      	ldr	r2, [pc, #80]	; (8000f94 <_sbrk+0x5c>)
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <_sbrk+0x60>)
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f4c:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <_sbrk+0x64>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d102      	bne.n	8000f5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <_sbrk+0x64>)
 8000f56:	4a12      	ldr	r2, [pc, #72]	; (8000fa0 <_sbrk+0x68>)
 8000f58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <_sbrk+0x64>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d207      	bcs.n	8000f78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f68:	f004 fd0a 	bl	8005980 <__errno>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	220c      	movs	r2, #12
 8000f70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295
 8000f76:	e009      	b.n	8000f8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <_sbrk+0x64>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7e:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <_sbrk+0x64>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	4a05      	ldr	r2, [pc, #20]	; (8000f9c <_sbrk+0x64>)
 8000f88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20018000 	.word	0x20018000
 8000f98:	00000400 	.word	0x00000400
 8000f9c:	20001304 	.word	0x20001304
 8000fa0:	20001458 	.word	0x20001458

08000fa4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <SystemInit+0x20>)
 8000faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fae:	4a05      	ldr	r2, [pc, #20]	; (8000fc4 <SystemInit+0x20>)
 8000fb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001000 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fcc:	f7ff ffea 	bl	8000fa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fd0:	480c      	ldr	r0, [pc, #48]	; (8001004 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fd2:	490d      	ldr	r1, [pc, #52]	; (8001008 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fd4:	4a0d      	ldr	r2, [pc, #52]	; (800100c <LoopForever+0xe>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd8:	e002      	b.n	8000fe0 <LoopCopyDataInit>

08000fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fde:	3304      	adds	r3, #4

08000fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe4:	d3f9      	bcc.n	8000fda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fe8:	4c0a      	ldr	r4, [pc, #40]	; (8001014 <LoopForever+0x16>)
  movs r3, #0
 8000fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fec:	e001      	b.n	8000ff2 <LoopFillZerobss>

08000fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff0:	3204      	adds	r2, #4

08000ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff4:	d3fb      	bcc.n	8000fee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ff6:	f004 fcc9 	bl	800598c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ffa:	f7ff fb81 	bl	8000700 <main>

08000ffe <LoopForever>:

LoopForever:
    b LoopForever
 8000ffe:	e7fe      	b.n	8000ffe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001000:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001008:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800100c:	08006390 	.word	0x08006390
  ldr r2, =_sbss
 8001010:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001014:	20001454 	.word	0x20001454

08001018 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001018:	e7fe      	b.n	8001018 <ADC1_2_IRQHandler>
	...

0800101c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <HAL_Init+0x3c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a0b      	ldr	r2, [pc, #44]	; (8001058 <HAL_Init+0x3c>)
 800102c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001030:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001032:	2003      	movs	r0, #3
 8001034:	f000 f93e 	bl	80012b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001038:	2000      	movs	r0, #0
 800103a:	f000 f80f 	bl	800105c <HAL_InitTick>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d002      	beq.n	800104a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	71fb      	strb	r3, [r7, #7]
 8001048:	e001      	b.n	800104e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800104a:	f7ff fd55 	bl	8000af8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800104e:	79fb      	ldrb	r3, [r7, #7]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40022000 	.word	0x40022000

0800105c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001064:	2300      	movs	r3, #0
 8001066:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001068:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <HAL_InitTick+0x6c>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d023      	beq.n	80010b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001070:	4b16      	ldr	r3, [pc, #88]	; (80010cc <HAL_InitTick+0x70>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <HAL_InitTick+0x6c>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4619      	mov	r1, r3
 800107a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001082:	fbb2 f3f3 	udiv	r3, r2, r3
 8001086:	4618      	mov	r0, r3
 8001088:	f000 f949 	bl	800131e <HAL_SYSTICK_Config>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d10f      	bne.n	80010b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2b0f      	cmp	r3, #15
 8001096:	d809      	bhi.n	80010ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001098:	2200      	movs	r2, #0
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	f04f 30ff 	mov.w	r0, #4294967295
 80010a0:	f000 f913 	bl	80012ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010a4:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <HAL_InitTick+0x74>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	e007      	b.n	80010bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	73fb      	strb	r3, [r7, #15]
 80010b0:	e004      	b.n	80010bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	73fb      	strb	r3, [r7, #15]
 80010b6:	e001      	b.n	80010bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000008 	.word	0x20000008
 80010cc:	20000000 	.word	0x20000000
 80010d0:	20000004 	.word	0x20000004

080010d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_IncTick+0x20>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	461a      	mov	r2, r3
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_IncTick+0x24>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4413      	add	r3, r2
 80010e4:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <HAL_IncTick+0x24>)
 80010e6:	6013      	str	r3, [r2, #0]
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	20000008 	.word	0x20000008
 80010f8:	20001308 	.word	0x20001308

080010fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001100:	4b03      	ldr	r3, [pc, #12]	; (8001110 <HAL_GetTick+0x14>)
 8001102:	681b      	ldr	r3, [r3, #0]
}
 8001104:	4618      	mov	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	20001308 	.word	0x20001308

08001114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <__NVIC_SetPriorityGrouping+0x44>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001130:	4013      	ands	r3, r2
 8001132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800113c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001146:	4a04      	ldr	r2, [pc, #16]	; (8001158 <__NVIC_SetPriorityGrouping+0x44>)
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	60d3      	str	r3, [r2, #12]
}
 800114c:	bf00      	nop
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001160:	4b04      	ldr	r3, [pc, #16]	; (8001174 <__NVIC_GetPriorityGrouping+0x18>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	0a1b      	lsrs	r3, r3, #8
 8001166:	f003 0307 	and.w	r3, r3, #7
}
 800116a:	4618      	mov	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	2b00      	cmp	r3, #0
 8001188:	db0b      	blt.n	80011a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	f003 021f 	and.w	r2, r3, #31
 8001190:	4907      	ldr	r1, [pc, #28]	; (80011b0 <__NVIC_EnableIRQ+0x38>)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	095b      	lsrs	r3, r3, #5
 8001198:	2001      	movs	r0, #1
 800119a:	fa00 f202 	lsl.w	r2, r0, r2
 800119e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000e100 	.word	0xe000e100

080011b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	db0a      	blt.n	80011de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	490c      	ldr	r1, [pc, #48]	; (8001200 <__NVIC_SetPriority+0x4c>)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	0112      	lsls	r2, r2, #4
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	440b      	add	r3, r1
 80011d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011dc:	e00a      	b.n	80011f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4908      	ldr	r1, [pc, #32]	; (8001204 <__NVIC_SetPriority+0x50>)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	f003 030f 	and.w	r3, r3, #15
 80011ea:	3b04      	subs	r3, #4
 80011ec:	0112      	lsls	r2, r2, #4
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	440b      	add	r3, r1
 80011f2:	761a      	strb	r2, [r3, #24]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000e100 	.word	0xe000e100
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001208:	b480      	push	{r7}
 800120a:	b089      	sub	sp, #36	; 0x24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f1c3 0307 	rsb	r3, r3, #7
 8001222:	2b04      	cmp	r3, #4
 8001224:	bf28      	it	cs
 8001226:	2304      	movcs	r3, #4
 8001228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3304      	adds	r3, #4
 800122e:	2b06      	cmp	r3, #6
 8001230:	d902      	bls.n	8001238 <NVIC_EncodePriority+0x30>
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3b03      	subs	r3, #3
 8001236:	e000      	b.n	800123a <NVIC_EncodePriority+0x32>
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	f04f 32ff 	mov.w	r2, #4294967295
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43da      	mvns	r2, r3
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	401a      	ands	r2, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001250:	f04f 31ff 	mov.w	r1, #4294967295
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	43d9      	mvns	r1, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	4313      	orrs	r3, r2
         );
}
 8001262:	4618      	mov	r0, r3
 8001264:	3724      	adds	r7, #36	; 0x24
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3b01      	subs	r3, #1
 800127c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001280:	d301      	bcc.n	8001286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001282:	2301      	movs	r3, #1
 8001284:	e00f      	b.n	80012a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001286:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <SysTick_Config+0x40>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128e:	210f      	movs	r1, #15
 8001290:	f04f 30ff 	mov.w	r0, #4294967295
 8001294:	f7ff ff8e 	bl	80011b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <SysTick_Config+0x40>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129e:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <SysTick_Config+0x40>)
 80012a0:	2207      	movs	r2, #7
 80012a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	e000e010 	.word	0xe000e010

080012b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff ff29 	bl	8001114 <__NVIC_SetPriorityGrouping>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b086      	sub	sp, #24
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	4603      	mov	r3, r0
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
 80012d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012dc:	f7ff ff3e 	bl	800115c <__NVIC_GetPriorityGrouping>
 80012e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	68b9      	ldr	r1, [r7, #8]
 80012e6:	6978      	ldr	r0, [r7, #20]
 80012e8:	f7ff ff8e 	bl	8001208 <NVIC_EncodePriority>
 80012ec:	4602      	mov	r2, r0
 80012ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f2:	4611      	mov	r1, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff5d 	bl	80011b4 <__NVIC_SetPriority>
}
 80012fa:	bf00      	nop
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800130c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff31 	bl	8001178 <__NVIC_EnableIRQ>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff ffa2 	bl	8001270 <SysTick_Config>
 800132c:	4603      	mov	r3, r0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e098      	b.n	800147c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	4b4d      	ldr	r3, [pc, #308]	; (8001488 <HAL_DMA_Init+0x150>)
 8001352:	429a      	cmp	r2, r3
 8001354:	d80f      	bhi.n	8001376 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	4b4b      	ldr	r3, [pc, #300]	; (800148c <HAL_DMA_Init+0x154>)
 800135e:	4413      	add	r3, r2
 8001360:	4a4b      	ldr	r2, [pc, #300]	; (8001490 <HAL_DMA_Init+0x158>)
 8001362:	fba2 2303 	umull	r2, r3, r2, r3
 8001366:	091b      	lsrs	r3, r3, #4
 8001368:	009a      	lsls	r2, r3, #2
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a48      	ldr	r2, [pc, #288]	; (8001494 <HAL_DMA_Init+0x15c>)
 8001372:	641a      	str	r2, [r3, #64]	; 0x40
 8001374:	e00e      	b.n	8001394 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	461a      	mov	r2, r3
 800137c:	4b46      	ldr	r3, [pc, #280]	; (8001498 <HAL_DMA_Init+0x160>)
 800137e:	4413      	add	r3, r2
 8001380:	4a43      	ldr	r2, [pc, #268]	; (8001490 <HAL_DMA_Init+0x158>)
 8001382:	fba2 2303 	umull	r2, r3, r2, r3
 8001386:	091b      	lsrs	r3, r3, #4
 8001388:	009a      	lsls	r2, r3, #2
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a42      	ldr	r2, [pc, #264]	; (800149c <HAL_DMA_Init+0x164>)
 8001392:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2202      	movs	r2, #2
 8001398:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80013aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80013b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a1b      	ldr	r3, [r3, #32]
 80013d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013d8:	68fa      	ldr	r2, [r7, #12]
 80013da:	4313      	orrs	r3, r2
 80013dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013ee:	d039      	beq.n	8001464 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	4a27      	ldr	r2, [pc, #156]	; (8001494 <HAL_DMA_Init+0x15c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d11a      	bne.n	8001430 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80013fa:	4b29      	ldr	r3, [pc, #164]	; (80014a0 <HAL_DMA_Init+0x168>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	f003 031c 	and.w	r3, r3, #28
 8001406:	210f      	movs	r1, #15
 8001408:	fa01 f303 	lsl.w	r3, r1, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	4924      	ldr	r1, [pc, #144]	; (80014a0 <HAL_DMA_Init+0x168>)
 8001410:	4013      	ands	r3, r2
 8001412:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001414:	4b22      	ldr	r3, [pc, #136]	; (80014a0 <HAL_DMA_Init+0x168>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6859      	ldr	r1, [r3, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001420:	f003 031c 	and.w	r3, r3, #28
 8001424:	fa01 f303 	lsl.w	r3, r1, r3
 8001428:	491d      	ldr	r1, [pc, #116]	; (80014a0 <HAL_DMA_Init+0x168>)
 800142a:	4313      	orrs	r3, r2
 800142c:	600b      	str	r3, [r1, #0]
 800142e:	e019      	b.n	8001464 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001430:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <HAL_DMA_Init+0x16c>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001438:	f003 031c 	and.w	r3, r3, #28
 800143c:	210f      	movs	r1, #15
 800143e:	fa01 f303 	lsl.w	r3, r1, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	4917      	ldr	r1, [pc, #92]	; (80014a4 <HAL_DMA_Init+0x16c>)
 8001446:	4013      	ands	r3, r2
 8001448:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800144a:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <HAL_DMA_Init+0x16c>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6859      	ldr	r1, [r3, #4]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	f003 031c 	and.w	r3, r3, #28
 800145a:	fa01 f303 	lsl.w	r3, r1, r3
 800145e:	4911      	ldr	r1, [pc, #68]	; (80014a4 <HAL_DMA_Init+0x16c>)
 8001460:	4313      	orrs	r3, r2
 8001462:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2201      	movs	r2, #1
 800146e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	40020407 	.word	0x40020407
 800148c:	bffdfff8 	.word	0xbffdfff8
 8001490:	cccccccd 	.word	0xcccccccd
 8001494:	40020000 	.word	0x40020000
 8001498:	bffdfbf8 	.word	0xbffdfbf8
 800149c:	40020400 	.word	0x40020400
 80014a0:	400200a8 	.word	0x400200a8
 80014a4:	400204a8 	.word	0x400204a8

080014a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
 80014b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d101      	bne.n	80014c8 <HAL_DMA_Start_IT+0x20>
 80014c4:	2302      	movs	r3, #2
 80014c6:	e04b      	b.n	8001560 <HAL_DMA_Start_IT+0xb8>
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2201      	movs	r2, #1
 80014cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d13a      	bne.n	8001552 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2202      	movs	r2, #2
 80014e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2200      	movs	r2, #0
 80014e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 0201 	bic.w	r2, r2, #1
 80014f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	68b9      	ldr	r1, [r7, #8]
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	f000 f8e0 	bl	80016c6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	2b00      	cmp	r3, #0
 800150c:	d008      	beq.n	8001520 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f042 020e 	orr.w	r2, r2, #14
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	e00f      	b.n	8001540 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f022 0204 	bic.w	r2, r2, #4
 800152e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f042 020a 	orr.w	r2, r2, #10
 800153e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f042 0201 	orr.w	r2, r2, #1
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	e005      	b.n	800155e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800155a:	2302      	movs	r3, #2
 800155c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800155e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001584:	f003 031c 	and.w	r3, r3, #28
 8001588:	2204      	movs	r2, #4
 800158a:	409a      	lsls	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4013      	ands	r3, r2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d026      	beq.n	80015e2 <HAL_DMA_IRQHandler+0x7a>
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	2b00      	cmp	r3, #0
 800159c:	d021      	beq.n	80015e2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0320 	and.w	r3, r3, #32
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d107      	bne.n	80015bc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0204 	bic.w	r2, r2, #4
 80015ba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c0:	f003 021c 	and.w	r2, r3, #28
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	2104      	movs	r1, #4
 80015ca:	fa01 f202 	lsl.w	r2, r1, r2
 80015ce:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d071      	beq.n	80016bc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80015e0:	e06c      	b.n	80016bc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	f003 031c 	and.w	r3, r3, #28
 80015ea:	2202      	movs	r2, #2
 80015ec:	409a      	lsls	r2, r3
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	4013      	ands	r3, r2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d02e      	beq.n	8001654 <HAL_DMA_IRQHandler+0xec>
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d029      	beq.n	8001654 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0320 	and.w	r3, r3, #32
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10b      	bne.n	8001626 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 020a 	bic.w	r2, r2, #10
 800161c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2201      	movs	r2, #1
 8001622:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162a:	f003 021c 	and.w	r2, r3, #28
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	2102      	movs	r1, #2
 8001634:	fa01 f202 	lsl.w	r2, r1, r2
 8001638:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001646:	2b00      	cmp	r3, #0
 8001648:	d038      	beq.n	80016bc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001652:	e033      	b.n	80016bc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001658:	f003 031c 	and.w	r3, r3, #28
 800165c:	2208      	movs	r2, #8
 800165e:	409a      	lsls	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4013      	ands	r3, r2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d02a      	beq.n	80016be <HAL_DMA_IRQHandler+0x156>
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	2b00      	cmp	r3, #0
 8001670:	d025      	beq.n	80016be <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f022 020e 	bic.w	r2, r2, #14
 8001680:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	f003 021c 	and.w	r2, r3, #28
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	2101      	movs	r1, #1
 8001690:	fa01 f202 	lsl.w	r2, r1, r2
 8001694:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d004      	beq.n	80016be <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80016bc:	bf00      	nop
 80016be:	bf00      	nop
}
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b085      	sub	sp, #20
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	60f8      	str	r0, [r7, #12]
 80016ce:	60b9      	str	r1, [r7, #8]
 80016d0:	607a      	str	r2, [r7, #4]
 80016d2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d8:	f003 021c 	and.w	r2, r3, #28
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e0:	2101      	movs	r1, #1
 80016e2:	fa01 f202 	lsl.w	r2, r1, r2
 80016e6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2b10      	cmp	r3, #16
 80016f6:	d108      	bne.n	800170a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68ba      	ldr	r2, [r7, #8]
 8001706:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001708:	e007      	b.n	800171a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	60da      	str	r2, [r3, #12]
}
 800171a:	bf00      	nop
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001728:	b480      	push	{r7}
 800172a:	b087      	sub	sp, #28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001736:	e17f      	b.n	8001a38 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	2101      	movs	r1, #1
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	fa01 f303 	lsl.w	r3, r1, r3
 8001744:	4013      	ands	r3, r2
 8001746:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 8171 	beq.w	8001a32 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 0303 	and.w	r3, r3, #3
 8001758:	2b01      	cmp	r3, #1
 800175a:	d005      	beq.n	8001768 <HAL_GPIO_Init+0x40>
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d130      	bne.n	80017ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	2203      	movs	r2, #3
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	4013      	ands	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	68da      	ldr	r2, [r3, #12]
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	4313      	orrs	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800179e:	2201      	movs	r2, #1
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43db      	mvns	r3, r3
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	4013      	ands	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	091b      	lsrs	r3, r3, #4
 80017b4:	f003 0201 	and.w	r2, r3, #1
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d118      	bne.n	8001808 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80017dc:	2201      	movs	r2, #1
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4013      	ands	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	08db      	lsrs	r3, r3, #3
 80017f2:	f003 0201 	and.w	r2, r3, #1
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4313      	orrs	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 0303 	and.w	r3, r3, #3
 8001810:	2b03      	cmp	r3, #3
 8001812:	d017      	beq.n	8001844 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	2203      	movs	r2, #3
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	689a      	ldr	r2, [r3, #8]
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	4313      	orrs	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d123      	bne.n	8001898 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	08da      	lsrs	r2, r3, #3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3208      	adds	r2, #8
 8001858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800185c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	220f      	movs	r2, #15
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	691a      	ldr	r2, [r3, #16]
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4313      	orrs	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	08da      	lsrs	r2, r3, #3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3208      	adds	r2, #8
 8001892:	6939      	ldr	r1, [r7, #16]
 8001894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	2203      	movs	r2, #3
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 0203 	and.w	r2, r3, #3
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 80ac 	beq.w	8001a32 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018da:	4b5f      	ldr	r3, [pc, #380]	; (8001a58 <HAL_GPIO_Init+0x330>)
 80018dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018de:	4a5e      	ldr	r2, [pc, #376]	; (8001a58 <HAL_GPIO_Init+0x330>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6613      	str	r3, [r2, #96]	; 0x60
 80018e6:	4b5c      	ldr	r3, [pc, #368]	; (8001a58 <HAL_GPIO_Init+0x330>)
 80018e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018f2:	4a5a      	ldr	r2, [pc, #360]	; (8001a5c <HAL_GPIO_Init+0x334>)
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	089b      	lsrs	r3, r3, #2
 80018f8:	3302      	adds	r3, #2
 80018fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	220f      	movs	r2, #15
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	4013      	ands	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800191c:	d025      	beq.n	800196a <HAL_GPIO_Init+0x242>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a4f      	ldr	r2, [pc, #316]	; (8001a60 <HAL_GPIO_Init+0x338>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d01f      	beq.n	8001966 <HAL_GPIO_Init+0x23e>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a4e      	ldr	r2, [pc, #312]	; (8001a64 <HAL_GPIO_Init+0x33c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d019      	beq.n	8001962 <HAL_GPIO_Init+0x23a>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a4d      	ldr	r2, [pc, #308]	; (8001a68 <HAL_GPIO_Init+0x340>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d013      	beq.n	800195e <HAL_GPIO_Init+0x236>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a4c      	ldr	r2, [pc, #304]	; (8001a6c <HAL_GPIO_Init+0x344>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d00d      	beq.n	800195a <HAL_GPIO_Init+0x232>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a4b      	ldr	r2, [pc, #300]	; (8001a70 <HAL_GPIO_Init+0x348>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d007      	beq.n	8001956 <HAL_GPIO_Init+0x22e>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a4a      	ldr	r2, [pc, #296]	; (8001a74 <HAL_GPIO_Init+0x34c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d101      	bne.n	8001952 <HAL_GPIO_Init+0x22a>
 800194e:	2306      	movs	r3, #6
 8001950:	e00c      	b.n	800196c <HAL_GPIO_Init+0x244>
 8001952:	2307      	movs	r3, #7
 8001954:	e00a      	b.n	800196c <HAL_GPIO_Init+0x244>
 8001956:	2305      	movs	r3, #5
 8001958:	e008      	b.n	800196c <HAL_GPIO_Init+0x244>
 800195a:	2304      	movs	r3, #4
 800195c:	e006      	b.n	800196c <HAL_GPIO_Init+0x244>
 800195e:	2303      	movs	r3, #3
 8001960:	e004      	b.n	800196c <HAL_GPIO_Init+0x244>
 8001962:	2302      	movs	r3, #2
 8001964:	e002      	b.n	800196c <HAL_GPIO_Init+0x244>
 8001966:	2301      	movs	r3, #1
 8001968:	e000      	b.n	800196c <HAL_GPIO_Init+0x244>
 800196a:	2300      	movs	r3, #0
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	f002 0203 	and.w	r2, r2, #3
 8001972:	0092      	lsls	r2, r2, #2
 8001974:	4093      	lsls	r3, r2
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800197c:	4937      	ldr	r1, [pc, #220]	; (8001a5c <HAL_GPIO_Init+0x334>)
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	089b      	lsrs	r3, r3, #2
 8001982:	3302      	adds	r3, #2
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800198a:	4b3b      	ldr	r3, [pc, #236]	; (8001a78 <HAL_GPIO_Init+0x350>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	43db      	mvns	r3, r3
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	4013      	ands	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019ae:	4a32      	ldr	r2, [pc, #200]	; (8001a78 <HAL_GPIO_Init+0x350>)
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019b4:	4b30      	ldr	r3, [pc, #192]	; (8001a78 <HAL_GPIO_Init+0x350>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	43db      	mvns	r3, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019d8:	4a27      	ldr	r2, [pc, #156]	; (8001a78 <HAL_GPIO_Init+0x350>)
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019de:	4b26      	ldr	r3, [pc, #152]	; (8001a78 <HAL_GPIO_Init+0x350>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	43db      	mvns	r3, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a02:	4a1d      	ldr	r2, [pc, #116]	; (8001a78 <HAL_GPIO_Init+0x350>)
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a08:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <HAL_GPIO_Init+0x350>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	43db      	mvns	r3, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d003      	beq.n	8001a2c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a2c:	4a12      	ldr	r2, [pc, #72]	; (8001a78 <HAL_GPIO_Init+0x350>)
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	3301      	adds	r3, #1
 8001a36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f47f ae78 	bne.w	8001738 <HAL_GPIO_Init+0x10>
  }
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	371c      	adds	r7, #28
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40010000 	.word	0x40010000
 8001a60:	48000400 	.word	0x48000400
 8001a64:	48000800 	.word	0x48000800
 8001a68:	48000c00 	.word	0x48000c00
 8001a6c:	48001000 	.word	0x48001000
 8001a70:	48001400 	.word	0x48001400
 8001a74:	48001800 	.word	0x48001800
 8001a78:	40010400 	.word	0x40010400

08001a7c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8a:	6013      	str	r3, [r2, #0]
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40007000 	.word	0x40007000

08001a9c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001aa0:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	40007000 	.word	0x40007000

08001ab8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ac6:	d130      	bne.n	8001b2a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ac8:	4b23      	ldr	r3, [pc, #140]	; (8001b58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ad4:	d038      	beq.n	8001b48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ad6:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ade:	4a1e      	ldr	r2, [pc, #120]	; (8001b58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ae0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ae4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ae6:	4b1d      	ldr	r3, [pc, #116]	; (8001b5c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2232      	movs	r2, #50	; 0x32
 8001aec:	fb02 f303 	mul.w	r3, r2, r3
 8001af0:	4a1b      	ldr	r2, [pc, #108]	; (8001b60 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001af2:	fba2 2303 	umull	r2, r3, r2, r3
 8001af6:	0c9b      	lsrs	r3, r3, #18
 8001af8:	3301      	adds	r3, #1
 8001afa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001afc:	e002      	b.n	8001b04 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	3b01      	subs	r3, #1
 8001b02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b04:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b10:	d102      	bne.n	8001b18 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1f2      	bne.n	8001afe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b24:	d110      	bne.n	8001b48 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e00f      	b.n	8001b4a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b2a:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b36:	d007      	beq.n	8001b48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b38:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b40:	4a05      	ldr	r2, [pc, #20]	; (8001b58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b46:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	40007000 	.word	0x40007000
 8001b5c:	20000000 	.word	0x20000000
 8001b60:	431bde83 	.word	0x431bde83

08001b64 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b088      	sub	sp, #32
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e3ca      	b.n	800230c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b76:	4b97      	ldr	r3, [pc, #604]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
 8001b7e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b80:	4b94      	ldr	r3, [pc, #592]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0310 	and.w	r3, r3, #16
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 80e4 	beq.w	8001d60 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d007      	beq.n	8001bae <HAL_RCC_OscConfig+0x4a>
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	2b0c      	cmp	r3, #12
 8001ba2:	f040 808b 	bne.w	8001cbc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	f040 8087 	bne.w	8001cbc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bae:	4b89      	ldr	r3, [pc, #548]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d005      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x62>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e3a2      	b.n	800230c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a1a      	ldr	r2, [r3, #32]
 8001bca:	4b82      	ldr	r3, [pc, #520]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d004      	beq.n	8001be0 <HAL_RCC_OscConfig+0x7c>
 8001bd6:	4b7f      	ldr	r3, [pc, #508]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bde:	e005      	b.n	8001bec <HAL_RCC_OscConfig+0x88>
 8001be0:	4b7c      	ldr	r3, [pc, #496]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001be6:	091b      	lsrs	r3, r3, #4
 8001be8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d223      	bcs.n	8001c38 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f000 fd55 	bl	80026a4 <RCC_SetFlashLatencyFromMSIRange>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e383      	b.n	800230c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c04:	4b73      	ldr	r3, [pc, #460]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a72      	ldr	r2, [pc, #456]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001c0a:	f043 0308 	orr.w	r3, r3, #8
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	4b70      	ldr	r3, [pc, #448]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	496d      	ldr	r1, [pc, #436]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c22:	4b6c      	ldr	r3, [pc, #432]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	021b      	lsls	r3, r3, #8
 8001c30:	4968      	ldr	r1, [pc, #416]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	604b      	str	r3, [r1, #4]
 8001c36:	e025      	b.n	8001c84 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c38:	4b66      	ldr	r3, [pc, #408]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a65      	ldr	r2, [pc, #404]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001c3e:	f043 0308 	orr.w	r3, r3, #8
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	4b63      	ldr	r3, [pc, #396]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	4960      	ldr	r1, [pc, #384]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c56:	4b5f      	ldr	r3, [pc, #380]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	021b      	lsls	r3, r3, #8
 8001c64:	495b      	ldr	r1, [pc, #364]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d109      	bne.n	8001c84 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f000 fd15 	bl	80026a4 <RCC_SetFlashLatencyFromMSIRange>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e343      	b.n	800230c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c84:	f000 fc4a 	bl	800251c <HAL_RCC_GetSysClockFreq>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	4b52      	ldr	r3, [pc, #328]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	091b      	lsrs	r3, r3, #4
 8001c90:	f003 030f 	and.w	r3, r3, #15
 8001c94:	4950      	ldr	r1, [pc, #320]	; (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001c96:	5ccb      	ldrb	r3, [r1, r3]
 8001c98:	f003 031f 	and.w	r3, r3, #31
 8001c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca0:	4a4e      	ldr	r2, [pc, #312]	; (8001ddc <HAL_RCC_OscConfig+0x278>)
 8001ca2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ca4:	4b4e      	ldr	r3, [pc, #312]	; (8001de0 <HAL_RCC_OscConfig+0x27c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff f9d7 	bl	800105c <HAL_InitTick>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d052      	beq.n	8001d5e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	e327      	b.n	800230c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d032      	beq.n	8001d2a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cc4:	4b43      	ldr	r3, [pc, #268]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a42      	ldr	r2, [pc, #264]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cd0:	f7ff fa14 	bl	80010fc <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cd8:	f7ff fa10 	bl	80010fc <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e310      	b.n	800230c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cea:	4b3a      	ldr	r3, [pc, #232]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0f0      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cf6:	4b37      	ldr	r3, [pc, #220]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a36      	ldr	r2, [pc, #216]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001cfc:	f043 0308 	orr.w	r3, r3, #8
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	4b34      	ldr	r3, [pc, #208]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	4931      	ldr	r1, [pc, #196]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d14:	4b2f      	ldr	r3, [pc, #188]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69db      	ldr	r3, [r3, #28]
 8001d20:	021b      	lsls	r3, r3, #8
 8001d22:	492c      	ldr	r1, [pc, #176]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	604b      	str	r3, [r1, #4]
 8001d28:	e01a      	b.n	8001d60 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d2a:	4b2a      	ldr	r3, [pc, #168]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a29      	ldr	r2, [pc, #164]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001d30:	f023 0301 	bic.w	r3, r3, #1
 8001d34:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d36:	f7ff f9e1 	bl	80010fc <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d3e:	f7ff f9dd 	bl	80010fc <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e2dd      	b.n	800230c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d50:	4b20      	ldr	r3, [pc, #128]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f0      	bne.n	8001d3e <HAL_RCC_OscConfig+0x1da>
 8001d5c:	e000      	b.n	8001d60 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d5e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d074      	beq.n	8001e56 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	d005      	beq.n	8001d7e <HAL_RCC_OscConfig+0x21a>
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	2b0c      	cmp	r3, #12
 8001d76:	d10e      	bne.n	8001d96 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	d10b      	bne.n	8001d96 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d7e:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d064      	beq.n	8001e54 <HAL_RCC_OscConfig+0x2f0>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d160      	bne.n	8001e54 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e2ba      	b.n	800230c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d9e:	d106      	bne.n	8001dae <HAL_RCC_OscConfig+0x24a>
 8001da0:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a0b      	ldr	r2, [pc, #44]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001daa:	6013      	str	r3, [r2, #0]
 8001dac:	e026      	b.n	8001dfc <HAL_RCC_OscConfig+0x298>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001db6:	d115      	bne.n	8001de4 <HAL_RCC_OscConfig+0x280>
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a05      	ldr	r2, [pc, #20]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001dbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc2:	6013      	str	r3, [r2, #0]
 8001dc4:	4b03      	ldr	r3, [pc, #12]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a02      	ldr	r2, [pc, #8]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001dca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dce:	6013      	str	r3, [r2, #0]
 8001dd0:	e014      	b.n	8001dfc <HAL_RCC_OscConfig+0x298>
 8001dd2:	bf00      	nop
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	08006304 	.word	0x08006304
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	20000004 	.word	0x20000004
 8001de4:	4ba0      	ldr	r3, [pc, #640]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a9f      	ldr	r2, [pc, #636]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	4b9d      	ldr	r3, [pc, #628]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a9c      	ldr	r2, [pc, #624]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001df6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d013      	beq.n	8001e2c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e04:	f7ff f97a 	bl	80010fc <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e0c:	f7ff f976 	bl	80010fc <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b64      	cmp	r3, #100	; 0x64
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e276      	b.n	800230c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e1e:	4b92      	ldr	r3, [pc, #584]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0x2a8>
 8001e2a:	e014      	b.n	8001e56 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2c:	f7ff f966 	bl	80010fc <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e34:	f7ff f962 	bl	80010fc <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b64      	cmp	r3, #100	; 0x64
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e262      	b.n	800230c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e46:	4b88      	ldr	r3, [pc, #544]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f0      	bne.n	8001e34 <HAL_RCC_OscConfig+0x2d0>
 8001e52:	e000      	b.n	8001e56 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d060      	beq.n	8001f24 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d005      	beq.n	8001e74 <HAL_RCC_OscConfig+0x310>
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	2b0c      	cmp	r3, #12
 8001e6c:	d119      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d116      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e74:	4b7c      	ldr	r3, [pc, #496]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d005      	beq.n	8001e8c <HAL_RCC_OscConfig+0x328>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e23f      	b.n	800230c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e8c:	4b76      	ldr	r3, [pc, #472]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	061b      	lsls	r3, r3, #24
 8001e9a:	4973      	ldr	r1, [pc, #460]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ea0:	e040      	b.n	8001f24 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d023      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eaa:	4b6f      	ldr	r3, [pc, #444]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a6e      	ldr	r2, [pc, #440]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb6:	f7ff f921 	bl	80010fc <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ebe:	f7ff f91d 	bl	80010fc <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e21d      	b.n	800230c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ed0:	4b65      	ldr	r3, [pc, #404]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f0      	beq.n	8001ebe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001edc:	4b62      	ldr	r3, [pc, #392]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	061b      	lsls	r3, r3, #24
 8001eea:	495f      	ldr	r1, [pc, #380]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	604b      	str	r3, [r1, #4]
 8001ef0:	e018      	b.n	8001f24 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ef2:	4b5d      	ldr	r3, [pc, #372]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a5c      	ldr	r2, [pc, #368]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001ef8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001efc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efe:	f7ff f8fd 	bl	80010fc <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f06:	f7ff f8f9 	bl	80010fc <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e1f9      	b.n	800230c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f18:	4b53      	ldr	r3, [pc, #332]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1f0      	bne.n	8001f06 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0308 	and.w	r3, r3, #8
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d03c      	beq.n	8001faa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d01c      	beq.n	8001f72 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f38:	4b4b      	ldr	r3, [pc, #300]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f3e:	4a4a      	ldr	r2, [pc, #296]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f48:	f7ff f8d8 	bl	80010fc <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f50:	f7ff f8d4 	bl	80010fc <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e1d4      	b.n	800230c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f62:	4b41      	ldr	r3, [pc, #260]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0ef      	beq.n	8001f50 <HAL_RCC_OscConfig+0x3ec>
 8001f70:	e01b      	b.n	8001faa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f72:	4b3d      	ldr	r3, [pc, #244]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f78:	4a3b      	ldr	r2, [pc, #236]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001f7a:	f023 0301 	bic.w	r3, r3, #1
 8001f7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f82:	f7ff f8bb 	bl	80010fc <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f8a:	f7ff f8b7 	bl	80010fc <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e1b7      	b.n	800230c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f9c:	4b32      	ldr	r3, [pc, #200]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1ef      	bne.n	8001f8a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0304 	and.w	r3, r3, #4
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f000 80a6 	beq.w	8002104 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fbc:	4b2a      	ldr	r3, [pc, #168]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10d      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fc8:	4b27      	ldr	r3, [pc, #156]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fcc:	4a26      	ldr	r2, [pc, #152]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	6593      	str	r3, [r2, #88]	; 0x58
 8001fd4:	4b24      	ldr	r3, [pc, #144]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fe4:	4b21      	ldr	r3, [pc, #132]	; (800206c <HAL_RCC_OscConfig+0x508>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d118      	bne.n	8002022 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ff0:	4b1e      	ldr	r3, [pc, #120]	; (800206c <HAL_RCC_OscConfig+0x508>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a1d      	ldr	r2, [pc, #116]	; (800206c <HAL_RCC_OscConfig+0x508>)
 8001ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ffa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ffc:	f7ff f87e 	bl	80010fc <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002004:	f7ff f87a 	bl	80010fc <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e17a      	b.n	800230c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002016:	4b15      	ldr	r3, [pc, #84]	; (800206c <HAL_RCC_OscConfig+0x508>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0f0      	beq.n	8002004 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d108      	bne.n	800203c <HAL_RCC_OscConfig+0x4d8>
 800202a:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 800202c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002030:	4a0d      	ldr	r2, [pc, #52]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800203a:	e029      	b.n	8002090 <HAL_RCC_OscConfig+0x52c>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2b05      	cmp	r3, #5
 8002042:	d115      	bne.n	8002070 <HAL_RCC_OscConfig+0x50c>
 8002044:	4b08      	ldr	r3, [pc, #32]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8002046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204a:	4a07      	ldr	r2, [pc, #28]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 800204c:	f043 0304 	orr.w	r3, r3, #4
 8002050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002054:	4b04      	ldr	r3, [pc, #16]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8002056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205a:	4a03      	ldr	r2, [pc, #12]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002064:	e014      	b.n	8002090 <HAL_RCC_OscConfig+0x52c>
 8002066:	bf00      	nop
 8002068:	40021000 	.word	0x40021000
 800206c:	40007000 	.word	0x40007000
 8002070:	4b9c      	ldr	r3, [pc, #624]	; (80022e4 <HAL_RCC_OscConfig+0x780>)
 8002072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002076:	4a9b      	ldr	r2, [pc, #620]	; (80022e4 <HAL_RCC_OscConfig+0x780>)
 8002078:	f023 0301 	bic.w	r3, r3, #1
 800207c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002080:	4b98      	ldr	r3, [pc, #608]	; (80022e4 <HAL_RCC_OscConfig+0x780>)
 8002082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002086:	4a97      	ldr	r2, [pc, #604]	; (80022e4 <HAL_RCC_OscConfig+0x780>)
 8002088:	f023 0304 	bic.w	r3, r3, #4
 800208c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d016      	beq.n	80020c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002098:	f7ff f830 	bl	80010fc <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800209e:	e00a      	b.n	80020b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a0:	f7ff f82c 	bl	80010fc <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e12a      	b.n	800230c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020b6:	4b8b      	ldr	r3, [pc, #556]	; (80022e4 <HAL_RCC_OscConfig+0x780>)
 80020b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0ed      	beq.n	80020a0 <HAL_RCC_OscConfig+0x53c>
 80020c4:	e015      	b.n	80020f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c6:	f7ff f819 	bl	80010fc <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020cc:	e00a      	b.n	80020e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ce:	f7ff f815 	bl	80010fc <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020dc:	4293      	cmp	r3, r2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e113      	b.n	800230c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020e4:	4b7f      	ldr	r3, [pc, #508]	; (80022e4 <HAL_RCC_OscConfig+0x780>)
 80020e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1ed      	bne.n	80020ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020f2:	7ffb      	ldrb	r3, [r7, #31]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d105      	bne.n	8002104 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020f8:	4b7a      	ldr	r3, [pc, #488]	; (80022e4 <HAL_RCC_OscConfig+0x780>)
 80020fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fc:	4a79      	ldr	r2, [pc, #484]	; (80022e4 <HAL_RCC_OscConfig+0x780>)
 80020fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002102:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 80fe 	beq.w	800230a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002112:	2b02      	cmp	r3, #2
 8002114:	f040 80d0 	bne.w	80022b8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002118:	4b72      	ldr	r3, [pc, #456]	; (80022e4 <HAL_RCC_OscConfig+0x780>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f003 0203 	and.w	r2, r3, #3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002128:	429a      	cmp	r2, r3
 800212a:	d130      	bne.n	800218e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	3b01      	subs	r3, #1
 8002138:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800213a:	429a      	cmp	r2, r3
 800213c:	d127      	bne.n	800218e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002148:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800214a:	429a      	cmp	r2, r3
 800214c:	d11f      	bne.n	800218e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002158:	2a07      	cmp	r2, #7
 800215a:	bf14      	ite	ne
 800215c:	2201      	movne	r2, #1
 800215e:	2200      	moveq	r2, #0
 8002160:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002162:	4293      	cmp	r3, r2
 8002164:	d113      	bne.n	800218e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002170:	085b      	lsrs	r3, r3, #1
 8002172:	3b01      	subs	r3, #1
 8002174:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002176:	429a      	cmp	r2, r3
 8002178:	d109      	bne.n	800218e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	085b      	lsrs	r3, r3, #1
 8002186:	3b01      	subs	r3, #1
 8002188:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800218a:	429a      	cmp	r2, r3
 800218c:	d06e      	beq.n	800226c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	2b0c      	cmp	r3, #12
 8002192:	d069      	beq.n	8002268 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002194:	4b53      	ldr	r3, [pc, #332]	; (80022e4 <HAL_RCC_OscConfig+0x780>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d105      	bne.n	80021ac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80021a0:	4b50      	ldr	r3, [pc, #320]	; (80022e4 <HAL_RCC_OscConfig+0x780>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0ad      	b.n	800230c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021b0:	4b4c      	ldr	r3, [pc, #304]	; (80022e4 <HAL_RCC_OscConfig+0x780>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a4b      	ldr	r2, [pc, #300]	; (80022e4 <HAL_RCC_OscConfig+0x780>)
 80021b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021ba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021bc:	f7fe ff9e 	bl	80010fc <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c4:	f7fe ff9a 	bl	80010fc <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e09a      	b.n	800230c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021d6:	4b43      	ldr	r3, [pc, #268]	; (80022e4 <HAL_RCC_OscConfig+0x780>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021e2:	4b40      	ldr	r3, [pc, #256]	; (80022e4 <HAL_RCC_OscConfig+0x780>)
 80021e4:	68da      	ldr	r2, [r3, #12]
 80021e6:	4b40      	ldr	r3, [pc, #256]	; (80022e8 <HAL_RCC_OscConfig+0x784>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021f2:	3a01      	subs	r2, #1
 80021f4:	0112      	lsls	r2, r2, #4
 80021f6:	4311      	orrs	r1, r2
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021fc:	0212      	lsls	r2, r2, #8
 80021fe:	4311      	orrs	r1, r2
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002204:	0852      	lsrs	r2, r2, #1
 8002206:	3a01      	subs	r2, #1
 8002208:	0552      	lsls	r2, r2, #21
 800220a:	4311      	orrs	r1, r2
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002210:	0852      	lsrs	r2, r2, #1
 8002212:	3a01      	subs	r2, #1
 8002214:	0652      	lsls	r2, r2, #25
 8002216:	4311      	orrs	r1, r2
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800221c:	0912      	lsrs	r2, r2, #4
 800221e:	0452      	lsls	r2, r2, #17
 8002220:	430a      	orrs	r2, r1
 8002222:	4930      	ldr	r1, [pc, #192]	; (80022e4 <HAL_RCC_OscConfig+0x780>)
 8002224:	4313      	orrs	r3, r2
 8002226:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002228:	4b2e      	ldr	r3, [pc, #184]	; (80022e4 <HAL_RCC_OscConfig+0x780>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a2d      	ldr	r2, [pc, #180]	; (80022e4 <HAL_RCC_OscConfig+0x780>)
 800222e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002232:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002234:	4b2b      	ldr	r3, [pc, #172]	; (80022e4 <HAL_RCC_OscConfig+0x780>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	4a2a      	ldr	r2, [pc, #168]	; (80022e4 <HAL_RCC_OscConfig+0x780>)
 800223a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800223e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002240:	f7fe ff5c 	bl	80010fc <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002248:	f7fe ff58 	bl	80010fc <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e058      	b.n	800230c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800225a:	4b22      	ldr	r3, [pc, #136]	; (80022e4 <HAL_RCC_OscConfig+0x780>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0f0      	beq.n	8002248 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002266:	e050      	b.n	800230a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e04f      	b.n	800230c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800226c:	4b1d      	ldr	r3, [pc, #116]	; (80022e4 <HAL_RCC_OscConfig+0x780>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d148      	bne.n	800230a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002278:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <HAL_RCC_OscConfig+0x780>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a19      	ldr	r2, [pc, #100]	; (80022e4 <HAL_RCC_OscConfig+0x780>)
 800227e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002282:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002284:	4b17      	ldr	r3, [pc, #92]	; (80022e4 <HAL_RCC_OscConfig+0x780>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	4a16      	ldr	r2, [pc, #88]	; (80022e4 <HAL_RCC_OscConfig+0x780>)
 800228a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800228e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002290:	f7fe ff34 	bl	80010fc <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002298:	f7fe ff30 	bl	80010fc <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e030      	b.n	800230c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022aa:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <HAL_RCC_OscConfig+0x780>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0f0      	beq.n	8002298 <HAL_RCC_OscConfig+0x734>
 80022b6:	e028      	b.n	800230a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	2b0c      	cmp	r3, #12
 80022bc:	d023      	beq.n	8002306 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022be:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <HAL_RCC_OscConfig+0x780>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a08      	ldr	r2, [pc, #32]	; (80022e4 <HAL_RCC_OscConfig+0x780>)
 80022c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ca:	f7fe ff17 	bl	80010fc <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022d0:	e00c      	b.n	80022ec <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d2:	f7fe ff13 	bl	80010fc <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d905      	bls.n	80022ec <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e013      	b.n	800230c <HAL_RCC_OscConfig+0x7a8>
 80022e4:	40021000 	.word	0x40021000
 80022e8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ec:	4b09      	ldr	r3, [pc, #36]	; (8002314 <HAL_RCC_OscConfig+0x7b0>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1ec      	bne.n	80022d2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80022f8:	4b06      	ldr	r3, [pc, #24]	; (8002314 <HAL_RCC_OscConfig+0x7b0>)
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	4905      	ldr	r1, [pc, #20]	; (8002314 <HAL_RCC_OscConfig+0x7b0>)
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_RCC_OscConfig+0x7b4>)
 8002300:	4013      	ands	r3, r2
 8002302:	60cb      	str	r3, [r1, #12]
 8002304:	e001      	b.n	800230a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3720      	adds	r7, #32
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40021000 	.word	0x40021000
 8002318:	feeefffc 	.word	0xfeeefffc

0800231c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e0e7      	b.n	8002500 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002330:	4b75      	ldr	r3, [pc, #468]	; (8002508 <HAL_RCC_ClockConfig+0x1ec>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	d910      	bls.n	8002360 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233e:	4b72      	ldr	r3, [pc, #456]	; (8002508 <HAL_RCC_ClockConfig+0x1ec>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f023 0207 	bic.w	r2, r3, #7
 8002346:	4970      	ldr	r1, [pc, #448]	; (8002508 <HAL_RCC_ClockConfig+0x1ec>)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	4313      	orrs	r3, r2
 800234c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800234e:	4b6e      	ldr	r3, [pc, #440]	; (8002508 <HAL_RCC_ClockConfig+0x1ec>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	d001      	beq.n	8002360 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0cf      	b.n	8002500 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d010      	beq.n	800238e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	4b66      	ldr	r3, [pc, #408]	; (800250c <HAL_RCC_ClockConfig+0x1f0>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002378:	429a      	cmp	r2, r3
 800237a:	d908      	bls.n	800238e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800237c:	4b63      	ldr	r3, [pc, #396]	; (800250c <HAL_RCC_ClockConfig+0x1f0>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	4960      	ldr	r1, [pc, #384]	; (800250c <HAL_RCC_ClockConfig+0x1f0>)
 800238a:	4313      	orrs	r3, r2
 800238c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d04c      	beq.n	8002434 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b03      	cmp	r3, #3
 80023a0:	d107      	bne.n	80023b2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023a2:	4b5a      	ldr	r3, [pc, #360]	; (800250c <HAL_RCC_ClockConfig+0x1f0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d121      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e0a6      	b.n	8002500 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d107      	bne.n	80023ca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ba:	4b54      	ldr	r3, [pc, #336]	; (800250c <HAL_RCC_ClockConfig+0x1f0>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d115      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e09a      	b.n	8002500 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d107      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023d2:	4b4e      	ldr	r3, [pc, #312]	; (800250c <HAL_RCC_ClockConfig+0x1f0>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d109      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e08e      	b.n	8002500 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023e2:	4b4a      	ldr	r3, [pc, #296]	; (800250c <HAL_RCC_ClockConfig+0x1f0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e086      	b.n	8002500 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023f2:	4b46      	ldr	r3, [pc, #280]	; (800250c <HAL_RCC_ClockConfig+0x1f0>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f023 0203 	bic.w	r2, r3, #3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	4943      	ldr	r1, [pc, #268]	; (800250c <HAL_RCC_ClockConfig+0x1f0>)
 8002400:	4313      	orrs	r3, r2
 8002402:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002404:	f7fe fe7a 	bl	80010fc <HAL_GetTick>
 8002408:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240a:	e00a      	b.n	8002422 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800240c:	f7fe fe76 	bl	80010fc <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	f241 3288 	movw	r2, #5000	; 0x1388
 800241a:	4293      	cmp	r3, r2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e06e      	b.n	8002500 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002422:	4b3a      	ldr	r3, [pc, #232]	; (800250c <HAL_RCC_ClockConfig+0x1f0>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 020c 	and.w	r2, r3, #12
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	429a      	cmp	r2, r3
 8002432:	d1eb      	bne.n	800240c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d010      	beq.n	8002462 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	4b31      	ldr	r3, [pc, #196]	; (800250c <HAL_RCC_ClockConfig+0x1f0>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800244c:	429a      	cmp	r2, r3
 800244e:	d208      	bcs.n	8002462 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002450:	4b2e      	ldr	r3, [pc, #184]	; (800250c <HAL_RCC_ClockConfig+0x1f0>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	492b      	ldr	r1, [pc, #172]	; (800250c <HAL_RCC_ClockConfig+0x1f0>)
 800245e:	4313      	orrs	r3, r2
 8002460:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002462:	4b29      	ldr	r3, [pc, #164]	; (8002508 <HAL_RCC_ClockConfig+0x1ec>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	429a      	cmp	r2, r3
 800246e:	d210      	bcs.n	8002492 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002470:	4b25      	ldr	r3, [pc, #148]	; (8002508 <HAL_RCC_ClockConfig+0x1ec>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f023 0207 	bic.w	r2, r3, #7
 8002478:	4923      	ldr	r1, [pc, #140]	; (8002508 <HAL_RCC_ClockConfig+0x1ec>)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	4313      	orrs	r3, r2
 800247e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002480:	4b21      	ldr	r3, [pc, #132]	; (8002508 <HAL_RCC_ClockConfig+0x1ec>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d001      	beq.n	8002492 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e036      	b.n	8002500 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	2b00      	cmp	r3, #0
 800249c:	d008      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800249e:	4b1b      	ldr	r3, [pc, #108]	; (800250c <HAL_RCC_ClockConfig+0x1f0>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	4918      	ldr	r1, [pc, #96]	; (800250c <HAL_RCC_ClockConfig+0x1f0>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0308 	and.w	r3, r3, #8
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d009      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024bc:	4b13      	ldr	r3, [pc, #76]	; (800250c <HAL_RCC_ClockConfig+0x1f0>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	4910      	ldr	r1, [pc, #64]	; (800250c <HAL_RCC_ClockConfig+0x1f0>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024d0:	f000 f824 	bl	800251c <HAL_RCC_GetSysClockFreq>
 80024d4:	4602      	mov	r2, r0
 80024d6:	4b0d      	ldr	r3, [pc, #52]	; (800250c <HAL_RCC_ClockConfig+0x1f0>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	091b      	lsrs	r3, r3, #4
 80024dc:	f003 030f 	and.w	r3, r3, #15
 80024e0:	490b      	ldr	r1, [pc, #44]	; (8002510 <HAL_RCC_ClockConfig+0x1f4>)
 80024e2:	5ccb      	ldrb	r3, [r1, r3]
 80024e4:	f003 031f 	and.w	r3, r3, #31
 80024e8:	fa22 f303 	lsr.w	r3, r2, r3
 80024ec:	4a09      	ldr	r2, [pc, #36]	; (8002514 <HAL_RCC_ClockConfig+0x1f8>)
 80024ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024f0:	4b09      	ldr	r3, [pc, #36]	; (8002518 <HAL_RCC_ClockConfig+0x1fc>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fe fdb1 	bl	800105c <HAL_InitTick>
 80024fa:	4603      	mov	r3, r0
 80024fc:	72fb      	strb	r3, [r7, #11]

  return status;
 80024fe:	7afb      	ldrb	r3, [r7, #11]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40022000 	.word	0x40022000
 800250c:	40021000 	.word	0x40021000
 8002510:	08006304 	.word	0x08006304
 8002514:	20000000 	.word	0x20000000
 8002518:	20000004 	.word	0x20000004

0800251c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800251c:	b480      	push	{r7}
 800251e:	b089      	sub	sp, #36	; 0x24
 8002520:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002522:	2300      	movs	r3, #0
 8002524:	61fb      	str	r3, [r7, #28]
 8002526:	2300      	movs	r3, #0
 8002528:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800252a:	4b3e      	ldr	r3, [pc, #248]	; (8002624 <HAL_RCC_GetSysClockFreq+0x108>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002534:	4b3b      	ldr	r3, [pc, #236]	; (8002624 <HAL_RCC_GetSysClockFreq+0x108>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d005      	beq.n	8002550 <HAL_RCC_GetSysClockFreq+0x34>
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	2b0c      	cmp	r3, #12
 8002548:	d121      	bne.n	800258e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d11e      	bne.n	800258e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002550:	4b34      	ldr	r3, [pc, #208]	; (8002624 <HAL_RCC_GetSysClockFreq+0x108>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b00      	cmp	r3, #0
 800255a:	d107      	bne.n	800256c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800255c:	4b31      	ldr	r3, [pc, #196]	; (8002624 <HAL_RCC_GetSysClockFreq+0x108>)
 800255e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	f003 030f 	and.w	r3, r3, #15
 8002568:	61fb      	str	r3, [r7, #28]
 800256a:	e005      	b.n	8002578 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800256c:	4b2d      	ldr	r3, [pc, #180]	; (8002624 <HAL_RCC_GetSysClockFreq+0x108>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	091b      	lsrs	r3, r3, #4
 8002572:	f003 030f 	and.w	r3, r3, #15
 8002576:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002578:	4a2b      	ldr	r2, [pc, #172]	; (8002628 <HAL_RCC_GetSysClockFreq+0x10c>)
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002580:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10d      	bne.n	80025a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800258c:	e00a      	b.n	80025a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	2b04      	cmp	r3, #4
 8002592:	d102      	bne.n	800259a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002594:	4b25      	ldr	r3, [pc, #148]	; (800262c <HAL_RCC_GetSysClockFreq+0x110>)
 8002596:	61bb      	str	r3, [r7, #24]
 8002598:	e004      	b.n	80025a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	2b08      	cmp	r3, #8
 800259e:	d101      	bne.n	80025a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025a0:	4b23      	ldr	r3, [pc, #140]	; (8002630 <HAL_RCC_GetSysClockFreq+0x114>)
 80025a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	2b0c      	cmp	r3, #12
 80025a8:	d134      	bne.n	8002614 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025aa:	4b1e      	ldr	r3, [pc, #120]	; (8002624 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d003      	beq.n	80025c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b03      	cmp	r3, #3
 80025be:	d003      	beq.n	80025c8 <HAL_RCC_GetSysClockFreq+0xac>
 80025c0:	e005      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80025c2:	4b1a      	ldr	r3, [pc, #104]	; (800262c <HAL_RCC_GetSysClockFreq+0x110>)
 80025c4:	617b      	str	r3, [r7, #20]
      break;
 80025c6:	e005      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80025c8:	4b19      	ldr	r3, [pc, #100]	; (8002630 <HAL_RCC_GetSysClockFreq+0x114>)
 80025ca:	617b      	str	r3, [r7, #20]
      break;
 80025cc:	e002      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	617b      	str	r3, [r7, #20]
      break;
 80025d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025d4:	4b13      	ldr	r3, [pc, #76]	; (8002624 <HAL_RCC_GetSysClockFreq+0x108>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	3301      	adds	r3, #1
 80025e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025e2:	4b10      	ldr	r3, [pc, #64]	; (8002624 <HAL_RCC_GetSysClockFreq+0x108>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	0a1b      	lsrs	r3, r3, #8
 80025e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	fb03 f202 	mul.w	r2, r3, r2
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025fa:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <HAL_RCC_GetSysClockFreq+0x108>)
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	0e5b      	lsrs	r3, r3, #25
 8002600:	f003 0303 	and.w	r3, r3, #3
 8002604:	3301      	adds	r3, #1
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002612:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002614:	69bb      	ldr	r3, [r7, #24]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3724      	adds	r7, #36	; 0x24
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40021000 	.word	0x40021000
 8002628:	0800631c 	.word	0x0800631c
 800262c:	00f42400 	.word	0x00f42400
 8002630:	007a1200 	.word	0x007a1200

08002634 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002638:	4b03      	ldr	r3, [pc, #12]	; (8002648 <HAL_RCC_GetHCLKFreq+0x14>)
 800263a:	681b      	ldr	r3, [r3, #0]
}
 800263c:	4618      	mov	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	20000000 	.word	0x20000000

0800264c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002650:	f7ff fff0 	bl	8002634 <HAL_RCC_GetHCLKFreq>
 8002654:	4602      	mov	r2, r0
 8002656:	4b06      	ldr	r3, [pc, #24]	; (8002670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	0a1b      	lsrs	r3, r3, #8
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	4904      	ldr	r1, [pc, #16]	; (8002674 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002662:	5ccb      	ldrb	r3, [r1, r3]
 8002664:	f003 031f 	and.w	r3, r3, #31
 8002668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800266c:	4618      	mov	r0, r3
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40021000 	.word	0x40021000
 8002674:	08006314 	.word	0x08006314

08002678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800267c:	f7ff ffda 	bl	8002634 <HAL_RCC_GetHCLKFreq>
 8002680:	4602      	mov	r2, r0
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	0adb      	lsrs	r3, r3, #11
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	4904      	ldr	r1, [pc, #16]	; (80026a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800268e:	5ccb      	ldrb	r3, [r1, r3]
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002698:	4618      	mov	r0, r3
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40021000 	.word	0x40021000
 80026a0:	08006314 	.word	0x08006314

080026a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026ac:	2300      	movs	r3, #0
 80026ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80026b0:	4b2a      	ldr	r3, [pc, #168]	; (800275c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d003      	beq.n	80026c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80026bc:	f7ff f9ee 	bl	8001a9c <HAL_PWREx_GetVoltageRange>
 80026c0:	6178      	str	r0, [r7, #20]
 80026c2:	e014      	b.n	80026ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026c4:	4b25      	ldr	r3, [pc, #148]	; (800275c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c8:	4a24      	ldr	r2, [pc, #144]	; (800275c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ce:	6593      	str	r3, [r2, #88]	; 0x58
 80026d0:	4b22      	ldr	r3, [pc, #136]	; (800275c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026dc:	f7ff f9de 	bl	8001a9c <HAL_PWREx_GetVoltageRange>
 80026e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026e2:	4b1e      	ldr	r3, [pc, #120]	; (800275c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e6:	4a1d      	ldr	r2, [pc, #116]	; (800275c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026f4:	d10b      	bne.n	800270e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b80      	cmp	r3, #128	; 0x80
 80026fa:	d919      	bls.n	8002730 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2ba0      	cmp	r3, #160	; 0xa0
 8002700:	d902      	bls.n	8002708 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002702:	2302      	movs	r3, #2
 8002704:	613b      	str	r3, [r7, #16]
 8002706:	e013      	b.n	8002730 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002708:	2301      	movs	r3, #1
 800270a:	613b      	str	r3, [r7, #16]
 800270c:	e010      	b.n	8002730 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b80      	cmp	r3, #128	; 0x80
 8002712:	d902      	bls.n	800271a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002714:	2303      	movs	r3, #3
 8002716:	613b      	str	r3, [r7, #16]
 8002718:	e00a      	b.n	8002730 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b80      	cmp	r3, #128	; 0x80
 800271e:	d102      	bne.n	8002726 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002720:	2302      	movs	r3, #2
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	e004      	b.n	8002730 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b70      	cmp	r3, #112	; 0x70
 800272a:	d101      	bne.n	8002730 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800272c:	2301      	movs	r3, #1
 800272e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002730:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f023 0207 	bic.w	r2, r3, #7
 8002738:	4909      	ldr	r1, [pc, #36]	; (8002760 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	4313      	orrs	r3, r2
 800273e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002740:	4b07      	ldr	r3, [pc, #28]	; (8002760 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	429a      	cmp	r2, r3
 800274c:	d001      	beq.n	8002752 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40021000 	.word	0x40021000
 8002760:	40022000 	.word	0x40022000

08002764 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800276c:	2300      	movs	r3, #0
 800276e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002770:	2300      	movs	r3, #0
 8002772:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800277c:	2b00      	cmp	r3, #0
 800277e:	d041      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002784:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002788:	d02a      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800278a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800278e:	d824      	bhi.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002790:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002794:	d008      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002796:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800279a:	d81e      	bhi.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00a      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80027a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027a4:	d010      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80027a6:	e018      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027a8:	4b86      	ldr	r3, [pc, #536]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	4a85      	ldr	r2, [pc, #532]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027b4:	e015      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3304      	adds	r3, #4
 80027ba:	2100      	movs	r1, #0
 80027bc:	4618      	mov	r0, r3
 80027be:	f001 f839 	bl	8003834 <RCCEx_PLLSAI1_Config>
 80027c2:	4603      	mov	r3, r0
 80027c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027c6:	e00c      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3320      	adds	r3, #32
 80027cc:	2100      	movs	r1, #0
 80027ce:	4618      	mov	r0, r3
 80027d0:	f001 f924 	bl	8003a1c <RCCEx_PLLSAI2_Config>
 80027d4:	4603      	mov	r3, r0
 80027d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027d8:	e003      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	74fb      	strb	r3, [r7, #19]
      break;
 80027de:	e000      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80027e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027e2:	7cfb      	ldrb	r3, [r7, #19]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10b      	bne.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027e8:	4b76      	ldr	r3, [pc, #472]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027f6:	4973      	ldr	r1, [pc, #460]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027fe:	e001      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002800:	7cfb      	ldrb	r3, [r7, #19]
 8002802:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d041      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002814:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002818:	d02a      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800281a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800281e:	d824      	bhi.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002820:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002824:	d008      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002826:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800282a:	d81e      	bhi.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00a      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002830:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002834:	d010      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002836:	e018      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002838:	4b62      	ldr	r3, [pc, #392]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	4a61      	ldr	r2, [pc, #388]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800283e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002842:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002844:	e015      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3304      	adds	r3, #4
 800284a:	2100      	movs	r1, #0
 800284c:	4618      	mov	r0, r3
 800284e:	f000 fff1 	bl	8003834 <RCCEx_PLLSAI1_Config>
 8002852:	4603      	mov	r3, r0
 8002854:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002856:	e00c      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3320      	adds	r3, #32
 800285c:	2100      	movs	r1, #0
 800285e:	4618      	mov	r0, r3
 8002860:	f001 f8dc 	bl	8003a1c <RCCEx_PLLSAI2_Config>
 8002864:	4603      	mov	r3, r0
 8002866:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002868:	e003      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	74fb      	strb	r3, [r7, #19]
      break;
 800286e:	e000      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002870:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002872:	7cfb      	ldrb	r3, [r7, #19]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10b      	bne.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002878:	4b52      	ldr	r3, [pc, #328]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800287a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002886:	494f      	ldr	r1, [pc, #316]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002888:	4313      	orrs	r3, r2
 800288a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800288e:	e001      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002890:	7cfb      	ldrb	r3, [r7, #19]
 8002892:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 80a0 	beq.w	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028a2:	2300      	movs	r3, #0
 80028a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028a6:	4b47      	ldr	r3, [pc, #284]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80028b6:	2300      	movs	r3, #0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00d      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028bc:	4b41      	ldr	r3, [pc, #260]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c0:	4a40      	ldr	r2, [pc, #256]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c6:	6593      	str	r3, [r2, #88]	; 0x58
 80028c8:	4b3e      	ldr	r3, [pc, #248]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028d4:	2301      	movs	r3, #1
 80028d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028d8:	4b3b      	ldr	r3, [pc, #236]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a3a      	ldr	r2, [pc, #232]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028e4:	f7fe fc0a 	bl	80010fc <HAL_GetTick>
 80028e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028ea:	e009      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ec:	f7fe fc06 	bl	80010fc <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d902      	bls.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	74fb      	strb	r3, [r7, #19]
        break;
 80028fe:	e005      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002900:	4b31      	ldr	r3, [pc, #196]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0ef      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800290c:	7cfb      	ldrb	r3, [r7, #19]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d15c      	bne.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002912:	4b2c      	ldr	r3, [pc, #176]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002918:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800291c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d01f      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	429a      	cmp	r2, r3
 800292e:	d019      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002930:	4b24      	ldr	r3, [pc, #144]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800293a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800293c:	4b21      	ldr	r3, [pc, #132]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800293e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002942:	4a20      	ldr	r2, [pc, #128]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002948:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800294c:	4b1d      	ldr	r3, [pc, #116]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800294e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002952:	4a1c      	ldr	r2, [pc, #112]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002954:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002958:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800295c:	4a19      	ldr	r2, [pc, #100]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d016      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296e:	f7fe fbc5 	bl	80010fc <HAL_GetTick>
 8002972:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002974:	e00b      	b.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002976:	f7fe fbc1 	bl	80010fc <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	f241 3288 	movw	r2, #5000	; 0x1388
 8002984:	4293      	cmp	r3, r2
 8002986:	d902      	bls.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	74fb      	strb	r3, [r7, #19]
            break;
 800298c:	e006      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800298e:	4b0d      	ldr	r3, [pc, #52]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0ec      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800299c:	7cfb      	ldrb	r3, [r7, #19]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10c      	bne.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029a2:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029b2:	4904      	ldr	r1, [pc, #16]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80029ba:	e009      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029bc:	7cfb      	ldrb	r3, [r7, #19]
 80029be:	74bb      	strb	r3, [r7, #18]
 80029c0:	e006      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80029c2:	bf00      	nop
 80029c4:	40021000 	.word	0x40021000
 80029c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029cc:	7cfb      	ldrb	r3, [r7, #19]
 80029ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029d0:	7c7b      	ldrb	r3, [r7, #17]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d105      	bne.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d6:	4b9e      	ldr	r3, [pc, #632]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029da:	4a9d      	ldr	r2, [pc, #628]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00a      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029ee:	4b98      	ldr	r3, [pc, #608]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f4:	f023 0203 	bic.w	r2, r3, #3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fc:	4994      	ldr	r1, [pc, #592]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00a      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a10:	4b8f      	ldr	r3, [pc, #572]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a16:	f023 020c 	bic.w	r2, r3, #12
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1e:	498c      	ldr	r1, [pc, #560]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00a      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a32:	4b87      	ldr	r3, [pc, #540]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	4983      	ldr	r1, [pc, #524]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0308 	and.w	r3, r3, #8
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00a      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a54:	4b7e      	ldr	r3, [pc, #504]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	497b      	ldr	r1, [pc, #492]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0310 	and.w	r3, r3, #16
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00a      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a76:	4b76      	ldr	r3, [pc, #472]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a84:	4972      	ldr	r1, [pc, #456]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0320 	and.w	r3, r3, #32
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00a      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a98:	4b6d      	ldr	r3, [pc, #436]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa6:	496a      	ldr	r1, [pc, #424]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00a      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002aba:	4b65      	ldr	r3, [pc, #404]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac8:	4961      	ldr	r1, [pc, #388]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00a      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002adc:	4b5c      	ldr	r3, [pc, #368]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aea:	4959      	ldr	r1, [pc, #356]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00a      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002afe:	4b54      	ldr	r3, [pc, #336]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b0c:	4950      	ldr	r1, [pc, #320]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00a      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b20:	4b4b      	ldr	r3, [pc, #300]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b26:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2e:	4948      	ldr	r1, [pc, #288]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00a      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b42:	4b43      	ldr	r3, [pc, #268]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b50:	493f      	ldr	r1, [pc, #252]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d028      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b64:	4b3a      	ldr	r3, [pc, #232]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b72:	4937      	ldr	r1, [pc, #220]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b82:	d106      	bne.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b84:	4b32      	ldr	r3, [pc, #200]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	4a31      	ldr	r2, [pc, #196]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b8e:	60d3      	str	r3, [r2, #12]
 8002b90:	e011      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b9a:	d10c      	bne.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3304      	adds	r3, #4
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 fe46 	bl	8003834 <RCCEx_PLLSAI1_Config>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002bac:	7cfb      	ldrb	r3, [r7, #19]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002bb2:	7cfb      	ldrb	r3, [r7, #19]
 8002bb4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d028      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002bc2:	4b23      	ldr	r3, [pc, #140]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd0:	491f      	ldr	r1, [pc, #124]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002be0:	d106      	bne.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002be2:	4b1b      	ldr	r3, [pc, #108]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	4a1a      	ldr	r2, [pc, #104]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bec:	60d3      	str	r3, [r2, #12]
 8002bee:	e011      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bf8:	d10c      	bne.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	2101      	movs	r1, #1
 8002c00:	4618      	mov	r0, r3
 8002c02:	f000 fe17 	bl	8003834 <RCCEx_PLLSAI1_Config>
 8002c06:	4603      	mov	r3, r0
 8002c08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c0a:	7cfb      	ldrb	r3, [r7, #19]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002c10:	7cfb      	ldrb	r3, [r7, #19]
 8002c12:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d02b      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c20:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c2e:	4908      	ldr	r1, [pc, #32]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c3e:	d109      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c40:	4b03      	ldr	r3, [pc, #12]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	4a02      	ldr	r2, [pc, #8]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c4a:	60d3      	str	r3, [r2, #12]
 8002c4c:	e014      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002c4e:	bf00      	nop
 8002c50:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c5c:	d10c      	bne.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3304      	adds	r3, #4
 8002c62:	2101      	movs	r1, #1
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 fde5 	bl	8003834 <RCCEx_PLLSAI1_Config>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c6e:	7cfb      	ldrb	r3, [r7, #19]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002c74:	7cfb      	ldrb	r3, [r7, #19]
 8002c76:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d02f      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c84:	4b2b      	ldr	r3, [pc, #172]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c92:	4928      	ldr	r1, [pc, #160]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ca2:	d10d      	bne.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3304      	adds	r3, #4
 8002ca8:	2102      	movs	r1, #2
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 fdc2 	bl	8003834 <RCCEx_PLLSAI1_Config>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cb4:	7cfb      	ldrb	r3, [r7, #19]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d014      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002cba:	7cfb      	ldrb	r3, [r7, #19]
 8002cbc:	74bb      	strb	r3, [r7, #18]
 8002cbe:	e011      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cc8:	d10c      	bne.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	3320      	adds	r3, #32
 8002cce:	2102      	movs	r1, #2
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f000 fea3 	bl	8003a1c <RCCEx_PLLSAI2_Config>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cda:	7cfb      	ldrb	r3, [r7, #19]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ce0:	7cfb      	ldrb	r3, [r7, #19]
 8002ce2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00a      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002cf0:	4b10      	ldr	r3, [pc, #64]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cfe:	490d      	ldr	r1, [pc, #52]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00b      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d12:	4b08      	ldr	r3, [pc, #32]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d22:	4904      	ldr	r1, [pc, #16]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d2a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40021000 	.word	0x40021000

08002d38 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b088      	sub	sp, #32
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d4a:	d13e      	bne.n	8002dca <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8002d4c:	4bb2      	ldr	r3, [pc, #712]	; (8003018 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d56:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d5e:	d028      	beq.n	8002db2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d66:	f200 8542 	bhi.w	80037ee <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d70:	d005      	beq.n	8002d7e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d78:	d00e      	beq.n	8002d98 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8002d7a:	f000 bd38 	b.w	80037ee <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002d7e:	4ba6      	ldr	r3, [pc, #664]	; (8003018 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	f040 8532 	bne.w	80037f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8002d8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d92:	61fb      	str	r3, [r7, #28]
      break;
 8002d94:	f000 bd2d 	b.w	80037f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002d98:	4b9f      	ldr	r3, [pc, #636]	; (8003018 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	f040 8527 	bne.w	80037f6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8002da8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002dac:	61fb      	str	r3, [r7, #28]
      break;
 8002dae:	f000 bd22 	b.w	80037f6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002db2:	4b99      	ldr	r3, [pc, #612]	; (8003018 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dbe:	f040 851c 	bne.w	80037fa <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 8002dc2:	4b96      	ldr	r3, [pc, #600]	; (800301c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8002dc4:	61fb      	str	r3, [r7, #28]
      break;
 8002dc6:	f000 bd18 	b.w	80037fa <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dca:	4b93      	ldr	r3, [pc, #588]	; (8003018 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	2b03      	cmp	r3, #3
 8002dd8:	d036      	beq.n	8002e48 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2b03      	cmp	r3, #3
 8002dde:	d840      	bhi.n	8002e62 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d003      	beq.n	8002dee <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d020      	beq.n	8002e2e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8002dec:	e039      	b.n	8002e62 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002dee:	4b8a      	ldr	r3, [pc, #552]	; (8003018 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d116      	bne.n	8002e28 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002dfa:	4b87      	ldr	r3, [pc, #540]	; (8003018 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d005      	beq.n	8002e12 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8002e06:	4b84      	ldr	r3, [pc, #528]	; (8003018 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	091b      	lsrs	r3, r3, #4
 8002e0c:	f003 030f 	and.w	r3, r3, #15
 8002e10:	e005      	b.n	8002e1e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8002e12:	4b81      	ldr	r3, [pc, #516]	; (8003018 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002e14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e18:	0a1b      	lsrs	r3, r3, #8
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	4a80      	ldr	r2, [pc, #512]	; (8003020 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8002e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e24:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002e26:	e01f      	b.n	8002e68 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	61bb      	str	r3, [r7, #24]
      break;
 8002e2c:	e01c      	b.n	8002e68 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002e2e:	4b7a      	ldr	r3, [pc, #488]	; (8003018 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e3a:	d102      	bne.n	8002e42 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8002e3c:	4b79      	ldr	r3, [pc, #484]	; (8003024 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002e3e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002e40:	e012      	b.n	8002e68 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	61bb      	str	r3, [r7, #24]
      break;
 8002e46:	e00f      	b.n	8002e68 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002e48:	4b73      	ldr	r3, [pc, #460]	; (8003018 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e54:	d102      	bne.n	8002e5c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8002e56:	4b74      	ldr	r3, [pc, #464]	; (8003028 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8002e58:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002e5a:	e005      	b.n	8002e68 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	61bb      	str	r3, [r7, #24]
      break;
 8002e60:	e002      	b.n	8002e68 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	61bb      	str	r3, [r7, #24]
      break;
 8002e66:	bf00      	nop
    }

    switch(PeriphClk)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e6e:	f000 80dd 	beq.w	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e78:	f200 84c1 	bhi.w	80037fe <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e82:	f000 80d3 	beq.w	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e8c:	f200 84b7 	bhi.w	80037fe <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e96:	f000 835f 	beq.w	8003558 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea0:	f200 84ad 	bhi.w	80037fe <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eaa:	f000 847e 	beq.w	80037aa <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eb4:	f200 84a3 	bhi.w	80037fe <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ebe:	f000 82cd 	beq.w	800345c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ec8:	f200 8499 	bhi.w	80037fe <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ed2:	f000 80ab 	beq.w	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002edc:	f200 848f 	bhi.w	80037fe <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee6:	f000 8090 	beq.w	800300a <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef0:	f200 8485 	bhi.w	80037fe <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002efa:	d07f      	beq.n	8002ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f02:	f200 847c 	bhi.w	80037fe <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f0c:	f000 8403 	beq.w	8003716 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f16:	f200 8472 	bhi.w	80037fe <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f20:	f000 83af 	beq.w	8003682 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f2a:	f200 8468 	bhi.w	80037fe <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f34:	f000 8379 	beq.w	800362a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f3e:	f200 845e 	bhi.w	80037fe <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b80      	cmp	r3, #128	; 0x80
 8002f46:	f000 8344 	beq.w	80035d2 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b80      	cmp	r3, #128	; 0x80
 8002f4e:	f200 8456 	bhi.w	80037fe <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b20      	cmp	r3, #32
 8002f56:	d84b      	bhi.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 844f 	beq.w	80037fe <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	2b1f      	cmp	r3, #31
 8002f66:	f200 844a 	bhi.w	80037fe <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002f6a:	a201      	add	r2, pc, #4	; (adr r2, 8002f70 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8002f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f70:	08003159 	.word	0x08003159
 8002f74:	080031c7 	.word	0x080031c7
 8002f78:	080037ff 	.word	0x080037ff
 8002f7c:	0800325b 	.word	0x0800325b
 8002f80:	080037ff 	.word	0x080037ff
 8002f84:	080037ff 	.word	0x080037ff
 8002f88:	080037ff 	.word	0x080037ff
 8002f8c:	080032e1 	.word	0x080032e1
 8002f90:	080037ff 	.word	0x080037ff
 8002f94:	080037ff 	.word	0x080037ff
 8002f98:	080037ff 	.word	0x080037ff
 8002f9c:	080037ff 	.word	0x080037ff
 8002fa0:	080037ff 	.word	0x080037ff
 8002fa4:	080037ff 	.word	0x080037ff
 8002fa8:	080037ff 	.word	0x080037ff
 8002fac:	08003359 	.word	0x08003359
 8002fb0:	080037ff 	.word	0x080037ff
 8002fb4:	080037ff 	.word	0x080037ff
 8002fb8:	080037ff 	.word	0x080037ff
 8002fbc:	080037ff 	.word	0x080037ff
 8002fc0:	080037ff 	.word	0x080037ff
 8002fc4:	080037ff 	.word	0x080037ff
 8002fc8:	080037ff 	.word	0x080037ff
 8002fcc:	080037ff 	.word	0x080037ff
 8002fd0:	080037ff 	.word	0x080037ff
 8002fd4:	080037ff 	.word	0x080037ff
 8002fd8:	080037ff 	.word	0x080037ff
 8002fdc:	080037ff 	.word	0x080037ff
 8002fe0:	080037ff 	.word	0x080037ff
 8002fe4:	080037ff 	.word	0x080037ff
 8002fe8:	080037ff 	.word	0x080037ff
 8002fec:	080033db 	.word	0x080033db
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b40      	cmp	r3, #64	; 0x40
 8002ff4:	f000 82c1 	beq.w	800357a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8002ff8:	f000 bc01 	b.w	80037fe <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8002ffc:	69b9      	ldr	r1, [r7, #24]
 8002ffe:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003002:	f000 fde9 	bl	8003bd8 <RCCEx_GetSAIxPeriphCLKFreq>
 8003006:	61f8      	str	r0, [r7, #28]
      break;
 8003008:	e3fa      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800300a:	69b9      	ldr	r1, [r7, #24]
 800300c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003010:	f000 fde2 	bl	8003bd8 <RCCEx_GetSAIxPeriphCLKFreq>
 8003014:	61f8      	str	r0, [r7, #28]
      break;
 8003016:	e3f3      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8003018:	40021000 	.word	0x40021000
 800301c:	0003d090 	.word	0x0003d090
 8003020:	0800631c 	.word	0x0800631c
 8003024:	00f42400 	.word	0x00f42400
 8003028:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800302c:	4ba9      	ldr	r3, [pc, #676]	; (80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800302e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003032:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8003036:	613b      	str	r3, [r7, #16]
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800303e:	d00c      	beq.n	800305a <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003046:	d87f      	bhi.n	8003148 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800304e:	d04e      	beq.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003056:	d01d      	beq.n	8003094 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8003058:	e076      	b.n	8003148 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800305a:	4b9e      	ldr	r3, [pc, #632]	; (80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b02      	cmp	r3, #2
 8003064:	d172      	bne.n	800314c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003066:	4b9b      	ldr	r3, [pc, #620]	; (80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	2b00      	cmp	r3, #0
 8003070:	d005      	beq.n	800307e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8003072:	4b98      	ldr	r3, [pc, #608]	; (80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	091b      	lsrs	r3, r3, #4
 8003078:	f003 030f 	and.w	r3, r3, #15
 800307c:	e005      	b.n	800308a <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 800307e:	4b95      	ldr	r3, [pc, #596]	; (80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003080:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003084:	0a1b      	lsrs	r3, r3, #8
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	4a93      	ldr	r2, [pc, #588]	; (80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800308c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003090:	61fb      	str	r3, [r7, #28]
          break;
 8003092:	e05b      	b.n	800314c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003094:	4b8f      	ldr	r3, [pc, #572]	; (80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030a0:	d156      	bne.n	8003150 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80030a2:	4b8c      	ldr	r3, [pc, #560]	; (80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030ae:	d14f      	bne.n	8003150 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80030b0:	4b88      	ldr	r3, [pc, #544]	; (80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	0a1b      	lsrs	r3, r3, #8
 80030b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030ba:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	fb03 f202 	mul.w	r2, r3, r2
 80030c4:	4b83      	ldr	r3, [pc, #524]	; (80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	091b      	lsrs	r3, r3, #4
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	3301      	adds	r3, #1
 80030d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80030d6:	4b7f      	ldr	r3, [pc, #508]	; (80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	0d5b      	lsrs	r3, r3, #21
 80030dc:	f003 0303 	and.w	r3, r3, #3
 80030e0:	3301      	adds	r3, #1
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ea:	61fb      	str	r3, [r7, #28]
          break;
 80030ec:	e030      	b.n	8003150 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80030ee:	4b79      	ldr	r3, [pc, #484]	; (80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030fa:	d12b      	bne.n	8003154 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80030fc:	4b75      	ldr	r3, [pc, #468]	; (80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003104:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003108:	d124      	bne.n	8003154 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800310a:	4b72      	ldr	r3, [pc, #456]	; (80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	0a1b      	lsrs	r3, r3, #8
 8003110:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003114:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	fb03 f202 	mul.w	r2, r3, r2
 800311e:	4b6d      	ldr	r3, [pc, #436]	; (80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	091b      	lsrs	r3, r3, #4
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	3301      	adds	r3, #1
 800312a:	fbb2 f3f3 	udiv	r3, r2, r3
 800312e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003130:	4b68      	ldr	r3, [pc, #416]	; (80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	0d5b      	lsrs	r3, r3, #21
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	3301      	adds	r3, #1
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	fbb2 f3f3 	udiv	r3, r2, r3
 8003144:	61fb      	str	r3, [r7, #28]
          break;
 8003146:	e005      	b.n	8003154 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8003148:	bf00      	nop
 800314a:	e359      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800314c:	bf00      	nop
 800314e:	e357      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003150:	bf00      	nop
 8003152:	e355      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003154:	bf00      	nop
        break;
 8003156:	e353      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003158:	4b5e      	ldr	r3, [pc, #376]	; (80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800315a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315e:	f003 0303 	and.w	r3, r3, #3
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	2b03      	cmp	r3, #3
 8003168:	d827      	bhi.n	80031ba <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 800316a:	a201      	add	r2, pc, #4	; (adr r2, 8003170 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 800316c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003170:	08003181 	.word	0x08003181
 8003174:	08003189 	.word	0x08003189
 8003178:	08003191 	.word	0x08003191
 800317c:	080031a5 	.word	0x080031a5
          frequency = HAL_RCC_GetPCLK2Freq();
 8003180:	f7ff fa7a 	bl	8002678 <HAL_RCC_GetPCLK2Freq>
 8003184:	61f8      	str	r0, [r7, #28]
          break;
 8003186:	e01d      	b.n	80031c4 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8003188:	f7ff f9c8 	bl	800251c <HAL_RCC_GetSysClockFreq>
 800318c:	61f8      	str	r0, [r7, #28]
          break;
 800318e:	e019      	b.n	80031c4 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003190:	4b50      	ldr	r3, [pc, #320]	; (80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800319c:	d10f      	bne.n	80031be <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 800319e:	4b4f      	ldr	r3, [pc, #316]	; (80032dc <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80031a0:	61fb      	str	r3, [r7, #28]
          break;
 80031a2:	e00c      	b.n	80031be <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80031a4:	4b4b      	ldr	r3, [pc, #300]	; (80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80031a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d107      	bne.n	80031c2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 80031b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031b6:	61fb      	str	r3, [r7, #28]
          break;
 80031b8:	e003      	b.n	80031c2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 80031ba:	bf00      	nop
 80031bc:	e320      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80031be:	bf00      	nop
 80031c0:	e31e      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80031c2:	bf00      	nop
        break;
 80031c4:	e31c      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80031c6:	4b43      	ldr	r3, [pc, #268]	; (80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80031c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031cc:	f003 030c 	and.w	r3, r3, #12
 80031d0:	613b      	str	r3, [r7, #16]
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	2b0c      	cmp	r3, #12
 80031d6:	d83a      	bhi.n	800324e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80031d8:	a201      	add	r2, pc, #4	; (adr r2, 80031e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 80031da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031de:	bf00      	nop
 80031e0:	08003215 	.word	0x08003215
 80031e4:	0800324f 	.word	0x0800324f
 80031e8:	0800324f 	.word	0x0800324f
 80031ec:	0800324f 	.word	0x0800324f
 80031f0:	0800321d 	.word	0x0800321d
 80031f4:	0800324f 	.word	0x0800324f
 80031f8:	0800324f 	.word	0x0800324f
 80031fc:	0800324f 	.word	0x0800324f
 8003200:	08003225 	.word	0x08003225
 8003204:	0800324f 	.word	0x0800324f
 8003208:	0800324f 	.word	0x0800324f
 800320c:	0800324f 	.word	0x0800324f
 8003210:	08003239 	.word	0x08003239
          frequency = HAL_RCC_GetPCLK1Freq();
 8003214:	f7ff fa1a 	bl	800264c <HAL_RCC_GetPCLK1Freq>
 8003218:	61f8      	str	r0, [r7, #28]
          break;
 800321a:	e01d      	b.n	8003258 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 800321c:	f7ff f97e 	bl	800251c <HAL_RCC_GetSysClockFreq>
 8003220:	61f8      	str	r0, [r7, #28]
          break;
 8003222:	e019      	b.n	8003258 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003224:	4b2b      	ldr	r3, [pc, #172]	; (80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800322c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003230:	d10f      	bne.n	8003252 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8003232:	4b2a      	ldr	r3, [pc, #168]	; (80032dc <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8003234:	61fb      	str	r3, [r7, #28]
          break;
 8003236:	e00c      	b.n	8003252 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003238:	4b26      	ldr	r3, [pc, #152]	; (80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800323a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b02      	cmp	r3, #2
 8003244:	d107      	bne.n	8003256 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8003246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800324a:	61fb      	str	r3, [r7, #28]
          break;
 800324c:	e003      	b.n	8003256 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 800324e:	bf00      	nop
 8003250:	e2d6      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003252:	bf00      	nop
 8003254:	e2d4      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003256:	bf00      	nop
        break;
 8003258:	e2d2      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800325a:	4b1e      	ldr	r3, [pc, #120]	; (80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800325c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003260:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003264:	613b      	str	r3, [r7, #16]
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	2b30      	cmp	r3, #48	; 0x30
 800326a:	d021      	beq.n	80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	2b30      	cmp	r3, #48	; 0x30
 8003270:	d829      	bhi.n	80032c6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	2b20      	cmp	r3, #32
 8003276:	d011      	beq.n	800329c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	2b20      	cmp	r3, #32
 800327c:	d823      	bhi.n	80032c6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	2b10      	cmp	r3, #16
 8003288:	d004      	beq.n	8003294 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 800328a:	e01c      	b.n	80032c6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800328c:	f7ff f9de 	bl	800264c <HAL_RCC_GetPCLK1Freq>
 8003290:	61f8      	str	r0, [r7, #28]
          break;
 8003292:	e01d      	b.n	80032d0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8003294:	f7ff f942 	bl	800251c <HAL_RCC_GetSysClockFreq>
 8003298:	61f8      	str	r0, [r7, #28]
          break;
 800329a:	e019      	b.n	80032d0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800329c:	4b0d      	ldr	r3, [pc, #52]	; (80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a8:	d10f      	bne.n	80032ca <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 80032aa:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80032ac:	61fb      	str	r3, [r7, #28]
          break;
 80032ae:	e00c      	b.n	80032ca <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80032b0:	4b08      	ldr	r3, [pc, #32]	; (80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80032b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d107      	bne.n	80032ce <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 80032be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032c2:	61fb      	str	r3, [r7, #28]
          break;
 80032c4:	e003      	b.n	80032ce <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 80032c6:	bf00      	nop
 80032c8:	e29a      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80032ca:	bf00      	nop
 80032cc:	e298      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80032ce:	bf00      	nop
        break;
 80032d0:	e296      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80032d2:	bf00      	nop
 80032d4:	40021000 	.word	0x40021000
 80032d8:	0800631c 	.word	0x0800631c
 80032dc:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80032e0:	4b9b      	ldr	r3, [pc, #620]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80032e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	2bc0      	cmp	r3, #192	; 0xc0
 80032f0:	d021      	beq.n	8003336 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	2bc0      	cmp	r3, #192	; 0xc0
 80032f6:	d829      	bhi.n	800334c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	2b80      	cmp	r3, #128	; 0x80
 80032fc:	d011      	beq.n	8003322 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	2b80      	cmp	r3, #128	; 0x80
 8003302:	d823      	bhi.n	800334c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	2b40      	cmp	r3, #64	; 0x40
 800330e:	d004      	beq.n	800331a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8003310:	e01c      	b.n	800334c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003312:	f7ff f99b 	bl	800264c <HAL_RCC_GetPCLK1Freq>
 8003316:	61f8      	str	r0, [r7, #28]
          break;
 8003318:	e01d      	b.n	8003356 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 800331a:	f7ff f8ff 	bl	800251c <HAL_RCC_GetSysClockFreq>
 800331e:	61f8      	str	r0, [r7, #28]
          break;
 8003320:	e019      	b.n	8003356 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003322:	4b8b      	ldr	r3, [pc, #556]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800332a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800332e:	d10f      	bne.n	8003350 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8003330:	4b88      	ldr	r3, [pc, #544]	; (8003554 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003332:	61fb      	str	r3, [r7, #28]
          break;
 8003334:	e00c      	b.n	8003350 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003336:	4b86      	ldr	r3, [pc, #536]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b02      	cmp	r3, #2
 8003342:	d107      	bne.n	8003354 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8003344:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003348:	61fb      	str	r3, [r7, #28]
          break;
 800334a:	e003      	b.n	8003354 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 800334c:	bf00      	nop
 800334e:	e257      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003350:	bf00      	nop
 8003352:	e255      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003354:	bf00      	nop
        break;
 8003356:	e253      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8003358:	4b7d      	ldr	r3, [pc, #500]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800335a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003362:	613b      	str	r3, [r7, #16]
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800336a:	d025      	beq.n	80033b8 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003372:	d82c      	bhi.n	80033ce <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800337a:	d013      	beq.n	80033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003382:	d824      	bhi.n	80033ce <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d004      	beq.n	8003394 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003390:	d004      	beq.n	800339c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8003392:	e01c      	b.n	80033ce <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003394:	f7ff f95a 	bl	800264c <HAL_RCC_GetPCLK1Freq>
 8003398:	61f8      	str	r0, [r7, #28]
          break;
 800339a:	e01d      	b.n	80033d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 800339c:	f7ff f8be 	bl	800251c <HAL_RCC_GetSysClockFreq>
 80033a0:	61f8      	str	r0, [r7, #28]
          break;
 80033a2:	e019      	b.n	80033d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80033a4:	4b6a      	ldr	r3, [pc, #424]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033b0:	d10f      	bne.n	80033d2 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 80033b2:	4b68      	ldr	r3, [pc, #416]	; (8003554 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80033b4:	61fb      	str	r3, [r7, #28]
          break;
 80033b6:	e00c      	b.n	80033d2 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80033b8:	4b65      	ldr	r3, [pc, #404]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80033ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d107      	bne.n	80033d6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 80033c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ca:	61fb      	str	r3, [r7, #28]
          break;
 80033cc:	e003      	b.n	80033d6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 80033ce:	bf00      	nop
 80033d0:	e216      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80033d2:	bf00      	nop
 80033d4:	e214      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80033d6:	bf00      	nop
        break;
 80033d8:	e212      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80033da:	4b5d      	ldr	r3, [pc, #372]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80033dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033ec:	d025      	beq.n	800343a <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033f4:	d82c      	bhi.n	8003450 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033fc:	d013      	beq.n	8003426 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003404:	d824      	bhi.n	8003450 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d004      	beq.n	8003416 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003412:	d004      	beq.n	800341e <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8003414:	e01c      	b.n	8003450 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003416:	f7ff f919 	bl	800264c <HAL_RCC_GetPCLK1Freq>
 800341a:	61f8      	str	r0, [r7, #28]
          break;
 800341c:	e01d      	b.n	800345a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 800341e:	f7ff f87d 	bl	800251c <HAL_RCC_GetSysClockFreq>
 8003422:	61f8      	str	r0, [r7, #28]
          break;
 8003424:	e019      	b.n	800345a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003426:	4b4a      	ldr	r3, [pc, #296]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800342e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003432:	d10f      	bne.n	8003454 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8003434:	4b47      	ldr	r3, [pc, #284]	; (8003554 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003436:	61fb      	str	r3, [r7, #28]
          break;
 8003438:	e00c      	b.n	8003454 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800343a:	4b45      	ldr	r3, [pc, #276]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800343c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b02      	cmp	r3, #2
 8003446:	d107      	bne.n	8003458 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8003448:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800344c:	61fb      	str	r3, [r7, #28]
          break;
 800344e:	e003      	b.n	8003458 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8003450:	bf00      	nop
 8003452:	e1d5      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003454:	bf00      	nop
 8003456:	e1d3      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003458:	bf00      	nop
        break;
 800345a:	e1d1      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800345c:	4b3c      	ldr	r3, [pc, #240]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800345e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003462:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003466:	613b      	str	r3, [r7, #16]
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800346e:	d00c      	beq.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003476:	d864      	bhi.n	8003542 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800347e:	d008      	beq.n	8003492 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003486:	d030      	beq.n	80034ea <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8003488:	e05b      	b.n	8003542 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 800348a:	f7ff f847 	bl	800251c <HAL_RCC_GetSysClockFreq>
 800348e:	61f8      	str	r0, [r7, #28]
          break;
 8003490:	e05c      	b.n	800354c <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8003492:	4b2f      	ldr	r3, [pc, #188]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800349a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800349e:	d152      	bne.n	8003546 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 80034a0:	4b2b      	ldr	r3, [pc, #172]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d04c      	beq.n	8003546 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80034ac:	4b28      	ldr	r3, [pc, #160]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	0a1b      	lsrs	r3, r3, #8
 80034b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034b6:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	fb03 f202 	mul.w	r2, r3, r2
 80034c0:	4b23      	ldr	r3, [pc, #140]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	091b      	lsrs	r3, r3, #4
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	3301      	adds	r3, #1
 80034cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d0:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80034d2:	4b1f      	ldr	r3, [pc, #124]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	0e5b      	lsrs	r3, r3, #25
 80034d8:	f003 0303 	and.w	r3, r3, #3
 80034dc:	3301      	adds	r3, #1
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e6:	61fb      	str	r3, [r7, #28]
          break;
 80034e8:	e02d      	b.n	8003546 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 80034ea:	4b19      	ldr	r3, [pc, #100]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034f6:	d128      	bne.n	800354a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80034f8:	4b15      	ldr	r3, [pc, #84]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d022      	beq.n	800354a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8003504:	4b12      	ldr	r3, [pc, #72]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	0a1b      	lsrs	r3, r3, #8
 800350a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800350e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	fb03 f202 	mul.w	r2, r3, r2
 8003518:	4b0d      	ldr	r3, [pc, #52]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	091b      	lsrs	r3, r3, #4
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	3301      	adds	r3, #1
 8003524:	fbb2 f3f3 	udiv	r3, r2, r3
 8003528:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800352a:	4b09      	ldr	r3, [pc, #36]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	0e5b      	lsrs	r3, r3, #25
 8003530:	f003 0303 	and.w	r3, r3, #3
 8003534:	3301      	adds	r3, #1
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	fbb2 f3f3 	udiv	r3, r2, r3
 800353e:	61fb      	str	r3, [r7, #28]
          break;
 8003540:	e003      	b.n	800354a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8003542:	bf00      	nop
 8003544:	e15c      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003546:	bf00      	nop
 8003548:	e15a      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800354a:	bf00      	nop
        break;
 800354c:	e158      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800354e:	bf00      	nop
 8003550:	40021000 	.word	0x40021000
 8003554:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8003558:	4b9d      	ldr	r3, [pc, #628]	; (80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800355a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003562:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d103      	bne.n	8003572 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 800356a:	f7ff f885 	bl	8002678 <HAL_RCC_GetPCLK2Freq>
 800356e:	61f8      	str	r0, [r7, #28]
        break;
 8003570:	e146      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8003572:	f7fe ffd3 	bl	800251c <HAL_RCC_GetSysClockFreq>
 8003576:	61f8      	str	r0, [r7, #28]
        break;
 8003578:	e142      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800357a:	4b95      	ldr	r3, [pc, #596]	; (80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800357c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003580:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003584:	613b      	str	r3, [r7, #16]
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800358c:	d013      	beq.n	80035b6 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003594:	d819      	bhi.n	80035ca <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d004      	beq.n	80035a6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a2:	d004      	beq.n	80035ae <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 80035a4:	e011      	b.n	80035ca <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 80035a6:	f7ff f851 	bl	800264c <HAL_RCC_GetPCLK1Freq>
 80035aa:	61f8      	str	r0, [r7, #28]
          break;
 80035ac:	e010      	b.n	80035d0 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 80035ae:	f7fe ffb5 	bl	800251c <HAL_RCC_GetSysClockFreq>
 80035b2:	61f8      	str	r0, [r7, #28]
          break;
 80035b4:	e00c      	b.n	80035d0 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80035b6:	4b86      	ldr	r3, [pc, #536]	; (80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035c2:	d104      	bne.n	80035ce <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 80035c4:	4b83      	ldr	r3, [pc, #524]	; (80037d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80035c6:	61fb      	str	r3, [r7, #28]
          break;
 80035c8:	e001      	b.n	80035ce <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 80035ca:	bf00      	nop
 80035cc:	e118      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80035ce:	bf00      	nop
        break;
 80035d0:	e116      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80035d2:	4b7f      	ldr	r3, [pc, #508]	; (80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80035d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035e4:	d013      	beq.n	800360e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ec:	d819      	bhi.n	8003622 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d004      	beq.n	80035fe <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035fa:	d004      	beq.n	8003606 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 80035fc:	e011      	b.n	8003622 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 80035fe:	f7ff f825 	bl	800264c <HAL_RCC_GetPCLK1Freq>
 8003602:	61f8      	str	r0, [r7, #28]
          break;
 8003604:	e010      	b.n	8003628 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003606:	f7fe ff89 	bl	800251c <HAL_RCC_GetSysClockFreq>
 800360a:	61f8      	str	r0, [r7, #28]
          break;
 800360c:	e00c      	b.n	8003628 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800360e:	4b70      	ldr	r3, [pc, #448]	; (80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800361a:	d104      	bne.n	8003626 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 800361c:	4b6d      	ldr	r3, [pc, #436]	; (80037d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800361e:	61fb      	str	r3, [r7, #28]
          break;
 8003620:	e001      	b.n	8003626 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8003622:	bf00      	nop
 8003624:	e0ec      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003626:	bf00      	nop
        break;
 8003628:	e0ea      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800362a:	4b69      	ldr	r3, [pc, #420]	; (80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800362c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003630:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003634:	613b      	str	r3, [r7, #16]
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800363c:	d013      	beq.n	8003666 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003644:	d819      	bhi.n	800367a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d004      	beq.n	8003656 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003652:	d004      	beq.n	800365e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8003654:	e011      	b.n	800367a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003656:	f7fe fff9 	bl	800264c <HAL_RCC_GetPCLK1Freq>
 800365a:	61f8      	str	r0, [r7, #28]
          break;
 800365c:	e010      	b.n	8003680 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 800365e:	f7fe ff5d 	bl	800251c <HAL_RCC_GetSysClockFreq>
 8003662:	61f8      	str	r0, [r7, #28]
          break;
 8003664:	e00c      	b.n	8003680 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003666:	4b5a      	ldr	r3, [pc, #360]	; (80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800366e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003672:	d104      	bne.n	800367e <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8003674:	4b57      	ldr	r3, [pc, #348]	; (80037d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003676:	61fb      	str	r3, [r7, #28]
          break;
 8003678:	e001      	b.n	800367e <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 800367a:	bf00      	nop
 800367c:	e0c0      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800367e:	bf00      	nop
        break;
 8003680:	e0be      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003682:	4b53      	ldr	r3, [pc, #332]	; (80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003688:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800368c:	613b      	str	r3, [r7, #16]
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003694:	d02c      	beq.n	80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800369c:	d833      	bhi.n	8003706 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80036a4:	d01a      	beq.n	80036dc <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80036ac:	d82b      	bhi.n	8003706 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d004      	beq.n	80036be <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036ba:	d004      	beq.n	80036c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 80036bc:	e023      	b.n	8003706 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 80036be:	f7fe ffc5 	bl	800264c <HAL_RCC_GetPCLK1Freq>
 80036c2:	61f8      	str	r0, [r7, #28]
          break;
 80036c4:	e026      	b.n	8003714 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80036c6:	4b42      	ldr	r3, [pc, #264]	; (80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80036c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d11a      	bne.n	800370a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 80036d4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80036d8:	61fb      	str	r3, [r7, #28]
          break;
 80036da:	e016      	b.n	800370a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80036dc:	4b3c      	ldr	r3, [pc, #240]	; (80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e8:	d111      	bne.n	800370e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 80036ea:	4b3a      	ldr	r3, [pc, #232]	; (80037d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80036ec:	61fb      	str	r3, [r7, #28]
          break;
 80036ee:	e00e      	b.n	800370e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80036f0:	4b37      	ldr	r3, [pc, #220]	; (80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80036f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d109      	bne.n	8003712 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 80036fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003702:	61fb      	str	r3, [r7, #28]
          break;
 8003704:	e005      	b.n	8003712 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8003706:	bf00      	nop
 8003708:	e07a      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800370a:	bf00      	nop
 800370c:	e078      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800370e:	bf00      	nop
 8003710:	e076      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003712:	bf00      	nop
        break;
 8003714:	e074      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003716:	4b2e      	ldr	r3, [pc, #184]	; (80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003720:	613b      	str	r3, [r7, #16]
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003728:	d02c      	beq.n	8003784 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003730:	d833      	bhi.n	800379a <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003738:	d01a      	beq.n	8003770 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003740:	d82b      	bhi.n	800379a <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d004      	beq.n	8003752 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800374e:	d004      	beq.n	800375a <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8003750:	e023      	b.n	800379a <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003752:	f7fe ff7b 	bl	800264c <HAL_RCC_GetPCLK1Freq>
 8003756:	61f8      	str	r0, [r7, #28]
          break;
 8003758:	e026      	b.n	80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800375a:	4b1d      	ldr	r3, [pc, #116]	; (80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800375c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b02      	cmp	r3, #2
 8003766:	d11a      	bne.n	800379e <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8003768:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800376c:	61fb      	str	r3, [r7, #28]
          break;
 800376e:	e016      	b.n	800379e <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003770:	4b17      	ldr	r3, [pc, #92]	; (80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800377c:	d111      	bne.n	80037a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 800377e:	4b15      	ldr	r3, [pc, #84]	; (80037d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003780:	61fb      	str	r3, [r7, #28]
          break;
 8003782:	e00e      	b.n	80037a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003784:	4b12      	ldr	r3, [pc, #72]	; (80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b02      	cmp	r3, #2
 8003790:	d109      	bne.n	80037a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8003792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003796:	61fb      	str	r3, [r7, #28]
          break;
 8003798:	e005      	b.n	80037a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 800379a:	bf00      	nop
 800379c:	e030      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800379e:	bf00      	nop
 80037a0:	e02e      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80037a2:	bf00      	nop
 80037a4:	e02c      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80037a6:	bf00      	nop
        break;
 80037a8:	e02a      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 80037aa:	4b09      	ldr	r3, [pc, #36]	; (80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80037ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80037b4:	613b      	str	r3, [r7, #16]
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d004      	beq.n	80037c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c2:	d009      	beq.n	80037d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 80037c4:	e012      	b.n	80037ec <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 80037c6:	f7fe ff41 	bl	800264c <HAL_RCC_GetPCLK1Freq>
 80037ca:	61f8      	str	r0, [r7, #28]
          break;
 80037cc:	e00e      	b.n	80037ec <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 80037ce:	bf00      	nop
 80037d0:	40021000 	.word	0x40021000
 80037d4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80037d8:	4b0c      	ldr	r3, [pc, #48]	; (800380c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e4:	d101      	bne.n	80037ea <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 80037e6:	4b0a      	ldr	r3, [pc, #40]	; (8003810 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80037e8:	61fb      	str	r3, [r7, #28]
          break;
 80037ea:	bf00      	nop
        break;
 80037ec:	e008      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80037ee:	bf00      	nop
 80037f0:	e006      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80037f2:	bf00      	nop
 80037f4:	e004      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80037f6:	bf00      	nop
 80037f8:	e002      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80037fa:	bf00      	nop
 80037fc:	e000      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80037fe:	bf00      	nop
    }
  }

  return(frequency);
 8003800:	69fb      	ldr	r3, [r7, #28]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3720      	adds	r7, #32
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40021000 	.word	0x40021000
 8003810:	00f42400 	.word	0x00f42400

08003814 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003818:	4b05      	ldr	r3, [pc, #20]	; (8003830 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a04      	ldr	r2, [pc, #16]	; (8003830 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800381e:	f043 0304 	orr.w	r3, r3, #4
 8003822:	6013      	str	r3, [r2, #0]
}
 8003824:	bf00      	nop
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	40021000 	.word	0x40021000

08003834 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800383e:	2300      	movs	r3, #0
 8003840:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003842:	4b75      	ldr	r3, [pc, #468]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d018      	beq.n	8003880 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800384e:	4b72      	ldr	r3, [pc, #456]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f003 0203 	and.w	r2, r3, #3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	429a      	cmp	r2, r3
 800385c:	d10d      	bne.n	800387a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
       ||
 8003862:	2b00      	cmp	r3, #0
 8003864:	d009      	beq.n	800387a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003866:	4b6c      	ldr	r3, [pc, #432]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	091b      	lsrs	r3, r3, #4
 800386c:	f003 0307 	and.w	r3, r3, #7
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
       ||
 8003876:	429a      	cmp	r2, r3
 8003878:	d047      	beq.n	800390a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	73fb      	strb	r3, [r7, #15]
 800387e:	e044      	b.n	800390a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b03      	cmp	r3, #3
 8003886:	d018      	beq.n	80038ba <RCCEx_PLLSAI1_Config+0x86>
 8003888:	2b03      	cmp	r3, #3
 800388a:	d825      	bhi.n	80038d8 <RCCEx_PLLSAI1_Config+0xa4>
 800388c:	2b01      	cmp	r3, #1
 800388e:	d002      	beq.n	8003896 <RCCEx_PLLSAI1_Config+0x62>
 8003890:	2b02      	cmp	r3, #2
 8003892:	d009      	beq.n	80038a8 <RCCEx_PLLSAI1_Config+0x74>
 8003894:	e020      	b.n	80038d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003896:	4b60      	ldr	r3, [pc, #384]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d11d      	bne.n	80038de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038a6:	e01a      	b.n	80038de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038a8:	4b5b      	ldr	r3, [pc, #364]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d116      	bne.n	80038e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038b8:	e013      	b.n	80038e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038ba:	4b57      	ldr	r3, [pc, #348]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10f      	bne.n	80038e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038c6:	4b54      	ldr	r3, [pc, #336]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d109      	bne.n	80038e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038d6:	e006      	b.n	80038e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	73fb      	strb	r3, [r7, #15]
      break;
 80038dc:	e004      	b.n	80038e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038de:	bf00      	nop
 80038e0:	e002      	b.n	80038e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038e2:	bf00      	nop
 80038e4:	e000      	b.n	80038e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10d      	bne.n	800390a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038ee:	4b4a      	ldr	r3, [pc, #296]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6819      	ldr	r1, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	3b01      	subs	r3, #1
 8003900:	011b      	lsls	r3, r3, #4
 8003902:	430b      	orrs	r3, r1
 8003904:	4944      	ldr	r1, [pc, #272]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003906:	4313      	orrs	r3, r2
 8003908:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800390a:	7bfb      	ldrb	r3, [r7, #15]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d17d      	bne.n	8003a0c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003910:	4b41      	ldr	r3, [pc, #260]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a40      	ldr	r2, [pc, #256]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003916:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800391a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800391c:	f7fd fbee 	bl	80010fc <HAL_GetTick>
 8003920:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003922:	e009      	b.n	8003938 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003924:	f7fd fbea 	bl	80010fc <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d902      	bls.n	8003938 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	73fb      	strb	r3, [r7, #15]
        break;
 8003936:	e005      	b.n	8003944 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003938:	4b37      	ldr	r3, [pc, #220]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1ef      	bne.n	8003924 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003944:	7bfb      	ldrb	r3, [r7, #15]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d160      	bne.n	8003a0c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d111      	bne.n	8003974 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003950:	4b31      	ldr	r3, [pc, #196]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6892      	ldr	r2, [r2, #8]
 8003960:	0211      	lsls	r1, r2, #8
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	68d2      	ldr	r2, [r2, #12]
 8003966:	0912      	lsrs	r2, r2, #4
 8003968:	0452      	lsls	r2, r2, #17
 800396a:	430a      	orrs	r2, r1
 800396c:	492a      	ldr	r1, [pc, #168]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800396e:	4313      	orrs	r3, r2
 8003970:	610b      	str	r3, [r1, #16]
 8003972:	e027      	b.n	80039c4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d112      	bne.n	80039a0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800397a:	4b27      	ldr	r3, [pc, #156]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003982:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6892      	ldr	r2, [r2, #8]
 800398a:	0211      	lsls	r1, r2, #8
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6912      	ldr	r2, [r2, #16]
 8003990:	0852      	lsrs	r2, r2, #1
 8003992:	3a01      	subs	r2, #1
 8003994:	0552      	lsls	r2, r2, #21
 8003996:	430a      	orrs	r2, r1
 8003998:	491f      	ldr	r1, [pc, #124]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800399a:	4313      	orrs	r3, r2
 800399c:	610b      	str	r3, [r1, #16]
 800399e:	e011      	b.n	80039c4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039a0:	4b1d      	ldr	r3, [pc, #116]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80039a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6892      	ldr	r2, [r2, #8]
 80039b0:	0211      	lsls	r1, r2, #8
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6952      	ldr	r2, [r2, #20]
 80039b6:	0852      	lsrs	r2, r2, #1
 80039b8:	3a01      	subs	r2, #1
 80039ba:	0652      	lsls	r2, r2, #25
 80039bc:	430a      	orrs	r2, r1
 80039be:	4916      	ldr	r1, [pc, #88]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039c4:	4b14      	ldr	r3, [pc, #80]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a13      	ldr	r2, [pc, #76]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d0:	f7fd fb94 	bl	80010fc <HAL_GetTick>
 80039d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039d6:	e009      	b.n	80039ec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039d8:	f7fd fb90 	bl	80010fc <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d902      	bls.n	80039ec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	73fb      	strb	r3, [r7, #15]
          break;
 80039ea:	e005      	b.n	80039f8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039ec:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d0ef      	beq.n	80039d8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d106      	bne.n	8003a0c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039fe:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a00:	691a      	ldr	r2, [r3, #16]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	4904      	ldr	r1, [pc, #16]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40021000 	.word	0x40021000

08003a1c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a26:	2300      	movs	r3, #0
 8003a28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a2a:	4b6a      	ldr	r3, [pc, #424]	; (8003bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d018      	beq.n	8003a68 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a36:	4b67      	ldr	r3, [pc, #412]	; (8003bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f003 0203 	and.w	r2, r3, #3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d10d      	bne.n	8003a62 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
       ||
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d009      	beq.n	8003a62 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003a4e:	4b61      	ldr	r3, [pc, #388]	; (8003bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	091b      	lsrs	r3, r3, #4
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	1c5a      	adds	r2, r3, #1
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
       ||
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d047      	beq.n	8003af2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	73fb      	strb	r3, [r7, #15]
 8003a66:	e044      	b.n	8003af2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b03      	cmp	r3, #3
 8003a6e:	d018      	beq.n	8003aa2 <RCCEx_PLLSAI2_Config+0x86>
 8003a70:	2b03      	cmp	r3, #3
 8003a72:	d825      	bhi.n	8003ac0 <RCCEx_PLLSAI2_Config+0xa4>
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d002      	beq.n	8003a7e <RCCEx_PLLSAI2_Config+0x62>
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d009      	beq.n	8003a90 <RCCEx_PLLSAI2_Config+0x74>
 8003a7c:	e020      	b.n	8003ac0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a7e:	4b55      	ldr	r3, [pc, #340]	; (8003bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d11d      	bne.n	8003ac6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a8e:	e01a      	b.n	8003ac6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a90:	4b50      	ldr	r3, [pc, #320]	; (8003bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d116      	bne.n	8003aca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aa0:	e013      	b.n	8003aca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003aa2:	4b4c      	ldr	r3, [pc, #304]	; (8003bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10f      	bne.n	8003ace <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003aae:	4b49      	ldr	r3, [pc, #292]	; (8003bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d109      	bne.n	8003ace <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003abe:	e006      	b.n	8003ace <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ac4:	e004      	b.n	8003ad0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ac6:	bf00      	nop
 8003ac8:	e002      	b.n	8003ad0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003aca:	bf00      	nop
 8003acc:	e000      	b.n	8003ad0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ace:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10d      	bne.n	8003af2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ad6:	4b3f      	ldr	r3, [pc, #252]	; (8003bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6819      	ldr	r1, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	011b      	lsls	r3, r3, #4
 8003aea:	430b      	orrs	r3, r1
 8003aec:	4939      	ldr	r1, [pc, #228]	; (8003bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d167      	bne.n	8003bc8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003af8:	4b36      	ldr	r3, [pc, #216]	; (8003bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a35      	ldr	r2, [pc, #212]	; (8003bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003afe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b04:	f7fd fafa 	bl	80010fc <HAL_GetTick>
 8003b08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b0a:	e009      	b.n	8003b20 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b0c:	f7fd faf6 	bl	80010fc <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d902      	bls.n	8003b20 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	73fb      	strb	r3, [r7, #15]
        break;
 8003b1e:	e005      	b.n	8003b2c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b20:	4b2c      	ldr	r3, [pc, #176]	; (8003bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1ef      	bne.n	8003b0c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d14a      	bne.n	8003bc8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d111      	bne.n	8003b5c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b38:	4b26      	ldr	r3, [pc, #152]	; (8003bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6892      	ldr	r2, [r2, #8]
 8003b48:	0211      	lsls	r1, r2, #8
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	68d2      	ldr	r2, [r2, #12]
 8003b4e:	0912      	lsrs	r2, r2, #4
 8003b50:	0452      	lsls	r2, r2, #17
 8003b52:	430a      	orrs	r2, r1
 8003b54:	491f      	ldr	r1, [pc, #124]	; (8003bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	614b      	str	r3, [r1, #20]
 8003b5a:	e011      	b.n	8003b80 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b5c:	4b1d      	ldr	r3, [pc, #116]	; (8003bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	6892      	ldr	r2, [r2, #8]
 8003b6c:	0211      	lsls	r1, r2, #8
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6912      	ldr	r2, [r2, #16]
 8003b72:	0852      	lsrs	r2, r2, #1
 8003b74:	3a01      	subs	r2, #1
 8003b76:	0652      	lsls	r2, r2, #25
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	4916      	ldr	r1, [pc, #88]	; (8003bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b80:	4b14      	ldr	r3, [pc, #80]	; (8003bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a13      	ldr	r2, [pc, #76]	; (8003bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b8c:	f7fd fab6 	bl	80010fc <HAL_GetTick>
 8003b90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b92:	e009      	b.n	8003ba8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b94:	f7fd fab2 	bl	80010fc <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d902      	bls.n	8003ba8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	73fb      	strb	r3, [r7, #15]
          break;
 8003ba6:	e005      	b.n	8003bb4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ba8:	4b0a      	ldr	r3, [pc, #40]	; (8003bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0ef      	beq.n	8003b94 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d106      	bne.n	8003bc8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003bba:	4b06      	ldr	r3, [pc, #24]	; (8003bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bbc:	695a      	ldr	r2, [r3, #20]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	4904      	ldr	r1, [pc, #16]	; (8003bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40021000 	.word	0x40021000

08003bd8 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b089      	sub	sp, #36	; 0x24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bf4:	d10c      	bne.n	8003c10 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8003bf6:	4b6e      	ldr	r3, [pc, #440]	; (8003db0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003c00:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c08:	d112      	bne.n	8003c30 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8003c0a:	4b6a      	ldr	r3, [pc, #424]	; (8003db4 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8003c0c:	61fb      	str	r3, [r7, #28]
 8003c0e:	e00f      	b.n	8003c30 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c16:	d10b      	bne.n	8003c30 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8003c18:	4b65      	ldr	r3, [pc, #404]	; (8003db0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8003c22:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c2a:	d101      	bne.n	8003c30 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8003c2c:	4b61      	ldr	r3, [pc, #388]	; (8003db4 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8003c2e:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f040 80b4 	bne.w	8003da0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c42:	d003      	beq.n	8003c4c <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c4a:	d135      	bne.n	8003cb8 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8003c4c:	4b58      	ldr	r3, [pc, #352]	; (8003db0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c58:	f040 80a1 	bne.w	8003d9e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8003c5c:	4b54      	ldr	r3, [pc, #336]	; (8003db0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 809a 	beq.w	8003d9e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003c6a:	4b51      	ldr	r3, [pc, #324]	; (8003db0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	091b      	lsrs	r3, r3, #4
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	3301      	adds	r3, #1
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003c7e:	4b4c      	ldr	r3, [pc, #304]	; (8003db0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	0a1b      	lsrs	r3, r3, #8
 8003c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c88:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10a      	bne.n	8003ca6 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8003c90:	4b47      	ldr	r3, [pc, #284]	; (8003db0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8003c9c:	2311      	movs	r3, #17
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	e001      	b.n	8003ca6 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8003ca2:	2307      	movs	r3, #7
 8003ca4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	fb03 f202 	mul.w	r2, r3, r2
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb4:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8003cb6:	e072      	b.n	8003d9e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d133      	bne.n	8003d26 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8003cbe:	4b3c      	ldr	r3, [pc, #240]	; (8003db0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cca:	d169      	bne.n	8003da0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8003ccc:	4b38      	ldr	r3, [pc, #224]	; (8003db0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d063      	beq.n	8003da0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003cd8:	4b35      	ldr	r3, [pc, #212]	; (8003db0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	091b      	lsrs	r3, r3, #4
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cea:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003cec:	4b30      	ldr	r3, [pc, #192]	; (8003db0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	0a1b      	lsrs	r3, r3, #8
 8003cf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cf6:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10a      	bne.n	8003d14 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8003cfe:	4b2c      	ldr	r3, [pc, #176]	; (8003db0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d002      	beq.n	8003d10 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8003d0a:	2311      	movs	r3, #17
 8003d0c:	617b      	str	r3, [r7, #20]
 8003d0e:	e001      	b.n	8003d14 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8003d10:	2307      	movs	r3, #7
 8003d12:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	fb03 f202 	mul.w	r2, r3, r2
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d22:	61fb      	str	r3, [r7, #28]
 8003d24:	e03c      	b.n	8003da0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d2c:	d003      	beq.n	8003d36 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d34:	d134      	bne.n	8003da0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8003d36:	4b1e      	ldr	r3, [pc, #120]	; (8003db0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d42:	d12d      	bne.n	8003da0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8003d44:	4b1a      	ldr	r3, [pc, #104]	; (8003db0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d027      	beq.n	8003da0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003d50:	4b17      	ldr	r3, [pc, #92]	; (8003db0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	091b      	lsrs	r3, r3, #4
 8003d56:	f003 0307 	and.w	r3, r3, #7
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d62:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8003d64:	4b12      	ldr	r3, [pc, #72]	; (8003db0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	0a1b      	lsrs	r3, r3, #8
 8003d6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d6e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10a      	bne.n	8003d8c <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8003d76:	4b0e      	ldr	r3, [pc, #56]	; (8003db0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8003d82:	2311      	movs	r3, #17
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	e001      	b.n	8003d8c <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8003d88:	2307      	movs	r3, #7
 8003d8a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	fb03 f202 	mul.w	r2, r3, r2
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9a:	61fb      	str	r3, [r7, #28]
 8003d9c:	e000      	b.n	8003da0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8003d9e:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8003da0:	69fb      	ldr	r3, [r7, #28]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3724      	adds	r7, #36	; 0x24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	40021000 	.word	0x40021000
 8003db4:	001fff68 	.word	0x001fff68

08003db8 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
 8003dc4:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d904      	bls.n	8003dd6 <HAL_SAI_InitProtocol+0x1e>
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	3b03      	subs	r3, #3
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d812      	bhi.n	8003dfa <HAL_SAI_InitProtocol+0x42>
 8003dd4:	e008      	b.n	8003de8 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	68b9      	ldr	r1, [r7, #8]
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 fa2b 	bl	8004238 <SAI_InitI2S>
 8003de2:	4603      	mov	r3, r0
 8003de4:	75fb      	strb	r3, [r7, #23]
      break;
 8003de6:	e00b      	b.n	8003e00 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	68b9      	ldr	r1, [r7, #8]
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 fad4 	bl	800439c <SAI_InitPCM>
 8003df4:	4603      	mov	r3, r0
 8003df6:	75fb      	strb	r3, [r7, #23]
      break;
 8003df8:	e002      	b.n	8003e00 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	75fb      	strb	r3, [r7, #23]
      break;
 8003dfe:	bf00      	nop
  }

  if (status == HAL_OK)
 8003e00:	7dfb      	ldrb	r3, [r7, #23]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d104      	bne.n	8003e10 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 f808 	bl	8003e1c <HAL_SAI_Init>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
	...

08003e1c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b088      	sub	sp, #32
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e155      	b.n	80040da <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d106      	bne.n	8003e48 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7fc ff1a 	bl	8000c7c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 fb61 	bl	8004510 <SAI_Disable>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e140      	b.n	80040da <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d00c      	beq.n	8003e82 <HAL_SAI_Init+0x66>
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d80d      	bhi.n	8003e88 <HAL_SAI_Init+0x6c>
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d002      	beq.n	8003e76 <HAL_SAI_Init+0x5a>
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d003      	beq.n	8003e7c <HAL_SAI_Init+0x60>
 8003e74:	e008      	b.n	8003e88 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8003e76:	2300      	movs	r3, #0
 8003e78:	61fb      	str	r3, [r7, #28]
      break;
 8003e7a:	e008      	b.n	8003e8e <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8003e7c:	2310      	movs	r3, #16
 8003e7e:	61fb      	str	r3, [r7, #28]
      break;
 8003e80:	e005      	b.n	8003e8e <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8003e82:	2320      	movs	r3, #32
 8003e84:	61fb      	str	r3, [r7, #28]
      break;
 8003e86:	e002      	b.n	8003e8e <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	61fb      	str	r3, [r7, #28]
      break;
 8003e8c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	2b03      	cmp	r3, #3
 8003e94:	d81d      	bhi.n	8003ed2 <HAL_SAI_Init+0xb6>
 8003e96:	a201      	add	r2, pc, #4	; (adr r2, 8003e9c <HAL_SAI_Init+0x80>)
 8003e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9c:	08003ead 	.word	0x08003ead
 8003ea0:	08003eb3 	.word	0x08003eb3
 8003ea4:	08003ebb 	.word	0x08003ebb
 8003ea8:	08003ec3 	.word	0x08003ec3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8003eac:	2300      	movs	r3, #0
 8003eae:	617b      	str	r3, [r7, #20]
      break;
 8003eb0:	e012      	b.n	8003ed8 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8003eb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003eb6:	617b      	str	r3, [r7, #20]
      break;
 8003eb8:	e00e      	b.n	8003ed8 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8003eba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ebe:	617b      	str	r3, [r7, #20]
      break;
 8003ec0:	e00a      	b.n	8003ed8 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8003ec2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ec6:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	f043 0301 	orr.w	r3, r3, #1
 8003ece:	61fb      	str	r3, [r7, #28]
      break;
 8003ed0:	e002      	b.n	8003ed8 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	617b      	str	r3, [r7, #20]
      break;
 8003ed6:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a81      	ldr	r2, [pc, #516]	; (80040e4 <HAL_SAI_Init+0x2c8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d004      	beq.n	8003eec <HAL_SAI_Init+0xd0>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a80      	ldr	r2, [pc, #512]	; (80040e8 <HAL_SAI_Init+0x2cc>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d103      	bne.n	8003ef4 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8003eec:	4a7f      	ldr	r2, [pc, #508]	; (80040ec <HAL_SAI_Init+0x2d0>)
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	e002      	b.n	8003efa <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8003ef4:	4a7e      	ldr	r2, [pc, #504]	; (80040f0 <HAL_SAI_Init+0x2d4>)
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d041      	beq.n	8003f86 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a77      	ldr	r2, [pc, #476]	; (80040e4 <HAL_SAI_Init+0x2c8>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d004      	beq.n	8003f16 <HAL_SAI_Init+0xfa>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a75      	ldr	r2, [pc, #468]	; (80040e8 <HAL_SAI_Init+0x2cc>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d105      	bne.n	8003f22 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8003f16:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003f1a:	f7fe ff0d 	bl	8002d38 <HAL_RCCEx_GetPeriphCLKFreq>
 8003f1e:	6138      	str	r0, [r7, #16]
 8003f20:	e004      	b.n	8003f2c <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8003f22:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003f26:	f7fe ff07 	bl	8002d38 <HAL_RCCEx_GetPeriphCLKFreq>
 8003f2a:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	461a      	mov	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	025b      	lsls	r3, r3, #9
 8003f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f42:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4a6b      	ldr	r2, [pc, #428]	; (80040f4 <HAL_SAI_Init+0x2d8>)
 8003f48:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4c:	08da      	lsrs	r2, r3, #3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8003f52:	68f9      	ldr	r1, [r7, #12]
 8003f54:	4b67      	ldr	r3, [pc, #412]	; (80040f4 <HAL_SAI_Init+0x2d8>)
 8003f56:	fba3 2301 	umull	r2, r3, r3, r1
 8003f5a:	08da      	lsrs	r2, r3, #3
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4413      	add	r3, r2
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	1aca      	subs	r2, r1, r3
 8003f66:	2a08      	cmp	r2, #8
 8003f68:	d904      	bls.n	8003f74 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d104      	bne.n	8003f86 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	085a      	lsrs	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <HAL_SAI_Init+0x17a>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d109      	bne.n	8003faa <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d101      	bne.n	8003fa2 <HAL_SAI_Init+0x186>
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	e001      	b.n	8003fa6 <HAL_SAI_Init+0x18a>
 8003fa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fa6:	61bb      	str	r3, [r7, #24]
 8003fa8:	e008      	b.n	8003fbc <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d102      	bne.n	8003fb8 <HAL_SAI_Init+0x19c>
 8003fb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fb6:	e000      	b.n	8003fba <HAL_SAI_Init+0x19e>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6819      	ldr	r1, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	4b4c      	ldr	r3, [pc, #304]	; (80040f8 <HAL_SAI_Init+0x2dc>)
 8003fc8:	400b      	ands	r3, r1
 8003fca:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6819      	ldr	r1, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fda:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003fe0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8003ff4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004000:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	051b      	lsls	r3, r3, #20
 8004008:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6812      	ldr	r2, [r2, #0]
 800401c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004020:	f023 030f 	bic.w	r3, r3, #15
 8004024:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6859      	ldr	r1, [r3, #4]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	699a      	ldr	r2, [r3, #24]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004034:	431a      	orrs	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6899      	ldr	r1, [r3, #8]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	4b2b      	ldr	r3, [pc, #172]	; (80040fc <HAL_SAI_Init+0x2e0>)
 8004050:	400b      	ands	r3, r1
 8004052:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6899      	ldr	r1, [r3, #8]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004064:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800406a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8004070:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004076:	3b01      	subs	r3, #1
 8004078:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800407a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	430a      	orrs	r2, r1
 8004082:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68d9      	ldr	r1, [r3, #12]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	f24f 0320 	movw	r3, #61472	; 0xf020
 8004092:	400b      	ands	r3, r1
 8004094:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68d9      	ldr	r1, [r3, #12]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040aa:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80040ac:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b2:	3b01      	subs	r3, #1
 80040b4:	021b      	lsls	r3, r3, #8
 80040b6:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3720      	adds	r7, #32
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	40015404 	.word	0x40015404
 80040e8:	40015424 	.word	0x40015424
 80040ec:	40015400 	.word	0x40015400
 80040f0:	40015800 	.word	0x40015800
 80040f4:	cccccccd 	.word	0xcccccccd
 80040f8:	ff05c010 	.word	0xff05c010
 80040fc:	fff88000 	.word	0xfff88000

08004100 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	4613      	mov	r3, r2
 800410c:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d002      	beq.n	800411a <HAL_SAI_Receive_DMA+0x1a>
 8004114:	88fb      	ldrh	r3, [r7, #6]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e074      	b.n	8004208 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b01      	cmp	r3, #1
 8004128:	d16d      	bne.n	8004206 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004130:	2b01      	cmp	r3, #1
 8004132:	d101      	bne.n	8004138 <HAL_SAI_Receive_DMA+0x38>
 8004134:	2302      	movs	r3, #2
 8004136:	e067      	b.n	8004208 <HAL_SAI_Receive_DMA+0x108>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	88fa      	ldrh	r2, [r7, #6]
 800414a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	88fa      	ldrh	r2, [r7, #6]
 8004152:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2222      	movs	r2, #34	; 0x22
 8004162:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416a:	4a29      	ldr	r2, [pc, #164]	; (8004210 <HAL_SAI_Receive_DMA+0x110>)
 800416c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004172:	4a28      	ldr	r2, [pc, #160]	; (8004214 <HAL_SAI_Receive_DMA+0x114>)
 8004174:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417a:	4a27      	ldr	r2, [pc, #156]	; (8004218 <HAL_SAI_Receive_DMA+0x118>)
 800417c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004182:	2200      	movs	r2, #0
 8004184:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	331c      	adds	r3, #28
 8004190:	4619      	mov	r1, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004196:	461a      	mov	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800419e:	f7fd f983 	bl	80014a8 <HAL_DMA_Start_IT>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d005      	beq.n	80041b4 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e029      	b.n	8004208 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80041b4:	2100      	movs	r1, #0
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 f972 	bl	80044a0 <SAI_InterruptFlag>
 80041bc:	4601      	mov	r1, r0
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	691a      	ldr	r2, [r3, #16]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80041da:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d107      	bne.n	80041fa <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80041f8:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004202:	2300      	movs	r3, #0
 8004204:	e000      	b.n	8004208 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8004206:	2302      	movs	r3, #2
  }
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	080045e3 	.word	0x080045e3
 8004214:	08004585 	.word	0x08004585
 8004218:	080045ff 	.word	0x080045ff

0800421c <HAL_SAI_GetError>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for the specified SAI Block.
  * @retval SAI Error Code
  */
uint32_t HAL_SAI_GetError(const SAI_HandleTypeDef *hsai)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  return hsai->ErrorCode;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800422a:	4618      	mov	r0, r3
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
	...

08004238 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
 8004244:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004246:	2300      	movs	r3, #0
 8004248:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <SAI_InitI2S+0x2e>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2b02      	cmp	r3, #2
 8004264:	d103      	bne.n	800426e <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	63da      	str	r2, [r3, #60]	; 0x3c
 800426c:	e002      	b.n	8004274 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2201      	movs	r2, #1
 8004272:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800427a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004282:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e077      	b.n	800438e <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d107      	bne.n	80042b4 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80042b0:	651a      	str	r2, [r3, #80]	; 0x50
 80042b2:	e006      	b.n	80042c2 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80042ba:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Frame definition */
  switch (datasize)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b03      	cmp	r3, #3
 80042c6:	d84f      	bhi.n	8004368 <SAI_InitI2S+0x130>
 80042c8:	a201      	add	r2, pc, #4	; (adr r2, 80042d0 <SAI_InitI2S+0x98>)
 80042ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ce:	bf00      	nop
 80042d0:	080042e1 	.word	0x080042e1
 80042d4:	08004303 	.word	0x08004303
 80042d8:	08004325 	.word	0x08004325
 80042dc:	08004347 	.word	0x08004347
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2280      	movs	r2, #128	; 0x80
 80042e4:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	085b      	lsrs	r3, r3, #1
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	085b      	lsrs	r3, r3, #1
 80042f4:	011a      	lsls	r2, r3, #4
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2240      	movs	r2, #64	; 0x40
 80042fe:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8004300:	e035      	b.n	800436e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2280      	movs	r2, #128	; 0x80
 8004306:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	085b      	lsrs	r3, r3, #1
 800430c:	019a      	lsls	r2, r3, #6
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	085b      	lsrs	r3, r3, #1
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2280      	movs	r2, #128	; 0x80
 8004320:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8004322:	e024      	b.n	800436e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	22c0      	movs	r2, #192	; 0xc0
 8004328:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	085b      	lsrs	r3, r3, #1
 800432e:	019a      	lsls	r2, r3, #6
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	085b      	lsrs	r3, r3, #1
 8004338:	015a      	lsls	r2, r3, #5
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2280      	movs	r2, #128	; 0x80
 8004342:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8004344:	e013      	b.n	800436e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	22e0      	movs	r2, #224	; 0xe0
 800434a:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	085b      	lsrs	r3, r3, #1
 8004350:	019a      	lsls	r2, r3, #6
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	085b      	lsrs	r3, r3, #1
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2280      	movs	r2, #128	; 0x80
 8004364:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8004366:	e002      	b.n	800436e <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	75fb      	strb	r3, [r7, #23]
      break;
 800436c:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	2b02      	cmp	r3, #2
 8004372:	d10b      	bne.n	800438c <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d102      	bne.n	8004380 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2210      	movs	r2, #16
 800437e:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b02      	cmp	r3, #2
 8004384:	d102      	bne.n	800438c <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2208      	movs	r2, #8
 800438a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  return status;
 800438c:	7dfb      	ldrb	r3, [r7, #23]
}
 800438e:	4618      	mov	r0, r3
 8004390:	371c      	adds	r7, #28
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop

0800439c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
 80043a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043aa:	2300      	movs	r3, #0
 80043ac:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <SAI_InitPCM+0x2e>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d103      	bne.n	80043d2 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2201      	movs	r2, #1
 80043ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80043d0:	e002      	b.n	80043d8 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80043ec:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004400:	661a      	str	r2, [r3, #96]	; 0x60

  if (protocol == SAI_PCM_SHORT)
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	2b04      	cmp	r3, #4
 8004406:	d103      	bne.n	8004410 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2201      	movs	r2, #1
 800440c:	645a      	str	r2, [r3, #68]	; 0x44
 800440e:	e002      	b.n	8004416 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	220d      	movs	r2, #13
 8004414:	645a      	str	r2, [r3, #68]	; 0x44
  }

  switch (datasize)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b03      	cmp	r3, #3
 800441a:	d837      	bhi.n	800448c <SAI_InitPCM+0xf0>
 800441c:	a201      	add	r2, pc, #4	; (adr r2, 8004424 <SAI_InitPCM+0x88>)
 800441e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004422:	bf00      	nop
 8004424:	08004435 	.word	0x08004435
 8004428:	0800444b 	.word	0x0800444b
 800442c:	08004461 	.word	0x08004461
 8004430:	08004477 	.word	0x08004477
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2280      	movs	r2, #128	; 0x80
 8004438:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	011a      	lsls	r2, r3, #4
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2240      	movs	r2, #64	; 0x40
 8004446:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8004448:	e023      	b.n	8004492 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2280      	movs	r2, #128	; 0x80
 800444e:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2280      	movs	r2, #128	; 0x80
 800445c:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800445e:	e018      	b.n	8004492 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	22c0      	movs	r2, #192	; 0xc0
 8004464:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	015a      	lsls	r2, r3, #5
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2280      	movs	r2, #128	; 0x80
 8004472:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8004474:	e00d      	b.n	8004492 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	22e0      	movs	r2, #224	; 0xe0
 800447a:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	015a      	lsls	r2, r3, #5
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2280      	movs	r2, #128	; 0x80
 8004488:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800448a:	e002      	b.n	8004492 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	75fb      	strb	r3, [r7, #23]
      break;
 8004490:	bf00      	nop
  }

  return status;
 8004492:	7dfb      	ldrb	r3, [r7, #23]
}
 8004494:	4618      	mov	r0, r3
 8004496:	371c      	adds	r7, #28
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	460b      	mov	r3, r1
 80044aa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80044b0:	78fb      	ldrb	r3, [r7, #3]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d103      	bne.n	80044be <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f043 0308 	orr.w	r3, r3, #8
 80044bc:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c2:	2b08      	cmp	r3, #8
 80044c4:	d10b      	bne.n	80044de <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80044ca:	2b03      	cmp	r3, #3
 80044cc:	d003      	beq.n	80044d6 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d103      	bne.n	80044de <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f043 0310 	orr.w	r3, r3, #16
 80044dc:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2b03      	cmp	r3, #3
 80044e4:	d003      	beq.n	80044ee <SAI_InterruptFlag+0x4e>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d104      	bne.n	80044f8 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80044f4:	60fb      	str	r3, [r7, #12]
 80044f6:	e003      	b.n	8004500 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f043 0304 	orr.w	r3, r3, #4
 80044fe:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8004500:	68fb      	ldr	r3, [r7, #12]
}
 8004502:	4618      	mov	r0, r3
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
	...

08004510 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004518:	4b18      	ldr	r3, [pc, #96]	; (800457c <SAI_Disable+0x6c>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a18      	ldr	r2, [pc, #96]	; (8004580 <SAI_Disable+0x70>)
 800451e:	fba2 2303 	umull	r2, r3, r2, r3
 8004522:	0b1b      	lsrs	r3, r3, #12
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004528:	2300      	movs	r3, #0
 800452a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800453a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10a      	bne.n	8004558 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004548:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	72fb      	strb	r3, [r7, #11]
      break;
 8004556:	e009      	b.n	800456c <SAI_Disable+0x5c>
    }
    count--;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	3b01      	subs	r3, #1
 800455c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1e7      	bne.n	800453c <SAI_Disable+0x2c>

  return status;
 800456c:	7afb      	ldrb	r3, [r7, #11]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	20000000 	.word	0x20000000
 8004580:	95cbec1b 	.word	0x95cbec1b

08004584 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004590:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	2b20      	cmp	r3, #32
 8004598:	d01c      	beq.n	80045d4 <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80045a8:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80045b2:	2100      	movs	r1, #0
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f7ff ff73 	bl	80044a0 <SAI_InterruptFlag>
 80045ba:	4603      	mov	r3, r0
 80045bc:	43d9      	mvns	r1, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	691a      	ldr	r2, [r3, #16]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	400a      	ands	r2, r1
 80045ca:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f7fb ffd1 	bl	800057c <HAL_SAI_RxCpltCallback>
#endif
}
 80045da:	bf00      	nop
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b084      	sub	sp, #16
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ee:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f7fb ffdb 	bl	80005ac <HAL_SAI_RxHalfCpltCallback>
#endif
}
 80045f6:	bf00      	nop
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b084      	sub	sp, #16
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460a:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004612:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800462a:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f7ff ff6f 	bl	8004510 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f7fc f82c 	bl	80006a0 <HAL_SAI_ErrorCallback>
#endif
}
 8004648:	bf00      	nop
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e095      	b.n	800478e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	2b00      	cmp	r3, #0
 8004668:	d108      	bne.n	800467c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004672:	d009      	beq.n	8004688 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	61da      	str	r2, [r3, #28]
 800467a:	e005      	b.n	8004688 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d106      	bne.n	80046a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7fc fa4c 	bl	8000b40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046c8:	d902      	bls.n	80046d0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80046ca:	2300      	movs	r3, #0
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	e002      	b.n	80046d6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80046d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046d4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80046de:	d007      	beq.n	80046f0 <HAL_SPI_Init+0xa0>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046e8:	d002      	beq.n	80046f0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004700:	431a      	orrs	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	431a      	orrs	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	69db      	ldr	r3, [r3, #28]
 8004724:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004728:	431a      	orrs	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004732:	ea42 0103 	orr.w	r1, r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	0c1b      	lsrs	r3, r3, #16
 800474c:	f003 0204 	and.w	r2, r3, #4
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	f003 0310 	and.w	r3, r3, #16
 8004758:	431a      	orrs	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800475e:	f003 0308 	and.w	r3, r3, #8
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800476c:	ea42 0103 	orr.w	r1, r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b088      	sub	sp, #32
 800479a:	af00      	add	r7, sp, #0
 800479c:	60f8      	str	r0, [r7, #12]
 800479e:	60b9      	str	r1, [r7, #8]
 80047a0:	603b      	str	r3, [r7, #0]
 80047a2:	4613      	mov	r3, r2
 80047a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d101      	bne.n	80047b8 <HAL_SPI_Transmit+0x22>
 80047b4:	2302      	movs	r3, #2
 80047b6:	e15f      	b.n	8004a78 <HAL_SPI_Transmit+0x2e2>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047c0:	f7fc fc9c 	bl	80010fc <HAL_GetTick>
 80047c4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80047c6:	88fb      	ldrh	r3, [r7, #6]
 80047c8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d002      	beq.n	80047dc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80047d6:	2302      	movs	r3, #2
 80047d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047da:	e148      	b.n	8004a6e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d002      	beq.n	80047e8 <HAL_SPI_Transmit+0x52>
 80047e2:	88fb      	ldrh	r3, [r7, #6]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d102      	bne.n	80047ee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047ec:	e13f      	b.n	8004a6e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2203      	movs	r2, #3
 80047f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	88fa      	ldrh	r2, [r7, #6]
 8004806:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	88fa      	ldrh	r2, [r7, #6]
 800480c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004838:	d10f      	bne.n	800485a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004848:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004858:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004864:	2b40      	cmp	r3, #64	; 0x40
 8004866:	d007      	beq.n	8004878 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004876:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004880:	d94f      	bls.n	8004922 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d002      	beq.n	8004890 <HAL_SPI_Transmit+0xfa>
 800488a:	8afb      	ldrh	r3, [r7, #22]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d142      	bne.n	8004916 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004894:	881a      	ldrh	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a0:	1c9a      	adds	r2, r3, #2
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	3b01      	subs	r3, #1
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80048b4:	e02f      	b.n	8004916 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d112      	bne.n	80048ea <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c8:	881a      	ldrh	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d4:	1c9a      	adds	r2, r3, #2
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048de:	b29b      	uxth	r3, r3
 80048e0:	3b01      	subs	r3, #1
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048e8:	e015      	b.n	8004916 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048ea:	f7fc fc07 	bl	80010fc <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d803      	bhi.n	8004902 <HAL_SPI_Transmit+0x16c>
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004900:	d102      	bne.n	8004908 <HAL_SPI_Transmit+0x172>
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d106      	bne.n	8004916 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004914:	e0ab      	b.n	8004a6e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800491a:	b29b      	uxth	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1ca      	bne.n	80048b6 <HAL_SPI_Transmit+0x120>
 8004920:	e080      	b.n	8004a24 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d002      	beq.n	8004930 <HAL_SPI_Transmit+0x19a>
 800492a:	8afb      	ldrh	r3, [r7, #22]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d174      	bne.n	8004a1a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004934:	b29b      	uxth	r3, r3
 8004936:	2b01      	cmp	r3, #1
 8004938:	d912      	bls.n	8004960 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493e:	881a      	ldrh	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494a:	1c9a      	adds	r2, r3, #2
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004954:	b29b      	uxth	r3, r3
 8004956:	3b02      	subs	r3, #2
 8004958:	b29a      	uxth	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800495e:	e05c      	b.n	8004a1a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	330c      	adds	r3, #12
 800496a:	7812      	ldrb	r2, [r2, #0]
 800496c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004972:	1c5a      	adds	r2, r3, #1
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800497c:	b29b      	uxth	r3, r3
 800497e:	3b01      	subs	r3, #1
 8004980:	b29a      	uxth	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004986:	e048      	b.n	8004a1a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b02      	cmp	r3, #2
 8004994:	d12b      	bne.n	80049ee <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800499a:	b29b      	uxth	r3, r3
 800499c:	2b01      	cmp	r3, #1
 800499e:	d912      	bls.n	80049c6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a4:	881a      	ldrh	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b0:	1c9a      	adds	r2, r3, #2
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	3b02      	subs	r3, #2
 80049be:	b29a      	uxth	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049c4:	e029      	b.n	8004a1a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	330c      	adds	r3, #12
 80049d0:	7812      	ldrb	r2, [r2, #0]
 80049d2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d8:	1c5a      	adds	r2, r3, #1
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049ec:	e015      	b.n	8004a1a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049ee:	f7fc fb85 	bl	80010fc <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	683a      	ldr	r2, [r7, #0]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d803      	bhi.n	8004a06 <HAL_SPI_Transmit+0x270>
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a04:	d102      	bne.n	8004a0c <HAL_SPI_Transmit+0x276>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d106      	bne.n	8004a1a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004a18:	e029      	b.n	8004a6e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1b1      	bne.n	8004988 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	6839      	ldr	r1, [r7, #0]
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 f947 	bl	8004cbc <SPI_EndRxTxTransaction>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d002      	beq.n	8004a3a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2220      	movs	r2, #32
 8004a38:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10a      	bne.n	8004a58 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a42:	2300      	movs	r3, #0
 8004a44:	613b      	str	r3, [r7, #16]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	613b      	str	r3, [r7, #16]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	613b      	str	r3, [r7, #16]
 8004a56:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d002      	beq.n	8004a66 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	77fb      	strb	r3, [r7, #31]
 8004a64:	e003      	b.n	8004a6e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004a76:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3720      	adds	r7, #32
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b088      	sub	sp, #32
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	603b      	str	r3, [r7, #0]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a90:	f7fc fb34 	bl	80010fc <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a98:	1a9b      	subs	r3, r3, r2
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004aa0:	f7fc fb2c 	bl	80010fc <HAL_GetTick>
 8004aa4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004aa6:	4b39      	ldr	r3, [pc, #228]	; (8004b8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	015b      	lsls	r3, r3, #5
 8004aac:	0d1b      	lsrs	r3, r3, #20
 8004aae:	69fa      	ldr	r2, [r7, #28]
 8004ab0:	fb02 f303 	mul.w	r3, r2, r3
 8004ab4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ab6:	e054      	b.n	8004b62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004abe:	d050      	beq.n	8004b62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ac0:	f7fc fb1c 	bl	80010fc <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	69fa      	ldr	r2, [r7, #28]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d902      	bls.n	8004ad6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d13d      	bne.n	8004b52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ae4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aee:	d111      	bne.n	8004b14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004af8:	d004      	beq.n	8004b04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b02:	d107      	bne.n	8004b14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b1c:	d10f      	bne.n	8004b3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e017      	b.n	8004b82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d101      	bne.n	8004b5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	bf0c      	ite	eq
 8004b72:	2301      	moveq	r3, #1
 8004b74:	2300      	movne	r3, #0
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	461a      	mov	r2, r3
 8004b7a:	79fb      	ldrb	r3, [r7, #7]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d19b      	bne.n	8004ab8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3720      	adds	r7, #32
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	20000000 	.word	0x20000000

08004b90 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b08a      	sub	sp, #40	; 0x28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
 8004b9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004ba2:	f7fc faab 	bl	80010fc <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004baa:	1a9b      	subs	r3, r3, r2
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	4413      	add	r3, r2
 8004bb0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004bb2:	f7fc faa3 	bl	80010fc <HAL_GetTick>
 8004bb6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	330c      	adds	r3, #12
 8004bbe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004bc0:	4b3d      	ldr	r3, [pc, #244]	; (8004cb8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	00da      	lsls	r2, r3, #3
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	0d1b      	lsrs	r3, r3, #20
 8004bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd2:	fb02 f303 	mul.w	r3, r2, r3
 8004bd6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004bd8:	e060      	b.n	8004c9c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004be0:	d107      	bne.n	8004bf2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d104      	bne.n	8004bf2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004bf0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf8:	d050      	beq.n	8004c9c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004bfa:	f7fc fa7f 	bl	80010fc <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d902      	bls.n	8004c10 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d13d      	bne.n	8004c8c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c1e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c28:	d111      	bne.n	8004c4e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c32:	d004      	beq.n	8004c3e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c3c:	d107      	bne.n	8004c4e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c4c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c56:	d10f      	bne.n	8004c78 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c66:	601a      	str	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c76:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e010      	b.n	8004cae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004c92:	2300      	movs	r3, #0
 8004c94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	689a      	ldr	r2, [r3, #8]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d196      	bne.n	8004bda <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3728      	adds	r7, #40	; 0x28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	20000000 	.word	0x20000000

08004cbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af02      	add	r7, sp, #8
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f7ff ff5b 	bl	8004b90 <SPI_WaitFifoStateUntilTimeout>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d007      	beq.n	8004cf0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ce4:	f043 0220 	orr.w	r2, r3, #32
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e027      	b.n	8004d40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	2180      	movs	r1, #128	; 0x80
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f7ff fec0 	bl	8004a80 <SPI_WaitFlagStateUntilTimeout>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d007      	beq.n	8004d16 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d0a:	f043 0220 	orr.w	r2, r3, #32
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e014      	b.n	8004d40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f7ff ff34 	bl	8004b90 <SPI_WaitFifoStateUntilTimeout>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d007      	beq.n	8004d3e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d32:	f043 0220 	orr.w	r2, r3, #32
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e000      	b.n	8004d40 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e040      	b.n	8004ddc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d106      	bne.n	8004d70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7fb ff2a 	bl	8000bc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2224      	movs	r2, #36	; 0x24
 8004d74:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0201 	bic.w	r2, r2, #1
 8004d84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d002      	beq.n	8004d94 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 fb6a 	bl	8005468 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 f8af 	bl	8004ef8 <UART_SetConfig>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d101      	bne.n	8004da4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e01b      	b.n	8004ddc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004db2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689a      	ldr	r2, [r3, #8]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f042 0201 	orr.w	r2, r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 fbe9 	bl	80055ac <UART_CheckIdleState>
 8004dda:	4603      	mov	r3, r0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b08a      	sub	sp, #40	; 0x28
 8004de8:	af02      	add	r7, sp, #8
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	603b      	str	r3, [r7, #0]
 8004df0:	4613      	mov	r3, r2
 8004df2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004df8:	2b20      	cmp	r3, #32
 8004dfa:	d178      	bne.n	8004eee <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d002      	beq.n	8004e08 <HAL_UART_Transmit+0x24>
 8004e02:	88fb      	ldrh	r3, [r7, #6]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d101      	bne.n	8004e0c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e071      	b.n	8004ef0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2221      	movs	r2, #33	; 0x21
 8004e18:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e1a:	f7fc f96f 	bl	80010fc <HAL_GetTick>
 8004e1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	88fa      	ldrh	r2, [r7, #6]
 8004e24:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	88fa      	ldrh	r2, [r7, #6]
 8004e2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e38:	d108      	bne.n	8004e4c <HAL_UART_Transmit+0x68>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d104      	bne.n	8004e4c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004e42:	2300      	movs	r3, #0
 8004e44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	61bb      	str	r3, [r7, #24]
 8004e4a:	e003      	b.n	8004e54 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e50:	2300      	movs	r3, #0
 8004e52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e54:	e030      	b.n	8004eb8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	2180      	movs	r1, #128	; 0x80
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f000 fc4b 	bl	80056fc <UART_WaitOnFlagUntilTimeout>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d004      	beq.n	8004e76 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e03c      	b.n	8004ef0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10b      	bne.n	8004e94 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	881a      	ldrh	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e88:	b292      	uxth	r2, r2
 8004e8a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	3302      	adds	r3, #2
 8004e90:	61bb      	str	r3, [r7, #24]
 8004e92:	e008      	b.n	8004ea6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	781a      	ldrb	r2, [r3, #0]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	b292      	uxth	r2, r2
 8004e9e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1c8      	bne.n	8004e56 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	2140      	movs	r1, #64	; 0x40
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f000 fc14 	bl	80056fc <UART_WaitOnFlagUntilTimeout>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d004      	beq.n	8004ee4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2220      	movs	r2, #32
 8004ede:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e005      	b.n	8004ef0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004eea:	2300      	movs	r3, #0
 8004eec:	e000      	b.n	8004ef0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004eee:	2302      	movs	r3, #2
  }
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3720      	adds	r7, #32
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004efc:	b08a      	sub	sp, #40	; 0x28
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f02:	2300      	movs	r3, #0
 8004f04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	689a      	ldr	r2, [r3, #8]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	431a      	orrs	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	431a      	orrs	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	69db      	ldr	r3, [r3, #28]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	4ba4      	ldr	r3, [pc, #656]	; (80051b8 <UART_SetConfig+0x2c0>)
 8004f28:	4013      	ands	r3, r2
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	6812      	ldr	r2, [r2, #0]
 8004f2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f30:	430b      	orrs	r3, r1
 8004f32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	68da      	ldr	r2, [r3, #12]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a99      	ldr	r2, [pc, #612]	; (80051bc <UART_SetConfig+0x2c4>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d004      	beq.n	8004f64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f60:	4313      	orrs	r3, r2
 8004f62:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f74:	430a      	orrs	r2, r1
 8004f76:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a90      	ldr	r2, [pc, #576]	; (80051c0 <UART_SetConfig+0x2c8>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d126      	bne.n	8004fd0 <UART_SetConfig+0xd8>
 8004f82:	4b90      	ldr	r3, [pc, #576]	; (80051c4 <UART_SetConfig+0x2cc>)
 8004f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f88:	f003 0303 	and.w	r3, r3, #3
 8004f8c:	2b03      	cmp	r3, #3
 8004f8e:	d81b      	bhi.n	8004fc8 <UART_SetConfig+0xd0>
 8004f90:	a201      	add	r2, pc, #4	; (adr r2, 8004f98 <UART_SetConfig+0xa0>)
 8004f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f96:	bf00      	nop
 8004f98:	08004fa9 	.word	0x08004fa9
 8004f9c:	08004fb9 	.word	0x08004fb9
 8004fa0:	08004fb1 	.word	0x08004fb1
 8004fa4:	08004fc1 	.word	0x08004fc1
 8004fa8:	2301      	movs	r3, #1
 8004faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fae:	e116      	b.n	80051de <UART_SetConfig+0x2e6>
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fb6:	e112      	b.n	80051de <UART_SetConfig+0x2e6>
 8004fb8:	2304      	movs	r3, #4
 8004fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fbe:	e10e      	b.n	80051de <UART_SetConfig+0x2e6>
 8004fc0:	2308      	movs	r3, #8
 8004fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fc6:	e10a      	b.n	80051de <UART_SetConfig+0x2e6>
 8004fc8:	2310      	movs	r3, #16
 8004fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fce:	e106      	b.n	80051de <UART_SetConfig+0x2e6>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a7c      	ldr	r2, [pc, #496]	; (80051c8 <UART_SetConfig+0x2d0>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d138      	bne.n	800504c <UART_SetConfig+0x154>
 8004fda:	4b7a      	ldr	r3, [pc, #488]	; (80051c4 <UART_SetConfig+0x2cc>)
 8004fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe0:	f003 030c 	and.w	r3, r3, #12
 8004fe4:	2b0c      	cmp	r3, #12
 8004fe6:	d82d      	bhi.n	8005044 <UART_SetConfig+0x14c>
 8004fe8:	a201      	add	r2, pc, #4	; (adr r2, 8004ff0 <UART_SetConfig+0xf8>)
 8004fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fee:	bf00      	nop
 8004ff0:	08005025 	.word	0x08005025
 8004ff4:	08005045 	.word	0x08005045
 8004ff8:	08005045 	.word	0x08005045
 8004ffc:	08005045 	.word	0x08005045
 8005000:	08005035 	.word	0x08005035
 8005004:	08005045 	.word	0x08005045
 8005008:	08005045 	.word	0x08005045
 800500c:	08005045 	.word	0x08005045
 8005010:	0800502d 	.word	0x0800502d
 8005014:	08005045 	.word	0x08005045
 8005018:	08005045 	.word	0x08005045
 800501c:	08005045 	.word	0x08005045
 8005020:	0800503d 	.word	0x0800503d
 8005024:	2300      	movs	r3, #0
 8005026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800502a:	e0d8      	b.n	80051de <UART_SetConfig+0x2e6>
 800502c:	2302      	movs	r3, #2
 800502e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005032:	e0d4      	b.n	80051de <UART_SetConfig+0x2e6>
 8005034:	2304      	movs	r3, #4
 8005036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800503a:	e0d0      	b.n	80051de <UART_SetConfig+0x2e6>
 800503c:	2308      	movs	r3, #8
 800503e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005042:	e0cc      	b.n	80051de <UART_SetConfig+0x2e6>
 8005044:	2310      	movs	r3, #16
 8005046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800504a:	e0c8      	b.n	80051de <UART_SetConfig+0x2e6>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a5e      	ldr	r2, [pc, #376]	; (80051cc <UART_SetConfig+0x2d4>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d125      	bne.n	80050a2 <UART_SetConfig+0x1aa>
 8005056:	4b5b      	ldr	r3, [pc, #364]	; (80051c4 <UART_SetConfig+0x2cc>)
 8005058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005060:	2b30      	cmp	r3, #48	; 0x30
 8005062:	d016      	beq.n	8005092 <UART_SetConfig+0x19a>
 8005064:	2b30      	cmp	r3, #48	; 0x30
 8005066:	d818      	bhi.n	800509a <UART_SetConfig+0x1a2>
 8005068:	2b20      	cmp	r3, #32
 800506a:	d00a      	beq.n	8005082 <UART_SetConfig+0x18a>
 800506c:	2b20      	cmp	r3, #32
 800506e:	d814      	bhi.n	800509a <UART_SetConfig+0x1a2>
 8005070:	2b00      	cmp	r3, #0
 8005072:	d002      	beq.n	800507a <UART_SetConfig+0x182>
 8005074:	2b10      	cmp	r3, #16
 8005076:	d008      	beq.n	800508a <UART_SetConfig+0x192>
 8005078:	e00f      	b.n	800509a <UART_SetConfig+0x1a2>
 800507a:	2300      	movs	r3, #0
 800507c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005080:	e0ad      	b.n	80051de <UART_SetConfig+0x2e6>
 8005082:	2302      	movs	r3, #2
 8005084:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005088:	e0a9      	b.n	80051de <UART_SetConfig+0x2e6>
 800508a:	2304      	movs	r3, #4
 800508c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005090:	e0a5      	b.n	80051de <UART_SetConfig+0x2e6>
 8005092:	2308      	movs	r3, #8
 8005094:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005098:	e0a1      	b.n	80051de <UART_SetConfig+0x2e6>
 800509a:	2310      	movs	r3, #16
 800509c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050a0:	e09d      	b.n	80051de <UART_SetConfig+0x2e6>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a4a      	ldr	r2, [pc, #296]	; (80051d0 <UART_SetConfig+0x2d8>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d125      	bne.n	80050f8 <UART_SetConfig+0x200>
 80050ac:	4b45      	ldr	r3, [pc, #276]	; (80051c4 <UART_SetConfig+0x2cc>)
 80050ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80050b6:	2bc0      	cmp	r3, #192	; 0xc0
 80050b8:	d016      	beq.n	80050e8 <UART_SetConfig+0x1f0>
 80050ba:	2bc0      	cmp	r3, #192	; 0xc0
 80050bc:	d818      	bhi.n	80050f0 <UART_SetConfig+0x1f8>
 80050be:	2b80      	cmp	r3, #128	; 0x80
 80050c0:	d00a      	beq.n	80050d8 <UART_SetConfig+0x1e0>
 80050c2:	2b80      	cmp	r3, #128	; 0x80
 80050c4:	d814      	bhi.n	80050f0 <UART_SetConfig+0x1f8>
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d002      	beq.n	80050d0 <UART_SetConfig+0x1d8>
 80050ca:	2b40      	cmp	r3, #64	; 0x40
 80050cc:	d008      	beq.n	80050e0 <UART_SetConfig+0x1e8>
 80050ce:	e00f      	b.n	80050f0 <UART_SetConfig+0x1f8>
 80050d0:	2300      	movs	r3, #0
 80050d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050d6:	e082      	b.n	80051de <UART_SetConfig+0x2e6>
 80050d8:	2302      	movs	r3, #2
 80050da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050de:	e07e      	b.n	80051de <UART_SetConfig+0x2e6>
 80050e0:	2304      	movs	r3, #4
 80050e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050e6:	e07a      	b.n	80051de <UART_SetConfig+0x2e6>
 80050e8:	2308      	movs	r3, #8
 80050ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ee:	e076      	b.n	80051de <UART_SetConfig+0x2e6>
 80050f0:	2310      	movs	r3, #16
 80050f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050f6:	e072      	b.n	80051de <UART_SetConfig+0x2e6>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a35      	ldr	r2, [pc, #212]	; (80051d4 <UART_SetConfig+0x2dc>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d12a      	bne.n	8005158 <UART_SetConfig+0x260>
 8005102:	4b30      	ldr	r3, [pc, #192]	; (80051c4 <UART_SetConfig+0x2cc>)
 8005104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005108:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800510c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005110:	d01a      	beq.n	8005148 <UART_SetConfig+0x250>
 8005112:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005116:	d81b      	bhi.n	8005150 <UART_SetConfig+0x258>
 8005118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800511c:	d00c      	beq.n	8005138 <UART_SetConfig+0x240>
 800511e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005122:	d815      	bhi.n	8005150 <UART_SetConfig+0x258>
 8005124:	2b00      	cmp	r3, #0
 8005126:	d003      	beq.n	8005130 <UART_SetConfig+0x238>
 8005128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800512c:	d008      	beq.n	8005140 <UART_SetConfig+0x248>
 800512e:	e00f      	b.n	8005150 <UART_SetConfig+0x258>
 8005130:	2300      	movs	r3, #0
 8005132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005136:	e052      	b.n	80051de <UART_SetConfig+0x2e6>
 8005138:	2302      	movs	r3, #2
 800513a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800513e:	e04e      	b.n	80051de <UART_SetConfig+0x2e6>
 8005140:	2304      	movs	r3, #4
 8005142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005146:	e04a      	b.n	80051de <UART_SetConfig+0x2e6>
 8005148:	2308      	movs	r3, #8
 800514a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800514e:	e046      	b.n	80051de <UART_SetConfig+0x2e6>
 8005150:	2310      	movs	r3, #16
 8005152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005156:	e042      	b.n	80051de <UART_SetConfig+0x2e6>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a17      	ldr	r2, [pc, #92]	; (80051bc <UART_SetConfig+0x2c4>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d13a      	bne.n	80051d8 <UART_SetConfig+0x2e0>
 8005162:	4b18      	ldr	r3, [pc, #96]	; (80051c4 <UART_SetConfig+0x2cc>)
 8005164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005168:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800516c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005170:	d01a      	beq.n	80051a8 <UART_SetConfig+0x2b0>
 8005172:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005176:	d81b      	bhi.n	80051b0 <UART_SetConfig+0x2b8>
 8005178:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800517c:	d00c      	beq.n	8005198 <UART_SetConfig+0x2a0>
 800517e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005182:	d815      	bhi.n	80051b0 <UART_SetConfig+0x2b8>
 8005184:	2b00      	cmp	r3, #0
 8005186:	d003      	beq.n	8005190 <UART_SetConfig+0x298>
 8005188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800518c:	d008      	beq.n	80051a0 <UART_SetConfig+0x2a8>
 800518e:	e00f      	b.n	80051b0 <UART_SetConfig+0x2b8>
 8005190:	2300      	movs	r3, #0
 8005192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005196:	e022      	b.n	80051de <UART_SetConfig+0x2e6>
 8005198:	2302      	movs	r3, #2
 800519a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800519e:	e01e      	b.n	80051de <UART_SetConfig+0x2e6>
 80051a0:	2304      	movs	r3, #4
 80051a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051a6:	e01a      	b.n	80051de <UART_SetConfig+0x2e6>
 80051a8:	2308      	movs	r3, #8
 80051aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ae:	e016      	b.n	80051de <UART_SetConfig+0x2e6>
 80051b0:	2310      	movs	r3, #16
 80051b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051b6:	e012      	b.n	80051de <UART_SetConfig+0x2e6>
 80051b8:	efff69f3 	.word	0xefff69f3
 80051bc:	40008000 	.word	0x40008000
 80051c0:	40013800 	.word	0x40013800
 80051c4:	40021000 	.word	0x40021000
 80051c8:	40004400 	.word	0x40004400
 80051cc:	40004800 	.word	0x40004800
 80051d0:	40004c00 	.word	0x40004c00
 80051d4:	40005000 	.word	0x40005000
 80051d8:	2310      	movs	r3, #16
 80051da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a9f      	ldr	r2, [pc, #636]	; (8005460 <UART_SetConfig+0x568>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d17a      	bne.n	80052de <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051ec:	2b08      	cmp	r3, #8
 80051ee:	d824      	bhi.n	800523a <UART_SetConfig+0x342>
 80051f0:	a201      	add	r2, pc, #4	; (adr r2, 80051f8 <UART_SetConfig+0x300>)
 80051f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f6:	bf00      	nop
 80051f8:	0800521d 	.word	0x0800521d
 80051fc:	0800523b 	.word	0x0800523b
 8005200:	08005225 	.word	0x08005225
 8005204:	0800523b 	.word	0x0800523b
 8005208:	0800522b 	.word	0x0800522b
 800520c:	0800523b 	.word	0x0800523b
 8005210:	0800523b 	.word	0x0800523b
 8005214:	0800523b 	.word	0x0800523b
 8005218:	08005233 	.word	0x08005233
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800521c:	f7fd fa16 	bl	800264c <HAL_RCC_GetPCLK1Freq>
 8005220:	61f8      	str	r0, [r7, #28]
        break;
 8005222:	e010      	b.n	8005246 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005224:	4b8f      	ldr	r3, [pc, #572]	; (8005464 <UART_SetConfig+0x56c>)
 8005226:	61fb      	str	r3, [r7, #28]
        break;
 8005228:	e00d      	b.n	8005246 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800522a:	f7fd f977 	bl	800251c <HAL_RCC_GetSysClockFreq>
 800522e:	61f8      	str	r0, [r7, #28]
        break;
 8005230:	e009      	b.n	8005246 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005236:	61fb      	str	r3, [r7, #28]
        break;
 8005238:	e005      	b.n	8005246 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005244:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	2b00      	cmp	r3, #0
 800524a:	f000 80fb 	beq.w	8005444 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	4613      	mov	r3, r2
 8005254:	005b      	lsls	r3, r3, #1
 8005256:	4413      	add	r3, r2
 8005258:	69fa      	ldr	r2, [r7, #28]
 800525a:	429a      	cmp	r2, r3
 800525c:	d305      	bcc.n	800526a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005264:	69fa      	ldr	r2, [r7, #28]
 8005266:	429a      	cmp	r2, r3
 8005268:	d903      	bls.n	8005272 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005270:	e0e8      	b.n	8005444 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	2200      	movs	r2, #0
 8005276:	461c      	mov	r4, r3
 8005278:	4615      	mov	r5, r2
 800527a:	f04f 0200 	mov.w	r2, #0
 800527e:	f04f 0300 	mov.w	r3, #0
 8005282:	022b      	lsls	r3, r5, #8
 8005284:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005288:	0222      	lsls	r2, r4, #8
 800528a:	68f9      	ldr	r1, [r7, #12]
 800528c:	6849      	ldr	r1, [r1, #4]
 800528e:	0849      	lsrs	r1, r1, #1
 8005290:	2000      	movs	r0, #0
 8005292:	4688      	mov	r8, r1
 8005294:	4681      	mov	r9, r0
 8005296:	eb12 0a08 	adds.w	sl, r2, r8
 800529a:	eb43 0b09 	adc.w	fp, r3, r9
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	603b      	str	r3, [r7, #0]
 80052a6:	607a      	str	r2, [r7, #4]
 80052a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052ac:	4650      	mov	r0, sl
 80052ae:	4659      	mov	r1, fp
 80052b0:	f7fa ffe6 	bl	8000280 <__aeabi_uldivmod>
 80052b4:	4602      	mov	r2, r0
 80052b6:	460b      	mov	r3, r1
 80052b8:	4613      	mov	r3, r2
 80052ba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052c2:	d308      	bcc.n	80052d6 <UART_SetConfig+0x3de>
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052ca:	d204      	bcs.n	80052d6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	69ba      	ldr	r2, [r7, #24]
 80052d2:	60da      	str	r2, [r3, #12]
 80052d4:	e0b6      	b.n	8005444 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80052dc:	e0b2      	b.n	8005444 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052e6:	d15e      	bne.n	80053a6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80052e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052ec:	2b08      	cmp	r3, #8
 80052ee:	d828      	bhi.n	8005342 <UART_SetConfig+0x44a>
 80052f0:	a201      	add	r2, pc, #4	; (adr r2, 80052f8 <UART_SetConfig+0x400>)
 80052f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f6:	bf00      	nop
 80052f8:	0800531d 	.word	0x0800531d
 80052fc:	08005325 	.word	0x08005325
 8005300:	0800532d 	.word	0x0800532d
 8005304:	08005343 	.word	0x08005343
 8005308:	08005333 	.word	0x08005333
 800530c:	08005343 	.word	0x08005343
 8005310:	08005343 	.word	0x08005343
 8005314:	08005343 	.word	0x08005343
 8005318:	0800533b 	.word	0x0800533b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800531c:	f7fd f996 	bl	800264c <HAL_RCC_GetPCLK1Freq>
 8005320:	61f8      	str	r0, [r7, #28]
        break;
 8005322:	e014      	b.n	800534e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005324:	f7fd f9a8 	bl	8002678 <HAL_RCC_GetPCLK2Freq>
 8005328:	61f8      	str	r0, [r7, #28]
        break;
 800532a:	e010      	b.n	800534e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800532c:	4b4d      	ldr	r3, [pc, #308]	; (8005464 <UART_SetConfig+0x56c>)
 800532e:	61fb      	str	r3, [r7, #28]
        break;
 8005330:	e00d      	b.n	800534e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005332:	f7fd f8f3 	bl	800251c <HAL_RCC_GetSysClockFreq>
 8005336:	61f8      	str	r0, [r7, #28]
        break;
 8005338:	e009      	b.n	800534e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800533a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800533e:	61fb      	str	r3, [r7, #28]
        break;
 8005340:	e005      	b.n	800534e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005342:	2300      	movs	r3, #0
 8005344:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800534c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d077      	beq.n	8005444 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	005a      	lsls	r2, r3, #1
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	085b      	lsrs	r3, r3, #1
 800535e:	441a      	add	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	fbb2 f3f3 	udiv	r3, r2, r3
 8005368:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	2b0f      	cmp	r3, #15
 800536e:	d916      	bls.n	800539e <UART_SetConfig+0x4a6>
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005376:	d212      	bcs.n	800539e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	b29b      	uxth	r3, r3
 800537c:	f023 030f 	bic.w	r3, r3, #15
 8005380:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	085b      	lsrs	r3, r3, #1
 8005386:	b29b      	uxth	r3, r3
 8005388:	f003 0307 	and.w	r3, r3, #7
 800538c:	b29a      	uxth	r2, r3
 800538e:	8afb      	ldrh	r3, [r7, #22]
 8005390:	4313      	orrs	r3, r2
 8005392:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	8afa      	ldrh	r2, [r7, #22]
 800539a:	60da      	str	r2, [r3, #12]
 800539c:	e052      	b.n	8005444 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80053a4:	e04e      	b.n	8005444 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053aa:	2b08      	cmp	r3, #8
 80053ac:	d827      	bhi.n	80053fe <UART_SetConfig+0x506>
 80053ae:	a201      	add	r2, pc, #4	; (adr r2, 80053b4 <UART_SetConfig+0x4bc>)
 80053b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b4:	080053d9 	.word	0x080053d9
 80053b8:	080053e1 	.word	0x080053e1
 80053bc:	080053e9 	.word	0x080053e9
 80053c0:	080053ff 	.word	0x080053ff
 80053c4:	080053ef 	.word	0x080053ef
 80053c8:	080053ff 	.word	0x080053ff
 80053cc:	080053ff 	.word	0x080053ff
 80053d0:	080053ff 	.word	0x080053ff
 80053d4:	080053f7 	.word	0x080053f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053d8:	f7fd f938 	bl	800264c <HAL_RCC_GetPCLK1Freq>
 80053dc:	61f8      	str	r0, [r7, #28]
        break;
 80053de:	e014      	b.n	800540a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053e0:	f7fd f94a 	bl	8002678 <HAL_RCC_GetPCLK2Freq>
 80053e4:	61f8      	str	r0, [r7, #28]
        break;
 80053e6:	e010      	b.n	800540a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053e8:	4b1e      	ldr	r3, [pc, #120]	; (8005464 <UART_SetConfig+0x56c>)
 80053ea:	61fb      	str	r3, [r7, #28]
        break;
 80053ec:	e00d      	b.n	800540a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053ee:	f7fd f895 	bl	800251c <HAL_RCC_GetSysClockFreq>
 80053f2:	61f8      	str	r0, [r7, #28]
        break;
 80053f4:	e009      	b.n	800540a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053fa:	61fb      	str	r3, [r7, #28]
        break;
 80053fc:	e005      	b.n	800540a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80053fe:	2300      	movs	r3, #0
 8005400:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005408:	bf00      	nop
    }

    if (pclk != 0U)
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d019      	beq.n	8005444 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	085a      	lsrs	r2, r3, #1
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	441a      	add	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005422:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	2b0f      	cmp	r3, #15
 8005428:	d909      	bls.n	800543e <UART_SetConfig+0x546>
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005430:	d205      	bcs.n	800543e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	b29a      	uxth	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	60da      	str	r2, [r3, #12]
 800543c:	e002      	b.n	8005444 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005450:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005454:	4618      	mov	r0, r3
 8005456:	3728      	adds	r7, #40	; 0x28
 8005458:	46bd      	mov	sp, r7
 800545a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800545e:	bf00      	nop
 8005460:	40008000 	.word	0x40008000
 8005464:	00f42400 	.word	0x00f42400

08005468 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	f003 0308 	and.w	r3, r3, #8
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00a      	beq.n	8005492 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00a      	beq.n	80054b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	430a      	orrs	r2, r1
 80054b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00a      	beq.n	80054d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	f003 0304 	and.w	r3, r3, #4
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00a      	beq.n	80054f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	430a      	orrs	r2, r1
 80054f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fc:	f003 0310 	and.w	r3, r3, #16
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00a      	beq.n	800551a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	f003 0320 	and.w	r3, r3, #32
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00a      	beq.n	800553c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	430a      	orrs	r2, r1
 800553a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005544:	2b00      	cmp	r3, #0
 8005546:	d01a      	beq.n	800557e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005562:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005566:	d10a      	bne.n	800557e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00a      	beq.n	80055a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	430a      	orrs	r2, r1
 800559e:	605a      	str	r2, [r3, #4]
  }
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b098      	sub	sp, #96	; 0x60
 80055b0:	af02      	add	r7, sp, #8
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055bc:	f7fb fd9e 	bl	80010fc <HAL_GetTick>
 80055c0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0308 	and.w	r3, r3, #8
 80055cc:	2b08      	cmp	r3, #8
 80055ce:	d12e      	bne.n	800562e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055d8:	2200      	movs	r2, #0
 80055da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f88c 	bl	80056fc <UART_WaitOnFlagUntilTimeout>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d021      	beq.n	800562e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f2:	e853 3f00 	ldrex	r3, [r3]
 80055f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055fe:	653b      	str	r3, [r7, #80]	; 0x50
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	461a      	mov	r2, r3
 8005606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005608:	647b      	str	r3, [r7, #68]	; 0x44
 800560a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800560e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005610:	e841 2300 	strex	r3, r2, [r1]
 8005614:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1e6      	bne.n	80055ea <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2220      	movs	r2, #32
 8005620:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e062      	b.n	80056f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b04      	cmp	r3, #4
 800563a:	d149      	bne.n	80056d0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800563c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005644:	2200      	movs	r2, #0
 8005646:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f856 	bl	80056fc <UART_WaitOnFlagUntilTimeout>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d03c      	beq.n	80056d0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	e853 3f00 	ldrex	r3, [r3]
 8005662:	623b      	str	r3, [r7, #32]
   return(result);
 8005664:	6a3b      	ldr	r3, [r7, #32]
 8005666:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800566a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	461a      	mov	r2, r3
 8005672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005674:	633b      	str	r3, [r7, #48]	; 0x30
 8005676:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005678:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800567a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800567c:	e841 2300 	strex	r3, r2, [r1]
 8005680:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1e6      	bne.n	8005656 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	3308      	adds	r3, #8
 800568e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	e853 3f00 	ldrex	r3, [r3]
 8005696:	60fb      	str	r3, [r7, #12]
   return(result);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f023 0301 	bic.w	r3, r3, #1
 800569e:	64bb      	str	r3, [r7, #72]	; 0x48
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	3308      	adds	r3, #8
 80056a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056a8:	61fa      	str	r2, [r7, #28]
 80056aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ac:	69b9      	ldr	r1, [r7, #24]
 80056ae:	69fa      	ldr	r2, [r7, #28]
 80056b0:	e841 2300 	strex	r3, r2, [r1]
 80056b4:	617b      	str	r3, [r7, #20]
   return(result);
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1e5      	bne.n	8005688 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2220      	movs	r2, #32
 80056c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e011      	b.n	80056f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2220      	movs	r2, #32
 80056d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2220      	movs	r2, #32
 80056da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3758      	adds	r7, #88	; 0x58
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	603b      	str	r3, [r7, #0]
 8005708:	4613      	mov	r3, r2
 800570a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800570c:	e049      	b.n	80057a2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005714:	d045      	beq.n	80057a2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005716:	f7fb fcf1 	bl	80010fc <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	429a      	cmp	r2, r3
 8005724:	d302      	bcc.n	800572c <UART_WaitOnFlagUntilTimeout+0x30>
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e048      	b.n	80057c2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0304 	and.w	r3, r3, #4
 800573a:	2b00      	cmp	r3, #0
 800573c:	d031      	beq.n	80057a2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	69db      	ldr	r3, [r3, #28]
 8005744:	f003 0308 	and.w	r3, r3, #8
 8005748:	2b08      	cmp	r3, #8
 800574a:	d110      	bne.n	800576e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2208      	movs	r2, #8
 8005752:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f000 f838 	bl	80057ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2208      	movs	r2, #8
 800575e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e029      	b.n	80057c2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	69db      	ldr	r3, [r3, #28]
 8005774:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005778:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800577c:	d111      	bne.n	80057a2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005786:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 f81e 	bl	80057ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2220      	movs	r2, #32
 8005792:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e00f      	b.n	80057c2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	69da      	ldr	r2, [r3, #28]
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	4013      	ands	r3, r2
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	bf0c      	ite	eq
 80057b2:	2301      	moveq	r3, #1
 80057b4:	2300      	movne	r3, #0
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	461a      	mov	r2, r3
 80057ba:	79fb      	ldrb	r3, [r7, #7]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d0a6      	beq.n	800570e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b095      	sub	sp, #84	; 0x54
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057da:	e853 3f00 	ldrex	r3, [r3]
 80057de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	461a      	mov	r2, r3
 80057ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057f0:	643b      	str	r3, [r7, #64]	; 0x40
 80057f2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057f8:	e841 2300 	strex	r3, r2, [r1]
 80057fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005800:	2b00      	cmp	r3, #0
 8005802:	d1e6      	bne.n	80057d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	3308      	adds	r3, #8
 800580a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580c:	6a3b      	ldr	r3, [r7, #32]
 800580e:	e853 3f00 	ldrex	r3, [r3]
 8005812:	61fb      	str	r3, [r7, #28]
   return(result);
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	f023 0301 	bic.w	r3, r3, #1
 800581a:	64bb      	str	r3, [r7, #72]	; 0x48
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	3308      	adds	r3, #8
 8005822:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005824:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005826:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005828:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800582a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800582c:	e841 2300 	strex	r3, r2, [r1]
 8005830:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1e5      	bne.n	8005804 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800583c:	2b01      	cmp	r3, #1
 800583e:	d118      	bne.n	8005872 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	e853 3f00 	ldrex	r3, [r3]
 800584c:	60bb      	str	r3, [r7, #8]
   return(result);
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	f023 0310 	bic.w	r3, r3, #16
 8005854:	647b      	str	r3, [r7, #68]	; 0x44
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	461a      	mov	r2, r3
 800585c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800585e:	61bb      	str	r3, [r7, #24]
 8005860:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005862:	6979      	ldr	r1, [r7, #20]
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	e841 2300 	strex	r3, r2, [r1]
 800586a:	613b      	str	r3, [r7, #16]
   return(result);
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1e6      	bne.n	8005840 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2220      	movs	r2, #32
 8005876:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005886:	bf00      	nop
 8005888:	3754      	adds	r7, #84	; 0x54
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
	...

08005894 <sniprintf>:
 8005894:	b40c      	push	{r2, r3}
 8005896:	b530      	push	{r4, r5, lr}
 8005898:	4b17      	ldr	r3, [pc, #92]	; (80058f8 <sniprintf+0x64>)
 800589a:	1e0c      	subs	r4, r1, #0
 800589c:	681d      	ldr	r5, [r3, #0]
 800589e:	b09d      	sub	sp, #116	; 0x74
 80058a0:	da08      	bge.n	80058b4 <sniprintf+0x20>
 80058a2:	238b      	movs	r3, #139	; 0x8b
 80058a4:	602b      	str	r3, [r5, #0]
 80058a6:	f04f 30ff 	mov.w	r0, #4294967295
 80058aa:	b01d      	add	sp, #116	; 0x74
 80058ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058b0:	b002      	add	sp, #8
 80058b2:	4770      	bx	lr
 80058b4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80058b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80058bc:	bf14      	ite	ne
 80058be:	f104 33ff 	addne.w	r3, r4, #4294967295
 80058c2:	4623      	moveq	r3, r4
 80058c4:	9304      	str	r3, [sp, #16]
 80058c6:	9307      	str	r3, [sp, #28]
 80058c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80058cc:	9002      	str	r0, [sp, #8]
 80058ce:	9006      	str	r0, [sp, #24]
 80058d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80058d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80058d6:	ab21      	add	r3, sp, #132	; 0x84
 80058d8:	a902      	add	r1, sp, #8
 80058da:	4628      	mov	r0, r5
 80058dc:	9301      	str	r3, [sp, #4]
 80058de:	f000 f9cd 	bl	8005c7c <_svfiprintf_r>
 80058e2:	1c43      	adds	r3, r0, #1
 80058e4:	bfbc      	itt	lt
 80058e6:	238b      	movlt	r3, #139	; 0x8b
 80058e8:	602b      	strlt	r3, [r5, #0]
 80058ea:	2c00      	cmp	r4, #0
 80058ec:	d0dd      	beq.n	80058aa <sniprintf+0x16>
 80058ee:	9b02      	ldr	r3, [sp, #8]
 80058f0:	2200      	movs	r2, #0
 80058f2:	701a      	strb	r2, [r3, #0]
 80058f4:	e7d9      	b.n	80058aa <sniprintf+0x16>
 80058f6:	bf00      	nop
 80058f8:	20000058 	.word	0x20000058

080058fc <_vsniprintf_r>:
 80058fc:	b530      	push	{r4, r5, lr}
 80058fe:	4614      	mov	r4, r2
 8005900:	2c00      	cmp	r4, #0
 8005902:	b09b      	sub	sp, #108	; 0x6c
 8005904:	4605      	mov	r5, r0
 8005906:	461a      	mov	r2, r3
 8005908:	da05      	bge.n	8005916 <_vsniprintf_r+0x1a>
 800590a:	238b      	movs	r3, #139	; 0x8b
 800590c:	6003      	str	r3, [r0, #0]
 800590e:	f04f 30ff 	mov.w	r0, #4294967295
 8005912:	b01b      	add	sp, #108	; 0x6c
 8005914:	bd30      	pop	{r4, r5, pc}
 8005916:	f44f 7302 	mov.w	r3, #520	; 0x208
 800591a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800591e:	bf14      	ite	ne
 8005920:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005924:	4623      	moveq	r3, r4
 8005926:	9302      	str	r3, [sp, #8]
 8005928:	9305      	str	r3, [sp, #20]
 800592a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800592e:	9100      	str	r1, [sp, #0]
 8005930:	9104      	str	r1, [sp, #16]
 8005932:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005936:	4669      	mov	r1, sp
 8005938:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800593a:	f000 f99f 	bl	8005c7c <_svfiprintf_r>
 800593e:	1c43      	adds	r3, r0, #1
 8005940:	bfbc      	itt	lt
 8005942:	238b      	movlt	r3, #139	; 0x8b
 8005944:	602b      	strlt	r3, [r5, #0]
 8005946:	2c00      	cmp	r4, #0
 8005948:	d0e3      	beq.n	8005912 <_vsniprintf_r+0x16>
 800594a:	9b00      	ldr	r3, [sp, #0]
 800594c:	2200      	movs	r2, #0
 800594e:	701a      	strb	r2, [r3, #0]
 8005950:	e7df      	b.n	8005912 <_vsniprintf_r+0x16>
	...

08005954 <vsniprintf>:
 8005954:	b507      	push	{r0, r1, r2, lr}
 8005956:	9300      	str	r3, [sp, #0]
 8005958:	4613      	mov	r3, r2
 800595a:	460a      	mov	r2, r1
 800595c:	4601      	mov	r1, r0
 800595e:	4803      	ldr	r0, [pc, #12]	; (800596c <vsniprintf+0x18>)
 8005960:	6800      	ldr	r0, [r0, #0]
 8005962:	f7ff ffcb 	bl	80058fc <_vsniprintf_r>
 8005966:	b003      	add	sp, #12
 8005968:	f85d fb04 	ldr.w	pc, [sp], #4
 800596c:	20000058 	.word	0x20000058

08005970 <memset>:
 8005970:	4402      	add	r2, r0
 8005972:	4603      	mov	r3, r0
 8005974:	4293      	cmp	r3, r2
 8005976:	d100      	bne.n	800597a <memset+0xa>
 8005978:	4770      	bx	lr
 800597a:	f803 1b01 	strb.w	r1, [r3], #1
 800597e:	e7f9      	b.n	8005974 <memset+0x4>

08005980 <__errno>:
 8005980:	4b01      	ldr	r3, [pc, #4]	; (8005988 <__errno+0x8>)
 8005982:	6818      	ldr	r0, [r3, #0]
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	20000058 	.word	0x20000058

0800598c <__libc_init_array>:
 800598c:	b570      	push	{r4, r5, r6, lr}
 800598e:	4d0d      	ldr	r5, [pc, #52]	; (80059c4 <__libc_init_array+0x38>)
 8005990:	4c0d      	ldr	r4, [pc, #52]	; (80059c8 <__libc_init_array+0x3c>)
 8005992:	1b64      	subs	r4, r4, r5
 8005994:	10a4      	asrs	r4, r4, #2
 8005996:	2600      	movs	r6, #0
 8005998:	42a6      	cmp	r6, r4
 800599a:	d109      	bne.n	80059b0 <__libc_init_array+0x24>
 800599c:	4d0b      	ldr	r5, [pc, #44]	; (80059cc <__libc_init_array+0x40>)
 800599e:	4c0c      	ldr	r4, [pc, #48]	; (80059d0 <__libc_init_array+0x44>)
 80059a0:	f000 fc6a 	bl	8006278 <_init>
 80059a4:	1b64      	subs	r4, r4, r5
 80059a6:	10a4      	asrs	r4, r4, #2
 80059a8:	2600      	movs	r6, #0
 80059aa:	42a6      	cmp	r6, r4
 80059ac:	d105      	bne.n	80059ba <__libc_init_array+0x2e>
 80059ae:	bd70      	pop	{r4, r5, r6, pc}
 80059b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80059b4:	4798      	blx	r3
 80059b6:	3601      	adds	r6, #1
 80059b8:	e7ee      	b.n	8005998 <__libc_init_array+0xc>
 80059ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80059be:	4798      	blx	r3
 80059c0:	3601      	adds	r6, #1
 80059c2:	e7f2      	b.n	80059aa <__libc_init_array+0x1e>
 80059c4:	08006388 	.word	0x08006388
 80059c8:	08006388 	.word	0x08006388
 80059cc:	08006388 	.word	0x08006388
 80059d0:	0800638c 	.word	0x0800638c

080059d4 <__retarget_lock_acquire_recursive>:
 80059d4:	4770      	bx	lr

080059d6 <__retarget_lock_release_recursive>:
 80059d6:	4770      	bx	lr

080059d8 <_free_r>:
 80059d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059da:	2900      	cmp	r1, #0
 80059dc:	d044      	beq.n	8005a68 <_free_r+0x90>
 80059de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059e2:	9001      	str	r0, [sp, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f1a1 0404 	sub.w	r4, r1, #4
 80059ea:	bfb8      	it	lt
 80059ec:	18e4      	addlt	r4, r4, r3
 80059ee:	f000 f8df 	bl	8005bb0 <__malloc_lock>
 80059f2:	4a1e      	ldr	r2, [pc, #120]	; (8005a6c <_free_r+0x94>)
 80059f4:	9801      	ldr	r0, [sp, #4]
 80059f6:	6813      	ldr	r3, [r2, #0]
 80059f8:	b933      	cbnz	r3, 8005a08 <_free_r+0x30>
 80059fa:	6063      	str	r3, [r4, #4]
 80059fc:	6014      	str	r4, [r2, #0]
 80059fe:	b003      	add	sp, #12
 8005a00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a04:	f000 b8da 	b.w	8005bbc <__malloc_unlock>
 8005a08:	42a3      	cmp	r3, r4
 8005a0a:	d908      	bls.n	8005a1e <_free_r+0x46>
 8005a0c:	6825      	ldr	r5, [r4, #0]
 8005a0e:	1961      	adds	r1, r4, r5
 8005a10:	428b      	cmp	r3, r1
 8005a12:	bf01      	itttt	eq
 8005a14:	6819      	ldreq	r1, [r3, #0]
 8005a16:	685b      	ldreq	r3, [r3, #4]
 8005a18:	1949      	addeq	r1, r1, r5
 8005a1a:	6021      	streq	r1, [r4, #0]
 8005a1c:	e7ed      	b.n	80059fa <_free_r+0x22>
 8005a1e:	461a      	mov	r2, r3
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	b10b      	cbz	r3, 8005a28 <_free_r+0x50>
 8005a24:	42a3      	cmp	r3, r4
 8005a26:	d9fa      	bls.n	8005a1e <_free_r+0x46>
 8005a28:	6811      	ldr	r1, [r2, #0]
 8005a2a:	1855      	adds	r5, r2, r1
 8005a2c:	42a5      	cmp	r5, r4
 8005a2e:	d10b      	bne.n	8005a48 <_free_r+0x70>
 8005a30:	6824      	ldr	r4, [r4, #0]
 8005a32:	4421      	add	r1, r4
 8005a34:	1854      	adds	r4, r2, r1
 8005a36:	42a3      	cmp	r3, r4
 8005a38:	6011      	str	r1, [r2, #0]
 8005a3a:	d1e0      	bne.n	80059fe <_free_r+0x26>
 8005a3c:	681c      	ldr	r4, [r3, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	6053      	str	r3, [r2, #4]
 8005a42:	440c      	add	r4, r1
 8005a44:	6014      	str	r4, [r2, #0]
 8005a46:	e7da      	b.n	80059fe <_free_r+0x26>
 8005a48:	d902      	bls.n	8005a50 <_free_r+0x78>
 8005a4a:	230c      	movs	r3, #12
 8005a4c:	6003      	str	r3, [r0, #0]
 8005a4e:	e7d6      	b.n	80059fe <_free_r+0x26>
 8005a50:	6825      	ldr	r5, [r4, #0]
 8005a52:	1961      	adds	r1, r4, r5
 8005a54:	428b      	cmp	r3, r1
 8005a56:	bf04      	itt	eq
 8005a58:	6819      	ldreq	r1, [r3, #0]
 8005a5a:	685b      	ldreq	r3, [r3, #4]
 8005a5c:	6063      	str	r3, [r4, #4]
 8005a5e:	bf04      	itt	eq
 8005a60:	1949      	addeq	r1, r1, r5
 8005a62:	6021      	streq	r1, [r4, #0]
 8005a64:	6054      	str	r4, [r2, #4]
 8005a66:	e7ca      	b.n	80059fe <_free_r+0x26>
 8005a68:	b003      	add	sp, #12
 8005a6a:	bd30      	pop	{r4, r5, pc}
 8005a6c:	2000144c 	.word	0x2000144c

08005a70 <sbrk_aligned>:
 8005a70:	b570      	push	{r4, r5, r6, lr}
 8005a72:	4e0e      	ldr	r6, [pc, #56]	; (8005aac <sbrk_aligned+0x3c>)
 8005a74:	460c      	mov	r4, r1
 8005a76:	6831      	ldr	r1, [r6, #0]
 8005a78:	4605      	mov	r5, r0
 8005a7a:	b911      	cbnz	r1, 8005a82 <sbrk_aligned+0x12>
 8005a7c:	f000 fba6 	bl	80061cc <_sbrk_r>
 8005a80:	6030      	str	r0, [r6, #0]
 8005a82:	4621      	mov	r1, r4
 8005a84:	4628      	mov	r0, r5
 8005a86:	f000 fba1 	bl	80061cc <_sbrk_r>
 8005a8a:	1c43      	adds	r3, r0, #1
 8005a8c:	d00a      	beq.n	8005aa4 <sbrk_aligned+0x34>
 8005a8e:	1cc4      	adds	r4, r0, #3
 8005a90:	f024 0403 	bic.w	r4, r4, #3
 8005a94:	42a0      	cmp	r0, r4
 8005a96:	d007      	beq.n	8005aa8 <sbrk_aligned+0x38>
 8005a98:	1a21      	subs	r1, r4, r0
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	f000 fb96 	bl	80061cc <_sbrk_r>
 8005aa0:	3001      	adds	r0, #1
 8005aa2:	d101      	bne.n	8005aa8 <sbrk_aligned+0x38>
 8005aa4:	f04f 34ff 	mov.w	r4, #4294967295
 8005aa8:	4620      	mov	r0, r4
 8005aaa:	bd70      	pop	{r4, r5, r6, pc}
 8005aac:	20001450 	.word	0x20001450

08005ab0 <_malloc_r>:
 8005ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ab4:	1ccd      	adds	r5, r1, #3
 8005ab6:	f025 0503 	bic.w	r5, r5, #3
 8005aba:	3508      	adds	r5, #8
 8005abc:	2d0c      	cmp	r5, #12
 8005abe:	bf38      	it	cc
 8005ac0:	250c      	movcc	r5, #12
 8005ac2:	2d00      	cmp	r5, #0
 8005ac4:	4607      	mov	r7, r0
 8005ac6:	db01      	blt.n	8005acc <_malloc_r+0x1c>
 8005ac8:	42a9      	cmp	r1, r5
 8005aca:	d905      	bls.n	8005ad8 <_malloc_r+0x28>
 8005acc:	230c      	movs	r3, #12
 8005ace:	603b      	str	r3, [r7, #0]
 8005ad0:	2600      	movs	r6, #0
 8005ad2:	4630      	mov	r0, r6
 8005ad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ad8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005bac <_malloc_r+0xfc>
 8005adc:	f000 f868 	bl	8005bb0 <__malloc_lock>
 8005ae0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ae4:	461c      	mov	r4, r3
 8005ae6:	bb5c      	cbnz	r4, 8005b40 <_malloc_r+0x90>
 8005ae8:	4629      	mov	r1, r5
 8005aea:	4638      	mov	r0, r7
 8005aec:	f7ff ffc0 	bl	8005a70 <sbrk_aligned>
 8005af0:	1c43      	adds	r3, r0, #1
 8005af2:	4604      	mov	r4, r0
 8005af4:	d155      	bne.n	8005ba2 <_malloc_r+0xf2>
 8005af6:	f8d8 4000 	ldr.w	r4, [r8]
 8005afa:	4626      	mov	r6, r4
 8005afc:	2e00      	cmp	r6, #0
 8005afe:	d145      	bne.n	8005b8c <_malloc_r+0xdc>
 8005b00:	2c00      	cmp	r4, #0
 8005b02:	d048      	beq.n	8005b96 <_malloc_r+0xe6>
 8005b04:	6823      	ldr	r3, [r4, #0]
 8005b06:	4631      	mov	r1, r6
 8005b08:	4638      	mov	r0, r7
 8005b0a:	eb04 0903 	add.w	r9, r4, r3
 8005b0e:	f000 fb5d 	bl	80061cc <_sbrk_r>
 8005b12:	4581      	cmp	r9, r0
 8005b14:	d13f      	bne.n	8005b96 <_malloc_r+0xe6>
 8005b16:	6821      	ldr	r1, [r4, #0]
 8005b18:	1a6d      	subs	r5, r5, r1
 8005b1a:	4629      	mov	r1, r5
 8005b1c:	4638      	mov	r0, r7
 8005b1e:	f7ff ffa7 	bl	8005a70 <sbrk_aligned>
 8005b22:	3001      	adds	r0, #1
 8005b24:	d037      	beq.n	8005b96 <_malloc_r+0xe6>
 8005b26:	6823      	ldr	r3, [r4, #0]
 8005b28:	442b      	add	r3, r5
 8005b2a:	6023      	str	r3, [r4, #0]
 8005b2c:	f8d8 3000 	ldr.w	r3, [r8]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d038      	beq.n	8005ba6 <_malloc_r+0xf6>
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	42a2      	cmp	r2, r4
 8005b38:	d12b      	bne.n	8005b92 <_malloc_r+0xe2>
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	605a      	str	r2, [r3, #4]
 8005b3e:	e00f      	b.n	8005b60 <_malloc_r+0xb0>
 8005b40:	6822      	ldr	r2, [r4, #0]
 8005b42:	1b52      	subs	r2, r2, r5
 8005b44:	d41f      	bmi.n	8005b86 <_malloc_r+0xd6>
 8005b46:	2a0b      	cmp	r2, #11
 8005b48:	d917      	bls.n	8005b7a <_malloc_r+0xca>
 8005b4a:	1961      	adds	r1, r4, r5
 8005b4c:	42a3      	cmp	r3, r4
 8005b4e:	6025      	str	r5, [r4, #0]
 8005b50:	bf18      	it	ne
 8005b52:	6059      	strne	r1, [r3, #4]
 8005b54:	6863      	ldr	r3, [r4, #4]
 8005b56:	bf08      	it	eq
 8005b58:	f8c8 1000 	streq.w	r1, [r8]
 8005b5c:	5162      	str	r2, [r4, r5]
 8005b5e:	604b      	str	r3, [r1, #4]
 8005b60:	4638      	mov	r0, r7
 8005b62:	f104 060b 	add.w	r6, r4, #11
 8005b66:	f000 f829 	bl	8005bbc <__malloc_unlock>
 8005b6a:	f026 0607 	bic.w	r6, r6, #7
 8005b6e:	1d23      	adds	r3, r4, #4
 8005b70:	1af2      	subs	r2, r6, r3
 8005b72:	d0ae      	beq.n	8005ad2 <_malloc_r+0x22>
 8005b74:	1b9b      	subs	r3, r3, r6
 8005b76:	50a3      	str	r3, [r4, r2]
 8005b78:	e7ab      	b.n	8005ad2 <_malloc_r+0x22>
 8005b7a:	42a3      	cmp	r3, r4
 8005b7c:	6862      	ldr	r2, [r4, #4]
 8005b7e:	d1dd      	bne.n	8005b3c <_malloc_r+0x8c>
 8005b80:	f8c8 2000 	str.w	r2, [r8]
 8005b84:	e7ec      	b.n	8005b60 <_malloc_r+0xb0>
 8005b86:	4623      	mov	r3, r4
 8005b88:	6864      	ldr	r4, [r4, #4]
 8005b8a:	e7ac      	b.n	8005ae6 <_malloc_r+0x36>
 8005b8c:	4634      	mov	r4, r6
 8005b8e:	6876      	ldr	r6, [r6, #4]
 8005b90:	e7b4      	b.n	8005afc <_malloc_r+0x4c>
 8005b92:	4613      	mov	r3, r2
 8005b94:	e7cc      	b.n	8005b30 <_malloc_r+0x80>
 8005b96:	230c      	movs	r3, #12
 8005b98:	603b      	str	r3, [r7, #0]
 8005b9a:	4638      	mov	r0, r7
 8005b9c:	f000 f80e 	bl	8005bbc <__malloc_unlock>
 8005ba0:	e797      	b.n	8005ad2 <_malloc_r+0x22>
 8005ba2:	6025      	str	r5, [r4, #0]
 8005ba4:	e7dc      	b.n	8005b60 <_malloc_r+0xb0>
 8005ba6:	605b      	str	r3, [r3, #4]
 8005ba8:	deff      	udf	#255	; 0xff
 8005baa:	bf00      	nop
 8005bac:	2000144c 	.word	0x2000144c

08005bb0 <__malloc_lock>:
 8005bb0:	4801      	ldr	r0, [pc, #4]	; (8005bb8 <__malloc_lock+0x8>)
 8005bb2:	f7ff bf0f 	b.w	80059d4 <__retarget_lock_acquire_recursive>
 8005bb6:	bf00      	nop
 8005bb8:	20001448 	.word	0x20001448

08005bbc <__malloc_unlock>:
 8005bbc:	4801      	ldr	r0, [pc, #4]	; (8005bc4 <__malloc_unlock+0x8>)
 8005bbe:	f7ff bf0a 	b.w	80059d6 <__retarget_lock_release_recursive>
 8005bc2:	bf00      	nop
 8005bc4:	20001448 	.word	0x20001448

08005bc8 <__ssputs_r>:
 8005bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bcc:	688e      	ldr	r6, [r1, #8]
 8005bce:	461f      	mov	r7, r3
 8005bd0:	42be      	cmp	r6, r7
 8005bd2:	680b      	ldr	r3, [r1, #0]
 8005bd4:	4682      	mov	sl, r0
 8005bd6:	460c      	mov	r4, r1
 8005bd8:	4690      	mov	r8, r2
 8005bda:	d82c      	bhi.n	8005c36 <__ssputs_r+0x6e>
 8005bdc:	898a      	ldrh	r2, [r1, #12]
 8005bde:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005be2:	d026      	beq.n	8005c32 <__ssputs_r+0x6a>
 8005be4:	6965      	ldr	r5, [r4, #20]
 8005be6:	6909      	ldr	r1, [r1, #16]
 8005be8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005bec:	eba3 0901 	sub.w	r9, r3, r1
 8005bf0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005bf4:	1c7b      	adds	r3, r7, #1
 8005bf6:	444b      	add	r3, r9
 8005bf8:	106d      	asrs	r5, r5, #1
 8005bfa:	429d      	cmp	r5, r3
 8005bfc:	bf38      	it	cc
 8005bfe:	461d      	movcc	r5, r3
 8005c00:	0553      	lsls	r3, r2, #21
 8005c02:	d527      	bpl.n	8005c54 <__ssputs_r+0x8c>
 8005c04:	4629      	mov	r1, r5
 8005c06:	f7ff ff53 	bl	8005ab0 <_malloc_r>
 8005c0a:	4606      	mov	r6, r0
 8005c0c:	b360      	cbz	r0, 8005c68 <__ssputs_r+0xa0>
 8005c0e:	6921      	ldr	r1, [r4, #16]
 8005c10:	464a      	mov	r2, r9
 8005c12:	f000 faeb 	bl	80061ec <memcpy>
 8005c16:	89a3      	ldrh	r3, [r4, #12]
 8005c18:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c20:	81a3      	strh	r3, [r4, #12]
 8005c22:	6126      	str	r6, [r4, #16]
 8005c24:	6165      	str	r5, [r4, #20]
 8005c26:	444e      	add	r6, r9
 8005c28:	eba5 0509 	sub.w	r5, r5, r9
 8005c2c:	6026      	str	r6, [r4, #0]
 8005c2e:	60a5      	str	r5, [r4, #8]
 8005c30:	463e      	mov	r6, r7
 8005c32:	42be      	cmp	r6, r7
 8005c34:	d900      	bls.n	8005c38 <__ssputs_r+0x70>
 8005c36:	463e      	mov	r6, r7
 8005c38:	6820      	ldr	r0, [r4, #0]
 8005c3a:	4632      	mov	r2, r6
 8005c3c:	4641      	mov	r1, r8
 8005c3e:	f000 faab 	bl	8006198 <memmove>
 8005c42:	68a3      	ldr	r3, [r4, #8]
 8005c44:	1b9b      	subs	r3, r3, r6
 8005c46:	60a3      	str	r3, [r4, #8]
 8005c48:	6823      	ldr	r3, [r4, #0]
 8005c4a:	4433      	add	r3, r6
 8005c4c:	6023      	str	r3, [r4, #0]
 8005c4e:	2000      	movs	r0, #0
 8005c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c54:	462a      	mov	r2, r5
 8005c56:	f000 fad7 	bl	8006208 <_realloc_r>
 8005c5a:	4606      	mov	r6, r0
 8005c5c:	2800      	cmp	r0, #0
 8005c5e:	d1e0      	bne.n	8005c22 <__ssputs_r+0x5a>
 8005c60:	6921      	ldr	r1, [r4, #16]
 8005c62:	4650      	mov	r0, sl
 8005c64:	f7ff feb8 	bl	80059d8 <_free_r>
 8005c68:	230c      	movs	r3, #12
 8005c6a:	f8ca 3000 	str.w	r3, [sl]
 8005c6e:	89a3      	ldrh	r3, [r4, #12]
 8005c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c74:	81a3      	strh	r3, [r4, #12]
 8005c76:	f04f 30ff 	mov.w	r0, #4294967295
 8005c7a:	e7e9      	b.n	8005c50 <__ssputs_r+0x88>

08005c7c <_svfiprintf_r>:
 8005c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c80:	4698      	mov	r8, r3
 8005c82:	898b      	ldrh	r3, [r1, #12]
 8005c84:	061b      	lsls	r3, r3, #24
 8005c86:	b09d      	sub	sp, #116	; 0x74
 8005c88:	4607      	mov	r7, r0
 8005c8a:	460d      	mov	r5, r1
 8005c8c:	4614      	mov	r4, r2
 8005c8e:	d50e      	bpl.n	8005cae <_svfiprintf_r+0x32>
 8005c90:	690b      	ldr	r3, [r1, #16]
 8005c92:	b963      	cbnz	r3, 8005cae <_svfiprintf_r+0x32>
 8005c94:	2140      	movs	r1, #64	; 0x40
 8005c96:	f7ff ff0b 	bl	8005ab0 <_malloc_r>
 8005c9a:	6028      	str	r0, [r5, #0]
 8005c9c:	6128      	str	r0, [r5, #16]
 8005c9e:	b920      	cbnz	r0, 8005caa <_svfiprintf_r+0x2e>
 8005ca0:	230c      	movs	r3, #12
 8005ca2:	603b      	str	r3, [r7, #0]
 8005ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca8:	e0d0      	b.n	8005e4c <_svfiprintf_r+0x1d0>
 8005caa:	2340      	movs	r3, #64	; 0x40
 8005cac:	616b      	str	r3, [r5, #20]
 8005cae:	2300      	movs	r3, #0
 8005cb0:	9309      	str	r3, [sp, #36]	; 0x24
 8005cb2:	2320      	movs	r3, #32
 8005cb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cbc:	2330      	movs	r3, #48	; 0x30
 8005cbe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005e64 <_svfiprintf_r+0x1e8>
 8005cc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005cc6:	f04f 0901 	mov.w	r9, #1
 8005cca:	4623      	mov	r3, r4
 8005ccc:	469a      	mov	sl, r3
 8005cce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cd2:	b10a      	cbz	r2, 8005cd8 <_svfiprintf_r+0x5c>
 8005cd4:	2a25      	cmp	r2, #37	; 0x25
 8005cd6:	d1f9      	bne.n	8005ccc <_svfiprintf_r+0x50>
 8005cd8:	ebba 0b04 	subs.w	fp, sl, r4
 8005cdc:	d00b      	beq.n	8005cf6 <_svfiprintf_r+0x7a>
 8005cde:	465b      	mov	r3, fp
 8005ce0:	4622      	mov	r2, r4
 8005ce2:	4629      	mov	r1, r5
 8005ce4:	4638      	mov	r0, r7
 8005ce6:	f7ff ff6f 	bl	8005bc8 <__ssputs_r>
 8005cea:	3001      	adds	r0, #1
 8005cec:	f000 80a9 	beq.w	8005e42 <_svfiprintf_r+0x1c6>
 8005cf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cf2:	445a      	add	r2, fp
 8005cf4:	9209      	str	r2, [sp, #36]	; 0x24
 8005cf6:	f89a 3000 	ldrb.w	r3, [sl]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f000 80a1 	beq.w	8005e42 <_svfiprintf_r+0x1c6>
 8005d00:	2300      	movs	r3, #0
 8005d02:	f04f 32ff 	mov.w	r2, #4294967295
 8005d06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d0a:	f10a 0a01 	add.w	sl, sl, #1
 8005d0e:	9304      	str	r3, [sp, #16]
 8005d10:	9307      	str	r3, [sp, #28]
 8005d12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d16:	931a      	str	r3, [sp, #104]	; 0x68
 8005d18:	4654      	mov	r4, sl
 8005d1a:	2205      	movs	r2, #5
 8005d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d20:	4850      	ldr	r0, [pc, #320]	; (8005e64 <_svfiprintf_r+0x1e8>)
 8005d22:	f7fa fa5d 	bl	80001e0 <memchr>
 8005d26:	9a04      	ldr	r2, [sp, #16]
 8005d28:	b9d8      	cbnz	r0, 8005d62 <_svfiprintf_r+0xe6>
 8005d2a:	06d0      	lsls	r0, r2, #27
 8005d2c:	bf44      	itt	mi
 8005d2e:	2320      	movmi	r3, #32
 8005d30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d34:	0711      	lsls	r1, r2, #28
 8005d36:	bf44      	itt	mi
 8005d38:	232b      	movmi	r3, #43	; 0x2b
 8005d3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d3e:	f89a 3000 	ldrb.w	r3, [sl]
 8005d42:	2b2a      	cmp	r3, #42	; 0x2a
 8005d44:	d015      	beq.n	8005d72 <_svfiprintf_r+0xf6>
 8005d46:	9a07      	ldr	r2, [sp, #28]
 8005d48:	4654      	mov	r4, sl
 8005d4a:	2000      	movs	r0, #0
 8005d4c:	f04f 0c0a 	mov.w	ip, #10
 8005d50:	4621      	mov	r1, r4
 8005d52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d56:	3b30      	subs	r3, #48	; 0x30
 8005d58:	2b09      	cmp	r3, #9
 8005d5a:	d94d      	bls.n	8005df8 <_svfiprintf_r+0x17c>
 8005d5c:	b1b0      	cbz	r0, 8005d8c <_svfiprintf_r+0x110>
 8005d5e:	9207      	str	r2, [sp, #28]
 8005d60:	e014      	b.n	8005d8c <_svfiprintf_r+0x110>
 8005d62:	eba0 0308 	sub.w	r3, r0, r8
 8005d66:	fa09 f303 	lsl.w	r3, r9, r3
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	9304      	str	r3, [sp, #16]
 8005d6e:	46a2      	mov	sl, r4
 8005d70:	e7d2      	b.n	8005d18 <_svfiprintf_r+0x9c>
 8005d72:	9b03      	ldr	r3, [sp, #12]
 8005d74:	1d19      	adds	r1, r3, #4
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	9103      	str	r1, [sp, #12]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	bfbb      	ittet	lt
 8005d7e:	425b      	neglt	r3, r3
 8005d80:	f042 0202 	orrlt.w	r2, r2, #2
 8005d84:	9307      	strge	r3, [sp, #28]
 8005d86:	9307      	strlt	r3, [sp, #28]
 8005d88:	bfb8      	it	lt
 8005d8a:	9204      	strlt	r2, [sp, #16]
 8005d8c:	7823      	ldrb	r3, [r4, #0]
 8005d8e:	2b2e      	cmp	r3, #46	; 0x2e
 8005d90:	d10c      	bne.n	8005dac <_svfiprintf_r+0x130>
 8005d92:	7863      	ldrb	r3, [r4, #1]
 8005d94:	2b2a      	cmp	r3, #42	; 0x2a
 8005d96:	d134      	bne.n	8005e02 <_svfiprintf_r+0x186>
 8005d98:	9b03      	ldr	r3, [sp, #12]
 8005d9a:	1d1a      	adds	r2, r3, #4
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	9203      	str	r2, [sp, #12]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	bfb8      	it	lt
 8005da4:	f04f 33ff 	movlt.w	r3, #4294967295
 8005da8:	3402      	adds	r4, #2
 8005daa:	9305      	str	r3, [sp, #20]
 8005dac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005e74 <_svfiprintf_r+0x1f8>
 8005db0:	7821      	ldrb	r1, [r4, #0]
 8005db2:	2203      	movs	r2, #3
 8005db4:	4650      	mov	r0, sl
 8005db6:	f7fa fa13 	bl	80001e0 <memchr>
 8005dba:	b138      	cbz	r0, 8005dcc <_svfiprintf_r+0x150>
 8005dbc:	9b04      	ldr	r3, [sp, #16]
 8005dbe:	eba0 000a 	sub.w	r0, r0, sl
 8005dc2:	2240      	movs	r2, #64	; 0x40
 8005dc4:	4082      	lsls	r2, r0
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	3401      	adds	r4, #1
 8005dca:	9304      	str	r3, [sp, #16]
 8005dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dd0:	4825      	ldr	r0, [pc, #148]	; (8005e68 <_svfiprintf_r+0x1ec>)
 8005dd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005dd6:	2206      	movs	r2, #6
 8005dd8:	f7fa fa02 	bl	80001e0 <memchr>
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	d038      	beq.n	8005e52 <_svfiprintf_r+0x1d6>
 8005de0:	4b22      	ldr	r3, [pc, #136]	; (8005e6c <_svfiprintf_r+0x1f0>)
 8005de2:	bb1b      	cbnz	r3, 8005e2c <_svfiprintf_r+0x1b0>
 8005de4:	9b03      	ldr	r3, [sp, #12]
 8005de6:	3307      	adds	r3, #7
 8005de8:	f023 0307 	bic.w	r3, r3, #7
 8005dec:	3308      	adds	r3, #8
 8005dee:	9303      	str	r3, [sp, #12]
 8005df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005df2:	4433      	add	r3, r6
 8005df4:	9309      	str	r3, [sp, #36]	; 0x24
 8005df6:	e768      	b.n	8005cca <_svfiprintf_r+0x4e>
 8005df8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005dfc:	460c      	mov	r4, r1
 8005dfe:	2001      	movs	r0, #1
 8005e00:	e7a6      	b.n	8005d50 <_svfiprintf_r+0xd4>
 8005e02:	2300      	movs	r3, #0
 8005e04:	3401      	adds	r4, #1
 8005e06:	9305      	str	r3, [sp, #20]
 8005e08:	4619      	mov	r1, r3
 8005e0a:	f04f 0c0a 	mov.w	ip, #10
 8005e0e:	4620      	mov	r0, r4
 8005e10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e14:	3a30      	subs	r2, #48	; 0x30
 8005e16:	2a09      	cmp	r2, #9
 8005e18:	d903      	bls.n	8005e22 <_svfiprintf_r+0x1a6>
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d0c6      	beq.n	8005dac <_svfiprintf_r+0x130>
 8005e1e:	9105      	str	r1, [sp, #20]
 8005e20:	e7c4      	b.n	8005dac <_svfiprintf_r+0x130>
 8005e22:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e26:	4604      	mov	r4, r0
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e7f0      	b.n	8005e0e <_svfiprintf_r+0x192>
 8005e2c:	ab03      	add	r3, sp, #12
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	462a      	mov	r2, r5
 8005e32:	4b0f      	ldr	r3, [pc, #60]	; (8005e70 <_svfiprintf_r+0x1f4>)
 8005e34:	a904      	add	r1, sp, #16
 8005e36:	4638      	mov	r0, r7
 8005e38:	f3af 8000 	nop.w
 8005e3c:	1c42      	adds	r2, r0, #1
 8005e3e:	4606      	mov	r6, r0
 8005e40:	d1d6      	bne.n	8005df0 <_svfiprintf_r+0x174>
 8005e42:	89ab      	ldrh	r3, [r5, #12]
 8005e44:	065b      	lsls	r3, r3, #25
 8005e46:	f53f af2d 	bmi.w	8005ca4 <_svfiprintf_r+0x28>
 8005e4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e4c:	b01d      	add	sp, #116	; 0x74
 8005e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e52:	ab03      	add	r3, sp, #12
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	462a      	mov	r2, r5
 8005e58:	4b05      	ldr	r3, [pc, #20]	; (8005e70 <_svfiprintf_r+0x1f4>)
 8005e5a:	a904      	add	r1, sp, #16
 8005e5c:	4638      	mov	r0, r7
 8005e5e:	f000 f879 	bl	8005f54 <_printf_i>
 8005e62:	e7eb      	b.n	8005e3c <_svfiprintf_r+0x1c0>
 8005e64:	0800634c 	.word	0x0800634c
 8005e68:	08006356 	.word	0x08006356
 8005e6c:	00000000 	.word	0x00000000
 8005e70:	08005bc9 	.word	0x08005bc9
 8005e74:	08006352 	.word	0x08006352

08005e78 <_printf_common>:
 8005e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e7c:	4616      	mov	r6, r2
 8005e7e:	4699      	mov	r9, r3
 8005e80:	688a      	ldr	r2, [r1, #8]
 8005e82:	690b      	ldr	r3, [r1, #16]
 8005e84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	bfb8      	it	lt
 8005e8c:	4613      	movlt	r3, r2
 8005e8e:	6033      	str	r3, [r6, #0]
 8005e90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e94:	4607      	mov	r7, r0
 8005e96:	460c      	mov	r4, r1
 8005e98:	b10a      	cbz	r2, 8005e9e <_printf_common+0x26>
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	6033      	str	r3, [r6, #0]
 8005e9e:	6823      	ldr	r3, [r4, #0]
 8005ea0:	0699      	lsls	r1, r3, #26
 8005ea2:	bf42      	ittt	mi
 8005ea4:	6833      	ldrmi	r3, [r6, #0]
 8005ea6:	3302      	addmi	r3, #2
 8005ea8:	6033      	strmi	r3, [r6, #0]
 8005eaa:	6825      	ldr	r5, [r4, #0]
 8005eac:	f015 0506 	ands.w	r5, r5, #6
 8005eb0:	d106      	bne.n	8005ec0 <_printf_common+0x48>
 8005eb2:	f104 0a19 	add.w	sl, r4, #25
 8005eb6:	68e3      	ldr	r3, [r4, #12]
 8005eb8:	6832      	ldr	r2, [r6, #0]
 8005eba:	1a9b      	subs	r3, r3, r2
 8005ebc:	42ab      	cmp	r3, r5
 8005ebe:	dc26      	bgt.n	8005f0e <_printf_common+0x96>
 8005ec0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ec4:	1e13      	subs	r3, r2, #0
 8005ec6:	6822      	ldr	r2, [r4, #0]
 8005ec8:	bf18      	it	ne
 8005eca:	2301      	movne	r3, #1
 8005ecc:	0692      	lsls	r2, r2, #26
 8005ece:	d42b      	bmi.n	8005f28 <_printf_common+0xb0>
 8005ed0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ed4:	4649      	mov	r1, r9
 8005ed6:	4638      	mov	r0, r7
 8005ed8:	47c0      	blx	r8
 8005eda:	3001      	adds	r0, #1
 8005edc:	d01e      	beq.n	8005f1c <_printf_common+0xa4>
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	6922      	ldr	r2, [r4, #16]
 8005ee2:	f003 0306 	and.w	r3, r3, #6
 8005ee6:	2b04      	cmp	r3, #4
 8005ee8:	bf02      	ittt	eq
 8005eea:	68e5      	ldreq	r5, [r4, #12]
 8005eec:	6833      	ldreq	r3, [r6, #0]
 8005eee:	1aed      	subeq	r5, r5, r3
 8005ef0:	68a3      	ldr	r3, [r4, #8]
 8005ef2:	bf0c      	ite	eq
 8005ef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ef8:	2500      	movne	r5, #0
 8005efa:	4293      	cmp	r3, r2
 8005efc:	bfc4      	itt	gt
 8005efe:	1a9b      	subgt	r3, r3, r2
 8005f00:	18ed      	addgt	r5, r5, r3
 8005f02:	2600      	movs	r6, #0
 8005f04:	341a      	adds	r4, #26
 8005f06:	42b5      	cmp	r5, r6
 8005f08:	d11a      	bne.n	8005f40 <_printf_common+0xc8>
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	e008      	b.n	8005f20 <_printf_common+0xa8>
 8005f0e:	2301      	movs	r3, #1
 8005f10:	4652      	mov	r2, sl
 8005f12:	4649      	mov	r1, r9
 8005f14:	4638      	mov	r0, r7
 8005f16:	47c0      	blx	r8
 8005f18:	3001      	adds	r0, #1
 8005f1a:	d103      	bne.n	8005f24 <_printf_common+0xac>
 8005f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f24:	3501      	adds	r5, #1
 8005f26:	e7c6      	b.n	8005eb6 <_printf_common+0x3e>
 8005f28:	18e1      	adds	r1, r4, r3
 8005f2a:	1c5a      	adds	r2, r3, #1
 8005f2c:	2030      	movs	r0, #48	; 0x30
 8005f2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f32:	4422      	add	r2, r4
 8005f34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f3c:	3302      	adds	r3, #2
 8005f3e:	e7c7      	b.n	8005ed0 <_printf_common+0x58>
 8005f40:	2301      	movs	r3, #1
 8005f42:	4622      	mov	r2, r4
 8005f44:	4649      	mov	r1, r9
 8005f46:	4638      	mov	r0, r7
 8005f48:	47c0      	blx	r8
 8005f4a:	3001      	adds	r0, #1
 8005f4c:	d0e6      	beq.n	8005f1c <_printf_common+0xa4>
 8005f4e:	3601      	adds	r6, #1
 8005f50:	e7d9      	b.n	8005f06 <_printf_common+0x8e>
	...

08005f54 <_printf_i>:
 8005f54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f58:	7e0f      	ldrb	r7, [r1, #24]
 8005f5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f5c:	2f78      	cmp	r7, #120	; 0x78
 8005f5e:	4691      	mov	r9, r2
 8005f60:	4680      	mov	r8, r0
 8005f62:	460c      	mov	r4, r1
 8005f64:	469a      	mov	sl, r3
 8005f66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f6a:	d807      	bhi.n	8005f7c <_printf_i+0x28>
 8005f6c:	2f62      	cmp	r7, #98	; 0x62
 8005f6e:	d80a      	bhi.n	8005f86 <_printf_i+0x32>
 8005f70:	2f00      	cmp	r7, #0
 8005f72:	f000 80d4 	beq.w	800611e <_printf_i+0x1ca>
 8005f76:	2f58      	cmp	r7, #88	; 0x58
 8005f78:	f000 80c0 	beq.w	80060fc <_printf_i+0x1a8>
 8005f7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f84:	e03a      	b.n	8005ffc <_printf_i+0xa8>
 8005f86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f8a:	2b15      	cmp	r3, #21
 8005f8c:	d8f6      	bhi.n	8005f7c <_printf_i+0x28>
 8005f8e:	a101      	add	r1, pc, #4	; (adr r1, 8005f94 <_printf_i+0x40>)
 8005f90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f94:	08005fed 	.word	0x08005fed
 8005f98:	08006001 	.word	0x08006001
 8005f9c:	08005f7d 	.word	0x08005f7d
 8005fa0:	08005f7d 	.word	0x08005f7d
 8005fa4:	08005f7d 	.word	0x08005f7d
 8005fa8:	08005f7d 	.word	0x08005f7d
 8005fac:	08006001 	.word	0x08006001
 8005fb0:	08005f7d 	.word	0x08005f7d
 8005fb4:	08005f7d 	.word	0x08005f7d
 8005fb8:	08005f7d 	.word	0x08005f7d
 8005fbc:	08005f7d 	.word	0x08005f7d
 8005fc0:	08006105 	.word	0x08006105
 8005fc4:	0800602d 	.word	0x0800602d
 8005fc8:	080060bf 	.word	0x080060bf
 8005fcc:	08005f7d 	.word	0x08005f7d
 8005fd0:	08005f7d 	.word	0x08005f7d
 8005fd4:	08006127 	.word	0x08006127
 8005fd8:	08005f7d 	.word	0x08005f7d
 8005fdc:	0800602d 	.word	0x0800602d
 8005fe0:	08005f7d 	.word	0x08005f7d
 8005fe4:	08005f7d 	.word	0x08005f7d
 8005fe8:	080060c7 	.word	0x080060c7
 8005fec:	682b      	ldr	r3, [r5, #0]
 8005fee:	1d1a      	adds	r2, r3, #4
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	602a      	str	r2, [r5, #0]
 8005ff4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ff8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e09f      	b.n	8006140 <_printf_i+0x1ec>
 8006000:	6820      	ldr	r0, [r4, #0]
 8006002:	682b      	ldr	r3, [r5, #0]
 8006004:	0607      	lsls	r7, r0, #24
 8006006:	f103 0104 	add.w	r1, r3, #4
 800600a:	6029      	str	r1, [r5, #0]
 800600c:	d501      	bpl.n	8006012 <_printf_i+0xbe>
 800600e:	681e      	ldr	r6, [r3, #0]
 8006010:	e003      	b.n	800601a <_printf_i+0xc6>
 8006012:	0646      	lsls	r6, r0, #25
 8006014:	d5fb      	bpl.n	800600e <_printf_i+0xba>
 8006016:	f9b3 6000 	ldrsh.w	r6, [r3]
 800601a:	2e00      	cmp	r6, #0
 800601c:	da03      	bge.n	8006026 <_printf_i+0xd2>
 800601e:	232d      	movs	r3, #45	; 0x2d
 8006020:	4276      	negs	r6, r6
 8006022:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006026:	485a      	ldr	r0, [pc, #360]	; (8006190 <_printf_i+0x23c>)
 8006028:	230a      	movs	r3, #10
 800602a:	e012      	b.n	8006052 <_printf_i+0xfe>
 800602c:	682b      	ldr	r3, [r5, #0]
 800602e:	6820      	ldr	r0, [r4, #0]
 8006030:	1d19      	adds	r1, r3, #4
 8006032:	6029      	str	r1, [r5, #0]
 8006034:	0605      	lsls	r5, r0, #24
 8006036:	d501      	bpl.n	800603c <_printf_i+0xe8>
 8006038:	681e      	ldr	r6, [r3, #0]
 800603a:	e002      	b.n	8006042 <_printf_i+0xee>
 800603c:	0641      	lsls	r1, r0, #25
 800603e:	d5fb      	bpl.n	8006038 <_printf_i+0xe4>
 8006040:	881e      	ldrh	r6, [r3, #0]
 8006042:	4853      	ldr	r0, [pc, #332]	; (8006190 <_printf_i+0x23c>)
 8006044:	2f6f      	cmp	r7, #111	; 0x6f
 8006046:	bf0c      	ite	eq
 8006048:	2308      	moveq	r3, #8
 800604a:	230a      	movne	r3, #10
 800604c:	2100      	movs	r1, #0
 800604e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006052:	6865      	ldr	r5, [r4, #4]
 8006054:	60a5      	str	r5, [r4, #8]
 8006056:	2d00      	cmp	r5, #0
 8006058:	bfa2      	ittt	ge
 800605a:	6821      	ldrge	r1, [r4, #0]
 800605c:	f021 0104 	bicge.w	r1, r1, #4
 8006060:	6021      	strge	r1, [r4, #0]
 8006062:	b90e      	cbnz	r6, 8006068 <_printf_i+0x114>
 8006064:	2d00      	cmp	r5, #0
 8006066:	d04b      	beq.n	8006100 <_printf_i+0x1ac>
 8006068:	4615      	mov	r5, r2
 800606a:	fbb6 f1f3 	udiv	r1, r6, r3
 800606e:	fb03 6711 	mls	r7, r3, r1, r6
 8006072:	5dc7      	ldrb	r7, [r0, r7]
 8006074:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006078:	4637      	mov	r7, r6
 800607a:	42bb      	cmp	r3, r7
 800607c:	460e      	mov	r6, r1
 800607e:	d9f4      	bls.n	800606a <_printf_i+0x116>
 8006080:	2b08      	cmp	r3, #8
 8006082:	d10b      	bne.n	800609c <_printf_i+0x148>
 8006084:	6823      	ldr	r3, [r4, #0]
 8006086:	07de      	lsls	r6, r3, #31
 8006088:	d508      	bpl.n	800609c <_printf_i+0x148>
 800608a:	6923      	ldr	r3, [r4, #16]
 800608c:	6861      	ldr	r1, [r4, #4]
 800608e:	4299      	cmp	r1, r3
 8006090:	bfde      	ittt	le
 8006092:	2330      	movle	r3, #48	; 0x30
 8006094:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006098:	f105 35ff 	addle.w	r5, r5, #4294967295
 800609c:	1b52      	subs	r2, r2, r5
 800609e:	6122      	str	r2, [r4, #16]
 80060a0:	f8cd a000 	str.w	sl, [sp]
 80060a4:	464b      	mov	r3, r9
 80060a6:	aa03      	add	r2, sp, #12
 80060a8:	4621      	mov	r1, r4
 80060aa:	4640      	mov	r0, r8
 80060ac:	f7ff fee4 	bl	8005e78 <_printf_common>
 80060b0:	3001      	adds	r0, #1
 80060b2:	d14a      	bne.n	800614a <_printf_i+0x1f6>
 80060b4:	f04f 30ff 	mov.w	r0, #4294967295
 80060b8:	b004      	add	sp, #16
 80060ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060be:	6823      	ldr	r3, [r4, #0]
 80060c0:	f043 0320 	orr.w	r3, r3, #32
 80060c4:	6023      	str	r3, [r4, #0]
 80060c6:	4833      	ldr	r0, [pc, #204]	; (8006194 <_printf_i+0x240>)
 80060c8:	2778      	movs	r7, #120	; 0x78
 80060ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80060ce:	6823      	ldr	r3, [r4, #0]
 80060d0:	6829      	ldr	r1, [r5, #0]
 80060d2:	061f      	lsls	r7, r3, #24
 80060d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80060d8:	d402      	bmi.n	80060e0 <_printf_i+0x18c>
 80060da:	065f      	lsls	r7, r3, #25
 80060dc:	bf48      	it	mi
 80060de:	b2b6      	uxthmi	r6, r6
 80060e0:	07df      	lsls	r7, r3, #31
 80060e2:	bf48      	it	mi
 80060e4:	f043 0320 	orrmi.w	r3, r3, #32
 80060e8:	6029      	str	r1, [r5, #0]
 80060ea:	bf48      	it	mi
 80060ec:	6023      	strmi	r3, [r4, #0]
 80060ee:	b91e      	cbnz	r6, 80060f8 <_printf_i+0x1a4>
 80060f0:	6823      	ldr	r3, [r4, #0]
 80060f2:	f023 0320 	bic.w	r3, r3, #32
 80060f6:	6023      	str	r3, [r4, #0]
 80060f8:	2310      	movs	r3, #16
 80060fa:	e7a7      	b.n	800604c <_printf_i+0xf8>
 80060fc:	4824      	ldr	r0, [pc, #144]	; (8006190 <_printf_i+0x23c>)
 80060fe:	e7e4      	b.n	80060ca <_printf_i+0x176>
 8006100:	4615      	mov	r5, r2
 8006102:	e7bd      	b.n	8006080 <_printf_i+0x12c>
 8006104:	682b      	ldr	r3, [r5, #0]
 8006106:	6826      	ldr	r6, [r4, #0]
 8006108:	6961      	ldr	r1, [r4, #20]
 800610a:	1d18      	adds	r0, r3, #4
 800610c:	6028      	str	r0, [r5, #0]
 800610e:	0635      	lsls	r5, r6, #24
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	d501      	bpl.n	8006118 <_printf_i+0x1c4>
 8006114:	6019      	str	r1, [r3, #0]
 8006116:	e002      	b.n	800611e <_printf_i+0x1ca>
 8006118:	0670      	lsls	r0, r6, #25
 800611a:	d5fb      	bpl.n	8006114 <_printf_i+0x1c0>
 800611c:	8019      	strh	r1, [r3, #0]
 800611e:	2300      	movs	r3, #0
 8006120:	6123      	str	r3, [r4, #16]
 8006122:	4615      	mov	r5, r2
 8006124:	e7bc      	b.n	80060a0 <_printf_i+0x14c>
 8006126:	682b      	ldr	r3, [r5, #0]
 8006128:	1d1a      	adds	r2, r3, #4
 800612a:	602a      	str	r2, [r5, #0]
 800612c:	681d      	ldr	r5, [r3, #0]
 800612e:	6862      	ldr	r2, [r4, #4]
 8006130:	2100      	movs	r1, #0
 8006132:	4628      	mov	r0, r5
 8006134:	f7fa f854 	bl	80001e0 <memchr>
 8006138:	b108      	cbz	r0, 800613e <_printf_i+0x1ea>
 800613a:	1b40      	subs	r0, r0, r5
 800613c:	6060      	str	r0, [r4, #4]
 800613e:	6863      	ldr	r3, [r4, #4]
 8006140:	6123      	str	r3, [r4, #16]
 8006142:	2300      	movs	r3, #0
 8006144:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006148:	e7aa      	b.n	80060a0 <_printf_i+0x14c>
 800614a:	6923      	ldr	r3, [r4, #16]
 800614c:	462a      	mov	r2, r5
 800614e:	4649      	mov	r1, r9
 8006150:	4640      	mov	r0, r8
 8006152:	47d0      	blx	sl
 8006154:	3001      	adds	r0, #1
 8006156:	d0ad      	beq.n	80060b4 <_printf_i+0x160>
 8006158:	6823      	ldr	r3, [r4, #0]
 800615a:	079b      	lsls	r3, r3, #30
 800615c:	d413      	bmi.n	8006186 <_printf_i+0x232>
 800615e:	68e0      	ldr	r0, [r4, #12]
 8006160:	9b03      	ldr	r3, [sp, #12]
 8006162:	4298      	cmp	r0, r3
 8006164:	bfb8      	it	lt
 8006166:	4618      	movlt	r0, r3
 8006168:	e7a6      	b.n	80060b8 <_printf_i+0x164>
 800616a:	2301      	movs	r3, #1
 800616c:	4632      	mov	r2, r6
 800616e:	4649      	mov	r1, r9
 8006170:	4640      	mov	r0, r8
 8006172:	47d0      	blx	sl
 8006174:	3001      	adds	r0, #1
 8006176:	d09d      	beq.n	80060b4 <_printf_i+0x160>
 8006178:	3501      	adds	r5, #1
 800617a:	68e3      	ldr	r3, [r4, #12]
 800617c:	9903      	ldr	r1, [sp, #12]
 800617e:	1a5b      	subs	r3, r3, r1
 8006180:	42ab      	cmp	r3, r5
 8006182:	dcf2      	bgt.n	800616a <_printf_i+0x216>
 8006184:	e7eb      	b.n	800615e <_printf_i+0x20a>
 8006186:	2500      	movs	r5, #0
 8006188:	f104 0619 	add.w	r6, r4, #25
 800618c:	e7f5      	b.n	800617a <_printf_i+0x226>
 800618e:	bf00      	nop
 8006190:	0800635d 	.word	0x0800635d
 8006194:	0800636e 	.word	0x0800636e

08006198 <memmove>:
 8006198:	4288      	cmp	r0, r1
 800619a:	b510      	push	{r4, lr}
 800619c:	eb01 0402 	add.w	r4, r1, r2
 80061a0:	d902      	bls.n	80061a8 <memmove+0x10>
 80061a2:	4284      	cmp	r4, r0
 80061a4:	4623      	mov	r3, r4
 80061a6:	d807      	bhi.n	80061b8 <memmove+0x20>
 80061a8:	1e43      	subs	r3, r0, #1
 80061aa:	42a1      	cmp	r1, r4
 80061ac:	d008      	beq.n	80061c0 <memmove+0x28>
 80061ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061b6:	e7f8      	b.n	80061aa <memmove+0x12>
 80061b8:	4402      	add	r2, r0
 80061ba:	4601      	mov	r1, r0
 80061bc:	428a      	cmp	r2, r1
 80061be:	d100      	bne.n	80061c2 <memmove+0x2a>
 80061c0:	bd10      	pop	{r4, pc}
 80061c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80061ca:	e7f7      	b.n	80061bc <memmove+0x24>

080061cc <_sbrk_r>:
 80061cc:	b538      	push	{r3, r4, r5, lr}
 80061ce:	4d06      	ldr	r5, [pc, #24]	; (80061e8 <_sbrk_r+0x1c>)
 80061d0:	2300      	movs	r3, #0
 80061d2:	4604      	mov	r4, r0
 80061d4:	4608      	mov	r0, r1
 80061d6:	602b      	str	r3, [r5, #0]
 80061d8:	f7fa feae 	bl	8000f38 <_sbrk>
 80061dc:	1c43      	adds	r3, r0, #1
 80061de:	d102      	bne.n	80061e6 <_sbrk_r+0x1a>
 80061e0:	682b      	ldr	r3, [r5, #0]
 80061e2:	b103      	cbz	r3, 80061e6 <_sbrk_r+0x1a>
 80061e4:	6023      	str	r3, [r4, #0]
 80061e6:	bd38      	pop	{r3, r4, r5, pc}
 80061e8:	20001444 	.word	0x20001444

080061ec <memcpy>:
 80061ec:	440a      	add	r2, r1
 80061ee:	4291      	cmp	r1, r2
 80061f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80061f4:	d100      	bne.n	80061f8 <memcpy+0xc>
 80061f6:	4770      	bx	lr
 80061f8:	b510      	push	{r4, lr}
 80061fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006202:	4291      	cmp	r1, r2
 8006204:	d1f9      	bne.n	80061fa <memcpy+0xe>
 8006206:	bd10      	pop	{r4, pc}

08006208 <_realloc_r>:
 8006208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800620c:	4680      	mov	r8, r0
 800620e:	4614      	mov	r4, r2
 8006210:	460e      	mov	r6, r1
 8006212:	b921      	cbnz	r1, 800621e <_realloc_r+0x16>
 8006214:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006218:	4611      	mov	r1, r2
 800621a:	f7ff bc49 	b.w	8005ab0 <_malloc_r>
 800621e:	b92a      	cbnz	r2, 800622c <_realloc_r+0x24>
 8006220:	f7ff fbda 	bl	80059d8 <_free_r>
 8006224:	4625      	mov	r5, r4
 8006226:	4628      	mov	r0, r5
 8006228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800622c:	f000 f81b 	bl	8006266 <_malloc_usable_size_r>
 8006230:	4284      	cmp	r4, r0
 8006232:	4607      	mov	r7, r0
 8006234:	d802      	bhi.n	800623c <_realloc_r+0x34>
 8006236:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800623a:	d812      	bhi.n	8006262 <_realloc_r+0x5a>
 800623c:	4621      	mov	r1, r4
 800623e:	4640      	mov	r0, r8
 8006240:	f7ff fc36 	bl	8005ab0 <_malloc_r>
 8006244:	4605      	mov	r5, r0
 8006246:	2800      	cmp	r0, #0
 8006248:	d0ed      	beq.n	8006226 <_realloc_r+0x1e>
 800624a:	42bc      	cmp	r4, r7
 800624c:	4622      	mov	r2, r4
 800624e:	4631      	mov	r1, r6
 8006250:	bf28      	it	cs
 8006252:	463a      	movcs	r2, r7
 8006254:	f7ff ffca 	bl	80061ec <memcpy>
 8006258:	4631      	mov	r1, r6
 800625a:	4640      	mov	r0, r8
 800625c:	f7ff fbbc 	bl	80059d8 <_free_r>
 8006260:	e7e1      	b.n	8006226 <_realloc_r+0x1e>
 8006262:	4635      	mov	r5, r6
 8006264:	e7df      	b.n	8006226 <_realloc_r+0x1e>

08006266 <_malloc_usable_size_r>:
 8006266:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800626a:	1f18      	subs	r0, r3, #4
 800626c:	2b00      	cmp	r3, #0
 800626e:	bfbc      	itt	lt
 8006270:	580b      	ldrlt	r3, [r1, r0]
 8006272:	18c0      	addlt	r0, r0, r3
 8006274:	4770      	bx	lr
	...

08006278 <_init>:
 8006278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800627a:	bf00      	nop
 800627c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800627e:	bc08      	pop	{r3}
 8006280:	469e      	mov	lr, r3
 8006282:	4770      	bx	lr

08006284 <_fini>:
 8006284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006286:	bf00      	nop
 8006288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800628a:	bc08      	pop	{r3}
 800628c:	469e      	mov	lr, r3
 800628e:	4770      	bx	lr
