
CPE 316 A2 Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000748  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080008d0  080008d0  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080008d0  080008d0  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  080008d0  080008d0  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008d0  080008d0  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008d0  080008d0  000108d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080008d4  080008d4  000108d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080008d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000020  080008f8  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000004c  080008f8  0002004c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002b31  00000000  00000000  00020093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000009f4  00000000  00000000  00022bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000360  00000000  00000000  000235b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000026c  00000000  00000000  00023918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000263a1  00000000  00000000  00023b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003836  00000000  00000000  00049f25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1531  00000000  00000000  0004d75b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000bd4  00000000  00000000  0012ec8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0012f860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080008b8 	.word	0x080008b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	080008b8 	.word	0x080008b8

080001c8 <_Z9Init_GPIOv>:
uint8_t colPins[COLS] = {0 , 12, 1};  // PA0, PA4, PA1

volatile uint8_t keystates[ROWS * COLS] = {0};

void Init_GPIO(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
    // Enable GPIOA, GPIOB, and GPIOC clocks
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN | RCC_AHB2ENR_GPIOCEN | RCC_AHB2ENR_GPIOAEN;
 80001ce:	4b36      	ldr	r3, [pc, #216]	; (80002a8 <_Z9Init_GPIOv+0xe0>)
 80001d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001d2:	4a35      	ldr	r2, [pc, #212]	; (80002a8 <_Z9Init_GPIOv+0xe0>)
 80001d4:	f043 0307 	orr.w	r3, r3, #7
 80001d8:	64d3      	str	r3, [r2, #76]	; 0x4c

	// Clear the LED GPIO registers
	GPIOB->MODER &= ~GPIO_MODER_MODER6;
 80001da:	4b34      	ldr	r3, [pc, #208]	; (80002ac <_Z9Init_GPIOv+0xe4>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	4a33      	ldr	r2, [pc, #204]	; (80002ac <_Z9Init_GPIOv+0xe4>)
 80001e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80001e4:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~GPIO_MODER_MODER7;
 80001e6:	4b32      	ldr	r3, [pc, #200]	; (80002b0 <_Z9Init_GPIOv+0xe8>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4a31      	ldr	r2, [pc, #196]	; (80002b0 <_Z9Init_GPIOv+0xe8>)
 80001ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80001f0:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODER9 | GPIO_MODER_MODER8);
 80001f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001fc:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000200:	6013      	str	r3, [r2, #0]

	// Set the LED GPIO pins as output
	GPIOB->MODER |= GPIO_MODER_MODER6_0;
 8000202:	4b2a      	ldr	r3, [pc, #168]	; (80002ac <_Z9Init_GPIOv+0xe4>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a29      	ldr	r2, [pc, #164]	; (80002ac <_Z9Init_GPIOv+0xe4>)
 8000208:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800020c:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODER7_0;
 800020e:	4b28      	ldr	r3, [pc, #160]	; (80002b0 <_Z9Init_GPIOv+0xe8>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a27      	ldr	r2, [pc, #156]	; (80002b0 <_Z9Init_GPIOv+0xe8>)
 8000214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000218:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER9_0 | GPIO_MODER_MODER8_0;
 800021a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000224:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8000228:	6013      	str	r3, [r2, #0]

    // Configure ROWs as input with pull-up
    GPIOB->MODER &= ~(GPIO_MODER_MODER10 | GPIO_MODER_MODER3 | GPIO_MODER_MODER5 | GPIO_MODER_MODER4);
 800022a:	4b20      	ldr	r3, [pc, #128]	; (80002ac <_Z9Init_GPIOv+0xe4>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	4a1f      	ldr	r2, [pc, #124]	; (80002ac <_Z9Init_GPIOv+0xe4>)
 8000230:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000234:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 8000238:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR |= (GPIO_PUPDR_PUPDR10_0 | GPIO_PUPDR_PUPDR3_0 | GPIO_PUPDR_PUPDR5_0 | GPIO_PUPDR_PUPDR4_0);
 800023a:	4b1c      	ldr	r3, [pc, #112]	; (80002ac <_Z9Init_GPIOv+0xe4>)
 800023c:	68db      	ldr	r3, [r3, #12]
 800023e:	4a1b      	ldr	r2, [pc, #108]	; (80002ac <_Z9Init_GPIOv+0xe4>)
 8000240:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000244:	f443 63a8 	orr.w	r3, r3, #1344	; 0x540
 8000248:	60d3      	str	r3, [r2, #12]

    // Configure COLs as output
    GPIOA->MODER &= ~(GPIO_MODER_MODER12 | GPIO_MODER_MODER0 | GPIO_MODER_MODER1);
 800024a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000254:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000258:	f023 030f 	bic.w	r3, r3, #15
 800025c:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (GPIO_MODER_MODER12_0 | GPIO_MODER_MODER0_0 | GPIO_MODER_MODER1_0);
 800025e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000268:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800026c:	f043 0305 	orr.w	r3, r3, #5
 8000270:	6013      	str	r3, [r2, #0]

    // Initialize columns to high
    for (int c = 0; c < COLS; c++) {
 8000272:	2300      	movs	r3, #0
 8000274:	607b      	str	r3, [r7, #4]
 8000276:	e00c      	b.n	8000292 <_Z9Init_GPIOv+0xca>
        GPIOA->BSRR = (1U << colPins[c]);
 8000278:	4a0e      	ldr	r2, [pc, #56]	; (80002b4 <_Z9Init_GPIOv+0xec>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	4413      	add	r3, r2
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	4619      	mov	r1, r3
 8000282:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000286:	2301      	movs	r3, #1
 8000288:	408b      	lsls	r3, r1
 800028a:	6193      	str	r3, [r2, #24]
    for (int c = 0; c < COLS; c++) {
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	3301      	adds	r3, #1
 8000290:	607b      	str	r3, [r7, #4]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	2b02      	cmp	r3, #2
 8000296:	ddef      	ble.n	8000278 <_Z9Init_GPIOv+0xb0>
    }
}
 8000298:	bf00      	nop
 800029a:	bf00      	nop
 800029c:	370c      	adds	r7, #12
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	40021000 	.word	0x40021000
 80002ac:	48000400 	.word	0x48000400
 80002b0:	48000800 	.word	0x48000800
 80002b4:	20000010 	.word	0x20000010

080002b8 <_Z4tickv>:

void tick() {
 80002b8:	b480      	push	{r7}
 80002ba:	b085      	sub	sp, #20
 80002bc:	af00      	add	r7, sp, #0
  for (int c = 0; c < COLS; c++) {
 80002be:	2300      	movs	r3, #0
 80002c0:	60fb      	str	r3, [r7, #12]
 80002c2:	e044      	b.n	800034e <_Z4tickv+0x96>
    GPIOA->BSRR = (1U << (colPins[c] + 16));  // sets the current column pin to low
 80002c4:	4a27      	ldr	r2, [pc, #156]	; (8000364 <_Z4tickv+0xac>)
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	4413      	add	r3, r2
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	3310      	adds	r3, #16
 80002ce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002d2:	2101      	movs	r1, #1
 80002d4:	fa01 f303 	lsl.w	r3, r1, r3
 80002d8:	6193      	str	r3, [r2, #24]
    // This is done because the rows are pulled-up. When a button is pressed, this column will be shorted to one of the rows, pulling it to a low state.

    for (int r = 0; r < ROWS; r++) {
 80002da:	2300      	movs	r3, #0
 80002dc:	60bb      	str	r3, [r7, #8]
 80002de:	e026      	b.n	800032e <_Z4tickv+0x76>
      int i = r * COLS + c;
 80002e0:	68ba      	ldr	r2, [r7, #8]
 80002e2:	4613      	mov	r3, r2
 80002e4:	005b      	lsls	r3, r3, #1
 80002e6:	4413      	add	r3, r2
 80002e8:	68fa      	ldr	r2, [r7, #12]
 80002ea:	4413      	add	r3, r2
 80002ec:	607b      	str	r3, [r7, #4]
      bool pressed = !(GPIOB->IDR & (1U << rowPins[r])); // This checks if the current row pin is low (i.e., a button on this row has been pressed).
 80002ee:	4b1e      	ldr	r3, [pc, #120]	; (8000368 <_Z4tickv+0xb0>)
 80002f0:	691a      	ldr	r2, [r3, #16]
 80002f2:	491e      	ldr	r1, [pc, #120]	; (800036c <_Z4tickv+0xb4>)
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	440b      	add	r3, r1
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	4619      	mov	r1, r3
 80002fc:	2301      	movs	r3, #1
 80002fe:	408b      	lsls	r3, r1
 8000300:	4013      	ands	r3, r2
 8000302:	2b00      	cmp	r3, #0
 8000304:	bf0c      	ite	eq
 8000306:	2301      	moveq	r3, #1
 8000308:	2300      	movne	r3, #0
 800030a:	70fb      	strb	r3, [r7, #3]

      if (pressed) {
 800030c:	78fb      	ldrb	r3, [r7, #3]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d005      	beq.n	800031e <_Z4tickv+0x66>
        keystates[i] = 1;
 8000312:	4a17      	ldr	r2, [pc, #92]	; (8000370 <_Z4tickv+0xb8>)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	4413      	add	r3, r2
 8000318:	2201      	movs	r2, #1
 800031a:	701a      	strb	r2, [r3, #0]
 800031c:	e004      	b.n	8000328 <_Z4tickv+0x70>
      } else {
        keystates[i] = 0;
 800031e:	4a14      	ldr	r2, [pc, #80]	; (8000370 <_Z4tickv+0xb8>)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	4413      	add	r3, r2
 8000324:	2200      	movs	r2, #0
 8000326:	701a      	strb	r2, [r3, #0]
    for (int r = 0; r < ROWS; r++) {
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	3301      	adds	r3, #1
 800032c:	60bb      	str	r3, [r7, #8]
 800032e:	68bb      	ldr	r3, [r7, #8]
 8000330:	2b03      	cmp	r3, #3
 8000332:	ddd5      	ble.n	80002e0 <_Z4tickv+0x28>
      }
    }
    GPIOA->BSRR = (1U << colPins[c]); // After checking all rows for a given column, the column is set back to high
 8000334:	4a0b      	ldr	r2, [pc, #44]	; (8000364 <_Z4tickv+0xac>)
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	4413      	add	r3, r2
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	4619      	mov	r1, r3
 800033e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000342:	2301      	movs	r3, #1
 8000344:	408b      	lsls	r3, r1
 8000346:	6193      	str	r3, [r2, #24]
  for (int c = 0; c < COLS; c++) {
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	3301      	adds	r3, #1
 800034c:	60fb      	str	r3, [r7, #12]
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	2b02      	cmp	r3, #2
 8000352:	ddb7      	ble.n	80002c4 <_Z4tickv+0xc>
  }
}
 8000354:	bf00      	nop
 8000356:	bf00      	nop
 8000358:	3714      	adds	r7, #20
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	20000010 	.word	0x20000010
 8000368:	48000400 	.word	0x48000400
 800036c:	2000000c 	.word	0x2000000c
 8000370:	2000003c 	.word	0x2000003c

08000374 <_Z11update_LEDsc>:

void update_LEDs(char key) {
 8000374:	b480      	push	{r7}
 8000376:	b085      	sub	sp, #20
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	71fb      	strb	r3, [r7, #7]
  // Clear all LEDs
  GPIOB->BSRR = GPIO_BSRR_BR_6;
 800037e:	4b29      	ldr	r3, [pc, #164]	; (8000424 <_Z11update_LEDsc+0xb0>)
 8000380:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000384:	619a      	str	r2, [r3, #24]
  GPIOC->BSRR = GPIO_BSRR_BR_7;
 8000386:	4b28      	ldr	r3, [pc, #160]	; (8000428 <_Z11update_LEDsc+0xb4>)
 8000388:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800038c:	619a      	str	r2, [r3, #24]
  GPIOA->BSRR = GPIO_BSRR_BR_9 | GPIO_BSRR_BR_8;
 800038e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000392:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8000396:	619a      	str	r2, [r3, #24]

  int binaryRepresentation = -1;
 8000398:	f04f 33ff 	mov.w	r3, #4294967295
 800039c:	60fb      	str	r3, [r7, #12]

  if (key >= '0' && key <= '9') {
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	2b2f      	cmp	r3, #47	; 0x2f
 80003a2:	d906      	bls.n	80003b2 <_Z11update_LEDsc+0x3e>
 80003a4:	79fb      	ldrb	r3, [r7, #7]
 80003a6:	2b39      	cmp	r3, #57	; 0x39
 80003a8:	d803      	bhi.n	80003b2 <_Z11update_LEDsc+0x3e>
    binaryRepresentation = key - '0';  // Convert char to int
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	3b30      	subs	r3, #48	; 0x30
 80003ae:	60fb      	str	r3, [r7, #12]
 80003b0:	e00a      	b.n	80003c8 <_Z11update_LEDsc+0x54>
  } else if (key == '*') {
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	2b2a      	cmp	r3, #42	; 0x2a
 80003b6:	d102      	bne.n	80003be <_Z11update_LEDsc+0x4a>
    binaryRepresentation = 14;  // 1110 in binary
 80003b8:	230e      	movs	r3, #14
 80003ba:	60fb      	str	r3, [r7, #12]
 80003bc:	e004      	b.n	80003c8 <_Z11update_LEDsc+0x54>
  } else if (key == '#') {
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	2b23      	cmp	r3, #35	; 0x23
 80003c2:	d101      	bne.n	80003c8 <_Z11update_LEDsc+0x54>
    binaryRepresentation = 15;  // 1111 in binary
 80003c4:	230f      	movs	r3, #15
 80003c6:	60fb      	str	r3, [r7, #12]
  }

  if (binaryRepresentation != -1) {
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003ce:	d023      	beq.n	8000418 <_Z11update_LEDsc+0xa4>
    if (binaryRepresentation & 0b0001) GPIOB->BSRR = GPIO_BSRR_BS_6;
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	f003 0301 	and.w	r3, r3, #1
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d002      	beq.n	80003e0 <_Z11update_LEDsc+0x6c>
 80003da:	4b12      	ldr	r3, [pc, #72]	; (8000424 <_Z11update_LEDsc+0xb0>)
 80003dc:	2240      	movs	r2, #64	; 0x40
 80003de:	619a      	str	r2, [r3, #24]
    if (binaryRepresentation & 0b0010) GPIOC->BSRR = GPIO_BSRR_BS_7;
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	f003 0302 	and.w	r3, r3, #2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d002      	beq.n	80003f0 <_Z11update_LEDsc+0x7c>
 80003ea:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <_Z11update_LEDsc+0xb4>)
 80003ec:	2280      	movs	r2, #128	; 0x80
 80003ee:	619a      	str	r2, [r3, #24]
    if (binaryRepresentation & 0b0100) GPIOA->BSRR = GPIO_BSRR_BS_9;
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	f003 0304 	and.w	r3, r3, #4
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d004      	beq.n	8000404 <_Z11update_LEDsc+0x90>
 80003fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000402:	619a      	str	r2, [r3, #24]
    if (binaryRepresentation & 0b1000) GPIOA->BSRR = GPIO_BSRR_BS_8;
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	f003 0308 	and.w	r3, r3, #8
 800040a:	2b00      	cmp	r3, #0
 800040c:	d004      	beq.n	8000418 <_Z11update_LEDsc+0xa4>
 800040e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000412:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000416:	619a      	str	r2, [r3, #24]
  }
}
 8000418:	bf00      	nop
 800041a:	3714      	adds	r7, #20
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr
 8000424:	48000400 	.word	0x48000400
 8000428:	48000800 	.word	0x48000800

0800042c <main>:

int main(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b084      	sub	sp, #16
 8000430:	af00      	add	r7, sp, #0
  HAL_Init();
 8000432:	f000 f8c7 	bl	80005c4 <HAL_Init>
  //SystemClock_Config();
  Init_GPIO();
 8000436:	f7ff fec7 	bl	80001c8 <_Z9Init_GPIOv>

  while (1)
  {
    tick();  // Update keypad status
 800043a:	f7ff ff3d 	bl	80002b8 <_Z4tickv>

    for (int r = 0; r < ROWS; r++) {
 800043e:	2300      	movs	r3, #0
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	e02c      	b.n	800049e <main+0x72>
      for (int c = 0; c < COLS; c++) {
 8000444:	2300      	movs	r3, #0
 8000446:	60bb      	str	r3, [r7, #8]
 8000448:	e023      	b.n	8000492 <main+0x66>
        int i = r * COLS + c;
 800044a:	68fa      	ldr	r2, [r7, #12]
 800044c:	4613      	mov	r3, r2
 800044e:	005b      	lsls	r3, r3, #1
 8000450:	4413      	add	r3, r2
 8000452:	68ba      	ldr	r2, [r7, #8]
 8000454:	4413      	add	r3, r2
 8000456:	607b      	str	r3, [r7, #4]
        if (keystates[i]) {
 8000458:	4a13      	ldr	r2, [pc, #76]	; (80004a8 <main+0x7c>)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4413      	add	r3, r2
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	b2db      	uxtb	r3, r3
 8000462:	2b00      	cmp	r3, #0
 8000464:	bf14      	ite	ne
 8000466:	2301      	movne	r3, #1
 8000468:	2300      	moveq	r3, #0
 800046a:	b2db      	uxtb	r3, r3
 800046c:	2b00      	cmp	r3, #0
 800046e:	d00d      	beq.n	800048c <main+0x60>
          char key = keys[r][c];
 8000470:	490e      	ldr	r1, [pc, #56]	; (80004ac <main+0x80>)
 8000472:	68fa      	ldr	r2, [r7, #12]
 8000474:	4613      	mov	r3, r2
 8000476:	005b      	lsls	r3, r3, #1
 8000478:	4413      	add	r3, r2
 800047a:	18ca      	adds	r2, r1, r3
 800047c:	68bb      	ldr	r3, [r7, #8]
 800047e:	4413      	add	r3, r2
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	70fb      	strb	r3, [r7, #3]
          update_LEDs(key);  // Update LEDs based on pressed key
 8000484:	78fb      	ldrb	r3, [r7, #3]
 8000486:	4618      	mov	r0, r3
 8000488:	f7ff ff74 	bl	8000374 <_Z11update_LEDsc>
      for (int c = 0; c < COLS; c++) {
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	3301      	adds	r3, #1
 8000490:	60bb      	str	r3, [r7, #8]
 8000492:	68bb      	ldr	r3, [r7, #8]
 8000494:	2b02      	cmp	r3, #2
 8000496:	ddd8      	ble.n	800044a <main+0x1e>
    for (int r = 0; r < ROWS; r++) {
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	3301      	adds	r3, #1
 800049c:	60fb      	str	r3, [r7, #12]
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	2b03      	cmp	r3, #3
 80004a2:	ddcf      	ble.n	8000444 <main+0x18>
          //break;
        }
      }
    }
  }
 80004a4:	e7c9      	b.n	800043a <main+0xe>
 80004a6:	bf00      	nop
 80004a8:	2000003c 	.word	0x2000003c
 80004ac:	20000000 	.word	0x20000000

080004b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004b6:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <HAL_MspInit+0x44>)
 80004b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004ba:	4a0e      	ldr	r2, [pc, #56]	; (80004f4 <HAL_MspInit+0x44>)
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	6613      	str	r3, [r2, #96]	; 0x60
 80004c2:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <HAL_MspInit+0x44>)
 80004c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	607b      	str	r3, [r7, #4]
 80004cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ce:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <HAL_MspInit+0x44>)
 80004d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004d2:	4a08      	ldr	r2, [pc, #32]	; (80004f4 <HAL_MspInit+0x44>)
 80004d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d8:	6593      	str	r3, [r2, #88]	; 0x58
 80004da:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <HAL_MspInit+0x44>)
 80004dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004e2:	603b      	str	r3, [r7, #0]
 80004e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004e6:	bf00      	nop
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	40021000 	.word	0x40021000

080004f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004fc:	e7fe      	b.n	80004fc <NMI_Handler+0x4>

080004fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000502:	e7fe      	b.n	8000502 <HardFault_Handler+0x4>

08000504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000508:	e7fe      	b.n	8000508 <MemManage_Handler+0x4>

0800050a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800050e:	e7fe      	b.n	800050e <BusFault_Handler+0x4>

08000510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000514:	e7fe      	b.n	8000514 <UsageFault_Handler+0x4>

08000516 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800051a:	bf00      	nop
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr

08000524 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr

08000532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000536:	bf00      	nop
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000544:	f000 f89a 	bl	800067c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}

0800054c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000550:	4b06      	ldr	r3, [pc, #24]	; (800056c <SystemInit+0x20>)
 8000552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000556:	4a05      	ldr	r2, [pc, #20]	; (800056c <SystemInit+0x20>)
 8000558:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800055c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	e000ed00 	.word	0xe000ed00

08000570 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000570:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000574:	f7ff ffea 	bl	800054c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000578:	480c      	ldr	r0, [pc, #48]	; (80005ac <LoopForever+0x6>)
  ldr r1, =_edata
 800057a:	490d      	ldr	r1, [pc, #52]	; (80005b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800057c:	4a0d      	ldr	r2, [pc, #52]	; (80005b4 <LoopForever+0xe>)
  movs r3, #0
 800057e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000580:	e002      	b.n	8000588 <LoopCopyDataInit>

08000582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000586:	3304      	adds	r3, #4

08000588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800058a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800058c:	d3f9      	bcc.n	8000582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800058e:	4a0a      	ldr	r2, [pc, #40]	; (80005b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000590:	4c0a      	ldr	r4, [pc, #40]	; (80005bc <LoopForever+0x16>)
  movs r3, #0
 8000592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000594:	e001      	b.n	800059a <LoopFillZerobss>

08000596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000598:	3204      	adds	r2, #4

0800059a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800059a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800059c:	d3fb      	bcc.n	8000596 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800059e:	f000 f967 	bl	8000870 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005a2:	f7ff ff43 	bl	800042c <main>

080005a6 <LoopForever>:

LoopForever:
    b LoopForever
 80005a6:	e7fe      	b.n	80005a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b0:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80005b4:	080008d8 	.word	0x080008d8
  ldr r2, =_sbss
 80005b8:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80005bc:	2000004c 	.word	0x2000004c

080005c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005c0:	e7fe      	b.n	80005c0 <ADC1_2_IRQHandler>
	...

080005c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005ca:	2300      	movs	r3, #0
 80005cc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <HAL_Init+0x3c>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a0b      	ldr	r2, [pc, #44]	; (8000600 <HAL_Init+0x3c>)
 80005d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005d8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005da:	2003      	movs	r0, #3
 80005dc:	f000 f914 	bl	8000808 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005e0:	2000      	movs	r0, #0
 80005e2:	f000 f80f 	bl	8000604 <HAL_InitTick>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d002      	beq.n	80005f2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80005ec:	2301      	movs	r3, #1
 80005ee:	71fb      	strb	r3, [r7, #7]
 80005f0:	e001      	b.n	80005f6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005f2:	f7ff ff5d 	bl	80004b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005f6:	79fb      	ldrb	r3, [r7, #7]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40022000 	.word	0x40022000

08000604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800060c:	2300      	movs	r3, #0
 800060e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000610:	4b17      	ldr	r3, [pc, #92]	; (8000670 <HAL_InitTick+0x6c>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d023      	beq.n	8000660 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000618:	4b16      	ldr	r3, [pc, #88]	; (8000674 <HAL_InitTick+0x70>)
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	4b14      	ldr	r3, [pc, #80]	; (8000670 <HAL_InitTick+0x6c>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	4619      	mov	r1, r3
 8000622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000626:	fbb3 f3f1 	udiv	r3, r3, r1
 800062a:	fbb2 f3f3 	udiv	r3, r2, r3
 800062e:	4618      	mov	r0, r3
 8000630:	f000 f911 	bl	8000856 <HAL_SYSTICK_Config>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d10f      	bne.n	800065a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2b0f      	cmp	r3, #15
 800063e:	d809      	bhi.n	8000654 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000640:	2200      	movs	r2, #0
 8000642:	6879      	ldr	r1, [r7, #4]
 8000644:	f04f 30ff 	mov.w	r0, #4294967295
 8000648:	f000 f8e9 	bl	800081e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800064c:	4a0a      	ldr	r2, [pc, #40]	; (8000678 <HAL_InitTick+0x74>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6013      	str	r3, [r2, #0]
 8000652:	e007      	b.n	8000664 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000654:	2301      	movs	r3, #1
 8000656:	73fb      	strb	r3, [r7, #15]
 8000658:	e004      	b.n	8000664 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800065a:	2301      	movs	r3, #1
 800065c:	73fb      	strb	r3, [r7, #15]
 800065e:	e001      	b.n	8000664 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000660:	2301      	movs	r3, #1
 8000662:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000664:	7bfb      	ldrb	r3, [r7, #15]
}
 8000666:	4618      	mov	r0, r3
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	2000001c 	.word	0x2000001c
 8000674:	20000014 	.word	0x20000014
 8000678:	20000018 	.word	0x20000018

0800067c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <HAL_IncTick+0x20>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	461a      	mov	r2, r3
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <HAL_IncTick+0x24>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4413      	add	r3, r2
 800068c:	4a04      	ldr	r2, [pc, #16]	; (80006a0 <HAL_IncTick+0x24>)
 800068e:	6013      	str	r3, [r2, #0]
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	2000001c 	.word	0x2000001c
 80006a0:	20000048 	.word	0x20000048

080006a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	f003 0307 	and.w	r3, r3, #7
 80006b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <__NVIC_SetPriorityGrouping+0x44>)
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c0:	4013      	ands	r3, r2
 80006c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006d6:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <__NVIC_SetPriorityGrouping+0x44>)
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	60d3      	str	r3, [r2, #12]
}
 80006dc:	bf00      	nop
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <__NVIC_GetPriorityGrouping+0x18>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	0a1b      	lsrs	r3, r3, #8
 80006f6:	f003 0307 	and.w	r3, r3, #7
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	6039      	str	r1, [r7, #0]
 8000712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000718:	2b00      	cmp	r3, #0
 800071a:	db0a      	blt.n	8000732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	b2da      	uxtb	r2, r3
 8000720:	490c      	ldr	r1, [pc, #48]	; (8000754 <__NVIC_SetPriority+0x4c>)
 8000722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000726:	0112      	lsls	r2, r2, #4
 8000728:	b2d2      	uxtb	r2, r2
 800072a:	440b      	add	r3, r1
 800072c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000730:	e00a      	b.n	8000748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4908      	ldr	r1, [pc, #32]	; (8000758 <__NVIC_SetPriority+0x50>)
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	f003 030f 	and.w	r3, r3, #15
 800073e:	3b04      	subs	r3, #4
 8000740:	0112      	lsls	r2, r2, #4
 8000742:	b2d2      	uxtb	r2, r2
 8000744:	440b      	add	r3, r1
 8000746:	761a      	strb	r2, [r3, #24]
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000e100 	.word	0xe000e100
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800075c:	b480      	push	{r7}
 800075e:	b089      	sub	sp, #36	; 0x24
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f003 0307 	and.w	r3, r3, #7
 800076e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	f1c3 0307 	rsb	r3, r3, #7
 8000776:	2b04      	cmp	r3, #4
 8000778:	bf28      	it	cs
 800077a:	2304      	movcs	r3, #4
 800077c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	3304      	adds	r3, #4
 8000782:	2b06      	cmp	r3, #6
 8000784:	d902      	bls.n	800078c <NVIC_EncodePriority+0x30>
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	3b03      	subs	r3, #3
 800078a:	e000      	b.n	800078e <NVIC_EncodePriority+0x32>
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000790:	f04f 32ff 	mov.w	r2, #4294967295
 8000794:	69bb      	ldr	r3, [r7, #24]
 8000796:	fa02 f303 	lsl.w	r3, r2, r3
 800079a:	43da      	mvns	r2, r3
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	401a      	ands	r2, r3
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007a4:	f04f 31ff 	mov.w	r1, #4294967295
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	fa01 f303 	lsl.w	r3, r1, r3
 80007ae:	43d9      	mvns	r1, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b4:	4313      	orrs	r3, r2
         );
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3724      	adds	r7, #36	; 0x24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
	...

080007c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	3b01      	subs	r3, #1
 80007d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007d4:	d301      	bcc.n	80007da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007d6:	2301      	movs	r3, #1
 80007d8:	e00f      	b.n	80007fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007da:	4a0a      	ldr	r2, [pc, #40]	; (8000804 <SysTick_Config+0x40>)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3b01      	subs	r3, #1
 80007e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007e2:	210f      	movs	r1, #15
 80007e4:	f04f 30ff 	mov.w	r0, #4294967295
 80007e8:	f7ff ff8e 	bl	8000708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007ec:	4b05      	ldr	r3, [pc, #20]	; (8000804 <SysTick_Config+0x40>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007f2:	4b04      	ldr	r3, [pc, #16]	; (8000804 <SysTick_Config+0x40>)
 80007f4:	2207      	movs	r2, #7
 80007f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	e000e010 	.word	0xe000e010

08000808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f7ff ff47 	bl	80006a4 <__NVIC_SetPriorityGrouping>
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b086      	sub	sp, #24
 8000822:	af00      	add	r7, sp, #0
 8000824:	4603      	mov	r3, r0
 8000826:	60b9      	str	r1, [r7, #8]
 8000828:	607a      	str	r2, [r7, #4]
 800082a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000830:	f7ff ff5c 	bl	80006ec <__NVIC_GetPriorityGrouping>
 8000834:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	68b9      	ldr	r1, [r7, #8]
 800083a:	6978      	ldr	r0, [r7, #20]
 800083c:	f7ff ff8e 	bl	800075c <NVIC_EncodePriority>
 8000840:	4602      	mov	r2, r0
 8000842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ff5d 	bl	8000708 <__NVIC_SetPriority>
}
 800084e:	bf00      	nop
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f7ff ffb0 	bl	80007c4 <SysTick_Config>
 8000864:	4603      	mov	r3, r0
}
 8000866:	4618      	mov	r0, r3
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <__libc_init_array>:
 8000870:	b570      	push	{r4, r5, r6, lr}
 8000872:	4d0d      	ldr	r5, [pc, #52]	; (80008a8 <__libc_init_array+0x38>)
 8000874:	4c0d      	ldr	r4, [pc, #52]	; (80008ac <__libc_init_array+0x3c>)
 8000876:	1b64      	subs	r4, r4, r5
 8000878:	10a4      	asrs	r4, r4, #2
 800087a:	2600      	movs	r6, #0
 800087c:	42a6      	cmp	r6, r4
 800087e:	d109      	bne.n	8000894 <__libc_init_array+0x24>
 8000880:	4d0b      	ldr	r5, [pc, #44]	; (80008b0 <__libc_init_array+0x40>)
 8000882:	4c0c      	ldr	r4, [pc, #48]	; (80008b4 <__libc_init_array+0x44>)
 8000884:	f000 f818 	bl	80008b8 <_init>
 8000888:	1b64      	subs	r4, r4, r5
 800088a:	10a4      	asrs	r4, r4, #2
 800088c:	2600      	movs	r6, #0
 800088e:	42a6      	cmp	r6, r4
 8000890:	d105      	bne.n	800089e <__libc_init_array+0x2e>
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f855 3b04 	ldr.w	r3, [r5], #4
 8000898:	4798      	blx	r3
 800089a:	3601      	adds	r6, #1
 800089c:	e7ee      	b.n	800087c <__libc_init_array+0xc>
 800089e:	f855 3b04 	ldr.w	r3, [r5], #4
 80008a2:	4798      	blx	r3
 80008a4:	3601      	adds	r6, #1
 80008a6:	e7f2      	b.n	800088e <__libc_init_array+0x1e>
 80008a8:	080008d0 	.word	0x080008d0
 80008ac:	080008d0 	.word	0x080008d0
 80008b0:	080008d0 	.word	0x080008d0
 80008b4:	080008d4 	.word	0x080008d4

080008b8 <_init>:
 80008b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ba:	bf00      	nop
 80008bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008be:	bc08      	pop	{r3}
 80008c0:	469e      	mov	lr, r3
 80008c2:	4770      	bx	lr

080008c4 <_fini>:
 80008c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c6:	bf00      	nop
 80008c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008ca:	bc08      	pop	{r3}
 80008cc:	469e      	mov	lr, r3
 80008ce:	4770      	bx	lr
