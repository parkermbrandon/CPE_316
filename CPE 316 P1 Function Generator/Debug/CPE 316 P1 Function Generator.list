
CPE 316 P1 Function Generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b6c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003984  08001cf4  08001cf4  00011cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005678  08005678  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08005678  08005678  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005678  08005678  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005678  08005678  00015678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08005680  08005680  00015680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08005688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000064  080056ec  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  080056ec  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000627a  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001680  00000000  00000000  00026351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000610  00000000  00000000  000279d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000046a  00000000  00000000  00027fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000271bc  00000000  00000000  00028452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006838  00000000  00000000  0004f60e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e70a8  00000000  00000000  00055e46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001964  00000000  00000000  0013cef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0013e854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000064 	.word	0x20000064
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001cdc 	.word	0x08001cdc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000068 	.word	0x20000068
 80001c4:	08001cdc 	.word	0x08001cdc

080001c8 <_ZN12External_DACC1Ev>:
    2159, 2154, 2149, 2145, 2140, 2135, 2131, 2126, 2122, 2117, 2112, 2108, 2103, 2098, 2094, 2089,
    2084, 2080, 2075, 2070, 2066, 2061, 2056, 2052, 2047, 2042, 2038, 2033, 2028, 2024, 2019, 2015,
    2010, 2005, 2001, 1996, 1991, 1987, 1982, 1977, 1973, 1968, 1963, 1959, 1954, 1949, 1945, 1940,
    1935, 1931, 1926, 1921, 1917, 1912, 1908, 1903, 1898, 1894, 1889, 1884, 1880, 1875, 1870, 1866,
};
External_DAC::External_DAC() {
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	4a04      	ldr	r2, [pc, #16]	; (80001e4 <_ZN12External_DACC1Ev+0x1c>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	601a      	str	r2, [r3, #0]

}
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4618      	mov	r0, r3
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e2:	4770      	bx	lr
 80001e4:	08005630 	.word	0x08005630

080001e8 <_ZN12External_DACD1Ev>:

External_DAC::~External_DAC() {
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	4a04      	ldr	r2, [pc, #16]	; (8000204 <_ZN12External_DACD1Ev+0x1c>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	601a      	str	r2, [r3, #0]
}
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	4618      	mov	r0, r3
 80001fa:	370c      	adds	r7, #12
 80001fc:	46bd      	mov	sp, r7
 80001fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000202:	4770      	bx	lr
 8000204:	08005630 	.word	0x08005630

08000208 <_ZN12External_DACD0Ev>:
External_DAC::~External_DAC() {
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
}
 8000210:	6878      	ldr	r0, [r7, #4]
 8000212:	f7ff ffe9 	bl	80001e8 <_ZN12External_DACD1Ev>
 8000216:	2104      	movs	r1, #4
 8000218:	6878      	ldr	r0, [r7, #4]
 800021a:	f001 fccd 	bl	8001bb8 <_ZdlPvj>
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	4618      	mov	r0, r3
 8000222:	3708      	adds	r7, #8
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}

08000228 <_ZN12External_DAC8DAC_initEv>:

void External_DAC::DAC_init(void)
{
 8000228:	b480      	push	{r7}
 800022a:	b083      	sub	sp, #12
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000230:	4b27      	ldr	r3, [pc, #156]	; (80002d0 <_ZN12External_DAC8DAC_initEv+0xa8>)
 8000232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000234:	4a26      	ldr	r2, [pc, #152]	; (80002d0 <_ZN12External_DAC8DAC_initEv+0xa8>)
 8000236:	f043 0301 	orr.w	r3, r3, #1
 800023a:	64d3      	str	r3, [r2, #76]	; 0x4c
    GPIOA->MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
 800023c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000246:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800024a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (GPIO_MODER_MODE4_1 | GPIO_MODER_MODE5_1 | GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1);
 800024c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000256:	f443 432a 	orr.w	r3, r3, #43520	; 0xaa00
 800025a:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL4 | GPIO_AFRL_AFSEL5 | GPIO_AFRL_AFSEL6 | GPIO_AFRL_AFSEL7);
 800025c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000260:	6a1b      	ldr	r3, [r3, #32]
 8000262:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000266:	b29b      	uxth	r3, r3
 8000268:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= ((5 << GPIO_AFRL_AFSEL4_Pos) | (5 << GPIO_AFRL_AFSEL5_Pos) | (5 << GPIO_AFRL_AFSEL6_Pos) | (5 << GPIO_AFRL_AFSEL7_Pos));
 800026a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800026e:	6a1b      	ldr	r3, [r3, #32]
 8000270:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000274:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000278:	f443 03aa 	orr.w	r3, r3, #5570560	; 0x550000
 800027c:	6213      	str	r3, [r2, #32]
    GPIOA->OTYPER &= ~(GPIO_OTYPER_OT4 | GPIO_OTYPER_OT5 | GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7);
 800027e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000282:	685b      	ldr	r3, [r3, #4]
 8000284:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000288:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800028c:	6053      	str	r3, [r2, #4]
    GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD4 | GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7);
 800028e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000292:	68db      	ldr	r3, [r3, #12]
 8000294:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000298:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800029c:	60d3      	str	r3, [r2, #12]
    RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 800029e:	4b0c      	ldr	r3, [pc, #48]	; (80002d0 <_ZN12External_DAC8DAC_initEv+0xa8>)
 80002a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002a2:	4a0b      	ldr	r2, [pc, #44]	; (80002d0 <_ZN12External_DAC8DAC_initEv+0xa8>)
 80002a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002a8:	6613      	str	r3, [r2, #96]	; 0x60
    SPI1->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_0;  // Set prescaler to fPCLK/4
 80002aa:	4b0a      	ldr	r3, [pc, #40]	; (80002d4 <_ZN12External_DAC8DAC_initEv+0xac>)
 80002ac:	220c      	movs	r2, #12
 80002ae:	601a      	str	r2, [r3, #0]
    SPI1->CR2 = SPI_CR2_SSOE | SPI_CR2_NSSP | (0xF << SPI_CR2_DS_Pos);
 80002b0:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <_ZN12External_DAC8DAC_initEv+0xac>)
 80002b2:	f640 720c 	movw	r2, #3852	; 0xf0c
 80002b6:	605a      	str	r2, [r3, #4]
    SPI1->CR1 |= SPI_CR1_SPE;
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <_ZN12External_DAC8DAC_initEv+0xac>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a05      	ldr	r2, [pc, #20]	; (80002d4 <_ZN12External_DAC8DAC_initEv+0xac>)
 80002be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002c2:	6013      	str	r3, [r2, #0]
}
 80002c4:	bf00      	nop
 80002c6:	370c      	adds	r7, #12
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr
 80002d0:	40021000 	.word	0x40021000
 80002d4:	40013000 	.word	0x40013000

080002d8 <_ZN12External_DAC9DAC_writeEtt>:
{
	return (mvoltage * 4095) / 3300;
}

void External_DAC::DAC_write(uint16_t value_A, uint16_t value_B)
{
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	460b      	mov	r3, r1
 80002e2:	807b      	strh	r3, [r7, #2]
 80002e4:	4613      	mov	r3, r2
 80002e6:	803b      	strh	r3, [r7, #0]
    uint16_t spi_data_A = (value_A & 0x0FFF) | 0x3000;  // For DACA
 80002e8:	887b      	ldrh	r3, [r7, #2]
 80002ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002ee:	b29b      	uxth	r3, r3
 80002f0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80002f4:	81fb      	strh	r3, [r7, #14]
    uint16_t spi_data_B = (value_B & 0x0FFF) | 0xB000;  // For DACB
 80002f6:	883b      	ldrh	r3, [r7, #0]
 80002f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002fc:	b29a      	uxth	r2, r3
 80002fe:	4b13      	ldr	r3, [pc, #76]	; (800034c <_ZN12External_DAC9DAC_writeEtt+0x74>)
 8000300:	4313      	orrs	r3, r2
 8000302:	81bb      	strh	r3, [r7, #12]

    // Write to DACA
    while(!(SPI1->SR & SPI_SR_TXE));
 8000304:	bf00      	nop
 8000306:	4b12      	ldr	r3, [pc, #72]	; (8000350 <_ZN12External_DAC9DAC_writeEtt+0x78>)
 8000308:	689b      	ldr	r3, [r3, #8]
 800030a:	f003 0302 	and.w	r3, r3, #2
 800030e:	2b00      	cmp	r3, #0
 8000310:	bf0c      	ite	eq
 8000312:	2301      	moveq	r3, #1
 8000314:	2300      	movne	r3, #0
 8000316:	b2db      	uxtb	r3, r3
 8000318:	2b00      	cmp	r3, #0
 800031a:	d1f4      	bne.n	8000306 <_ZN12External_DAC9DAC_writeEtt+0x2e>
    SPI1->DR = spi_data_A;
 800031c:	4a0c      	ldr	r2, [pc, #48]	; (8000350 <_ZN12External_DAC9DAC_writeEtt+0x78>)
 800031e:	89fb      	ldrh	r3, [r7, #14]
 8000320:	60d3      	str	r3, [r2, #12]

    // Write to DACB
    while(!(SPI1->SR & SPI_SR_TXE));
 8000322:	bf00      	nop
 8000324:	4b0a      	ldr	r3, [pc, #40]	; (8000350 <_ZN12External_DAC9DAC_writeEtt+0x78>)
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	f003 0302 	and.w	r3, r3, #2
 800032c:	2b00      	cmp	r3, #0
 800032e:	bf0c      	ite	eq
 8000330:	2301      	moveq	r3, #1
 8000332:	2300      	movne	r3, #0
 8000334:	b2db      	uxtb	r3, r3
 8000336:	2b00      	cmp	r3, #0
 8000338:	d1f4      	bne.n	8000324 <_ZN12External_DAC9DAC_writeEtt+0x4c>
    SPI1->DR = spi_data_B;
 800033a:	4a05      	ldr	r2, [pc, #20]	; (8000350 <_ZN12External_DAC9DAC_writeEtt+0x78>)
 800033c:	89bb      	ldrh	r3, [r7, #12]
 800033e:	60d3      	str	r3, [r2, #12]
}
 8000340:	bf00      	nop
 8000342:	3714      	adds	r7, #20
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr
 800034c:	ffffb000 	.word	0xffffb000
 8000350:	40013000 	.word	0x40013000

08000354 <_ZN6KeypadC1Ev>:
#include "Keypad.h"

const uint8_t ROWS = 4;  // Four rows
const uint8_t COLS = 3;  // Three columns

Keypad::Keypad() {
 8000354:	b490      	push	{r4, r7}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4a17      	ldr	r2, [pc, #92]	; (80003bc <_ZN6KeypadC1Ev+0x68>)
 8000360:	461c      	mov	r4, r3
 8000362:	4613      	mov	r3, r2
 8000364:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000366:	6020      	str	r0, [r4, #0]
 8000368:	6061      	str	r1, [r4, #4]
 800036a:	60a2      	str	r2, [r4, #8]
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4a14      	ldr	r2, [pc, #80]	; (80003c0 <_ZN6KeypadC1Ev+0x6c>)
 8000370:	330c      	adds	r3, #12
 8000372:	6810      	ldr	r0, [r2, #0]
 8000374:	6018      	str	r0, [r3, #0]
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4a12      	ldr	r2, [pc, #72]	; (80003c4 <_ZN6KeypadC1Ev+0x70>)
 800037a:	3310      	adds	r3, #16
 800037c:	8811      	ldrh	r1, [r2, #0]
 800037e:	7892      	ldrb	r2, [r2, #2]
 8000380:	8019      	strh	r1, [r3, #0]
 8000382:	709a      	strb	r2, [r3, #2]
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	3313      	adds	r3, #19
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
 800038c:	605a      	str	r2, [r3, #4]
 800038e:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < ROWS * COLS; ++i)
 8000390:	2300      	movs	r3, #0
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	e008      	b.n	80003a8 <_ZN6KeypadC1Ev+0x54>
	{
		keystates[i] = 0;
 8000396:	687a      	ldr	r2, [r7, #4]
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	4413      	add	r3, r2
 800039c:	3313      	adds	r3, #19
 800039e:	2200      	movs	r2, #0
 80003a0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < ROWS * COLS; ++i)
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	3301      	adds	r3, #1
 80003a6:	60fb      	str	r3, [r7, #12]
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	2b0b      	cmp	r3, #11
 80003ac:	ddf3      	ble.n	8000396 <_ZN6KeypadC1Ev+0x42>
	}
}
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4618      	mov	r0, r3
 80003b2:	3710      	adds	r7, #16
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bc90      	pop	{r4, r7}
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	08001cf4 	.word	0x08001cf4
 80003c0:	08001d00 	.word	0x08001d00
 80003c4:	08001d04 	.word	0x08001d04

080003c8 <_ZN6Keypad11Keypad_initEv>:

void Keypad::Keypad_init(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b085      	sub	sp, #20
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
    // Enable GPIOA, GPIOB, and GPIOC clocks
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN | RCC_AHB2ENR_GPIOCEN | RCC_AHB2ENR_GPIOAEN;
 80003d0:	4b36      	ldr	r3, [pc, #216]	; (80004ac <_ZN6Keypad11Keypad_initEv+0xe4>)
 80003d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d4:	4a35      	ldr	r2, [pc, #212]	; (80004ac <_ZN6Keypad11Keypad_initEv+0xe4>)
 80003d6:	f043 0307 	orr.w	r3, r3, #7
 80003da:	64d3      	str	r3, [r2, #76]	; 0x4c

	// Clear the LED GPIO registers
	GPIOB->MODER &= ~GPIO_MODER_MODER6;
 80003dc:	4b34      	ldr	r3, [pc, #208]	; (80004b0 <_ZN6Keypad11Keypad_initEv+0xe8>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a33      	ldr	r2, [pc, #204]	; (80004b0 <_ZN6Keypad11Keypad_initEv+0xe8>)
 80003e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80003e6:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~GPIO_MODER_MODER7;
 80003e8:	4b32      	ldr	r3, [pc, #200]	; (80004b4 <_ZN6Keypad11Keypad_initEv+0xec>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a31      	ldr	r2, [pc, #196]	; (80004b4 <_ZN6Keypad11Keypad_initEv+0xec>)
 80003ee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80003f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODER9 | GPIO_MODER_MODER8);
 80003f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003fe:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000402:	6013      	str	r3, [r2, #0]

	// Set the LED GPIO pins as output
	GPIOB->MODER |= GPIO_MODER_MODER6_0;
 8000404:	4b2a      	ldr	r3, [pc, #168]	; (80004b0 <_ZN6Keypad11Keypad_initEv+0xe8>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a29      	ldr	r2, [pc, #164]	; (80004b0 <_ZN6Keypad11Keypad_initEv+0xe8>)
 800040a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800040e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODER7_0;
 8000410:	4b28      	ldr	r3, [pc, #160]	; (80004b4 <_ZN6Keypad11Keypad_initEv+0xec>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a27      	ldr	r2, [pc, #156]	; (80004b4 <_ZN6Keypad11Keypad_initEv+0xec>)
 8000416:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800041a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER9_0 | GPIO_MODER_MODER8_0;
 800041c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000426:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 800042a:	6013      	str	r3, [r2, #0]

    // Configure ROWs as input with pull-up
    GPIOB->MODER &= ~(GPIO_MODER_MODER10 | GPIO_MODER_MODER3 | GPIO_MODER_MODER5 | GPIO_MODER_MODER4);
 800042c:	4b20      	ldr	r3, [pc, #128]	; (80004b0 <_ZN6Keypad11Keypad_initEv+0xe8>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a1f      	ldr	r2, [pc, #124]	; (80004b0 <_ZN6Keypad11Keypad_initEv+0xe8>)
 8000432:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000436:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 800043a:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR |= (GPIO_PUPDR_PUPDR10_0 | GPIO_PUPDR_PUPDR3_0 | GPIO_PUPDR_PUPDR5_0 | GPIO_PUPDR_PUPDR4_0);
 800043c:	4b1c      	ldr	r3, [pc, #112]	; (80004b0 <_ZN6Keypad11Keypad_initEv+0xe8>)
 800043e:	68db      	ldr	r3, [r3, #12]
 8000440:	4a1b      	ldr	r2, [pc, #108]	; (80004b0 <_ZN6Keypad11Keypad_initEv+0xe8>)
 8000442:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000446:	f443 63a8 	orr.w	r3, r3, #1344	; 0x540
 800044a:	60d3      	str	r3, [r2, #12]

    // Configure COLs as output
    GPIOA->MODER &= ~(GPIO_MODER_MODER12 | GPIO_MODER_MODER0 | GPIO_MODER_MODER1);
 800044c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000456:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800045a:	f023 030f 	bic.w	r3, r3, #15
 800045e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (GPIO_MODER_MODER12_0 | GPIO_MODER_MODER0_0 | GPIO_MODER_MODER1_0);
 8000460:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800046a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800046e:	f043 0305 	orr.w	r3, r3, #5
 8000472:	6013      	str	r3, [r2, #0]

    // Initialize columns to high
    for (int c = 0; c < COLS; c++)
 8000474:	2300      	movs	r3, #0
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	e00d      	b.n	8000496 <_ZN6Keypad11Keypad_initEv+0xce>
    {
        GPIOA->BSRR = (1U << colPins[c]);
 800047a:	687a      	ldr	r2, [r7, #4]
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	4413      	add	r3, r2
 8000480:	3310      	adds	r3, #16
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	4619      	mov	r1, r3
 8000486:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800048a:	2301      	movs	r3, #1
 800048c:	408b      	lsls	r3, r1
 800048e:	6193      	str	r3, [r2, #24]
    for (int c = 0; c < COLS; c++)
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	3301      	adds	r3, #1
 8000494:	60fb      	str	r3, [r7, #12]
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	2b02      	cmp	r3, #2
 800049a:	ddee      	ble.n	800047a <_ZN6Keypad11Keypad_initEv+0xb2>
    }
}
 800049c:	bf00      	nop
 800049e:	bf00      	nop
 80004a0:	3714      	adds	r7, #20
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	40021000 	.word	0x40021000
 80004b0:	48000400 	.word	0x48000400
 80004b4:	48000800 	.word	0x48000800

080004b8 <_ZN6Keypad4tickEv>:

void Keypad::tick() {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b086      	sub	sp, #24
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  for (int c = 0; c < COLS; c++)
 80004c0:	2300      	movs	r3, #0
 80004c2:	617b      	str	r3, [r7, #20]
 80004c4:	e049      	b.n	800055a <_ZN6Keypad4tickEv+0xa2>
  {
    GPIOA->BSRR = (1U << (colPins[c] + 16));  // sets the current column pin to low
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	4413      	add	r3, r2
 80004cc:	3310      	adds	r3, #16
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	3310      	adds	r3, #16
 80004d2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004d6:	2101      	movs	r1, #1
 80004d8:	fa01 f303 	lsl.w	r3, r1, r3
 80004dc:	6193      	str	r3, [r2, #24]
    for (int r = 0; r < ROWS; r++)
 80004de:	2300      	movs	r3, #0
 80004e0:	613b      	str	r3, [r7, #16]
 80004e2:	e029      	b.n	8000538 <_ZN6Keypad4tickEv+0x80>
    {
      int i = r * COLS + c;
 80004e4:	693a      	ldr	r2, [r7, #16]
 80004e6:	4613      	mov	r3, r2
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	4413      	add	r3, r2
 80004ec:	697a      	ldr	r2, [r7, #20]
 80004ee:	4413      	add	r3, r2
 80004f0:	60fb      	str	r3, [r7, #12]
      bool pressed = !(GPIOB->IDR & (1U << rowPins[r])); // This checks if the current row pin is low (i.e., a button on this row has been pressed).
 80004f2:	4b1f      	ldr	r3, [pc, #124]	; (8000570 <_ZN6Keypad4tickEv+0xb8>)
 80004f4:	691a      	ldr	r2, [r3, #16]
 80004f6:	6879      	ldr	r1, [r7, #4]
 80004f8:	693b      	ldr	r3, [r7, #16]
 80004fa:	440b      	add	r3, r1
 80004fc:	330c      	adds	r3, #12
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	4619      	mov	r1, r3
 8000502:	2301      	movs	r3, #1
 8000504:	408b      	lsls	r3, r1
 8000506:	4013      	ands	r3, r2
 8000508:	2b00      	cmp	r3, #0
 800050a:	bf0c      	ite	eq
 800050c:	2301      	moveq	r3, #1
 800050e:	2300      	movne	r3, #0
 8000510:	72fb      	strb	r3, [r7, #11]

      if (pressed)
 8000512:	7afb      	ldrb	r3, [r7, #11]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d006      	beq.n	8000526 <_ZN6Keypad4tickEv+0x6e>
      {
        keystates[i] = 1;
 8000518:	687a      	ldr	r2, [r7, #4]
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	4413      	add	r3, r2
 800051e:	3313      	adds	r3, #19
 8000520:	2201      	movs	r2, #1
 8000522:	701a      	strb	r2, [r3, #0]
 8000524:	e005      	b.n	8000532 <_ZN6Keypad4tickEv+0x7a>
      } else {
        keystates[i] = 0;
 8000526:	687a      	ldr	r2, [r7, #4]
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	4413      	add	r3, r2
 800052c:	3313      	adds	r3, #19
 800052e:	2200      	movs	r2, #0
 8000530:	701a      	strb	r2, [r3, #0]
    for (int r = 0; r < ROWS; r++)
 8000532:	693b      	ldr	r3, [r7, #16]
 8000534:	3301      	adds	r3, #1
 8000536:	613b      	str	r3, [r7, #16]
 8000538:	693b      	ldr	r3, [r7, #16]
 800053a:	2b03      	cmp	r3, #3
 800053c:	ddd2      	ble.n	80004e4 <_ZN6Keypad4tickEv+0x2c>
      }
    }
    GPIOA->BSRR = (1U << colPins[c]); // After checking all rows for a given column, the column is set back to high
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	4413      	add	r3, r2
 8000544:	3310      	adds	r3, #16
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	4619      	mov	r1, r3
 800054a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800054e:	2301      	movs	r3, #1
 8000550:	408b      	lsls	r3, r1
 8000552:	6193      	str	r3, [r2, #24]
  for (int c = 0; c < COLS; c++)
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	3301      	adds	r3, #1
 8000558:	617b      	str	r3, [r7, #20]
 800055a:	697b      	ldr	r3, [r7, #20]
 800055c:	2b02      	cmp	r3, #2
 800055e:	ddb2      	ble.n	80004c6 <_ZN6Keypad4tickEv+0xe>
  }

  findButtonPressed();
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	f000 f865 	bl	8000630 <_ZN6Keypad17findButtonPressedEv>
}
 8000566:	bf00      	nop
 8000568:	3718      	adds	r7, #24
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	48000400 	.word	0x48000400

08000574 <_ZN6Keypad11update_LEDsEc>:

void Keypad::update_LEDs(char key) {
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	460b      	mov	r3, r1
 800057e:	70fb      	strb	r3, [r7, #3]

  // Clear all LEDs
  GPIOB->BSRR = GPIO_BSRR_BR_6;
 8000580:	4b29      	ldr	r3, [pc, #164]	; (8000628 <_ZN6Keypad11update_LEDsEc+0xb4>)
 8000582:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000586:	619a      	str	r2, [r3, #24]
  GPIOC->BSRR = GPIO_BSRR_BR_7;
 8000588:	4b28      	ldr	r3, [pc, #160]	; (800062c <_ZN6Keypad11update_LEDsEc+0xb8>)
 800058a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800058e:	619a      	str	r2, [r3, #24]
  GPIOA->BSRR = GPIO_BSRR_BR_9 | GPIO_BSRR_BR_8;
 8000590:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000594:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8000598:	619a      	str	r2, [r3, #24]

  int binaryRepresentation = -1;
 800059a:	f04f 33ff 	mov.w	r3, #4294967295
 800059e:	60fb      	str	r3, [r7, #12]

  if (key >= '0' && key <= '9')
 80005a0:	78fb      	ldrb	r3, [r7, #3]
 80005a2:	2b2f      	cmp	r3, #47	; 0x2f
 80005a4:	d906      	bls.n	80005b4 <_ZN6Keypad11update_LEDsEc+0x40>
 80005a6:	78fb      	ldrb	r3, [r7, #3]
 80005a8:	2b39      	cmp	r3, #57	; 0x39
 80005aa:	d803      	bhi.n	80005b4 <_ZN6Keypad11update_LEDsEc+0x40>
  {
	binaryRepresentation = key - '0';  // Convert char to int
 80005ac:	78fb      	ldrb	r3, [r7, #3]
 80005ae:	3b30      	subs	r3, #48	; 0x30
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	e00a      	b.n	80005ca <_ZN6Keypad11update_LEDsEc+0x56>
  } else if (key == '*') {
 80005b4:	78fb      	ldrb	r3, [r7, #3]
 80005b6:	2b2a      	cmp	r3, #42	; 0x2a
 80005b8:	d102      	bne.n	80005c0 <_ZN6Keypad11update_LEDsEc+0x4c>
	binaryRepresentation = 14;  // 1110 in binary
 80005ba:	230e      	movs	r3, #14
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	e004      	b.n	80005ca <_ZN6Keypad11update_LEDsEc+0x56>
  } else if (key == '#') {
 80005c0:	78fb      	ldrb	r3, [r7, #3]
 80005c2:	2b23      	cmp	r3, #35	; 0x23
 80005c4:	d101      	bne.n	80005ca <_ZN6Keypad11update_LEDsEc+0x56>
	binaryRepresentation = 15;  // 1111 in binary
 80005c6:	230f      	movs	r3, #15
 80005c8:	60fb      	str	r3, [r7, #12]
  }

  if (binaryRepresentation != -1)
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d0:	d023      	beq.n	800061a <_ZN6Keypad11update_LEDsEc+0xa6>
  {
	if (binaryRepresentation & 0b0001) GPIOB->BSRR = GPIO_BSRR_BS_6;
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	f003 0301 	and.w	r3, r3, #1
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d002      	beq.n	80005e2 <_ZN6Keypad11update_LEDsEc+0x6e>
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <_ZN6Keypad11update_LEDsEc+0xb4>)
 80005de:	2240      	movs	r2, #64	; 0x40
 80005e0:	619a      	str	r2, [r3, #24]
	if (binaryRepresentation & 0b0010) GPIOC->BSRR = GPIO_BSRR_BS_7;
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	f003 0302 	and.w	r3, r3, #2
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d002      	beq.n	80005f2 <_ZN6Keypad11update_LEDsEc+0x7e>
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <_ZN6Keypad11update_LEDsEc+0xb8>)
 80005ee:	2280      	movs	r2, #128	; 0x80
 80005f0:	619a      	str	r2, [r3, #24]
	if (binaryRepresentation & 0b0100) GPIOA->BSRR = GPIO_BSRR_BS_9;
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	f003 0304 	and.w	r3, r3, #4
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d004      	beq.n	8000606 <_ZN6Keypad11update_LEDsEc+0x92>
 80005fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000600:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000604:	619a      	str	r2, [r3, #24]
	if (binaryRepresentation & 0b1000) GPIOA->BSRR = GPIO_BSRR_BS_8;
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	f003 0308 	and.w	r3, r3, #8
 800060c:	2b00      	cmp	r3, #0
 800060e:	d004      	beq.n	800061a <_ZN6Keypad11update_LEDsEc+0xa6>
 8000610:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000614:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000618:	619a      	str	r2, [r3, #24]
  }
}
 800061a:	bf00      	nop
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	48000400 	.word	0x48000400
 800062c:	48000800 	.word	0x48000800

08000630 <_ZN6Keypad17findButtonPressedEv>:

char Keypad::findButtonPressed()
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	for (int r = 0; r < ROWS; r++)
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
 800063c:	e030      	b.n	80006a0 <_ZN6Keypad17findButtonPressedEv+0x70>
	{
	  for (int c = 0; c < COLS; c++)
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]
 8000642:	e027      	b.n	8000694 <_ZN6Keypad17findButtonPressedEv+0x64>
	  {
		int i = r * COLS + c;
 8000644:	697a      	ldr	r2, [r7, #20]
 8000646:	4613      	mov	r3, r2
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	4413      	add	r3, r2
 800064c:	693a      	ldr	r2, [r7, #16]
 800064e:	4413      	add	r3, r2
 8000650:	60fb      	str	r3, [r7, #12]
		if (keystates[i])
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	4413      	add	r3, r2
 8000658:	3313      	adds	r3, #19
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	b2db      	uxtb	r3, r3
 800065e:	2b00      	cmp	r3, #0
 8000660:	bf14      	ite	ne
 8000662:	2301      	movne	r3, #1
 8000664:	2300      	moveq	r3, #0
 8000666:	b2db      	uxtb	r3, r3
 8000668:	2b00      	cmp	r3, #0
 800066a:	d010      	beq.n	800068e <_ZN6Keypad17findButtonPressedEv+0x5e>
		{
		  char key = keys[r][c];
 800066c:	6879      	ldr	r1, [r7, #4]
 800066e:	697a      	ldr	r2, [r7, #20]
 8000670:	4613      	mov	r3, r2
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	4413      	add	r3, r2
 8000676:	18ca      	adds	r2, r1, r3
 8000678:	693b      	ldr	r3, [r7, #16]
 800067a:	4413      	add	r3, r2
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	72fb      	strb	r3, [r7, #11]
		  update_LEDs(key);
 8000680:	7afb      	ldrb	r3, [r7, #11]
 8000682:	4619      	mov	r1, r3
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f7ff ff75 	bl	8000574 <_ZN6Keypad11update_LEDsEc>
		  return key;
 800068a:	7afb      	ldrb	r3, [r7, #11]
 800068c:	e00b      	b.n	80006a6 <_ZN6Keypad17findButtonPressedEv+0x76>
	  for (int c = 0; c < COLS; c++)
 800068e:	693b      	ldr	r3, [r7, #16]
 8000690:	3301      	adds	r3, #1
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]
 8000696:	2b02      	cmp	r3, #2
 8000698:	ddd4      	ble.n	8000644 <_ZN6Keypad17findButtonPressedEv+0x14>
	for (int r = 0; r < ROWS; r++)
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	3301      	adds	r3, #1
 800069e:	617b      	str	r3, [r7, #20]
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	2b03      	cmp	r3, #3
 80006a4:	ddcb      	ble.n	800063e <_ZN6Keypad17findButtonPressedEv+0xe>
		}
	  }
	}
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3718      	adds	r7, #24
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	db0b      	blt.n	80006da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	f003 021f 	and.w	r2, r3, #31
 80006c8:	4907      	ldr	r1, [pc, #28]	; (80006e8 <__NVIC_EnableIRQ+0x38>)
 80006ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ce:	095b      	lsrs	r3, r3, #5
 80006d0:	2001      	movs	r0, #1
 80006d2:	fa00 f202 	lsl.w	r2, r0, r2
 80006d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	e000e100 	.word	0xe000e100

080006ec <_Z9TIM2_initv>:
    return (a < b) ? a : b;
}


// Initialize TIM2 for 16 µs interval
void TIM2_init() {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <_Z9TIM2_initv+0x4c>)
 80006f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006f4:	4a10      	ldr	r2, [pc, #64]	; (8000738 <_Z9TIM2_initv+0x4c>)
 80006f6:	f043 0301 	orr.w	r3, r3, #1
 80006fa:	6593      	str	r3, [r2, #88]	; 0x58
	TIM2->PSC = 0;
 80006fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000700:	2200      	movs	r2, #0
 8000702:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 400;
 8000704:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000708:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800070c:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->DIER |= TIM_DIER_UIE;
 800070e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	60d3      	str	r3, [r2, #12]
	TIM2->CR1 |= TIM_CR1_CEN;
 800071e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(TIM2_IRQn);
 800072e:	201c      	movs	r0, #28
 8000730:	f7ff ffbe 	bl	80006b0 <__NVIC_EnableIRQ>
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40021000 	.word	0x40021000

0800073c <TIM2_IRQHandler>:
        i = (i + 2) % modulo_value;
    }
}*/

extern "C" void TIM2_IRQHandler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF)
 8000742:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000746:	691b      	ldr	r3, [r3, #16]
 8000748:	f003 0301 	and.w	r3, r3, #1
 800074c:	2b00      	cmp	r3, #0
 800074e:	bf14      	ite	ne
 8000750:	2301      	movne	r3, #1
 8000752:	2300      	moveq	r3, #0
 8000754:	b2db      	uxtb	r3, r3
 8000756:	2b00      	cmp	r3, #0
 8000758:	f000 812e 	beq.w	80009b8 <TIM2_IRQHandler+0x27c>
    {
        TIM2->SR &= ~TIM_SR_UIF;
 800075c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000760:	691b      	ldr	r3, [r3, #16]
 8000762:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000766:	f023 0301 	bic.w	r3, r3, #1
 800076a:	6113      	str	r3, [r2, #16]
        keys.tick();
 800076c:	4894      	ldr	r0, [pc, #592]	; (80009c0 <TIM2_IRQHandler+0x284>)
 800076e:	f7ff fea3 	bl	80004b8 <_ZN6Keypad4tickEv>
        char key = keys.findButtonPressed();
 8000772:	4893      	ldr	r0, [pc, #588]	; (80009c0 <TIM2_IRQHandler+0x284>)
 8000774:	f7ff ff5c 	bl	8000630 <_ZN6Keypad17findButtonPressedEv>
 8000778:	4603      	mov	r3, r0
 800077a:	71fb      	strb	r3, [r7, #7]

        uint16_t value_A, value_B;
        int modulo_value = 800;  // Default for 100Hz
 800077c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000780:	60fb      	str	r3, [r7, #12]
        const uint16_t *current_wave = nullptr;
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]

        // Update waveform and frequency based on keypad input
        if (key >= '1' && key <= '5') {
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	2b30      	cmp	r3, #48	; 0x30
 800078a:	d934      	bls.n	80007f6 <TIM2_IRQHandler+0xba>
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	2b35      	cmp	r3, #53	; 0x35
 8000790:	d831      	bhi.n	80007f6 <TIM2_IRQHandler+0xba>
            frequency = (key - '0') * 100;
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	3b30      	subs	r3, #48	; 0x30
 8000796:	2264      	movs	r2, #100	; 0x64
 8000798:	fb02 f303 	mul.w	r3, r2, r3
 800079c:	4a89      	ldr	r2, [pc, #548]	; (80009c4 <TIM2_IRQHandler+0x288>)
 800079e:	6013      	str	r3, [r2, #0]
            switch (frequency) {
 80007a0:	4b88      	ldr	r3, [pc, #544]	; (80009c4 <TIM2_IRQHandler+0x288>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007a8:	d022      	beq.n	80007f0 <TIM2_IRQHandler+0xb4>
 80007aa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007ae:	dc22      	bgt.n	80007f6 <TIM2_IRQHandler+0xba>
 80007b0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80007b4:	d019      	beq.n	80007ea <TIM2_IRQHandler+0xae>
 80007b6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80007ba:	dc1c      	bgt.n	80007f6 <TIM2_IRQHandler+0xba>
 80007bc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80007c0:	d00f      	beq.n	80007e2 <TIM2_IRQHandler+0xa6>
 80007c2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80007c6:	dc16      	bgt.n	80007f6 <TIM2_IRQHandler+0xba>
 80007c8:	2b64      	cmp	r3, #100	; 0x64
 80007ca:	d002      	beq.n	80007d2 <TIM2_IRQHandler+0x96>
 80007cc:	2bc8      	cmp	r3, #200	; 0xc8
 80007ce:	d004      	beq.n	80007da <TIM2_IRQHandler+0x9e>
 80007d0:	e011      	b.n	80007f6 <TIM2_IRQHandler+0xba>
                case 100: modulo_value = 800; break;
 80007d2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	e00d      	b.n	80007f6 <TIM2_IRQHandler+0xba>
                case 200: modulo_value = 400; break;
 80007da:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	e009      	b.n	80007f6 <TIM2_IRQHandler+0xba>
                case 300: modulo_value = 267; break;
 80007e2:	f240 130b 	movw	r3, #267	; 0x10b
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	e005      	b.n	80007f6 <TIM2_IRQHandler+0xba>
                case 400: modulo_value = 200; break;
 80007ea:	23c8      	movs	r3, #200	; 0xc8
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	e002      	b.n	80007f6 <TIM2_IRQHandler+0xba>
                case 500: modulo_value = 160; break;
 80007f0:	23a0      	movs	r3, #160	; 0xa0
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	bf00      	nop
            }
        }

        if (key >= '6' && key <= '9') {
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	2b35      	cmp	r3, #53	; 0x35
 80007fa:	d906      	bls.n	800080a <TIM2_IRQHandler+0xce>
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	2b39      	cmp	r3, #57	; 0x39
 8000800:	d803      	bhi.n	800080a <TIM2_IRQHandler+0xce>
            waveform = key - '6';
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	3b36      	subs	r3, #54	; 0x36
 8000806:	4a70      	ldr	r2, [pc, #448]	; (80009c8 <TIM2_IRQHandler+0x28c>)
 8000808:	6013      	str	r3, [r2, #0]
        }

        switch (frequency) {
 800080a:	4b6e      	ldr	r3, [pc, #440]	; (80009c4 <TIM2_IRQHandler+0x288>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000812:	f000 8088 	beq.w	8000926 <TIM2_IRQHandler+0x1ea>
 8000816:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800081a:	f300 80a9 	bgt.w	8000970 <TIM2_IRQHandler+0x234>
 800081e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000822:	d064      	beq.n	80008ee <TIM2_IRQHandler+0x1b2>
 8000824:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000828:	f300 80a2 	bgt.w	8000970 <TIM2_IRQHandler+0x234>
 800082c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000830:	d041      	beq.n	80008b6 <TIM2_IRQHandler+0x17a>
 8000832:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000836:	f300 809b 	bgt.w	8000970 <TIM2_IRQHandler+0x234>
 800083a:	2b64      	cmp	r3, #100	; 0x64
 800083c:	d002      	beq.n	8000844 <TIM2_IRQHandler+0x108>
 800083e:	2bc8      	cmp	r3, #200	; 0xc8
 8000840:	d01d      	beq.n	800087e <TIM2_IRQHandler+0x142>
 8000842:	e095      	b.n	8000970 <TIM2_IRQHandler+0x234>
            case 100:
                switch (waveform) {
 8000844:	4b60      	ldr	r3, [pc, #384]	; (80009c8 <TIM2_IRQHandler+0x28c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b03      	cmp	r3, #3
 800084a:	f200 8088 	bhi.w	800095e <TIM2_IRQHandler+0x222>
 800084e:	a201      	add	r2, pc, #4	; (adr r2, 8000854 <TIM2_IRQHandler+0x118>)
 8000850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000854:	08000865 	.word	0x08000865
 8000858:	0800086b 	.word	0x0800086b
 800085c:	08000871 	.word	0x08000871
 8000860:	08000877 	.word	0x08000877
                    case 0: current_wave = sine_wave_100Hz; break;
 8000864:	4b59      	ldr	r3, [pc, #356]	; (80009cc <TIM2_IRQHandler+0x290>)
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	e008      	b.n	800087c <TIM2_IRQHandler+0x140>
                    case 1: current_wave = triangle_wave_100Hz; break;
 800086a:	4b59      	ldr	r3, [pc, #356]	; (80009d0 <TIM2_IRQHandler+0x294>)
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	e005      	b.n	800087c <TIM2_IRQHandler+0x140>
                    case 2: current_wave = sawtooth_wave_100Hz; break;
 8000870:	4b58      	ldr	r3, [pc, #352]	; (80009d4 <TIM2_IRQHandler+0x298>)
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	e002      	b.n	800087c <TIM2_IRQHandler+0x140>
                    case 3: current_wave = square_wave_100Hz; break;
 8000876:	4b58      	ldr	r3, [pc, #352]	; (80009d8 <TIM2_IRQHandler+0x29c>)
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	bf00      	nop
                }
                break;
 800087c:	e06f      	b.n	800095e <TIM2_IRQHandler+0x222>
            case 200:
            	switch (waveform) {
 800087e:	4b52      	ldr	r3, [pc, #328]	; (80009c8 <TIM2_IRQHandler+0x28c>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2b03      	cmp	r3, #3
 8000884:	d86d      	bhi.n	8000962 <TIM2_IRQHandler+0x226>
 8000886:	a201      	add	r2, pc, #4	; (adr r2, 800088c <TIM2_IRQHandler+0x150>)
 8000888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800088c:	0800089d 	.word	0x0800089d
 8000890:	080008a3 	.word	0x080008a3
 8000894:	080008a9 	.word	0x080008a9
 8000898:	080008af 	.word	0x080008af
					case 0: current_wave = sine_wave_200Hz; break;
 800089c:	4b4f      	ldr	r3, [pc, #316]	; (80009dc <TIM2_IRQHandler+0x2a0>)
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	e008      	b.n	80008b4 <TIM2_IRQHandler+0x178>
					case 1: current_wave = triangle_wave_200Hz; break;
 80008a2:	4b4f      	ldr	r3, [pc, #316]	; (80009e0 <TIM2_IRQHandler+0x2a4>)
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	e005      	b.n	80008b4 <TIM2_IRQHandler+0x178>
					case 2: current_wave = sawtooth_wave_200Hz; break;
 80008a8:	4b4e      	ldr	r3, [pc, #312]	; (80009e4 <TIM2_IRQHandler+0x2a8>)
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	e002      	b.n	80008b4 <TIM2_IRQHandler+0x178>
					case 3: current_wave = square_wave_200Hz; break;
 80008ae:	4b4e      	ldr	r3, [pc, #312]	; (80009e8 <TIM2_IRQHandler+0x2ac>)
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	bf00      	nop
				}
				break;
 80008b4:	e055      	b.n	8000962 <TIM2_IRQHandler+0x226>
			case 300:
				switch (waveform) {
 80008b6:	4b44      	ldr	r3, [pc, #272]	; (80009c8 <TIM2_IRQHandler+0x28c>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2b03      	cmp	r3, #3
 80008bc:	d853      	bhi.n	8000966 <TIM2_IRQHandler+0x22a>
 80008be:	a201      	add	r2, pc, #4	; (adr r2, 80008c4 <TIM2_IRQHandler+0x188>)
 80008c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c4:	080008d5 	.word	0x080008d5
 80008c8:	080008db 	.word	0x080008db
 80008cc:	080008e1 	.word	0x080008e1
 80008d0:	080008e7 	.word	0x080008e7
					case 0: current_wave = sine_wave_300Hz; break;
 80008d4:	4b45      	ldr	r3, [pc, #276]	; (80009ec <TIM2_IRQHandler+0x2b0>)
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	e008      	b.n	80008ec <TIM2_IRQHandler+0x1b0>
					case 1: current_wave = triangle_wave_300Hz; break;
 80008da:	4b45      	ldr	r3, [pc, #276]	; (80009f0 <TIM2_IRQHandler+0x2b4>)
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	e005      	b.n	80008ec <TIM2_IRQHandler+0x1b0>
					case 2: current_wave = sawtooth_wave_300Hz; break;
 80008e0:	4b44      	ldr	r3, [pc, #272]	; (80009f4 <TIM2_IRQHandler+0x2b8>)
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	e002      	b.n	80008ec <TIM2_IRQHandler+0x1b0>
					case 3: current_wave = square_wave_300Hz; break;
 80008e6:	4b44      	ldr	r3, [pc, #272]	; (80009f8 <TIM2_IRQHandler+0x2bc>)
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	bf00      	nop
				}
				break;
 80008ec:	e03b      	b.n	8000966 <TIM2_IRQHandler+0x22a>
			case 400:
				switch (waveform) {
 80008ee:	4b36      	ldr	r3, [pc, #216]	; (80009c8 <TIM2_IRQHandler+0x28c>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2b03      	cmp	r3, #3
 80008f4:	d839      	bhi.n	800096a <TIM2_IRQHandler+0x22e>
 80008f6:	a201      	add	r2, pc, #4	; (adr r2, 80008fc <TIM2_IRQHandler+0x1c0>)
 80008f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008fc:	0800090d 	.word	0x0800090d
 8000900:	08000913 	.word	0x08000913
 8000904:	08000919 	.word	0x08000919
 8000908:	0800091f 	.word	0x0800091f
					case 0: current_wave = sine_wave_400Hz; break;
 800090c:	4b3b      	ldr	r3, [pc, #236]	; (80009fc <TIM2_IRQHandler+0x2c0>)
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	e008      	b.n	8000924 <TIM2_IRQHandler+0x1e8>
					case 1: current_wave = triangle_wave_400Hz; break;
 8000912:	4b3b      	ldr	r3, [pc, #236]	; (8000a00 <TIM2_IRQHandler+0x2c4>)
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	e005      	b.n	8000924 <TIM2_IRQHandler+0x1e8>
					case 2: current_wave = sawtooth_wave_400Hz; break;
 8000918:	4b3a      	ldr	r3, [pc, #232]	; (8000a04 <TIM2_IRQHandler+0x2c8>)
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	e002      	b.n	8000924 <TIM2_IRQHandler+0x1e8>
					case 3: current_wave = square_wave_400Hz; break;
 800091e:	4b3a      	ldr	r3, [pc, #232]	; (8000a08 <TIM2_IRQHandler+0x2cc>)
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	bf00      	nop
				}
				break;
 8000924:	e021      	b.n	800096a <TIM2_IRQHandler+0x22e>
			case 500:
				switch (waveform) {
 8000926:	4b28      	ldr	r3, [pc, #160]	; (80009c8 <TIM2_IRQHandler+0x28c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2b03      	cmp	r3, #3
 800092c:	d81f      	bhi.n	800096e <TIM2_IRQHandler+0x232>
 800092e:	a201      	add	r2, pc, #4	; (adr r2, 8000934 <TIM2_IRQHandler+0x1f8>)
 8000930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000934:	08000945 	.word	0x08000945
 8000938:	0800094b 	.word	0x0800094b
 800093c:	08000951 	.word	0x08000951
 8000940:	08000957 	.word	0x08000957
					case 0: current_wave = sine_wave_500Hz; break;
 8000944:	4b31      	ldr	r3, [pc, #196]	; (8000a0c <TIM2_IRQHandler+0x2d0>)
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	e008      	b.n	800095c <TIM2_IRQHandler+0x220>
					case 1: current_wave = triangle_wave_500Hz; break;
 800094a:	4b31      	ldr	r3, [pc, #196]	; (8000a10 <TIM2_IRQHandler+0x2d4>)
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	e005      	b.n	800095c <TIM2_IRQHandler+0x220>
					case 2: current_wave = sawtooth_wave_500Hz; break;
 8000950:	4b30      	ldr	r3, [pc, #192]	; (8000a14 <TIM2_IRQHandler+0x2d8>)
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	e002      	b.n	800095c <TIM2_IRQHandler+0x220>
					case 3: current_wave = square_wave_500Hz; break;
 8000956:	4b30      	ldr	r3, [pc, #192]	; (8000a18 <TIM2_IRQHandler+0x2dc>)
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	bf00      	nop
				}
			break;
 800095c:	e007      	b.n	800096e <TIM2_IRQHandler+0x232>
                break;
 800095e:	bf00      	nop
 8000960:	e006      	b.n	8000970 <TIM2_IRQHandler+0x234>
				break;
 8000962:	bf00      	nop
 8000964:	e004      	b.n	8000970 <TIM2_IRQHandler+0x234>
				break;
 8000966:	bf00      	nop
 8000968:	e002      	b.n	8000970 <TIM2_IRQHandler+0x234>
				break;
 800096a:	bf00      	nop
 800096c:	e000      	b.n	8000970 <TIM2_IRQHandler+0x234>
			break;
 800096e:	bf00      	nop
        }

        if (current_wave) {
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d014      	beq.n	80009a0 <TIM2_IRQHandler+0x264>
            value_A = current_wave[i];
 8000976:	4b29      	ldr	r3, [pc, #164]	; (8000a1c <TIM2_IRQHandler+0x2e0>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	68ba      	ldr	r2, [r7, #8]
 800097e:	4413      	add	r3, r2
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	80bb      	strh	r3, [r7, #4]
            value_B = current_wave[i + 1];
 8000984:	4b25      	ldr	r3, [pc, #148]	; (8000a1c <TIM2_IRQHandler+0x2e0>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	3301      	adds	r3, #1
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	68ba      	ldr	r2, [r7, #8]
 800098e:	4413      	add	r3, r2
 8000990:	881b      	ldrh	r3, [r3, #0]
 8000992:	807b      	strh	r3, [r7, #2]
            dac.DAC_write(value_A, value_B);
 8000994:	887a      	ldrh	r2, [r7, #2]
 8000996:	88bb      	ldrh	r3, [r7, #4]
 8000998:	4619      	mov	r1, r3
 800099a:	4821      	ldr	r0, [pc, #132]	; (8000a20 <TIM2_IRQHandler+0x2e4>)
 800099c:	f7ff fc9c 	bl	80002d8 <_ZN12External_DAC9DAC_writeEtt>
        }

        // Update index based on frequency
        i = (i + 2) % modulo_value;
 80009a0:	4b1e      	ldr	r3, [pc, #120]	; (8000a1c <TIM2_IRQHandler+0x2e0>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	3302      	adds	r3, #2
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	fb93 f2f2 	sdiv	r2, r3, r2
 80009ac:	68f9      	ldr	r1, [r7, #12]
 80009ae:	fb01 f202 	mul.w	r2, r1, r2
 80009b2:	1a9b      	subs	r3, r3, r2
 80009b4:	4a19      	ldr	r2, [pc, #100]	; (8000a1c <TIM2_IRQHandler+0x2e0>)
 80009b6:	6013      	str	r3, [r2, #0]
    }
}
 80009b8:	bf00      	nop
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000084 	.word	0x20000084
 80009c4:	20000004 	.word	0x20000004
 80009c8:	20000000 	.word	0x20000000
 80009cc:	08003d28 	.word	0x08003d28
 80009d0:	08004fe8 	.word	0x08004fe8
 80009d4:	080049a8 	.word	0x080049a8
 80009d8:	08004368 	.word	0x08004368
 80009dc:	080030a8 	.word	0x080030a8
 80009e0:	08003a08 	.word	0x08003a08
 80009e4:	080036e8 	.word	0x080036e8
 80009e8:	080033c8 	.word	0x080033c8
 80009ec:	08002848 	.word	0x08002848
 80009f0:	08002e90 	.word	0x08002e90
 80009f4:	08002c78 	.word	0x08002c78
 80009f8:	08002a60 	.word	0x08002a60
 80009fc:	08002208 	.word	0x08002208
 8000a00:	080026b8 	.word	0x080026b8
 8000a04:	08002528 	.word	0x08002528
 8000a08:	08002398 	.word	0x08002398
 8000a0c:	08001d08 	.word	0x08001d08
 8000a10:	080020c8 	.word	0x080020c8
 8000a14:	08001f88 	.word	0x08001f88
 8000a18:	08001e48 	.word	0x08001e48
 8000a1c:	200000a4 	.word	0x200000a4
 8000a20:	20000080 	.word	0x20000080

08000a24 <main>:
//	        i = (i + 2) % 800;//(1000 * 500 / frequency);  // Assuming waveform arrays have 256 points and max frequency is 500 Hz
//	 }
//}

int main()
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	HAL_Init();
 8000a28:	f000 f938 	bl	8000c9c <HAL_Init>
	SystemClock_Config();
 8000a2c:	f000 f810 	bl	8000a50 <_Z18SystemClock_Configv>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000a30:	b662      	cpsie	i
}
 8000a32:	bf00      	nop
	__enable_irq();
	TIM2_init();
 8000a34:	f7ff fe5a 	bl	80006ec <_Z9TIM2_initv>
	keys.Keypad_init();
 8000a38:	4803      	ldr	r0, [pc, #12]	; (8000a48 <main+0x24>)
 8000a3a:	f7ff fcc5 	bl	80003c8 <_ZN6Keypad11Keypad_initEv>
	dac.DAC_init();
 8000a3e:	4803      	ldr	r0, [pc, #12]	; (8000a4c <main+0x28>)
 8000a40:	f7ff fbf2 	bl	8000228 <_ZN12External_DAC8DAC_initEv>

	while(1)
 8000a44:	e7fe      	b.n	8000a44 <main+0x20>
 8000a46:	bf00      	nop
 8000a48:	20000084 	.word	0x20000084
 8000a4c:	20000080 	.word	0x20000080

08000a50 <_Z18SystemClock_Configv>:

	return 0;
}

void SystemClock_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b096      	sub	sp, #88	; 0x58
 8000a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	2244      	movs	r2, #68	; 0x44
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f001 f8c2 	bl	8001be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a64:	463b      	mov	r3, r7
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
 8000a70:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a72:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a76:	f000 fa81 	bl	8000f7c <HAL_PWREx_ControlVoltageScaling>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	bf14      	ite	ne
 8000a80:	2301      	movne	r3, #1
 8000a82:	2300      	moveq	r3, #0
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8000a8a:	f000 f842 	bl	8000b12 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000a8e:	2310      	movs	r3, #16
 8000a90:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a92:	2301      	movs	r3, #1
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a9a:	2360      	movs	r3, #96	; 0x60
 8000a9c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000aaa:	2328      	movs	r3, #40	; 0x28
 8000aac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000aae:	2307      	movs	r3, #7
 8000ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f000 fab2 	bl	8001028 <HAL_RCC_OscConfig>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	bf14      	ite	ne
 8000aca:	2301      	movne	r3, #1
 8000acc:	2300      	moveq	r3, #0
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 8000ad4:	f000 f81d 	bl	8000b12 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad8:	230f      	movs	r3, #15
 8000ada:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000adc:	2303      	movs	r3, #3
 8000ade:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000aec:	463b      	mov	r3, r7
 8000aee:	2104      	movs	r1, #4
 8000af0:	4618      	mov	r0, r3
 8000af2:	f000 fe75 	bl	80017e0 <HAL_RCC_ClockConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	bf14      	ite	ne
 8000afc:	2301      	movne	r3, #1
 8000afe:	2300      	moveq	r3, #0
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8000b06:	f000 f804 	bl	8000b12 <Error_Handler>
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	3758      	adds	r7, #88	; 0x58
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <Error_Handler>:
void Error_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b16:	b672      	cpsid	i
}
 8000b18:	bf00      	nop
  __disable_irq();
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <Error_Handler+0x8>

08000b1c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }

}
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d10a      	bne.n	8000b42 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d105      	bne.n	8000b42 <_Z41__static_initialization_and_destruction_0ii+0x26>
External_DAC dac;
 8000b36:	480a      	ldr	r0, [pc, #40]	; (8000b60 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8000b38:	f7ff fb46 	bl	80001c8 <_ZN12External_DACC1Ev>
Keypad keys;
 8000b3c:	4809      	ldr	r0, [pc, #36]	; (8000b64 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8000b3e:	f7ff fc09 	bl	8000354 <_ZN6KeypadC1Ev>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d107      	bne.n	8000b58 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d102      	bne.n	8000b58 <_Z41__static_initialization_and_destruction_0ii+0x3c>
External_DAC dac;
 8000b52:	4803      	ldr	r0, [pc, #12]	; (8000b60 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8000b54:	f7ff fb48 	bl	80001e8 <_ZN12External_DACD1Ev>
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000080 	.word	0x20000080
 8000b64:	20000084 	.word	0x20000084

08000b68 <_GLOBAL__sub_I_flagA2outpu>:
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b70:	2001      	movs	r0, #1
 8000b72:	f7ff ffd3 	bl	8000b1c <_Z41__static_initialization_and_destruction_0ii>
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <_GLOBAL__sub_D_flagA2outpu>:
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b80:	2000      	movs	r0, #0
 8000b82:	f7ff ffcb 	bl	8000b1c <_Z41__static_initialization_and_destruction_0ii>
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <HAL_MspInit+0x44>)
 8000b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b92:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <HAL_MspInit+0x44>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6613      	str	r3, [r2, #96]	; 0x60
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <HAL_MspInit+0x44>)
 8000b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <HAL_MspInit+0x44>)
 8000ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000baa:	4a08      	ldr	r2, [pc, #32]	; (8000bcc <HAL_MspInit+0x44>)
 8000bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb0:	6593      	str	r3, [r2, #88]	; 0x58
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_MspInit+0x44>)
 8000bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <NMI_Handler+0x4>

08000bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <HardFault_Handler+0x4>

08000bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <MemManage_Handler+0x4>

08000be2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <BusFault_Handler+0x4>

08000be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <UsageFault_Handler+0x4>

08000bee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1c:	f000 f89a 	bl	8000d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <SystemInit+0x20>)
 8000c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2e:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <SystemInit+0x20>)
 8000c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c4c:	f7ff ffea 	bl	8000c24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c50:	480c      	ldr	r0, [pc, #48]	; (8000c84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c52:	490d      	ldr	r1, [pc, #52]	; (8000c88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c54:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <LoopForever+0xe>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c58:	e002      	b.n	8000c60 <LoopCopyDataInit>

08000c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5e:	3304      	adds	r3, #4

08000c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c64:	d3f9      	bcc.n	8000c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c66:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c68:	4c0a      	ldr	r4, [pc, #40]	; (8000c94 <LoopForever+0x16>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c6c:	e001      	b.n	8000c72 <LoopFillZerobss>

08000c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c70:	3204      	adds	r2, #4

08000c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c74:	d3fb      	bcc.n	8000c6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c76:	f000 ffbf 	bl	8001bf8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c7a:	f7ff fed3 	bl	8000a24 <main>

08000c7e <LoopForever>:

LoopForever:
    b LoopForever
 8000c7e:	e7fe      	b.n	8000c7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c80:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c88:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000c8c:	08005688 	.word	0x08005688
  ldr r2, =_sbss
 8000c90:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000c94:	200001ec 	.word	0x200001ec

08000c98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c98:	e7fe      	b.n	8000c98 <ADC1_2_IRQHandler>
	...

08000c9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <HAL_Init+0x3c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a0b      	ldr	r2, [pc, #44]	; (8000cd8 <HAL_Init+0x3c>)
 8000cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cb0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb2:	2003      	movs	r0, #3
 8000cb4:	f000 f920 	bl	8000ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f000 f80f 	bl	8000cdc <HAL_InitTick>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d002      	beq.n	8000cca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	71fb      	strb	r3, [r7, #7]
 8000cc8:	e001      	b.n	8000cce <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cca:	f7ff ff5d 	bl	8000b88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cce:	79fb      	ldrb	r3, [r7, #7]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40022000 	.word	0x40022000

08000cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ce8:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <HAL_InitTick+0x6c>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d023      	beq.n	8000d38 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cf0:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <HAL_InitTick+0x70>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <HAL_InitTick+0x6c>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d06:	4618      	mov	r0, r3
 8000d08:	f000 f91d 	bl	8000f46 <HAL_SYSTICK_Config>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d10f      	bne.n	8000d32 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2b0f      	cmp	r3, #15
 8000d16:	d809      	bhi.n	8000d2c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d20:	f000 f8f5 	bl	8000f0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d24:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <HAL_InitTick+0x74>)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6013      	str	r3, [r2, #0]
 8000d2a:	e007      	b.n	8000d3c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	73fb      	strb	r3, [r7, #15]
 8000d30:	e004      	b.n	8000d3c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	73fb      	strb	r3, [r7, #15]
 8000d36:	e001      	b.n	8000d3c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000010 	.word	0x20000010
 8000d4c:	20000008 	.word	0x20000008
 8000d50:	2000000c 	.word	0x2000000c

08000d54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_IncTick+0x20>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_IncTick+0x24>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4413      	add	r3, r2
 8000d64:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <HAL_IncTick+0x24>)
 8000d66:	6013      	str	r3, [r2, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20000010 	.word	0x20000010
 8000d78:	200000a8 	.word	0x200000a8

08000d7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <HAL_GetTick+0x14>)
 8000d82:	681b      	ldr	r3, [r3, #0]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	200000a8 	.word	0x200000a8

08000d94 <__NVIC_SetPriorityGrouping>:
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db0:	4013      	ands	r3, r2
 8000db2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dc6:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	60d3      	str	r3, [r2, #12]
}
 8000dcc:	bf00      	nop
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_GetPriorityGrouping>:
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de0:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <__NVIC_GetPriorityGrouping+0x18>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	0a1b      	lsrs	r3, r3, #8
 8000de6:	f003 0307 	and.w	r3, r3, #7
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	6039      	str	r1, [r7, #0]
 8000e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	db0a      	blt.n	8000e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	490c      	ldr	r1, [pc, #48]	; (8000e44 <__NVIC_SetPriority+0x4c>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	0112      	lsls	r2, r2, #4
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e20:	e00a      	b.n	8000e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4908      	ldr	r1, [pc, #32]	; (8000e48 <__NVIC_SetPriority+0x50>)
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	f003 030f 	and.w	r3, r3, #15
 8000e2e:	3b04      	subs	r3, #4
 8000e30:	0112      	lsls	r2, r2, #4
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	440b      	add	r3, r1
 8000e36:	761a      	strb	r2, [r3, #24]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000e100 	.word	0xe000e100
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b089      	sub	sp, #36	; 0x24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f1c3 0307 	rsb	r3, r3, #7
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	bf28      	it	cs
 8000e6a:	2304      	movcs	r3, #4
 8000e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3304      	adds	r3, #4
 8000e72:	2b06      	cmp	r3, #6
 8000e74:	d902      	bls.n	8000e7c <NVIC_EncodePriority+0x30>
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3b03      	subs	r3, #3
 8000e7a:	e000      	b.n	8000e7e <NVIC_EncodePriority+0x32>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	f04f 32ff 	mov.w	r2, #4294967295
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	401a      	ands	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e94:	f04f 31ff 	mov.w	r1, #4294967295
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	43d9      	mvns	r1, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	4313      	orrs	r3, r2
         );
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3724      	adds	r7, #36	; 0x24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
	...

08000eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec4:	d301      	bcc.n	8000eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e00f      	b.n	8000eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eca:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <SysTick_Config+0x40>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed2:	210f      	movs	r1, #15
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed8:	f7ff ff8e 	bl	8000df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <SysTick_Config+0x40>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee2:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <SysTick_Config+0x40>)
 8000ee4:	2207      	movs	r2, #7
 8000ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	e000e010 	.word	0xe000e010

08000ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff ff47 	bl	8000d94 <__NVIC_SetPriorityGrouping>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b086      	sub	sp, #24
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	4603      	mov	r3, r0
 8000f16:	60b9      	str	r1, [r7, #8]
 8000f18:	607a      	str	r2, [r7, #4]
 8000f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f20:	f7ff ff5c 	bl	8000ddc <__NVIC_GetPriorityGrouping>
 8000f24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	68b9      	ldr	r1, [r7, #8]
 8000f2a:	6978      	ldr	r0, [r7, #20]
 8000f2c:	f7ff ff8e 	bl	8000e4c <NVIC_EncodePriority>
 8000f30:	4602      	mov	r2, r0
 8000f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f36:	4611      	mov	r1, r2
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff5d 	bl	8000df8 <__NVIC_SetPriority>
}
 8000f3e:	bf00      	nop
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ffb0 	bl	8000eb4 <SysTick_Config>
 8000f54:	4603      	mov	r3, r0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <HAL_PWREx_GetVoltageRange+0x18>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	40007000 	.word	0x40007000

08000f7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f8a:	d130      	bne.n	8000fee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f8c:	4b23      	ldr	r3, [pc, #140]	; (800101c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f98:	d038      	beq.n	800100c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f9a:	4b20      	ldr	r3, [pc, #128]	; (800101c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fa2:	4a1e      	ldr	r2, [pc, #120]	; (800101c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fa8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000faa:	4b1d      	ldr	r3, [pc, #116]	; (8001020 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2232      	movs	r2, #50	; 0x32
 8000fb0:	fb02 f303 	mul.w	r3, r2, r3
 8000fb4:	4a1b      	ldr	r2, [pc, #108]	; (8001024 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fba:	0c9b      	lsrs	r3, r3, #18
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fc0:	e002      	b.n	8000fc8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fc8:	4b14      	ldr	r3, [pc, #80]	; (800101c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fd4:	d102      	bne.n	8000fdc <HAL_PWREx_ControlVoltageScaling+0x60>
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1f2      	bne.n	8000fc2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fde:	695b      	ldr	r3, [r3, #20]
 8000fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fe8:	d110      	bne.n	800100c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e00f      	b.n	800100e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ffa:	d007      	beq.n	800100c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001004:	4a05      	ldr	r2, [pc, #20]	; (800101c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001006:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800100a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40007000 	.word	0x40007000
 8001020:	20000008 	.word	0x20000008
 8001024:	431bde83 	.word	0x431bde83

08001028 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e3ca      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800103a:	4b97      	ldr	r3, [pc, #604]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f003 030c 	and.w	r3, r3, #12
 8001042:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001044:	4b94      	ldr	r3, [pc, #592]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0310 	and.w	r3, r3, #16
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 80e4 	beq.w	8001224 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d007      	beq.n	8001072 <HAL_RCC_OscConfig+0x4a>
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	2b0c      	cmp	r3, #12
 8001066:	f040 808b 	bne.w	8001180 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	2b01      	cmp	r3, #1
 800106e:	f040 8087 	bne.w	8001180 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001072:	4b89      	ldr	r3, [pc, #548]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d005      	beq.n	800108a <HAL_RCC_OscConfig+0x62>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e3a2      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6a1a      	ldr	r2, [r3, #32]
 800108e:	4b82      	ldr	r3, [pc, #520]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	2b00      	cmp	r3, #0
 8001098:	d004      	beq.n	80010a4 <HAL_RCC_OscConfig+0x7c>
 800109a:	4b7f      	ldr	r3, [pc, #508]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010a2:	e005      	b.n	80010b0 <HAL_RCC_OscConfig+0x88>
 80010a4:	4b7c      	ldr	r3, [pc, #496]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80010a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010aa:	091b      	lsrs	r3, r3, #4
 80010ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d223      	bcs.n	80010fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a1b      	ldr	r3, [r3, #32]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 fd1d 	bl	8001af8 <RCC_SetFlashLatencyFromMSIRange>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e383      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010c8:	4b73      	ldr	r3, [pc, #460]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a72      	ldr	r2, [pc, #456]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80010ce:	f043 0308 	orr.w	r3, r3, #8
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	4b70      	ldr	r3, [pc, #448]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a1b      	ldr	r3, [r3, #32]
 80010e0:	496d      	ldr	r1, [pc, #436]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80010e2:	4313      	orrs	r3, r2
 80010e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010e6:	4b6c      	ldr	r3, [pc, #432]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	021b      	lsls	r3, r3, #8
 80010f4:	4968      	ldr	r1, [pc, #416]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	604b      	str	r3, [r1, #4]
 80010fa:	e025      	b.n	8001148 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010fc:	4b66      	ldr	r3, [pc, #408]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a65      	ldr	r2, [pc, #404]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 8001102:	f043 0308 	orr.w	r3, r3, #8
 8001106:	6013      	str	r3, [r2, #0]
 8001108:	4b63      	ldr	r3, [pc, #396]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	4960      	ldr	r1, [pc, #384]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 8001116:	4313      	orrs	r3, r2
 8001118:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800111a:	4b5f      	ldr	r3, [pc, #380]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	021b      	lsls	r3, r3, #8
 8001128:	495b      	ldr	r1, [pc, #364]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 800112a:	4313      	orrs	r3, r2
 800112c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d109      	bne.n	8001148 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a1b      	ldr	r3, [r3, #32]
 8001138:	4618      	mov	r0, r3
 800113a:	f000 fcdd 	bl	8001af8 <RCC_SetFlashLatencyFromMSIRange>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e343      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001148:	f000 fc4a 	bl	80019e0 <HAL_RCC_GetSysClockFreq>
 800114c:	4602      	mov	r2, r0
 800114e:	4b52      	ldr	r3, [pc, #328]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	091b      	lsrs	r3, r3, #4
 8001154:	f003 030f 	and.w	r3, r3, #15
 8001158:	4950      	ldr	r1, [pc, #320]	; (800129c <HAL_RCC_OscConfig+0x274>)
 800115a:	5ccb      	ldrb	r3, [r1, r3]
 800115c:	f003 031f 	and.w	r3, r3, #31
 8001160:	fa22 f303 	lsr.w	r3, r2, r3
 8001164:	4a4e      	ldr	r2, [pc, #312]	; (80012a0 <HAL_RCC_OscConfig+0x278>)
 8001166:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001168:	4b4e      	ldr	r3, [pc, #312]	; (80012a4 <HAL_RCC_OscConfig+0x27c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff fdb5 	bl	8000cdc <HAL_InitTick>
 8001172:	4603      	mov	r3, r0
 8001174:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d052      	beq.n	8001222 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	e327      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d032      	beq.n	80011ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001188:	4b43      	ldr	r3, [pc, #268]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a42      	ldr	r2, [pc, #264]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001194:	f7ff fdf2 	bl	8000d7c <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800119c:	f7ff fdee 	bl	8000d7c <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e310      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011ae:	4b3a      	ldr	r3, [pc, #232]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d0f0      	beq.n	800119c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011ba:	4b37      	ldr	r3, [pc, #220]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a36      	ldr	r2, [pc, #216]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80011c0:	f043 0308 	orr.w	r3, r3, #8
 80011c4:	6013      	str	r3, [r2, #0]
 80011c6:	4b34      	ldr	r3, [pc, #208]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a1b      	ldr	r3, [r3, #32]
 80011d2:	4931      	ldr	r1, [pc, #196]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80011d4:	4313      	orrs	r3, r2
 80011d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011d8:	4b2f      	ldr	r3, [pc, #188]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	69db      	ldr	r3, [r3, #28]
 80011e4:	021b      	lsls	r3, r3, #8
 80011e6:	492c      	ldr	r1, [pc, #176]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80011e8:	4313      	orrs	r3, r2
 80011ea:	604b      	str	r3, [r1, #4]
 80011ec:	e01a      	b.n	8001224 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011ee:	4b2a      	ldr	r3, [pc, #168]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a29      	ldr	r2, [pc, #164]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80011f4:	f023 0301 	bic.w	r3, r3, #1
 80011f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011fa:	f7ff fdbf 	bl	8000d7c <HAL_GetTick>
 80011fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001200:	e008      	b.n	8001214 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001202:	f7ff fdbb 	bl	8000d7c <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e2dd      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001214:	4b20      	ldr	r3, [pc, #128]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1f0      	bne.n	8001202 <HAL_RCC_OscConfig+0x1da>
 8001220:	e000      	b.n	8001224 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001222:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	2b00      	cmp	r3, #0
 800122e:	d074      	beq.n	800131a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	2b08      	cmp	r3, #8
 8001234:	d005      	beq.n	8001242 <HAL_RCC_OscConfig+0x21a>
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	2b0c      	cmp	r3, #12
 800123a:	d10e      	bne.n	800125a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	2b03      	cmp	r3, #3
 8001240:	d10b      	bne.n	800125a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d064      	beq.n	8001318 <HAL_RCC_OscConfig+0x2f0>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d160      	bne.n	8001318 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e2ba      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001262:	d106      	bne.n	8001272 <HAL_RCC_OscConfig+0x24a>
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 800126a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	e026      	b.n	80012c0 <HAL_RCC_OscConfig+0x298>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800127a:	d115      	bne.n	80012a8 <HAL_RCC_OscConfig+0x280>
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a05      	ldr	r2, [pc, #20]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 8001282:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	4b03      	ldr	r3, [pc, #12]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a02      	ldr	r2, [pc, #8]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 800128e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	e014      	b.n	80012c0 <HAL_RCC_OscConfig+0x298>
 8001296:	bf00      	nop
 8001298:	40021000 	.word	0x40021000
 800129c:	08005638 	.word	0x08005638
 80012a0:	20000008 	.word	0x20000008
 80012a4:	2000000c 	.word	0x2000000c
 80012a8:	4ba0      	ldr	r3, [pc, #640]	; (800152c <HAL_RCC_OscConfig+0x504>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a9f      	ldr	r2, [pc, #636]	; (800152c <HAL_RCC_OscConfig+0x504>)
 80012ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	4b9d      	ldr	r3, [pc, #628]	; (800152c <HAL_RCC_OscConfig+0x504>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a9c      	ldr	r2, [pc, #624]	; (800152c <HAL_RCC_OscConfig+0x504>)
 80012ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d013      	beq.n	80012f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c8:	f7ff fd58 	bl	8000d7c <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012d0:	f7ff fd54 	bl	8000d7c <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b64      	cmp	r3, #100	; 0x64
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e276      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012e2:	4b92      	ldr	r3, [pc, #584]	; (800152c <HAL_RCC_OscConfig+0x504>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f0      	beq.n	80012d0 <HAL_RCC_OscConfig+0x2a8>
 80012ee:	e014      	b.n	800131a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f0:	f7ff fd44 	bl	8000d7c <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f8:	f7ff fd40 	bl	8000d7c <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b64      	cmp	r3, #100	; 0x64
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e262      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800130a:	4b88      	ldr	r3, [pc, #544]	; (800152c <HAL_RCC_OscConfig+0x504>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f0      	bne.n	80012f8 <HAL_RCC_OscConfig+0x2d0>
 8001316:	e000      	b.n	800131a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d060      	beq.n	80013e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	2b04      	cmp	r3, #4
 800132a:	d005      	beq.n	8001338 <HAL_RCC_OscConfig+0x310>
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	2b0c      	cmp	r3, #12
 8001330:	d119      	bne.n	8001366 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	2b02      	cmp	r3, #2
 8001336:	d116      	bne.n	8001366 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001338:	4b7c      	ldr	r3, [pc, #496]	; (800152c <HAL_RCC_OscConfig+0x504>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001340:	2b00      	cmp	r3, #0
 8001342:	d005      	beq.n	8001350 <HAL_RCC_OscConfig+0x328>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d101      	bne.n	8001350 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e23f      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001350:	4b76      	ldr	r3, [pc, #472]	; (800152c <HAL_RCC_OscConfig+0x504>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	061b      	lsls	r3, r3, #24
 800135e:	4973      	ldr	r1, [pc, #460]	; (800152c <HAL_RCC_OscConfig+0x504>)
 8001360:	4313      	orrs	r3, r2
 8001362:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001364:	e040      	b.n	80013e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d023      	beq.n	80013b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800136e:	4b6f      	ldr	r3, [pc, #444]	; (800152c <HAL_RCC_OscConfig+0x504>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a6e      	ldr	r2, [pc, #440]	; (800152c <HAL_RCC_OscConfig+0x504>)
 8001374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137a:	f7ff fcff 	bl	8000d7c <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001382:	f7ff fcfb 	bl	8000d7c <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e21d      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001394:	4b65      	ldr	r3, [pc, #404]	; (800152c <HAL_RCC_OscConfig+0x504>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0f0      	beq.n	8001382 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a0:	4b62      	ldr	r3, [pc, #392]	; (800152c <HAL_RCC_OscConfig+0x504>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	061b      	lsls	r3, r3, #24
 80013ae:	495f      	ldr	r1, [pc, #380]	; (800152c <HAL_RCC_OscConfig+0x504>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	604b      	str	r3, [r1, #4]
 80013b4:	e018      	b.n	80013e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013b6:	4b5d      	ldr	r3, [pc, #372]	; (800152c <HAL_RCC_OscConfig+0x504>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a5c      	ldr	r2, [pc, #368]	; (800152c <HAL_RCC_OscConfig+0x504>)
 80013bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c2:	f7ff fcdb 	bl	8000d7c <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ca:	f7ff fcd7 	bl	8000d7c <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e1f9      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013dc:	4b53      	ldr	r3, [pc, #332]	; (800152c <HAL_RCC_OscConfig+0x504>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1f0      	bne.n	80013ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0308 	and.w	r3, r3, #8
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d03c      	beq.n	800146e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d01c      	beq.n	8001436 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013fc:	4b4b      	ldr	r3, [pc, #300]	; (800152c <HAL_RCC_OscConfig+0x504>)
 80013fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001402:	4a4a      	ldr	r2, [pc, #296]	; (800152c <HAL_RCC_OscConfig+0x504>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800140c:	f7ff fcb6 	bl	8000d7c <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001414:	f7ff fcb2 	bl	8000d7c <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e1d4      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001426:	4b41      	ldr	r3, [pc, #260]	; (800152c <HAL_RCC_OscConfig+0x504>)
 8001428:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0ef      	beq.n	8001414 <HAL_RCC_OscConfig+0x3ec>
 8001434:	e01b      	b.n	800146e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001436:	4b3d      	ldr	r3, [pc, #244]	; (800152c <HAL_RCC_OscConfig+0x504>)
 8001438:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800143c:	4a3b      	ldr	r2, [pc, #236]	; (800152c <HAL_RCC_OscConfig+0x504>)
 800143e:	f023 0301 	bic.w	r3, r3, #1
 8001442:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001446:	f7ff fc99 	bl	8000d7c <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800144e:	f7ff fc95 	bl	8000d7c <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e1b7      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001460:	4b32      	ldr	r3, [pc, #200]	; (800152c <HAL_RCC_OscConfig+0x504>)
 8001462:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1ef      	bne.n	800144e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	2b00      	cmp	r3, #0
 8001478:	f000 80a6 	beq.w	80015c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800147c:	2300      	movs	r3, #0
 800147e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001480:	4b2a      	ldr	r3, [pc, #168]	; (800152c <HAL_RCC_OscConfig+0x504>)
 8001482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d10d      	bne.n	80014a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800148c:	4b27      	ldr	r3, [pc, #156]	; (800152c <HAL_RCC_OscConfig+0x504>)
 800148e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001490:	4a26      	ldr	r2, [pc, #152]	; (800152c <HAL_RCC_OscConfig+0x504>)
 8001492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001496:	6593      	str	r3, [r2, #88]	; 0x58
 8001498:	4b24      	ldr	r3, [pc, #144]	; (800152c <HAL_RCC_OscConfig+0x504>)
 800149a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014a4:	2301      	movs	r3, #1
 80014a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014a8:	4b21      	ldr	r3, [pc, #132]	; (8001530 <HAL_RCC_OscConfig+0x508>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d118      	bne.n	80014e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014b4:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <HAL_RCC_OscConfig+0x508>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a1d      	ldr	r2, [pc, #116]	; (8001530 <HAL_RCC_OscConfig+0x508>)
 80014ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014c0:	f7ff fc5c 	bl	8000d7c <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c8:	f7ff fc58 	bl	8000d7c <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e17a      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <HAL_RCC_OscConfig+0x508>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d108      	bne.n	8001500 <HAL_RCC_OscConfig+0x4d8>
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <HAL_RCC_OscConfig+0x504>)
 80014f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014f4:	4a0d      	ldr	r2, [pc, #52]	; (800152c <HAL_RCC_OscConfig+0x504>)
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014fe:	e029      	b.n	8001554 <HAL_RCC_OscConfig+0x52c>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	2b05      	cmp	r3, #5
 8001506:	d115      	bne.n	8001534 <HAL_RCC_OscConfig+0x50c>
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <HAL_RCC_OscConfig+0x504>)
 800150a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800150e:	4a07      	ldr	r2, [pc, #28]	; (800152c <HAL_RCC_OscConfig+0x504>)
 8001510:	f043 0304 	orr.w	r3, r3, #4
 8001514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001518:	4b04      	ldr	r3, [pc, #16]	; (800152c <HAL_RCC_OscConfig+0x504>)
 800151a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800151e:	4a03      	ldr	r2, [pc, #12]	; (800152c <HAL_RCC_OscConfig+0x504>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001528:	e014      	b.n	8001554 <HAL_RCC_OscConfig+0x52c>
 800152a:	bf00      	nop
 800152c:	40021000 	.word	0x40021000
 8001530:	40007000 	.word	0x40007000
 8001534:	4b9c      	ldr	r3, [pc, #624]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 8001536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800153a:	4a9b      	ldr	r2, [pc, #620]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 800153c:	f023 0301 	bic.w	r3, r3, #1
 8001540:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001544:	4b98      	ldr	r3, [pc, #608]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 8001546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800154a:	4a97      	ldr	r2, [pc, #604]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 800154c:	f023 0304 	bic.w	r3, r3, #4
 8001550:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d016      	beq.n	800158a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155c:	f7ff fc0e 	bl	8000d7c <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001562:	e00a      	b.n	800157a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001564:	f7ff fc0a 	bl	8000d7c <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001572:	4293      	cmp	r3, r2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e12a      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800157a:	4b8b      	ldr	r3, [pc, #556]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 800157c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0ed      	beq.n	8001564 <HAL_RCC_OscConfig+0x53c>
 8001588:	e015      	b.n	80015b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800158a:	f7ff fbf7 	bl	8000d7c <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001590:	e00a      	b.n	80015a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001592:	f7ff fbf3 	bl	8000d7c <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e113      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015a8:	4b7f      	ldr	r3, [pc, #508]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 80015aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1ed      	bne.n	8001592 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015b6:	7ffb      	ldrb	r3, [r7, #31]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d105      	bne.n	80015c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015bc:	4b7a      	ldr	r3, [pc, #488]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 80015be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c0:	4a79      	ldr	r2, [pc, #484]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 80015c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015c6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 80fe 	beq.w	80017ce <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	f040 80d0 	bne.w	800177c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80015dc:	4b72      	ldr	r3, [pc, #456]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	f003 0203 	and.w	r2, r3, #3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d130      	bne.n	8001652 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	3b01      	subs	r3, #1
 80015fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fe:	429a      	cmp	r2, r3
 8001600:	d127      	bne.n	8001652 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800160c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800160e:	429a      	cmp	r2, r3
 8001610:	d11f      	bne.n	8001652 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800161c:	2a07      	cmp	r2, #7
 800161e:	bf14      	ite	ne
 8001620:	2201      	movne	r2, #1
 8001622:	2200      	moveq	r2, #0
 8001624:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001626:	4293      	cmp	r3, r2
 8001628:	d113      	bne.n	8001652 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001634:	085b      	lsrs	r3, r3, #1
 8001636:	3b01      	subs	r3, #1
 8001638:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800163a:	429a      	cmp	r2, r3
 800163c:	d109      	bne.n	8001652 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	085b      	lsrs	r3, r3, #1
 800164a:	3b01      	subs	r3, #1
 800164c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800164e:	429a      	cmp	r2, r3
 8001650:	d06e      	beq.n	8001730 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	2b0c      	cmp	r3, #12
 8001656:	d069      	beq.n	800172c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001658:	4b53      	ldr	r3, [pc, #332]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d105      	bne.n	8001670 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001664:	4b50      	ldr	r3, [pc, #320]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0ad      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001674:	4b4c      	ldr	r3, [pc, #304]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a4b      	ldr	r2, [pc, #300]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 800167a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800167e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001680:	f7ff fb7c 	bl	8000d7c <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001688:	f7ff fb78 	bl	8000d7c <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e09a      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800169a:	4b43      	ldr	r3, [pc, #268]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016a6:	4b40      	ldr	r3, [pc, #256]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	4b40      	ldr	r3, [pc, #256]	; (80017ac <HAL_RCC_OscConfig+0x784>)
 80016ac:	4013      	ands	r3, r2
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80016b6:	3a01      	subs	r2, #1
 80016b8:	0112      	lsls	r2, r2, #4
 80016ba:	4311      	orrs	r1, r2
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016c0:	0212      	lsls	r2, r2, #8
 80016c2:	4311      	orrs	r1, r2
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80016c8:	0852      	lsrs	r2, r2, #1
 80016ca:	3a01      	subs	r2, #1
 80016cc:	0552      	lsls	r2, r2, #21
 80016ce:	4311      	orrs	r1, r2
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016d4:	0852      	lsrs	r2, r2, #1
 80016d6:	3a01      	subs	r2, #1
 80016d8:	0652      	lsls	r2, r2, #25
 80016da:	4311      	orrs	r1, r2
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80016e0:	0912      	lsrs	r2, r2, #4
 80016e2:	0452      	lsls	r2, r2, #17
 80016e4:	430a      	orrs	r2, r1
 80016e6:	4930      	ldr	r1, [pc, #192]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80016ec:	4b2e      	ldr	r3, [pc, #184]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a2d      	ldr	r2, [pc, #180]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 80016f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016f8:	4b2b      	ldr	r3, [pc, #172]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	4a2a      	ldr	r2, [pc, #168]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 80016fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001702:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001704:	f7ff fb3a 	bl	8000d7c <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800170c:	f7ff fb36 	bl	8000d7c <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e058      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800171e:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f0      	beq.n	800170c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800172a:	e050      	b.n	80017ce <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e04f      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001730:	4b1d      	ldr	r3, [pc, #116]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d148      	bne.n	80017ce <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800173c:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a19      	ldr	r2, [pc, #100]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 8001742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001746:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001748:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	4a16      	ldr	r2, [pc, #88]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 800174e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001752:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001754:	f7ff fb12 	bl	8000d7c <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800175c:	f7ff fb0e 	bl	8000d7c <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e030      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0f0      	beq.n	800175c <HAL_RCC_OscConfig+0x734>
 800177a:	e028      	b.n	80017ce <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	2b0c      	cmp	r3, #12
 8001780:	d023      	beq.n	80017ca <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a08      	ldr	r2, [pc, #32]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 8001788:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800178c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178e:	f7ff faf5 	bl	8000d7c <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001794:	e00c      	b.n	80017b0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001796:	f7ff faf1 	bl	8000d7c <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d905      	bls.n	80017b0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e013      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
 80017a8:	40021000 	.word	0x40021000
 80017ac:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <HAL_RCC_OscConfig+0x7b0>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1ec      	bne.n	8001796 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <HAL_RCC_OscConfig+0x7b0>)
 80017be:	68da      	ldr	r2, [r3, #12]
 80017c0:	4905      	ldr	r1, [pc, #20]	; (80017d8 <HAL_RCC_OscConfig+0x7b0>)
 80017c2:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_RCC_OscConfig+0x7b4>)
 80017c4:	4013      	ands	r3, r2
 80017c6:	60cb      	str	r3, [r1, #12]
 80017c8:	e001      	b.n	80017ce <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e000      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3720      	adds	r7, #32
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40021000 	.word	0x40021000
 80017dc:	feeefffc 	.word	0xfeeefffc

080017e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0e7      	b.n	80019c4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017f4:	4b75      	ldr	r3, [pc, #468]	; (80019cc <HAL_RCC_ClockConfig+0x1ec>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d910      	bls.n	8001824 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001802:	4b72      	ldr	r3, [pc, #456]	; (80019cc <HAL_RCC_ClockConfig+0x1ec>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f023 0207 	bic.w	r2, r3, #7
 800180a:	4970      	ldr	r1, [pc, #448]	; (80019cc <HAL_RCC_ClockConfig+0x1ec>)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	4313      	orrs	r3, r2
 8001810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001812:	4b6e      	ldr	r3, [pc, #440]	; (80019cc <HAL_RCC_ClockConfig+0x1ec>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d001      	beq.n	8001824 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e0cf      	b.n	80019c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d010      	beq.n	8001852 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	4b66      	ldr	r3, [pc, #408]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800183c:	429a      	cmp	r2, r3
 800183e:	d908      	bls.n	8001852 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001840:	4b63      	ldr	r3, [pc, #396]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	4960      	ldr	r1, [pc, #384]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 800184e:	4313      	orrs	r3, r2
 8001850:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	d04c      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b03      	cmp	r3, #3
 8001864:	d107      	bne.n	8001876 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001866:	4b5a      	ldr	r3, [pc, #360]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d121      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e0a6      	b.n	80019c4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d107      	bne.n	800188e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800187e:	4b54      	ldr	r3, [pc, #336]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d115      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e09a      	b.n	80019c4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d107      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001896:	4b4e      	ldr	r3, [pc, #312]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d109      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e08e      	b.n	80019c4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018a6:	4b4a      	ldr	r3, [pc, #296]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e086      	b.n	80019c4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018b6:	4b46      	ldr	r3, [pc, #280]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f023 0203 	bic.w	r2, r3, #3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	4943      	ldr	r1, [pc, #268]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018c8:	f7ff fa58 	bl	8000d7c <HAL_GetTick>
 80018cc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ce:	e00a      	b.n	80018e6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d0:	f7ff fa54 	bl	8000d7c <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	f241 3288 	movw	r2, #5000	; 0x1388
 80018de:	4293      	cmp	r3, r2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e06e      	b.n	80019c4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e6:	4b3a      	ldr	r3, [pc, #232]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 020c 	and.w	r2, r3, #12
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d1eb      	bne.n	80018d0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d010      	beq.n	8001926 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	4b31      	ldr	r3, [pc, #196]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001910:	429a      	cmp	r2, r3
 8001912:	d208      	bcs.n	8001926 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001914:	4b2e      	ldr	r3, [pc, #184]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	492b      	ldr	r1, [pc, #172]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001922:	4313      	orrs	r3, r2
 8001924:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001926:	4b29      	ldr	r3, [pc, #164]	; (80019cc <HAL_RCC_ClockConfig+0x1ec>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	429a      	cmp	r2, r3
 8001932:	d210      	bcs.n	8001956 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001934:	4b25      	ldr	r3, [pc, #148]	; (80019cc <HAL_RCC_ClockConfig+0x1ec>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f023 0207 	bic.w	r2, r3, #7
 800193c:	4923      	ldr	r1, [pc, #140]	; (80019cc <HAL_RCC_ClockConfig+0x1ec>)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	4313      	orrs	r3, r2
 8001942:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001944:	4b21      	ldr	r3, [pc, #132]	; (80019cc <HAL_RCC_ClockConfig+0x1ec>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d001      	beq.n	8001956 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e036      	b.n	80019c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	2b00      	cmp	r3, #0
 8001960:	d008      	beq.n	8001974 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001962:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	4918      	ldr	r1, [pc, #96]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001970:	4313      	orrs	r3, r2
 8001972:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0308 	and.w	r3, r3, #8
 800197c:	2b00      	cmp	r3, #0
 800197e:	d009      	beq.n	8001994 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001980:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	4910      	ldr	r1, [pc, #64]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001990:	4313      	orrs	r3, r2
 8001992:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001994:	f000 f824 	bl	80019e0 <HAL_RCC_GetSysClockFreq>
 8001998:	4602      	mov	r2, r0
 800199a:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	091b      	lsrs	r3, r3, #4
 80019a0:	f003 030f 	and.w	r3, r3, #15
 80019a4:	490b      	ldr	r1, [pc, #44]	; (80019d4 <HAL_RCC_ClockConfig+0x1f4>)
 80019a6:	5ccb      	ldrb	r3, [r1, r3]
 80019a8:	f003 031f 	and.w	r3, r3, #31
 80019ac:	fa22 f303 	lsr.w	r3, r2, r3
 80019b0:	4a09      	ldr	r2, [pc, #36]	; (80019d8 <HAL_RCC_ClockConfig+0x1f8>)
 80019b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019b4:	4b09      	ldr	r3, [pc, #36]	; (80019dc <HAL_RCC_ClockConfig+0x1fc>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff f98f 	bl	8000cdc <HAL_InitTick>
 80019be:	4603      	mov	r3, r0
 80019c0:	72fb      	strb	r3, [r7, #11]

  return status;
 80019c2:	7afb      	ldrb	r3, [r7, #11]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40022000 	.word	0x40022000
 80019d0:	40021000 	.word	0x40021000
 80019d4:	08005638 	.word	0x08005638
 80019d8:	20000008 	.word	0x20000008
 80019dc:	2000000c 	.word	0x2000000c

080019e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b089      	sub	sp, #36	; 0x24
 80019e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
 80019ea:	2300      	movs	r3, #0
 80019ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ee:	4b3e      	ldr	r3, [pc, #248]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 030c 	and.w	r3, r3, #12
 80019f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019f8:	4b3b      	ldr	r3, [pc, #236]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	f003 0303 	and.w	r3, r3, #3
 8001a00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d005      	beq.n	8001a14 <HAL_RCC_GetSysClockFreq+0x34>
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	2b0c      	cmp	r3, #12
 8001a0c:	d121      	bne.n	8001a52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d11e      	bne.n	8001a52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a14:	4b34      	ldr	r3, [pc, #208]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0308 	and.w	r3, r3, #8
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d107      	bne.n	8001a30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a20:	4b31      	ldr	r3, [pc, #196]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a26:	0a1b      	lsrs	r3, r3, #8
 8001a28:	f003 030f 	and.w	r3, r3, #15
 8001a2c:	61fb      	str	r3, [r7, #28]
 8001a2e:	e005      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a30:	4b2d      	ldr	r3, [pc, #180]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	091b      	lsrs	r3, r3, #4
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a3c:	4a2b      	ldr	r2, [pc, #172]	; (8001aec <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d10d      	bne.n	8001a68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a50:	e00a      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	2b04      	cmp	r3, #4
 8001a56:	d102      	bne.n	8001a5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a58:	4b25      	ldr	r3, [pc, #148]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a5a:	61bb      	str	r3, [r7, #24]
 8001a5c:	e004      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d101      	bne.n	8001a68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a64:	4b23      	ldr	r3, [pc, #140]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	2b0c      	cmp	r3, #12
 8001a6c:	d134      	bne.n	8001ad8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d003      	beq.n	8001a86 <HAL_RCC_GetSysClockFreq+0xa6>
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	2b03      	cmp	r3, #3
 8001a82:	d003      	beq.n	8001a8c <HAL_RCC_GetSysClockFreq+0xac>
 8001a84:	e005      	b.n	8001a92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a86:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a88:	617b      	str	r3, [r7, #20]
      break;
 8001a8a:	e005      	b.n	8001a98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a8c:	4b19      	ldr	r3, [pc, #100]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a8e:	617b      	str	r3, [r7, #20]
      break;
 8001a90:	e002      	b.n	8001a98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	617b      	str	r3, [r7, #20]
      break;
 8001a96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a98:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001aa6:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	0a1b      	lsrs	r3, r3, #8
 8001aac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	fb03 f202 	mul.w	r2, r3, r2
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001abc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001abe:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	0e5b      	lsrs	r3, r3, #25
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	3301      	adds	r3, #1
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ad8:	69bb      	ldr	r3, [r7, #24]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3724      	adds	r7, #36	; 0x24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	08005648 	.word	0x08005648
 8001af0:	00f42400 	.word	0x00f42400
 8001af4:	007a1200 	.word	0x007a1200

08001af8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b00:	2300      	movs	r3, #0
 8001b02:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b04:	4b2a      	ldr	r3, [pc, #168]	; (8001bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b10:	f7ff fa26 	bl	8000f60 <HAL_PWREx_GetVoltageRange>
 8001b14:	6178      	str	r0, [r7, #20]
 8001b16:	e014      	b.n	8001b42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b18:	4b25      	ldr	r3, [pc, #148]	; (8001bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1c:	4a24      	ldr	r2, [pc, #144]	; (8001bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b22:	6593      	str	r3, [r2, #88]	; 0x58
 8001b24:	4b22      	ldr	r3, [pc, #136]	; (8001bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001b30:	f7ff fa16 	bl	8000f60 <HAL_PWREx_GetVoltageRange>
 8001b34:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001b36:	4b1e      	ldr	r3, [pc, #120]	; (8001bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3a:	4a1d      	ldr	r2, [pc, #116]	; (8001bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b40:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b48:	d10b      	bne.n	8001b62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b80      	cmp	r3, #128	; 0x80
 8001b4e:	d919      	bls.n	8001b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2ba0      	cmp	r3, #160	; 0xa0
 8001b54:	d902      	bls.n	8001b5c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b56:	2302      	movs	r3, #2
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	e013      	b.n	8001b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	e010      	b.n	8001b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b80      	cmp	r3, #128	; 0x80
 8001b66:	d902      	bls.n	8001b6e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001b68:	2303      	movs	r3, #3
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	e00a      	b.n	8001b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b80      	cmp	r3, #128	; 0x80
 8001b72:	d102      	bne.n	8001b7a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b74:	2302      	movs	r3, #2
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	e004      	b.n	8001b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b70      	cmp	r3, #112	; 0x70
 8001b7e:	d101      	bne.n	8001b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b80:	2301      	movs	r3, #1
 8001b82:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f023 0207 	bic.w	r2, r3, #7
 8001b8c:	4909      	ldr	r1, [pc, #36]	; (8001bb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b94:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d001      	beq.n	8001ba6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e000      	b.n	8001ba8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40022000 	.word	0x40022000

08001bb8 <_ZdlPvj>:
 8001bb8:	f000 b800 	b.w	8001bbc <_ZdlPv>

08001bbc <_ZdlPv>:
 8001bbc:	f000 b800 	b.w	8001bc0 <free>

08001bc0 <free>:
 8001bc0:	4b02      	ldr	r3, [pc, #8]	; (8001bcc <free+0xc>)
 8001bc2:	4601      	mov	r1, r0
 8001bc4:	6818      	ldr	r0, [r3, #0]
 8001bc6:	f000 b83d 	b.w	8001c44 <_free_r>
 8001bca:	bf00      	nop
 8001bcc:	20000060 	.word	0x20000060

08001bd0 <__malloc_lock>:
 8001bd0:	4801      	ldr	r0, [pc, #4]	; (8001bd8 <__malloc_lock+0x8>)
 8001bd2:	f000 b835 	b.w	8001c40 <__retarget_lock_acquire_recursive>
 8001bd6:	bf00      	nop
 8001bd8:	200001e8 	.word	0x200001e8

08001bdc <__malloc_unlock>:
 8001bdc:	4801      	ldr	r0, [pc, #4]	; (8001be4 <__malloc_unlock+0x8>)
 8001bde:	f000 b830 	b.w	8001c42 <__retarget_lock_release_recursive>
 8001be2:	bf00      	nop
 8001be4:	200001e8 	.word	0x200001e8

08001be8 <memset>:
 8001be8:	4402      	add	r2, r0
 8001bea:	4603      	mov	r3, r0
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d100      	bne.n	8001bf2 <memset+0xa>
 8001bf0:	4770      	bx	lr
 8001bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8001bf6:	e7f9      	b.n	8001bec <memset+0x4>

08001bf8 <__libc_init_array>:
 8001bf8:	b570      	push	{r4, r5, r6, lr}
 8001bfa:	4d0d      	ldr	r5, [pc, #52]	; (8001c30 <__libc_init_array+0x38>)
 8001bfc:	4c0d      	ldr	r4, [pc, #52]	; (8001c34 <__libc_init_array+0x3c>)
 8001bfe:	1b64      	subs	r4, r4, r5
 8001c00:	10a4      	asrs	r4, r4, #2
 8001c02:	2600      	movs	r6, #0
 8001c04:	42a6      	cmp	r6, r4
 8001c06:	d109      	bne.n	8001c1c <__libc_init_array+0x24>
 8001c08:	4d0b      	ldr	r5, [pc, #44]	; (8001c38 <__libc_init_array+0x40>)
 8001c0a:	4c0c      	ldr	r4, [pc, #48]	; (8001c3c <__libc_init_array+0x44>)
 8001c0c:	f000 f866 	bl	8001cdc <_init>
 8001c10:	1b64      	subs	r4, r4, r5
 8001c12:	10a4      	asrs	r4, r4, #2
 8001c14:	2600      	movs	r6, #0
 8001c16:	42a6      	cmp	r6, r4
 8001c18:	d105      	bne.n	8001c26 <__libc_init_array+0x2e>
 8001c1a:	bd70      	pop	{r4, r5, r6, pc}
 8001c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c20:	4798      	blx	r3
 8001c22:	3601      	adds	r6, #1
 8001c24:	e7ee      	b.n	8001c04 <__libc_init_array+0xc>
 8001c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c2a:	4798      	blx	r3
 8001c2c:	3601      	adds	r6, #1
 8001c2e:	e7f2      	b.n	8001c16 <__libc_init_array+0x1e>
 8001c30:	08005678 	.word	0x08005678
 8001c34:	08005678 	.word	0x08005678
 8001c38:	08005678 	.word	0x08005678
 8001c3c:	08005680 	.word	0x08005680

08001c40 <__retarget_lock_acquire_recursive>:
 8001c40:	4770      	bx	lr

08001c42 <__retarget_lock_release_recursive>:
 8001c42:	4770      	bx	lr

08001c44 <_free_r>:
 8001c44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001c46:	2900      	cmp	r1, #0
 8001c48:	d044      	beq.n	8001cd4 <_free_r+0x90>
 8001c4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c4e:	9001      	str	r0, [sp, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f1a1 0404 	sub.w	r4, r1, #4
 8001c56:	bfb8      	it	lt
 8001c58:	18e4      	addlt	r4, r4, r3
 8001c5a:	f7ff ffb9 	bl	8001bd0 <__malloc_lock>
 8001c5e:	4a1e      	ldr	r2, [pc, #120]	; (8001cd8 <_free_r+0x94>)
 8001c60:	9801      	ldr	r0, [sp, #4]
 8001c62:	6813      	ldr	r3, [r2, #0]
 8001c64:	b933      	cbnz	r3, 8001c74 <_free_r+0x30>
 8001c66:	6063      	str	r3, [r4, #4]
 8001c68:	6014      	str	r4, [r2, #0]
 8001c6a:	b003      	add	sp, #12
 8001c6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001c70:	f7ff bfb4 	b.w	8001bdc <__malloc_unlock>
 8001c74:	42a3      	cmp	r3, r4
 8001c76:	d908      	bls.n	8001c8a <_free_r+0x46>
 8001c78:	6825      	ldr	r5, [r4, #0]
 8001c7a:	1961      	adds	r1, r4, r5
 8001c7c:	428b      	cmp	r3, r1
 8001c7e:	bf01      	itttt	eq
 8001c80:	6819      	ldreq	r1, [r3, #0]
 8001c82:	685b      	ldreq	r3, [r3, #4]
 8001c84:	1949      	addeq	r1, r1, r5
 8001c86:	6021      	streq	r1, [r4, #0]
 8001c88:	e7ed      	b.n	8001c66 <_free_r+0x22>
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	b10b      	cbz	r3, 8001c94 <_free_r+0x50>
 8001c90:	42a3      	cmp	r3, r4
 8001c92:	d9fa      	bls.n	8001c8a <_free_r+0x46>
 8001c94:	6811      	ldr	r1, [r2, #0]
 8001c96:	1855      	adds	r5, r2, r1
 8001c98:	42a5      	cmp	r5, r4
 8001c9a:	d10b      	bne.n	8001cb4 <_free_r+0x70>
 8001c9c:	6824      	ldr	r4, [r4, #0]
 8001c9e:	4421      	add	r1, r4
 8001ca0:	1854      	adds	r4, r2, r1
 8001ca2:	42a3      	cmp	r3, r4
 8001ca4:	6011      	str	r1, [r2, #0]
 8001ca6:	d1e0      	bne.n	8001c6a <_free_r+0x26>
 8001ca8:	681c      	ldr	r4, [r3, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	6053      	str	r3, [r2, #4]
 8001cae:	440c      	add	r4, r1
 8001cb0:	6014      	str	r4, [r2, #0]
 8001cb2:	e7da      	b.n	8001c6a <_free_r+0x26>
 8001cb4:	d902      	bls.n	8001cbc <_free_r+0x78>
 8001cb6:	230c      	movs	r3, #12
 8001cb8:	6003      	str	r3, [r0, #0]
 8001cba:	e7d6      	b.n	8001c6a <_free_r+0x26>
 8001cbc:	6825      	ldr	r5, [r4, #0]
 8001cbe:	1961      	adds	r1, r4, r5
 8001cc0:	428b      	cmp	r3, r1
 8001cc2:	bf04      	itt	eq
 8001cc4:	6819      	ldreq	r1, [r3, #0]
 8001cc6:	685b      	ldreq	r3, [r3, #4]
 8001cc8:	6063      	str	r3, [r4, #4]
 8001cca:	bf04      	itt	eq
 8001ccc:	1949      	addeq	r1, r1, r5
 8001cce:	6021      	streq	r1, [r4, #0]
 8001cd0:	6054      	str	r4, [r2, #4]
 8001cd2:	e7ca      	b.n	8001c6a <_free_r+0x26>
 8001cd4:	b003      	add	sp, #12
 8001cd6:	bd30      	pop	{r4, r5, pc}
 8001cd8:	200000ac 	.word	0x200000ac

08001cdc <_init>:
 8001cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cde:	bf00      	nop
 8001ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ce2:	bc08      	pop	{r3}
 8001ce4:	469e      	mov	lr, r3
 8001ce6:	4770      	bx	lr

08001ce8 <_fini>:
 8001ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cea:	bf00      	nop
 8001cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cee:	bc08      	pop	{r3}
 8001cf0:	469e      	mov	lr, r3
 8001cf2:	4770      	bx	lr
