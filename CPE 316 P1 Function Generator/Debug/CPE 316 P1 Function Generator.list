
CPE 316 P1 Function Generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c1c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016e4  08001da4  08001da4  00011da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003488  08003488  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003488  08003488  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003488  08003488  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003488  08003488  00013488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08003490  08003490  00013490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003498  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000078  08003510  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08003510  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000060c0  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016d5  00000000  00000000  000261ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000628  00000000  00000000  00027880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000047f  00000000  00000000  00027ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000271b6  00000000  00000000  00028327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000068ab  00000000  00000000  0004f4dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7071  00000000  00000000  00055d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000019c8  00000000  00000000  0013cdfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0013e7c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001d8c 	.word	0x08001d8c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	08001d8c 	.word	0x08001d8c

080001c8 <_ZN12External_DACC1Ev>:
    662, 652, 641, 631, 621, 610, 600, 589, 579, 569, 558, 548, 538, 527, 517, 507,
    496, 486, 476, 465, 455, 445, 434, 424, 414, 403, 393, 383, 372, 362, 352, 341,
    331, 321, 310, 300, 290, 279, 269, 259, 248, 238, 228, 217, 207, 196, 186, 176,
    165, 155, 145, 134, 124, 114, 103, 93, 83, 72, 62, 52, 41, 31, 21, 10,
};
External_DAC::External_DAC() {
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	4a04      	ldr	r2, [pc, #16]	; (80001e4 <_ZN12External_DACC1Ev+0x1c>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	601a      	str	r2, [r3, #0]

}
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4618      	mov	r0, r3
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e2:	4770      	bx	lr
 80001e4:	08003440 	.word	0x08003440

080001e8 <_ZN12External_DACD1Ev>:

External_DAC::~External_DAC() {
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	4a04      	ldr	r2, [pc, #16]	; (8000204 <_ZN12External_DACD1Ev+0x1c>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	601a      	str	r2, [r3, #0]
}
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	4618      	mov	r0, r3
 80001fa:	370c      	adds	r7, #12
 80001fc:	46bd      	mov	sp, r7
 80001fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000202:	4770      	bx	lr
 8000204:	08003440 	.word	0x08003440

08000208 <_ZN12External_DACD0Ev>:
External_DAC::~External_DAC() {
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
}
 8000210:	6878      	ldr	r0, [r7, #4]
 8000212:	f7ff ffe9 	bl	80001e8 <_ZN12External_DACD1Ev>
 8000216:	2104      	movs	r1, #4
 8000218:	6878      	ldr	r0, [r7, #4]
 800021a:	f001 fd25 	bl	8001c68 <_ZdlPvj>
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	4618      	mov	r0, r3
 8000222:	3708      	adds	r7, #8
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}

08000228 <_ZN12External_DAC8DAC_initEv>:

void External_DAC::DAC_init(void)
{
 8000228:	b480      	push	{r7}
 800022a:	b083      	sub	sp, #12
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
    // Enable clock for GPIOA
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000230:	4b27      	ldr	r3, [pc, #156]	; (80002d0 <_ZN12External_DAC8DAC_initEv+0xa8>)
 8000232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000234:	4a26      	ldr	r2, [pc, #152]	; (80002d0 <_ZN12External_DAC8DAC_initEv+0xa8>)
 8000236:	f043 0301 	orr.w	r3, r3, #1
 800023a:	64d3      	str	r3, [r2, #76]	; 0x4c
    // Clear the mode bits for GPIOA pins 4, 5, 6, and 7
    GPIOA->MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
 800023c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000246:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800024a:	6013      	str	r3, [r2, #0]
    // Set GPIOA pins 4, 5, 6, and 7 to alternate function mode
    GPIOA->MODER |= (GPIO_MODER_MODE4_1 | GPIO_MODER_MODE5_1 | GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1);
 800024c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000256:	f443 432a 	orr.w	r3, r3, #43520	; 0xaa00
 800025a:	6013      	str	r3, [r2, #0]
    // Clear the alternate function selection for GPIOA pins 4, 5, 6, and 7
    GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL4 | GPIO_AFRL_AFSEL5 | GPIO_AFRL_AFSEL6 | GPIO_AFRL_AFSEL7);
 800025c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000260:	6a1b      	ldr	r3, [r3, #32]
 8000262:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000266:	b29b      	uxth	r3, r3
 8000268:	6213      	str	r3, [r2, #32]
    // Set the alternate function for GPIOA pins 4, 5, 6, and 7 to AF5 (SPI1)
    GPIOA->AFR[0] |= ((5 << GPIO_AFRL_AFSEL4_Pos) | (5 << GPIO_AFRL_AFSEL5_Pos) | (5 << GPIO_AFRL_AFSEL6_Pos) | (5 << GPIO_AFRL_AFSEL7_Pos));
 800026a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800026e:	6a1b      	ldr	r3, [r3, #32]
 8000270:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000274:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000278:	f443 03aa 	orr.w	r3, r3, #5570560	; 0x550000
 800027c:	6213      	str	r3, [r2, #32]
    // Set GPIOA pins 4, 5, 6, and 7 as push-pull
    GPIOA->OTYPER &= ~(GPIO_OTYPER_OT4 | GPIO_OTYPER_OT5 | GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7);
 800027e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000282:	685b      	ldr	r3, [r3, #4]
 8000284:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000288:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800028c:	6053      	str	r3, [r2, #4]
    // Disable pull-up/pull-down resistors for GPIOA pins 4, 5, 6, and 7
    GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD4 | GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7);
 800028e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000292:	68db      	ldr	r3, [r3, #12]
 8000294:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000298:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800029c:	60d3      	str	r3, [r2, #12]
    // Enable SPI1 clock
    RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 800029e:	4b0c      	ldr	r3, [pc, #48]	; (80002d0 <_ZN12External_DAC8DAC_initEv+0xa8>)
 80002a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002a2:	4a0b      	ldr	r2, [pc, #44]	; (80002d0 <_ZN12External_DAC8DAC_initEv+0xa8>)
 80002a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002a8:	6613      	str	r3, [r2, #96]	; 0x60
    // Configure SPI1: Master mode, baud rate = fPCLK/4
    SPI1->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1;
 80002aa:	4b0a      	ldr	r3, [pc, #40]	; (80002d4 <_ZN12External_DAC8DAC_initEv+0xac>)
 80002ac:	2214      	movs	r2, #20
 80002ae:	601a      	str	r2, [r3, #0]
    // Configure SPI1: Enable software slave management, set data size to 16 bits
    SPI1->CR2 = SPI_CR2_SSOE | SPI_CR2_NSSP | (0xF << SPI_CR2_DS_Pos);
 80002b0:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <_ZN12External_DAC8DAC_initEv+0xac>)
 80002b2:	f640 720c 	movw	r2, #3852	; 0xf0c
 80002b6:	605a      	str	r2, [r3, #4]
    // Enable SPI1
    SPI1->CR1 |= SPI_CR1_SPE;
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <_ZN12External_DAC8DAC_initEv+0xac>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a05      	ldr	r2, [pc, #20]	; (80002d4 <_ZN12External_DAC8DAC_initEv+0xac>)
 80002be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002c2:	6013      	str	r3, [r2, #0]
}
 80002c4:	bf00      	nop
 80002c6:	370c      	adds	r7, #12
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr
 80002d0:	40021000 	.word	0x40021000
 80002d4:	40013000 	.word	0x40013000

080002d8 <_ZN12External_DAC9DAC_writeEtt>:
	return (mvoltage * 4095) / 3300;
}

void External_DAC::DAC_write(uint16_t value_A, uint16_t value_B)
//void External_DAC::DAC_write(uint16_t value_A)
{
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	460b      	mov	r3, r1
 80002e2:	807b      	strh	r3, [r7, #2]
 80002e4:	4613      	mov	r3, r2
 80002e6:	803b      	strh	r3, [r7, #0]
    uint16_t spi_data_A = (value_A & 0x0FFF) | 0x3000;  // For DACA
 80002e8:	887b      	ldrh	r3, [r7, #2]
 80002ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002ee:	b29b      	uxth	r3, r3
 80002f0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80002f4:	81fb      	strh	r3, [r7, #14]
    uint16_t spi_data_B = (value_B & 0x0FFF) | 0xB000;  // For DACB
 80002f6:	883b      	ldrh	r3, [r7, #0]
 80002f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002fc:	b29a      	uxth	r2, r3
 80002fe:	4b13      	ldr	r3, [pc, #76]	; (800034c <_ZN12External_DAC9DAC_writeEtt+0x74>)
 8000300:	4313      	orrs	r3, r2
 8000302:	81bb      	strh	r3, [r7, #12]

    // Write to DACA
    while(!(SPI1->SR & SPI_SR_TXE));
 8000304:	bf00      	nop
 8000306:	4b12      	ldr	r3, [pc, #72]	; (8000350 <_ZN12External_DAC9DAC_writeEtt+0x78>)
 8000308:	689b      	ldr	r3, [r3, #8]
 800030a:	f003 0302 	and.w	r3, r3, #2
 800030e:	2b00      	cmp	r3, #0
 8000310:	bf0c      	ite	eq
 8000312:	2301      	moveq	r3, #1
 8000314:	2300      	movne	r3, #0
 8000316:	b2db      	uxtb	r3, r3
 8000318:	2b00      	cmp	r3, #0
 800031a:	d1f4      	bne.n	8000306 <_ZN12External_DAC9DAC_writeEtt+0x2e>
    SPI1->DR = spi_data_A;
 800031c:	4a0c      	ldr	r2, [pc, #48]	; (8000350 <_ZN12External_DAC9DAC_writeEtt+0x78>)
 800031e:	89fb      	ldrh	r3, [r7, #14]
 8000320:	60d3      	str	r3, [r2, #12]

    // Write to DACB
    while(!(SPI1->SR & SPI_SR_TXE));
 8000322:	bf00      	nop
 8000324:	4b0a      	ldr	r3, [pc, #40]	; (8000350 <_ZN12External_DAC9DAC_writeEtt+0x78>)
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	f003 0302 	and.w	r3, r3, #2
 800032c:	2b00      	cmp	r3, #0
 800032e:	bf0c      	ite	eq
 8000330:	2301      	moveq	r3, #1
 8000332:	2300      	movne	r3, #0
 8000334:	b2db      	uxtb	r3, r3
 8000336:	2b00      	cmp	r3, #0
 8000338:	d1f4      	bne.n	8000324 <_ZN12External_DAC9DAC_writeEtt+0x4c>
    SPI1->DR = spi_data_B;
 800033a:	4a05      	ldr	r2, [pc, #20]	; (8000350 <_ZN12External_DAC9DAC_writeEtt+0x78>)
 800033c:	89bb      	ldrh	r3, [r7, #12]
 800033e:	60d3      	str	r3, [r2, #12]
}
 8000340:	bf00      	nop
 8000342:	3714      	adds	r7, #20
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr
 800034c:	ffffb000 	.word	0xffffb000
 8000350:	40013000 	.word	0x40013000

08000354 <_ZN6KeypadC1Ev>:
#include "Keypad.h"

const uint8_t ROWS = 4;  // Four rows
const uint8_t COLS = 3;  // Three columns

Keypad::Keypad()
 8000354:	b490      	push	{r4, r7}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	2200      	movs	r2, #0
 8000360:	701a      	strb	r2, [r3, #0]
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4a16      	ldr	r2, [pc, #88]	; (80003c0 <_ZN6KeypadC1Ev+0x6c>)
 8000366:	1c5c      	adds	r4, r3, #1
 8000368:	4613      	mov	r3, r2
 800036a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800036c:	6020      	str	r0, [r4, #0]
 800036e:	6061      	str	r1, [r4, #4]
 8000370:	60a2      	str	r2, [r4, #8]
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	4a13      	ldr	r2, [pc, #76]	; (80003c4 <_ZN6KeypadC1Ev+0x70>)
 8000376:	330d      	adds	r3, #13
 8000378:	6810      	ldr	r0, [r2, #0]
 800037a:	6018      	str	r0, [r3, #0]
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4a12      	ldr	r2, [pc, #72]	; (80003c8 <_ZN6KeypadC1Ev+0x74>)
 8000380:	3311      	adds	r3, #17
 8000382:	8811      	ldrh	r1, [r2, #0]
 8000384:	7892      	ldrb	r2, [r2, #2]
 8000386:	8019      	strh	r1, [r3, #0]
 8000388:	709a      	strb	r2, [r3, #2]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	3314      	adds	r3, #20
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	605a      	str	r2, [r3, #4]
 8000394:	609a      	str	r2, [r3, #8]
{
	for (int i = 0; i < ROWS * COLS; ++i)
 8000396:	2300      	movs	r3, #0
 8000398:	60fb      	str	r3, [r7, #12]
 800039a:	e008      	b.n	80003ae <_ZN6KeypadC1Ev+0x5a>
	{
		keystates[i] = 0;
 800039c:	687a      	ldr	r2, [r7, #4]
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	4413      	add	r3, r2
 80003a2:	3314      	adds	r3, #20
 80003a4:	2200      	movs	r2, #0
 80003a6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < ROWS * COLS; ++i)
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	3301      	adds	r3, #1
 80003ac:	60fb      	str	r3, [r7, #12]
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	2b0b      	cmp	r3, #11
 80003b2:	ddf3      	ble.n	800039c <_ZN6KeypadC1Ev+0x48>
	}
}
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	4618      	mov	r0, r3
 80003b8:	3710      	adds	r7, #16
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc90      	pop	{r4, r7}
 80003be:	4770      	bx	lr
 80003c0:	08001da4 	.word	0x08001da4
 80003c4:	08001db0 	.word	0x08001db0
 80003c8:	08001db4 	.word	0x08001db4

080003cc <_ZN6Keypad11Keypad_initEv>:

void Keypad::Keypad_init(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
    // Enable GPIOA, GPIOB, and GPIOC clocks
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN | RCC_AHB2ENR_GPIOCEN | RCC_AHB2ENR_GPIOAEN;
 80003d4:	4b36      	ldr	r3, [pc, #216]	; (80004b0 <_ZN6Keypad11Keypad_initEv+0xe4>)
 80003d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d8:	4a35      	ldr	r2, [pc, #212]	; (80004b0 <_ZN6Keypad11Keypad_initEv+0xe4>)
 80003da:	f043 0307 	orr.w	r3, r3, #7
 80003de:	64d3      	str	r3, [r2, #76]	; 0x4c

	// Clear the LED GPIO registers
	GPIOB->MODER &= ~GPIO_MODER_MODER6;
 80003e0:	4b34      	ldr	r3, [pc, #208]	; (80004b4 <_ZN6Keypad11Keypad_initEv+0xe8>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a33      	ldr	r2, [pc, #204]	; (80004b4 <_ZN6Keypad11Keypad_initEv+0xe8>)
 80003e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80003ea:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~GPIO_MODER_MODER7;
 80003ec:	4b32      	ldr	r3, [pc, #200]	; (80004b8 <_ZN6Keypad11Keypad_initEv+0xec>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a31      	ldr	r2, [pc, #196]	; (80004b8 <_ZN6Keypad11Keypad_initEv+0xec>)
 80003f2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80003f6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODER9 | GPIO_MODER_MODER8);
 80003f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000402:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000406:	6013      	str	r3, [r2, #0]

	// Set the LED GPIO pins as output
	GPIOB->MODER |= GPIO_MODER_MODER6_0;
 8000408:	4b2a      	ldr	r3, [pc, #168]	; (80004b4 <_ZN6Keypad11Keypad_initEv+0xe8>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a29      	ldr	r2, [pc, #164]	; (80004b4 <_ZN6Keypad11Keypad_initEv+0xe8>)
 800040e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000412:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODER7_0;
 8000414:	4b28      	ldr	r3, [pc, #160]	; (80004b8 <_ZN6Keypad11Keypad_initEv+0xec>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a27      	ldr	r2, [pc, #156]	; (80004b8 <_ZN6Keypad11Keypad_initEv+0xec>)
 800041a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800041e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER9_0 | GPIO_MODER_MODER8_0;
 8000420:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800042a:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 800042e:	6013      	str	r3, [r2, #0]

    // Configure ROWs as input with pull-up
    GPIOB->MODER &= ~(GPIO_MODER_MODER10 | GPIO_MODER_MODER3 | GPIO_MODER_MODER5 | GPIO_MODER_MODER4);
 8000430:	4b20      	ldr	r3, [pc, #128]	; (80004b4 <_ZN6Keypad11Keypad_initEv+0xe8>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a1f      	ldr	r2, [pc, #124]	; (80004b4 <_ZN6Keypad11Keypad_initEv+0xe8>)
 8000436:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800043a:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 800043e:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR |= (GPIO_PUPDR_PUPDR10_0 | GPIO_PUPDR_PUPDR3_0 | GPIO_PUPDR_PUPDR5_0 | GPIO_PUPDR_PUPDR4_0);
 8000440:	4b1c      	ldr	r3, [pc, #112]	; (80004b4 <_ZN6Keypad11Keypad_initEv+0xe8>)
 8000442:	68db      	ldr	r3, [r3, #12]
 8000444:	4a1b      	ldr	r2, [pc, #108]	; (80004b4 <_ZN6Keypad11Keypad_initEv+0xe8>)
 8000446:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800044a:	f443 63a8 	orr.w	r3, r3, #1344	; 0x540
 800044e:	60d3      	str	r3, [r2, #12]

    // Configure COLs as output
    GPIOA->MODER &= ~(GPIO_MODER_MODER12 | GPIO_MODER_MODER0 | GPIO_MODER_MODER1);
 8000450:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800045a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800045e:	f023 030f 	bic.w	r3, r3, #15
 8000462:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (GPIO_MODER_MODER12_0 | GPIO_MODER_MODER0_0 | GPIO_MODER_MODER1_0);
 8000464:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800046e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000472:	f043 0305 	orr.w	r3, r3, #5
 8000476:	6013      	str	r3, [r2, #0]

    // Initialize columns to high
    for (int c = 0; c < COLS; c++)
 8000478:	2300      	movs	r3, #0
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	e00d      	b.n	800049a <_ZN6Keypad11Keypad_initEv+0xce>
    {
        GPIOA->BSRR = (1U << colPins[c]);
 800047e:	687a      	ldr	r2, [r7, #4]
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	4413      	add	r3, r2
 8000484:	3311      	adds	r3, #17
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	4619      	mov	r1, r3
 800048a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800048e:	2301      	movs	r3, #1
 8000490:	408b      	lsls	r3, r1
 8000492:	6193      	str	r3, [r2, #24]
    for (int c = 0; c < COLS; c++)
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	3301      	adds	r3, #1
 8000498:	60fb      	str	r3, [r7, #12]
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	2b02      	cmp	r3, #2
 800049e:	ddee      	ble.n	800047e <_ZN6Keypad11Keypad_initEv+0xb2>
    }
}
 80004a0:	bf00      	nop
 80004a2:	bf00      	nop
 80004a4:	3714      	adds	r7, #20
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	40021000 	.word	0x40021000
 80004b4:	48000400 	.word	0x48000400
 80004b8:	48000800 	.word	0x48000800

080004bc <_ZN6Keypad4tickEv>:

char Keypad::tick()
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  for (int c = 0; c < COLS; c++)
 80004c4:	2300      	movs	r3, #0
 80004c6:	617b      	str	r3, [r7, #20]
 80004c8:	e049      	b.n	800055e <_ZN6Keypad4tickEv+0xa2>
  {
    GPIOA->BSRR = (1U << (colPins[c] + 16));  // sets the current column pin to low
 80004ca:	687a      	ldr	r2, [r7, #4]
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	4413      	add	r3, r2
 80004d0:	3311      	adds	r3, #17
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	3310      	adds	r3, #16
 80004d6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004da:	2101      	movs	r1, #1
 80004dc:	fa01 f303 	lsl.w	r3, r1, r3
 80004e0:	6193      	str	r3, [r2, #24]
    for (int r = 0; r < ROWS; r++)
 80004e2:	2300      	movs	r3, #0
 80004e4:	613b      	str	r3, [r7, #16]
 80004e6:	e029      	b.n	800053c <_ZN6Keypad4tickEv+0x80>
    {
      int i = r * COLS + c;
 80004e8:	693a      	ldr	r2, [r7, #16]
 80004ea:	4613      	mov	r3, r2
 80004ec:	005b      	lsls	r3, r3, #1
 80004ee:	4413      	add	r3, r2
 80004f0:	697a      	ldr	r2, [r7, #20]
 80004f2:	4413      	add	r3, r2
 80004f4:	60fb      	str	r3, [r7, #12]
      bool pressed = !(GPIOB->IDR & (1U << rowPins[r])); // This checks if the current row pin is low (i.e., a button on this row has been pressed).
 80004f6:	4b1f      	ldr	r3, [pc, #124]	; (8000574 <_ZN6Keypad4tickEv+0xb8>)
 80004f8:	691a      	ldr	r2, [r3, #16]
 80004fa:	6879      	ldr	r1, [r7, #4]
 80004fc:	693b      	ldr	r3, [r7, #16]
 80004fe:	440b      	add	r3, r1
 8000500:	330d      	adds	r3, #13
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	4619      	mov	r1, r3
 8000506:	2301      	movs	r3, #1
 8000508:	408b      	lsls	r3, r1
 800050a:	4013      	ands	r3, r2
 800050c:	2b00      	cmp	r3, #0
 800050e:	bf0c      	ite	eq
 8000510:	2301      	moveq	r3, #1
 8000512:	2300      	movne	r3, #0
 8000514:	72fb      	strb	r3, [r7, #11]

      if (pressed)
 8000516:	7afb      	ldrb	r3, [r7, #11]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d006      	beq.n	800052a <_ZN6Keypad4tickEv+0x6e>
      {
        keystates[i] = 1;
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	4413      	add	r3, r2
 8000522:	3314      	adds	r3, #20
 8000524:	2201      	movs	r2, #1
 8000526:	701a      	strb	r2, [r3, #0]
 8000528:	e005      	b.n	8000536 <_ZN6Keypad4tickEv+0x7a>

      } else {
    	 keystates[i] = 0;
 800052a:	687a      	ldr	r2, [r7, #4]
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	4413      	add	r3, r2
 8000530:	3314      	adds	r3, #20
 8000532:	2200      	movs	r2, #0
 8000534:	701a      	strb	r2, [r3, #0]
    for (int r = 0; r < ROWS; r++)
 8000536:	693b      	ldr	r3, [r7, #16]
 8000538:	3301      	adds	r3, #1
 800053a:	613b      	str	r3, [r7, #16]
 800053c:	693b      	ldr	r3, [r7, #16]
 800053e:	2b03      	cmp	r3, #3
 8000540:	ddd2      	ble.n	80004e8 <_ZN6Keypad4tickEv+0x2c>
      }
    }

    GPIOA->BSRR = (1U << colPins[c]); // After checking all rows for a given column, the column is set back to high
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	4413      	add	r3, r2
 8000548:	3311      	adds	r3, #17
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	4619      	mov	r1, r3
 800054e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000552:	2301      	movs	r3, #1
 8000554:	408b      	lsls	r3, r1
 8000556:	6193      	str	r3, [r2, #24]
  for (int c = 0; c < COLS; c++)
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	3301      	adds	r3, #1
 800055c:	617b      	str	r3, [r7, #20]
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	2b02      	cmp	r3, #2
 8000562:	ddb2      	ble.n	80004ca <_ZN6Keypad4tickEv+0xe>
  }
  findButtonPressed();
 8000564:	6878      	ldr	r0, [r7, #4]
 8000566:	f000 f865 	bl	8000634 <_ZN6Keypad17findButtonPressedEv>
}
 800056a:	bf00      	nop
 800056c:	4618      	mov	r0, r3
 800056e:	3718      	adds	r7, #24
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	48000400 	.word	0x48000400

08000578 <_ZN6Keypad11update_LEDsEc>:

void Keypad::update_LEDs(char key)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	460b      	mov	r3, r1
 8000582:	70fb      	strb	r3, [r7, #3]

  // Clear all LEDs
  GPIOB->BSRR = GPIO_BSRR_BR_6;
 8000584:	4b29      	ldr	r3, [pc, #164]	; (800062c <_ZN6Keypad11update_LEDsEc+0xb4>)
 8000586:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800058a:	619a      	str	r2, [r3, #24]
  GPIOC->BSRR = GPIO_BSRR_BR_7;
 800058c:	4b28      	ldr	r3, [pc, #160]	; (8000630 <_ZN6Keypad11update_LEDsEc+0xb8>)
 800058e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000592:	619a      	str	r2, [r3, #24]
  GPIOA->BSRR = GPIO_BSRR_BR_9 | GPIO_BSRR_BR_8;
 8000594:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000598:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800059c:	619a      	str	r2, [r3, #24]

  int binaryRepresentation = -1;
 800059e:	f04f 33ff 	mov.w	r3, #4294967295
 80005a2:	60fb      	str	r3, [r7, #12]

  if (key >= '0' && key <= '9')
 80005a4:	78fb      	ldrb	r3, [r7, #3]
 80005a6:	2b2f      	cmp	r3, #47	; 0x2f
 80005a8:	d906      	bls.n	80005b8 <_ZN6Keypad11update_LEDsEc+0x40>
 80005aa:	78fb      	ldrb	r3, [r7, #3]
 80005ac:	2b39      	cmp	r3, #57	; 0x39
 80005ae:	d803      	bhi.n	80005b8 <_ZN6Keypad11update_LEDsEc+0x40>
  {
	binaryRepresentation = key - '0';  // Convert char to int
 80005b0:	78fb      	ldrb	r3, [r7, #3]
 80005b2:	3b30      	subs	r3, #48	; 0x30
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	e00a      	b.n	80005ce <_ZN6Keypad11update_LEDsEc+0x56>
  } else if (key == '*') {
 80005b8:	78fb      	ldrb	r3, [r7, #3]
 80005ba:	2b2a      	cmp	r3, #42	; 0x2a
 80005bc:	d102      	bne.n	80005c4 <_ZN6Keypad11update_LEDsEc+0x4c>
	binaryRepresentation = 14;  // 1110 in binary
 80005be:	230e      	movs	r3, #14
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	e004      	b.n	80005ce <_ZN6Keypad11update_LEDsEc+0x56>
  } else if (key == '#') {
 80005c4:	78fb      	ldrb	r3, [r7, #3]
 80005c6:	2b23      	cmp	r3, #35	; 0x23
 80005c8:	d101      	bne.n	80005ce <_ZN6Keypad11update_LEDsEc+0x56>
	binaryRepresentation = 15;  // 1111 in binary
 80005ca:	230f      	movs	r3, #15
 80005cc:	60fb      	str	r3, [r7, #12]
  }

  if (binaryRepresentation != -1)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d4:	d023      	beq.n	800061e <_ZN6Keypad11update_LEDsEc+0xa6>
  {
	if (binaryRepresentation & 0b0001) GPIOB->BSRR = GPIO_BSRR_BS_6;
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	f003 0301 	and.w	r3, r3, #1
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d002      	beq.n	80005e6 <_ZN6Keypad11update_LEDsEc+0x6e>
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <_ZN6Keypad11update_LEDsEc+0xb4>)
 80005e2:	2240      	movs	r2, #64	; 0x40
 80005e4:	619a      	str	r2, [r3, #24]
	if (binaryRepresentation & 0b0010) GPIOC->BSRR = GPIO_BSRR_BS_7;
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	f003 0302 	and.w	r3, r3, #2
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d002      	beq.n	80005f6 <_ZN6Keypad11update_LEDsEc+0x7e>
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <_ZN6Keypad11update_LEDsEc+0xb8>)
 80005f2:	2280      	movs	r2, #128	; 0x80
 80005f4:	619a      	str	r2, [r3, #24]
	if (binaryRepresentation & 0b0100) GPIOA->BSRR = GPIO_BSRR_BS_9;
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	f003 0304 	and.w	r3, r3, #4
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d004      	beq.n	800060a <_ZN6Keypad11update_LEDsEc+0x92>
 8000600:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000604:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000608:	619a      	str	r2, [r3, #24]
	if (binaryRepresentation & 0b1000) GPIOA->BSRR = GPIO_BSRR_BS_8;
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	f003 0308 	and.w	r3, r3, #8
 8000610:	2b00      	cmp	r3, #0
 8000612:	d004      	beq.n	800061e <_ZN6Keypad11update_LEDsEc+0xa6>
 8000614:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000618:	f44f 7280 	mov.w	r2, #256	; 0x100
 800061c:	619a      	str	r2, [r3, #24]
  }
}
 800061e:	bf00      	nop
 8000620:	3714      	adds	r7, #20
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	48000400 	.word	0x48000400
 8000630:	48000800 	.word	0x48000800

08000634 <_ZN6Keypad17findButtonPressedEv>:

char Keypad::findButtonPressed()
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b088      	sub	sp, #32
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
    static char lastKey = '\0';  // Keep track of the last key pressed
    static uint32_t lastDebounceTime = 0;  // the last time the output pin was toggled
    const uint32_t debounceDelay = 580;  // the debounce time in milliseconds
 800063c:	f44f 7311 	mov.w	r3, #580	; 0x244
 8000640:	613b      	str	r3, [r7, #16]

    char currentKey = '\0';  // Initialize to no key pressed
 8000642:	2300      	movs	r3, #0
 8000644:	77fb      	strb	r3, [r7, #31]

    for (int r = 0; r < ROWS; r++)
 8000646:	2300      	movs	r3, #0
 8000648:	61bb      	str	r3, [r7, #24]
 800064a:	e02e      	b.n	80006aa <_ZN6Keypad17findButtonPressedEv+0x76>
    {
        for (int c = 0; c < COLS; c++)
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
 8000650:	e022      	b.n	8000698 <_ZN6Keypad17findButtonPressedEv+0x64>
        {
            int i = r * COLS + c;
 8000652:	69ba      	ldr	r2, [r7, #24]
 8000654:	4613      	mov	r3, r2
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	4413      	add	r3, r2
 800065a:	697a      	ldr	r2, [r7, #20]
 800065c:	4413      	add	r3, r2
 800065e:	60fb      	str	r3, [r7, #12]
            if (keystates[i])
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	4413      	add	r3, r2
 8000666:	3314      	adds	r3, #20
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	b2db      	uxtb	r3, r3
 800066c:	2b00      	cmp	r3, #0
 800066e:	bf14      	ite	ne
 8000670:	2301      	movne	r3, #1
 8000672:	2300      	moveq	r3, #0
 8000674:	b2db      	uxtb	r3, r3
 8000676:	2b00      	cmp	r3, #0
 8000678:	d00b      	beq.n	8000692 <_ZN6Keypad17findButtonPressedEv+0x5e>
            {
                currentKey = keys[r][c];
 800067a:	6879      	ldr	r1, [r7, #4]
 800067c:	69ba      	ldr	r2, [r7, #24]
 800067e:	4613      	mov	r3, r2
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	4413      	add	r3, r2
 8000684:	18ca      	adds	r2, r1, r3
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	4413      	add	r3, r2
 800068a:	3301      	adds	r3, #1
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	77fb      	strb	r3, [r7, #31]
                break;  // Exit the loop once a key is found
 8000690:	e005      	b.n	800069e <_ZN6Keypad17findButtonPressedEv+0x6a>
        for (int c = 0; c < COLS; c++)
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	3301      	adds	r3, #1
 8000696:	617b      	str	r3, [r7, #20]
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	2b02      	cmp	r3, #2
 800069c:	ddd9      	ble.n	8000652 <_ZN6Keypad17findButtonPressedEv+0x1e>
            }
        }
        if (currentKey != '\0')
 800069e:	7ffb      	ldrb	r3, [r7, #31]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d106      	bne.n	80006b2 <_ZN6Keypad17findButtonPressedEv+0x7e>
    for (int r = 0; r < ROWS; r++)
 80006a4:	69bb      	ldr	r3, [r7, #24]
 80006a6:	3301      	adds	r3, #1
 80006a8:	61bb      	str	r3, [r7, #24]
 80006aa:	69bb      	ldr	r3, [r7, #24]
 80006ac:	2b03      	cmp	r3, #3
 80006ae:	ddcd      	ble.n	800064c <_ZN6Keypad17findButtonPressedEv+0x18>
 80006b0:	e000      	b.n	80006b4 <_ZN6Keypad17findButtonPressedEv+0x80>
        {
            break;  // Exit the loop once a key is found
 80006b2:	bf00      	nop
        }
    }

    if (currentKey != '\0' && (systemTime - lastDebounceTime) > debounceDelay)
 80006b4:	7ffb      	ldrb	r3, [r7, #31]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d014      	beq.n	80006e4 <_ZN6Keypad17findButtonPressedEv+0xb0>
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <_ZN6Keypad17findButtonPressedEv+0xc8>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <_ZN6Keypad17findButtonPressedEv+0xcc>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	1ad3      	subs	r3, r2, r3
 80006c4:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 80006c8:	d90c      	bls.n	80006e4 <_ZN6Keypad17findButtonPressedEv+0xb0>
        {
            lastKey = currentKey;
 80006ca:	4a0e      	ldr	r2, [pc, #56]	; (8000704 <_ZN6Keypad17findButtonPressedEv+0xd0>)
 80006cc:	7ffb      	ldrb	r3, [r7, #31]
 80006ce:	7013      	strb	r3, [r2, #0]
            update_LEDs(currentKey);
 80006d0:	7ffb      	ldrb	r3, [r7, #31]
 80006d2:	4619      	mov	r1, r3
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff ff4f 	bl	8000578 <_ZN6Keypad11update_LEDsEc>
            lastDebounceTime = systemTime;
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <_ZN6Keypad17findButtonPressedEv+0xc8>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a08      	ldr	r2, [pc, #32]	; (8000700 <_ZN6Keypad17findButtonPressedEv+0xcc>)
 80006e0:	6013      	str	r3, [r2, #0]
 80006e2:	e005      	b.n	80006f0 <_ZN6Keypad17findButtonPressedEv+0xbc>
        }
        else if (currentKey == '\0')
 80006e4:	7ffb      	ldrb	r3, [r7, #31]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d102      	bne.n	80006f0 <_ZN6Keypad17findButtonPressedEv+0xbc>
        {
            lastKey = '\0';
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <_ZN6Keypad17findButtonPressedEv+0xd0>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
        }

    return lastKey;  // Return the current key if pressed, otherwise the last key
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <_ZN6Keypad17findButtonPressedEv+0xd0>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3720      	adds	r7, #32
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	200000c8 	.word	0x200000c8
 8000700:	20000098 	.word	0x20000098
 8000704:	20000094 	.word	0x20000094

08000708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000716:	2b00      	cmp	r3, #0
 8000718:	db0b      	blt.n	8000732 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	f003 021f 	and.w	r2, r3, #31
 8000720:	4907      	ldr	r1, [pc, #28]	; (8000740 <__NVIC_EnableIRQ+0x38>)
 8000722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000726:	095b      	lsrs	r3, r3, #5
 8000728:	2001      	movs	r0, #1
 800072a:	fa00 f202 	lsl.w	r2, r0, r2
 800072e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	e000e100 	.word	0xe000e100

08000744 <_Z9TIM2_initv>:
static bool anyKeyPressed = false;
uint32_t systemTime = 0;
int stride_length = 1;

// Initialize TIM2
void TIM2_init() {
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
    // Enable clock for TIM2
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <_Z9TIM2_initv+0x4c>)
 800074a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800074c:	4a10      	ldr	r2, [pc, #64]	; (8000790 <_Z9TIM2_initv+0x4c>)
 800074e:	f043 0301 	orr.w	r3, r3, #1
 8000752:	6593      	str	r3, [r2, #88]	; 0x58
    // Set the prescaler to 1
    TIM2->PSC = 1;
 8000754:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000758:	2201      	movs	r2, #1
 800075a:	629a      	str	r2, [r3, #40]	; 0x28
    // Set the Auto-Reload Register (ARR) value to 1114
    TIM2->ARR = 1114;
 800075c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000760:	f240 425a 	movw	r2, #1114	; 0x45a
 8000764:	62da      	str	r2, [r3, #44]	; 0x2c
    // Enable Update Interrupt (UIE)
    TIM2->DIER |= TIM_DIER_UIE;
 8000766:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	60d3      	str	r3, [r2, #12]
    // Enable the counter (CEN)
    TIM2->CR1 |= TIM_CR1_CEN;
 8000776:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6013      	str	r3, [r2, #0]
    // Enable the TIM2 interrupt in the NVIC
    NVIC_EnableIRQ(TIM2_IRQn);
 8000786:	201c      	movs	r0, #28
 8000788:	f7ff ffbe 	bl	8000708 <__NVIC_EnableIRQ>
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40021000 	.word	0x40021000

08000794 <_Z15updateFrequencyc>:


void updateFrequency(char key)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	71fb      	strb	r3, [r7, #7]
    if (key >= '1' && key <= '5')
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	2b30      	cmp	r3, #48	; 0x30
 80007a2:	d936      	bls.n	8000812 <_Z15updateFrequencyc+0x7e>
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	2b35      	cmp	r3, #53	; 0x35
 80007a8:	d833      	bhi.n	8000812 <_Z15updateFrequencyc+0x7e>
    {
        frequency = (key - '0') * 100;
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	3b30      	subs	r3, #48	; 0x30
 80007ae:	2264      	movs	r2, #100	; 0x64
 80007b0:	fb02 f303 	mul.w	r3, r2, r3
 80007b4:	4a1a      	ldr	r2, [pc, #104]	; (8000820 <_Z15updateFrequencyc+0x8c>)
 80007b6:	6013      	str	r3, [r2, #0]
        switch (frequency)
 80007b8:	4b19      	ldr	r3, [pc, #100]	; (8000820 <_Z15updateFrequencyc+0x8c>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007c0:	d023      	beq.n	800080a <_Z15updateFrequencyc+0x76>
 80007c2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007c6:	dc24      	bgt.n	8000812 <_Z15updateFrequencyc+0x7e>
 80007c8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80007cc:	d019      	beq.n	8000802 <_Z15updateFrequencyc+0x6e>
 80007ce:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80007d2:	dc1e      	bgt.n	8000812 <_Z15updateFrequencyc+0x7e>
 80007d4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80007d8:	d00f      	beq.n	80007fa <_Z15updateFrequencyc+0x66>
 80007da:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80007de:	dc18      	bgt.n	8000812 <_Z15updateFrequencyc+0x7e>
 80007e0:	2b64      	cmp	r3, #100	; 0x64
 80007e2:	d002      	beq.n	80007ea <_Z15updateFrequencyc+0x56>
 80007e4:	2bc8      	cmp	r3, #200	; 0xc8
 80007e6:	d004      	beq.n	80007f2 <_Z15updateFrequencyc+0x5e>
            case 300: stride_length = 3;  break;
            case 400: stride_length = 4;  break;
            case 500: stride_length = 5;  break;
        }
    }
}
 80007e8:	e013      	b.n	8000812 <_Z15updateFrequencyc+0x7e>
            case 100: stride_length = 1;  break;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <_Z15updateFrequencyc+0x90>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	e00f      	b.n	8000812 <_Z15updateFrequencyc+0x7e>
            case 200: stride_length = 2;  break;
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <_Z15updateFrequencyc+0x90>)
 80007f4:	2202      	movs	r2, #2
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	e00b      	b.n	8000812 <_Z15updateFrequencyc+0x7e>
            case 300: stride_length = 3;  break;
 80007fa:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <_Z15updateFrequencyc+0x90>)
 80007fc:	2203      	movs	r2, #3
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	e007      	b.n	8000812 <_Z15updateFrequencyc+0x7e>
            case 400: stride_length = 4;  break;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <_Z15updateFrequencyc+0x90>)
 8000804:	2204      	movs	r2, #4
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	e003      	b.n	8000812 <_Z15updateFrequencyc+0x7e>
            case 500: stride_length = 5;  break;
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <_Z15updateFrequencyc+0x90>)
 800080c:	2205      	movs	r2, #5
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	bf00      	nop
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	2000000c 	.word	0x2000000c
 8000824:	20000018 	.word	0x20000018

08000828 <_Z14updateWaveformc>:

void updateWaveform(char key)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
    if (key >= '6' && key <= '9')
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	2b35      	cmp	r3, #53	; 0x35
 8000836:	d906      	bls.n	8000846 <_Z14updateWaveformc+0x1e>
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	2b39      	cmp	r3, #57	; 0x39
 800083c:	d803      	bhi.n	8000846 <_Z14updateWaveformc+0x1e>
    {
        waveform = key - '6';
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	3b36      	subs	r3, #54	; 0x36
 8000842:	4a04      	ldr	r2, [pc, #16]	; (8000854 <_Z14updateWaveformc+0x2c>)
 8000844:	6013      	str	r3, [r2, #0]
    }
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	20000010 	.word	0x20000010

08000858 <_Z15updateDutyCyclec>:

void updateDutyCycle(char key)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	71fb      	strb	r3, [r7, #7]
	if (key == '*' || key == '#' || key == '0')
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	2b2a      	cmp	r3, #42	; 0x2a
 8000866:	d005      	beq.n	8000874 <_Z15updateDutyCyclec+0x1c>
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	2b23      	cmp	r3, #35	; 0x23
 800086c:	d002      	beq.n	8000874 <_Z15updateDutyCyclec+0x1c>
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	2b30      	cmp	r3, #48	; 0x30
 8000872:	d131      	bne.n	80008d8 <_Z15updateDutyCyclec+0x80>
	{
	    anyKeyPressed = true;
 8000874:	4b22      	ldr	r3, [pc, #136]	; (8000900 <_Z15updateDutyCyclec+0xa8>)
 8000876:	2201      	movs	r2, #1
 8000878:	701a      	strb	r2, [r3, #0]
	    if (!keyWasPressed)
 800087a:	4b22      	ldr	r3, [pc, #136]	; (8000904 <_Z15updateDutyCyclec+0xac>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	f083 0301 	eor.w	r3, r3, #1
 8000882:	b2db      	uxtb	r3, r3
 8000884:	2b00      	cmp	r3, #0
 8000886:	d035      	beq.n	80008f4 <_Z15updateDutyCyclec+0x9c>
	    {
	        if (key == '*')
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	2b2a      	cmp	r3, #42	; 0x2a
 800088c:	d10b      	bne.n	80008a6 <_Z15updateDutyCyclec+0x4e>
	        {
	            dutyCycle = (dutyCycle <= 10) ? 10 : (dutyCycle - 10);
 800088e:	4b1e      	ldr	r3, [pc, #120]	; (8000908 <_Z15updateDutyCyclec+0xb0>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b0a      	cmp	r3, #10
 8000894:	dd03      	ble.n	800089e <_Z15updateDutyCyclec+0x46>
 8000896:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <_Z15updateDutyCyclec+0xb0>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	3b0a      	subs	r3, #10
 800089c:	e000      	b.n	80008a0 <_Z15updateDutyCyclec+0x48>
 800089e:	230a      	movs	r3, #10
 80008a0:	4a19      	ldr	r2, [pc, #100]	; (8000908 <_Z15updateDutyCyclec+0xb0>)
 80008a2:	6013      	str	r3, [r2, #0]
 80008a4:	e014      	b.n	80008d0 <_Z15updateDutyCyclec+0x78>
	        }
	        else if (key == '#')
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	2b23      	cmp	r3, #35	; 0x23
 80008aa:	d10b      	bne.n	80008c4 <_Z15updateDutyCyclec+0x6c>
	        {
	            dutyCycle = (dutyCycle >= 90) ? 90 : (dutyCycle + 10);
 80008ac:	4b16      	ldr	r3, [pc, #88]	; (8000908 <_Z15updateDutyCyclec+0xb0>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2b59      	cmp	r3, #89	; 0x59
 80008b2:	dc03      	bgt.n	80008bc <_Z15updateDutyCyclec+0x64>
 80008b4:	4b14      	ldr	r3, [pc, #80]	; (8000908 <_Z15updateDutyCyclec+0xb0>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	330a      	adds	r3, #10
 80008ba:	e000      	b.n	80008be <_Z15updateDutyCyclec+0x66>
 80008bc:	235a      	movs	r3, #90	; 0x5a
 80008be:	4a12      	ldr	r2, [pc, #72]	; (8000908 <_Z15updateDutyCyclec+0xb0>)
 80008c0:	6013      	str	r3, [r2, #0]
 80008c2:	e005      	b.n	80008d0 <_Z15updateDutyCyclec+0x78>
	        }
	        else if (key == '0')
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	2b30      	cmp	r3, #48	; 0x30
 80008c8:	d102      	bne.n	80008d0 <_Z15updateDutyCyclec+0x78>
	        {
	            dutyCycle = 50;
 80008ca:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <_Z15updateDutyCyclec+0xb0>)
 80008cc:	2232      	movs	r2, #50	; 0x32
 80008ce:	601a      	str	r2, [r3, #0]
	        }
	        keyWasPressed = true;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <_Z15updateDutyCyclec+0xac>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	701a      	strb	r2, [r3, #0]
	    if (!keyWasPressed)
 80008d6:	e00d      	b.n	80008f4 <_Z15updateDutyCyclec+0x9c>
	    }
	}
	else
	{
	    if (!anyKeyPressed)
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <_Z15updateDutyCyclec+0xa8>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	f083 0301 	eor.w	r3, r3, #1
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d002      	beq.n	80008ec <_Z15updateDutyCyclec+0x94>
	    {
	        keyWasPressed = false;
 80008e6:	4b07      	ldr	r3, [pc, #28]	; (8000904 <_Z15updateDutyCyclec+0xac>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	701a      	strb	r2, [r3, #0]
	    }
	    anyKeyPressed = false;
 80008ec:	4b04      	ldr	r3, [pc, #16]	; (8000900 <_Z15updateDutyCyclec+0xa8>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]
	}
}
 80008f2:	bf00      	nop
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	200000c5 	.word	0x200000c5
 8000904:	200000c4 	.word	0x200000c4
 8000908:	20000014 	.word	0x20000014

0800090c <_Z19shouldResetWaveformv>:

bool shouldResetWaveform()
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
    if (lastWaveform != waveform || lastFrequency != frequency)
 8000910:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <_Z19shouldResetWaveformv+0x3c>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4b0d      	ldr	r3, [pc, #52]	; (800094c <_Z19shouldResetWaveformv+0x40>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	429a      	cmp	r2, r3
 800091a:	d105      	bne.n	8000928 <_Z19shouldResetWaveformv+0x1c>
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <_Z19shouldResetWaveformv+0x44>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <_Z19shouldResetWaveformv+0x48>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	429a      	cmp	r2, r3
 8000926:	d009      	beq.n	800093c <_Z19shouldResetWaveformv+0x30>
    {
        lastWaveform = waveform;
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <_Z19shouldResetWaveformv+0x40>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a06      	ldr	r2, [pc, #24]	; (8000948 <_Z19shouldResetWaveformv+0x3c>)
 800092e:	6013      	str	r3, [r2, #0]
        lastFrequency = frequency;
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <_Z19shouldResetWaveformv+0x48>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a06      	ldr	r2, [pc, #24]	; (8000950 <_Z19shouldResetWaveformv+0x44>)
 8000936:	6013      	str	r3, [r2, #0]
        return true;
 8000938:	2301      	movs	r3, #1
 800093a:	e000      	b.n	800093e <_Z19shouldResetWaveformv+0x32>
    }
    return false;
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	20000004 	.word	0x20000004
 800094c:	20000010 	.word	0x20000010
 8000950:	20000000 	.word	0x20000000
 8000954:	2000000c 	.word	0x2000000c

08000958 <_Z14getCurrentWavev>:

const uint16_t* getCurrentWave()
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
    switch (waveform)
 800095c:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <_Z14getCurrentWavev+0x40>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b03      	cmp	r3, #3
 8000962:	d813      	bhi.n	800098c <_Z14getCurrentWavev+0x34>
 8000964:	a201      	add	r2, pc, #4	; (adr r2, 800096c <_Z14getCurrentWavev+0x14>)
 8000966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800096a:	bf00      	nop
 800096c:	0800097d 	.word	0x0800097d
 8000970:	08000981 	.word	0x08000981
 8000974:	08000985 	.word	0x08000985
 8000978:	08000989 	.word	0x08000989
    {
        case 0: return sine_wave; break;
 800097c:	4b07      	ldr	r3, [pc, #28]	; (800099c <_Z14getCurrentWavev+0x44>)
 800097e:	e006      	b.n	800098e <_Z14getCurrentWavev+0x36>
        case 1: return triangle_wave; break;
 8000980:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <_Z14getCurrentWavev+0x48>)
 8000982:	e004      	b.n	800098e <_Z14getCurrentWavev+0x36>
        case 2: return sawtooth_wave; break;
 8000984:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <_Z14getCurrentWavev+0x4c>)
 8000986:	e002      	b.n	800098e <_Z14getCurrentWavev+0x36>
        case 3: return square_wave; break;
 8000988:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <_Z14getCurrentWavev+0x50>)
 800098a:	e000      	b.n	800098e <_Z14getCurrentWavev+0x36>
    }
    return nullptr;
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	20000010 	.word	0x20000010
 800099c:	08001db8 	.word	0x08001db8
 80009a0:	08002e98 	.word	0x08002e98
 80009a4:	080028f8 	.word	0x080028f8
 80009a8:	08002358 	.word	0x08002358

080009ac <TIM2_IRQHandler>:

extern "C" void TIM2_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF)
 80009b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009b6:	691b      	ldr	r3, [r3, #16]
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	2b00      	cmp	r3, #0
 80009be:	bf14      	ite	ne
 80009c0:	2301      	movne	r3, #1
 80009c2:	2300      	moveq	r3, #0
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d06d      	beq.n	8000aa6 <TIM2_IRQHandler+0xfa>
    {
        TIM2->SR &= ~TIM_SR_UIF;
 80009ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009ce:	691b      	ldr	r3, [r3, #16]
 80009d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009d4:	f023 0301 	bic.w	r3, r3, #1
 80009d8:	6113      	str	r3, [r2, #16]
        systemTime++;
 80009da:	4b35      	ldr	r3, [pc, #212]	; (8000ab0 <TIM2_IRQHandler+0x104>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	3301      	adds	r3, #1
 80009e0:	4a33      	ldr	r2, [pc, #204]	; (8000ab0 <TIM2_IRQHandler+0x104>)
 80009e2:	6013      	str	r3, [r2, #0]

        char key = keys.tick();
 80009e4:	4833      	ldr	r0, [pc, #204]	; (8000ab4 <TIM2_IRQHandler+0x108>)
 80009e6:	f7ff fd69 	bl	80004bc <_ZN6Keypad4tickEv>
 80009ea:	4603      	mov	r3, r0
 80009ec:	72fb      	strb	r3, [r7, #11]

		updateFrequency(key);
 80009ee:	7afb      	ldrb	r3, [r7, #11]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fecf 	bl	8000794 <_Z15updateFrequencyc>
		updateWaveform(key);
 80009f6:	7afb      	ldrb	r3, [r7, #11]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff ff15 	bl	8000828 <_Z14updateWaveformc>
		updateDutyCycle(key);
 80009fe:	7afb      	ldrb	r3, [r7, #11]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ff29 	bl	8000858 <_Z15updateDutyCyclec>

		if (shouldResetWaveform())
 8000a06:	f7ff ff81 	bl	800090c <_Z19shouldResetWaveformv>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d002      	beq.n	8000a16 <TIM2_IRQHandler+0x6a>
		{
			i = 0;
 8000a10:	4b29      	ldr	r3, [pc, #164]	; (8000ab8 <TIM2_IRQHandler+0x10c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
		}

		uint16_t value_A, value_B;
		const uint16_t *current_wave = getCurrentWave();
 8000a16:	f7ff ff9f 	bl	8000958 <_Z14getCurrentWavev>
 8000a1a:	6078      	str	r0, [r7, #4]

		if (current_wave)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d032      	beq.n	8000a88 <TIM2_IRQHandler+0xdc>
		{
			if (waveform == 3) // If waveform is square update duty cycle
 8000a22:	4b26      	ldr	r3, [pc, #152]	; (8000abc <TIM2_IRQHandler+0x110>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2b03      	cmp	r3, #3
 8000a28:	d119      	bne.n	8000a5e <TIM2_IRQHandler+0xb2>
			{
				int high_time = (dutyCycle * modulo_value) / 100;
 8000a2a:	4b25      	ldr	r3, [pc, #148]	; (8000ac0 <TIM2_IRQHandler+0x114>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a25      	ldr	r2, [pc, #148]	; (8000ac4 <TIM2_IRQHandler+0x118>)
 8000a30:	6812      	ldr	r2, [r2, #0]
 8000a32:	fb02 f303 	mul.w	r3, r2, r3
 8000a36:	4a24      	ldr	r2, [pc, #144]	; (8000ac8 <TIM2_IRQHandler+0x11c>)
 8000a38:	fb82 1203 	smull	r1, r2, r2, r3
 8000a3c:	1152      	asrs	r2, r2, #5
 8000a3e:	17db      	asrs	r3, r3, #31
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	603b      	str	r3, [r7, #0]
				// Value of 3723 is 12 bit value that will output 3V from the DAC
				value_A = (i < high_time) ? 3723 : 0;
 8000a44:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <TIM2_IRQHandler+0x10c>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	683a      	ldr	r2, [r7, #0]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	dd02      	ble.n	8000a54 <TIM2_IRQHandler+0xa8>
 8000a4e:	f640 638b 	movw	r3, #3723	; 0xe8b
 8000a52:	e000      	b.n	8000a56 <TIM2_IRQHandler+0xaa>
 8000a54:	2300      	movs	r3, #0
 8000a56:	81fb      	strh	r3, [r7, #14]
				value_B = value_A;
 8000a58:	89fb      	ldrh	r3, [r7, #14]
 8000a5a:	81bb      	strh	r3, [r7, #12]
 8000a5c:	e00e      	b.n	8000a7c <TIM2_IRQHandler+0xd0>
			} else {
				value_A = current_wave[i];
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <TIM2_IRQHandler+0x10c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	4413      	add	r3, r2
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	81fb      	strh	r3, [r7, #14]
				value_B = current_wave[i + 1];
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <TIM2_IRQHandler+0x10c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	3301      	adds	r3, #1
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	4413      	add	r3, r2
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	81bb      	strh	r3, [r7, #12]
			}

			dac.DAC_write(value_A, value_B);
 8000a7c:	89ba      	ldrh	r2, [r7, #12]
 8000a7e:	89fb      	ldrh	r3, [r7, #14]
 8000a80:	4619      	mov	r1, r3
 8000a82:	4812      	ldr	r0, [pc, #72]	; (8000acc <TIM2_IRQHandler+0x120>)
 8000a84:	f7ff fc28 	bl	80002d8 <_ZN12External_DAC9DAC_writeEtt>
		}

	   i = (i + stride_length * 2) % modulo_value;
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <TIM2_IRQHandler+0x124>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	005a      	lsls	r2, r3, #1
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <TIM2_IRQHandler+0x10c>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4413      	add	r3, r2
 8000a94:	4a0b      	ldr	r2, [pc, #44]	; (8000ac4 <TIM2_IRQHandler+0x118>)
 8000a96:	6812      	ldr	r2, [r2, #0]
 8000a98:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a9c:	fb01 f202 	mul.w	r2, r1, r2
 8000aa0:	1a9b      	subs	r3, r3, r2
 8000aa2:	4a05      	ldr	r2, [pc, #20]	; (8000ab8 <TIM2_IRQHandler+0x10c>)
 8000aa4:	6013      	str	r3, [r2, #0]
    }
}
 8000aa6:	bf00      	nop
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	200000c8 	.word	0x200000c8
 8000ab4:	200000a0 	.word	0x200000a0
 8000ab8:	200000c0 	.word	0x200000c0
 8000abc:	20000010 	.word	0x20000010
 8000ac0:	20000014 	.word	0x20000014
 8000ac4:	20000008 	.word	0x20000008
 8000ac8:	51eb851f 	.word	0x51eb851f
 8000acc:	2000009c 	.word	0x2000009c
 8000ad0:	20000018 	.word	0x20000018

08000ad4 <main>:

int main()
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	HAL_Init();
 8000ad8:	f000 f938 	bl	8000d4c <HAL_Init>
	SystemClock_Config();
 8000adc:	f000 f810 	bl	8000b00 <_Z18SystemClock_Configv>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000ae0:	b662      	cpsie	i
}
 8000ae2:	bf00      	nop
	__enable_irq();
	TIM2_init();
 8000ae4:	f7ff fe2e 	bl	8000744 <_Z9TIM2_initv>
	keys.Keypad_init();
 8000ae8:	4803      	ldr	r0, [pc, #12]	; (8000af8 <main+0x24>)
 8000aea:	f7ff fc6f 	bl	80003cc <_ZN6Keypad11Keypad_initEv>
	dac.DAC_init();
 8000aee:	4803      	ldr	r0, [pc, #12]	; (8000afc <main+0x28>)
 8000af0:	f7ff fb9a 	bl	8000228 <_ZN12External_DAC8DAC_initEv>

	while(1)
 8000af4:	e7fe      	b.n	8000af4 <main+0x20>
 8000af6:	bf00      	nop
 8000af8:	200000a0 	.word	0x200000a0
 8000afc:	2000009c 	.word	0x2000009c

08000b00 <_Z18SystemClock_Configv>:

	return 0;
}

void SystemClock_Config(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b096      	sub	sp, #88	; 0x58
 8000b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	2244      	movs	r2, #68	; 0x44
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f001 f8c2 	bl	8001c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b14:	463b      	mov	r3, r7
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b22:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b26:	f000 fa81 	bl	800102c <HAL_PWREx_ControlVoltageScaling>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	bf14      	ite	ne
 8000b30:	2301      	movne	r3, #1
 8000b32:	2300      	moveq	r3, #0
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8000b3a:	f000 f842 	bl	8000bc2 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000b3e:	2310      	movs	r3, #16
 8000b40:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b42:	2301      	movs	r3, #1
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b4a:	2360      	movs	r3, #96	; 0x60
 8000b4c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b52:	2301      	movs	r3, #1
 8000b54:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b56:	2301      	movs	r3, #1
 8000b58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000b5a:	2328      	movs	r3, #40	; 0x28
 8000b5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b5e:	2307      	movs	r3, #7
 8000b60:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b62:	2302      	movs	r3, #2
 8000b64:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b66:	2302      	movs	r3, #2
 8000b68:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 fab2 	bl	80010d8 <HAL_RCC_OscConfig>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	bf14      	ite	ne
 8000b7a:	2301      	movne	r3, #1
 8000b7c:	2300      	moveq	r3, #0
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 8000b84:	f000 f81d 	bl	8000bc2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b88:	230f      	movs	r3, #15
 8000b8a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	2104      	movs	r1, #4
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f000 fe75 	bl	8001890 <HAL_RCC_ClockConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	bf14      	ite	ne
 8000bac:	2301      	movne	r3, #1
 8000bae:	2300      	moveq	r3, #0
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8000bb6:	f000 f804 	bl	8000bc2 <Error_Handler>
  }
}
 8000bba:	bf00      	nop
 8000bbc:	3758      	adds	r7, #88	; 0x58
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <Error_Handler>:
void Error_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc6:	b672      	cpsid	i
}
 8000bc8:	bf00      	nop
  __disable_irq();
  while (1)
 8000bca:	e7fe      	b.n	8000bca <Error_Handler+0x8>

08000bcc <_Z41__static_initialization_and_destruction_0ii>:
  {
  }

}
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d10a      	bne.n	8000bf2 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d105      	bne.n	8000bf2 <_Z41__static_initialization_and_destruction_0ii+0x26>
External_DAC dac;
 8000be6:	480a      	ldr	r0, [pc, #40]	; (8000c10 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8000be8:	f7ff faee 	bl	80001c8 <_ZN12External_DACC1Ev>
Keypad keys;
 8000bec:	4809      	ldr	r0, [pc, #36]	; (8000c14 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8000bee:	f7ff fbb1 	bl	8000354 <_ZN6KeypadC1Ev>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d107      	bne.n	8000c08 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d102      	bne.n	8000c08 <_Z41__static_initialization_and_destruction_0ii+0x3c>
External_DAC dac;
 8000c02:	4803      	ldr	r0, [pc, #12]	; (8000c10 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8000c04:	f7ff faf0 	bl	80001e8 <_ZN12External_DACD1Ev>
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	2000009c 	.word	0x2000009c
 8000c14:	200000a0 	.word	0x200000a0

08000c18 <_GLOBAL__sub_I_dac>:
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c20:	2001      	movs	r0, #1
 8000c22:	f7ff ffd3 	bl	8000bcc <_Z41__static_initialization_and_destruction_0ii>
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <_GLOBAL__sub_D_dac>:
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c30:	2000      	movs	r0, #0
 8000c32:	f7ff ffcb 	bl	8000bcc <_Z41__static_initialization_and_destruction_0ii>
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <HAL_MspInit+0x44>)
 8000c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c42:	4a0e      	ldr	r2, [pc, #56]	; (8000c7c <HAL_MspInit+0x44>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6613      	str	r3, [r2, #96]	; 0x60
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <HAL_MspInit+0x44>)
 8000c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <HAL_MspInit+0x44>)
 8000c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5a:	4a08      	ldr	r2, [pc, #32]	; (8000c7c <HAL_MspInit+0x44>)
 8000c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c60:	6593      	str	r3, [r2, #88]	; 0x58
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_MspInit+0x44>)
 8000c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40021000 	.word	0x40021000

08000c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <NMI_Handler+0x4>

08000c86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <HardFault_Handler+0x4>

08000c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <MemManage_Handler+0x4>

08000c92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <BusFault_Handler+0x4>

08000c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <UsageFault_Handler+0x4>

08000c9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ccc:	f000 f89a 	bl	8000e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <SystemInit+0x20>)
 8000cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cde:	4a05      	ldr	r2, [pc, #20]	; (8000cf4 <SystemInit+0x20>)
 8000ce0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cfc:	f7ff ffea 	bl	8000cd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d00:	480c      	ldr	r0, [pc, #48]	; (8000d34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d02:	490d      	ldr	r1, [pc, #52]	; (8000d38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d04:	4a0d      	ldr	r2, [pc, #52]	; (8000d3c <LoopForever+0xe>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d08:	e002      	b.n	8000d10 <LoopCopyDataInit>

08000d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0e:	3304      	adds	r3, #4

08000d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d14:	d3f9      	bcc.n	8000d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d16:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d18:	4c0a      	ldr	r4, [pc, #40]	; (8000d44 <LoopForever+0x16>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d1c:	e001      	b.n	8000d22 <LoopFillZerobss>

08000d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d20:	3204      	adds	r2, #4

08000d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d24:	d3fb      	bcc.n	8000d1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d26:	f000 ffbf 	bl	8001ca8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d2a:	f7ff fed3 	bl	8000ad4 <main>

08000d2e <LoopForever>:

LoopForever:
    b LoopForever
 8000d2e:	e7fe      	b.n	8000d2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d30:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d38:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000d3c:	08003498 	.word	0x08003498
  ldr r2, =_sbss
 8000d40:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000d44:	20000210 	.word	0x20000210

08000d48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d48:	e7fe      	b.n	8000d48 <ADC1_2_IRQHandler>
	...

08000d4c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d52:	2300      	movs	r3, #0
 8000d54:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <HAL_Init+0x3c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a0b      	ldr	r2, [pc, #44]	; (8000d88 <HAL_Init+0x3c>)
 8000d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d60:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d62:	2003      	movs	r0, #3
 8000d64:	f000 f920 	bl	8000fa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d68:	2000      	movs	r0, #0
 8000d6a:	f000 f80f 	bl	8000d8c <HAL_InitTick>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d002      	beq.n	8000d7a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	71fb      	strb	r3, [r7, #7]
 8000d78:	e001      	b.n	8000d7e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d7a:	f7ff ff5d 	bl	8000c38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40022000 	.word	0x40022000

08000d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d94:	2300      	movs	r3, #0
 8000d96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d98:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <HAL_InitTick+0x6c>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d023      	beq.n	8000de8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000da0:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <HAL_InitTick+0x70>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <HAL_InitTick+0x6c>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	4619      	mov	r1, r3
 8000daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 f91d 	bl	8000ff6 <HAL_SYSTICK_Config>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d10f      	bne.n	8000de2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d809      	bhi.n	8000ddc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	f000 f8f5 	bl	8000fbe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dd4:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <HAL_InitTick+0x74>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6013      	str	r3, [r2, #0]
 8000dda:	e007      	b.n	8000dec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	73fb      	strb	r3, [r7, #15]
 8000de0:	e004      	b.n	8000dec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	73fb      	strb	r3, [r7, #15]
 8000de6:	e001      	b.n	8000dec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000024 	.word	0x20000024
 8000dfc:	2000001c 	.word	0x2000001c
 8000e00:	20000020 	.word	0x20000020

08000e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_IncTick+0x20>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_IncTick+0x24>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4413      	add	r3, r2
 8000e14:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <HAL_IncTick+0x24>)
 8000e16:	6013      	str	r3, [r2, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000024 	.word	0x20000024
 8000e28:	200000cc 	.word	0x200000cc

08000e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <HAL_GetTick+0x14>)
 8000e32:	681b      	ldr	r3, [r3, #0]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	200000cc 	.word	0x200000cc

08000e44 <__NVIC_SetPriorityGrouping>:
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e60:	4013      	ands	r3, r2
 8000e62:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e76:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	60d3      	str	r3, [r2, #12]
}
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_GetPriorityGrouping>:
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	0a1b      	lsrs	r3, r3, #8
 8000e96:	f003 0307 	and.w	r3, r3, #7
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	6039      	str	r1, [r7, #0]
 8000eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	db0a      	blt.n	8000ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	490c      	ldr	r1, [pc, #48]	; (8000ef4 <__NVIC_SetPriority+0x4c>)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	0112      	lsls	r2, r2, #4
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	440b      	add	r3, r1
 8000ecc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed0:	e00a      	b.n	8000ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4908      	ldr	r1, [pc, #32]	; (8000ef8 <__NVIC_SetPriority+0x50>)
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	f003 030f 	and.w	r3, r3, #15
 8000ede:	3b04      	subs	r3, #4
 8000ee0:	0112      	lsls	r2, r2, #4
 8000ee2:	b2d2      	uxtb	r2, r2
 8000ee4:	440b      	add	r3, r1
 8000ee6:	761a      	strb	r2, [r3, #24]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000e100 	.word	0xe000e100
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b089      	sub	sp, #36	; 0x24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	f1c3 0307 	rsb	r3, r3, #7
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	bf28      	it	cs
 8000f1a:	2304      	movcs	r3, #4
 8000f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3304      	adds	r3, #4
 8000f22:	2b06      	cmp	r3, #6
 8000f24:	d902      	bls.n	8000f2c <NVIC_EncodePriority+0x30>
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3b03      	subs	r3, #3
 8000f2a:	e000      	b.n	8000f2e <NVIC_EncodePriority+0x32>
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f30:	f04f 32ff 	mov.w	r2, #4294967295
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43da      	mvns	r2, r3
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	401a      	ands	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f44:	f04f 31ff 	mov.w	r1, #4294967295
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4e:	43d9      	mvns	r1, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	4313      	orrs	r3, r2
         );
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3724      	adds	r7, #36	; 0x24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
	...

08000f64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f74:	d301      	bcc.n	8000f7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f76:	2301      	movs	r3, #1
 8000f78:	e00f      	b.n	8000f9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	; (8000fa4 <SysTick_Config+0x40>)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f82:	210f      	movs	r1, #15
 8000f84:	f04f 30ff 	mov.w	r0, #4294967295
 8000f88:	f7ff ff8e 	bl	8000ea8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <SysTick_Config+0x40>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f92:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <SysTick_Config+0x40>)
 8000f94:	2207      	movs	r2, #7
 8000f96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	e000e010 	.word	0xe000e010

08000fa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff ff47 	bl	8000e44 <__NVIC_SetPriorityGrouping>
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b086      	sub	sp, #24
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	60b9      	str	r1, [r7, #8]
 8000fc8:	607a      	str	r2, [r7, #4]
 8000fca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd0:	f7ff ff5c 	bl	8000e8c <__NVIC_GetPriorityGrouping>
 8000fd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	68b9      	ldr	r1, [r7, #8]
 8000fda:	6978      	ldr	r0, [r7, #20]
 8000fdc:	f7ff ff8e 	bl	8000efc <NVIC_EncodePriority>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ff5d 	bl	8000ea8 <__NVIC_SetPriority>
}
 8000fee:	bf00      	nop
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff ffb0 	bl	8000f64 <SysTick_Config>
 8001004:	4603      	mov	r3, r0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <HAL_PWREx_GetVoltageRange+0x18>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	40007000 	.word	0x40007000

0800102c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800103a:	d130      	bne.n	800109e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800103c:	4b23      	ldr	r3, [pc, #140]	; (80010cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001048:	d038      	beq.n	80010bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800104a:	4b20      	ldr	r3, [pc, #128]	; (80010cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001052:	4a1e      	ldr	r2, [pc, #120]	; (80010cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001054:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001058:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800105a:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2232      	movs	r2, #50	; 0x32
 8001060:	fb02 f303 	mul.w	r3, r2, r3
 8001064:	4a1b      	ldr	r2, [pc, #108]	; (80010d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001066:	fba2 2303 	umull	r2, r3, r2, r3
 800106a:	0c9b      	lsrs	r3, r3, #18
 800106c:	3301      	adds	r3, #1
 800106e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001070:	e002      	b.n	8001078 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	3b01      	subs	r3, #1
 8001076:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800107a:	695b      	ldr	r3, [r3, #20]
 800107c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001084:	d102      	bne.n	800108c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1f2      	bne.n	8001072 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800108c:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800108e:	695b      	ldr	r3, [r3, #20]
 8001090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001098:	d110      	bne.n	80010bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e00f      	b.n	80010be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010aa:	d007      	beq.n	80010bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010ac:	4b07      	ldr	r3, [pc, #28]	; (80010cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010b4:	4a05      	ldr	r2, [pc, #20]	; (80010cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40007000 	.word	0x40007000
 80010d0:	2000001c 	.word	0x2000001c
 80010d4:	431bde83 	.word	0x431bde83

080010d8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d101      	bne.n	80010ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e3ca      	b.n	8001880 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010ea:	4b97      	ldr	r3, [pc, #604]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f003 030c 	and.w	r3, r3, #12
 80010f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010f4:	4b94      	ldr	r3, [pc, #592]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0310 	and.w	r3, r3, #16
 8001106:	2b00      	cmp	r3, #0
 8001108:	f000 80e4 	beq.w	80012d4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d007      	beq.n	8001122 <HAL_RCC_OscConfig+0x4a>
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	2b0c      	cmp	r3, #12
 8001116:	f040 808b 	bne.w	8001230 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	2b01      	cmp	r3, #1
 800111e:	f040 8087 	bne.w	8001230 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001122:	4b89      	ldr	r3, [pc, #548]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b00      	cmp	r3, #0
 800112c:	d005      	beq.n	800113a <HAL_RCC_OscConfig+0x62>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e3a2      	b.n	8001880 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6a1a      	ldr	r2, [r3, #32]
 800113e:	4b82      	ldr	r3, [pc, #520]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0308 	and.w	r3, r3, #8
 8001146:	2b00      	cmp	r3, #0
 8001148:	d004      	beq.n	8001154 <HAL_RCC_OscConfig+0x7c>
 800114a:	4b7f      	ldr	r3, [pc, #508]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001152:	e005      	b.n	8001160 <HAL_RCC_OscConfig+0x88>
 8001154:	4b7c      	ldr	r3, [pc, #496]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 8001156:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800115a:	091b      	lsrs	r3, r3, #4
 800115c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001160:	4293      	cmp	r3, r2
 8001162:	d223      	bcs.n	80011ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a1b      	ldr	r3, [r3, #32]
 8001168:	4618      	mov	r0, r3
 800116a:	f000 fd1d 	bl	8001ba8 <RCC_SetFlashLatencyFromMSIRange>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e383      	b.n	8001880 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001178:	4b73      	ldr	r3, [pc, #460]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a72      	ldr	r2, [pc, #456]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 800117e:	f043 0308 	orr.w	r3, r3, #8
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	4b70      	ldr	r3, [pc, #448]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a1b      	ldr	r3, [r3, #32]
 8001190:	496d      	ldr	r1, [pc, #436]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 8001192:	4313      	orrs	r3, r2
 8001194:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001196:	4b6c      	ldr	r3, [pc, #432]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	4968      	ldr	r1, [pc, #416]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 80011a6:	4313      	orrs	r3, r2
 80011a8:	604b      	str	r3, [r1, #4]
 80011aa:	e025      	b.n	80011f8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011ac:	4b66      	ldr	r3, [pc, #408]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a65      	ldr	r2, [pc, #404]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 80011b2:	f043 0308 	orr.w	r3, r3, #8
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	4b63      	ldr	r3, [pc, #396]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a1b      	ldr	r3, [r3, #32]
 80011c4:	4960      	ldr	r1, [pc, #384]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 80011c6:	4313      	orrs	r3, r2
 80011c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011ca:	4b5f      	ldr	r3, [pc, #380]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	021b      	lsls	r3, r3, #8
 80011d8:	495b      	ldr	r1, [pc, #364]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 80011da:	4313      	orrs	r3, r2
 80011dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d109      	bne.n	80011f8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 fcdd 	bl	8001ba8 <RCC_SetFlashLatencyFromMSIRange>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e343      	b.n	8001880 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80011f8:	f000 fc4a 	bl	8001a90 <HAL_RCC_GetSysClockFreq>
 80011fc:	4602      	mov	r2, r0
 80011fe:	4b52      	ldr	r3, [pc, #328]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	091b      	lsrs	r3, r3, #4
 8001204:	f003 030f 	and.w	r3, r3, #15
 8001208:	4950      	ldr	r1, [pc, #320]	; (800134c <HAL_RCC_OscConfig+0x274>)
 800120a:	5ccb      	ldrb	r3, [r1, r3]
 800120c:	f003 031f 	and.w	r3, r3, #31
 8001210:	fa22 f303 	lsr.w	r3, r2, r3
 8001214:	4a4e      	ldr	r2, [pc, #312]	; (8001350 <HAL_RCC_OscConfig+0x278>)
 8001216:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001218:	4b4e      	ldr	r3, [pc, #312]	; (8001354 <HAL_RCC_OscConfig+0x27c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff fdb5 	bl	8000d8c <HAL_InitTick>
 8001222:	4603      	mov	r3, r0
 8001224:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001226:	7bfb      	ldrb	r3, [r7, #15]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d052      	beq.n	80012d2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	e327      	b.n	8001880 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d032      	beq.n	800129e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001238:	4b43      	ldr	r3, [pc, #268]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a42      	ldr	r2, [pc, #264]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001244:	f7ff fdf2 	bl	8000e2c <HAL_GetTick>
 8001248:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800124c:	f7ff fdee 	bl	8000e2c <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e310      	b.n	8001880 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800125e:	4b3a      	ldr	r3, [pc, #232]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d0f0      	beq.n	800124c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800126a:	4b37      	ldr	r3, [pc, #220]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a36      	ldr	r2, [pc, #216]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 8001270:	f043 0308 	orr.w	r3, r3, #8
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	4b34      	ldr	r3, [pc, #208]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	4931      	ldr	r1, [pc, #196]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 8001284:	4313      	orrs	r3, r2
 8001286:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001288:	4b2f      	ldr	r3, [pc, #188]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	69db      	ldr	r3, [r3, #28]
 8001294:	021b      	lsls	r3, r3, #8
 8001296:	492c      	ldr	r1, [pc, #176]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 8001298:	4313      	orrs	r3, r2
 800129a:	604b      	str	r3, [r1, #4]
 800129c:	e01a      	b.n	80012d4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800129e:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a29      	ldr	r2, [pc, #164]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 80012a4:	f023 0301 	bic.w	r3, r3, #1
 80012a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012aa:	f7ff fdbf 	bl	8000e2c <HAL_GetTick>
 80012ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012b0:	e008      	b.n	80012c4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012b2:	f7ff fdbb 	bl	8000e2c <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e2dd      	b.n	8001880 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012c4:	4b20      	ldr	r3, [pc, #128]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1f0      	bne.n	80012b2 <HAL_RCC_OscConfig+0x1da>
 80012d0:	e000      	b.n	80012d4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d074      	beq.n	80013ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	2b08      	cmp	r3, #8
 80012e4:	d005      	beq.n	80012f2 <HAL_RCC_OscConfig+0x21a>
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	2b0c      	cmp	r3, #12
 80012ea:	d10e      	bne.n	800130a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	2b03      	cmp	r3, #3
 80012f0:	d10b      	bne.n	800130a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d064      	beq.n	80013c8 <HAL_RCC_OscConfig+0x2f0>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d160      	bne.n	80013c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e2ba      	b.n	8001880 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001312:	d106      	bne.n	8001322 <HAL_RCC_OscConfig+0x24a>
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a0b      	ldr	r2, [pc, #44]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 800131a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800131e:	6013      	str	r3, [r2, #0]
 8001320:	e026      	b.n	8001370 <HAL_RCC_OscConfig+0x298>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800132a:	d115      	bne.n	8001358 <HAL_RCC_OscConfig+0x280>
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a05      	ldr	r2, [pc, #20]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 8001332:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	4b03      	ldr	r3, [pc, #12]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a02      	ldr	r2, [pc, #8]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 800133e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	e014      	b.n	8001370 <HAL_RCC_OscConfig+0x298>
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000
 800134c:	08003448 	.word	0x08003448
 8001350:	2000001c 	.word	0x2000001c
 8001354:	20000020 	.word	0x20000020
 8001358:	4ba0      	ldr	r3, [pc, #640]	; (80015dc <HAL_RCC_OscConfig+0x504>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a9f      	ldr	r2, [pc, #636]	; (80015dc <HAL_RCC_OscConfig+0x504>)
 800135e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001362:	6013      	str	r3, [r2, #0]
 8001364:	4b9d      	ldr	r3, [pc, #628]	; (80015dc <HAL_RCC_OscConfig+0x504>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a9c      	ldr	r2, [pc, #624]	; (80015dc <HAL_RCC_OscConfig+0x504>)
 800136a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800136e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d013      	beq.n	80013a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001378:	f7ff fd58 	bl	8000e2c <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001380:	f7ff fd54 	bl	8000e2c <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b64      	cmp	r3, #100	; 0x64
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e276      	b.n	8001880 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001392:	4b92      	ldr	r3, [pc, #584]	; (80015dc <HAL_RCC_OscConfig+0x504>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0f0      	beq.n	8001380 <HAL_RCC_OscConfig+0x2a8>
 800139e:	e014      	b.n	80013ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a0:	f7ff fd44 	bl	8000e2c <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a8:	f7ff fd40 	bl	8000e2c <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b64      	cmp	r3, #100	; 0x64
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e262      	b.n	8001880 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013ba:	4b88      	ldr	r3, [pc, #544]	; (80015dc <HAL_RCC_OscConfig+0x504>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1f0      	bne.n	80013a8 <HAL_RCC_OscConfig+0x2d0>
 80013c6:	e000      	b.n	80013ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d060      	beq.n	8001498 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	2b04      	cmp	r3, #4
 80013da:	d005      	beq.n	80013e8 <HAL_RCC_OscConfig+0x310>
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	2b0c      	cmp	r3, #12
 80013e0:	d119      	bne.n	8001416 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d116      	bne.n	8001416 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013e8:	4b7c      	ldr	r3, [pc, #496]	; (80015dc <HAL_RCC_OscConfig+0x504>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d005      	beq.n	8001400 <HAL_RCC_OscConfig+0x328>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d101      	bne.n	8001400 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e23f      	b.n	8001880 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001400:	4b76      	ldr	r3, [pc, #472]	; (80015dc <HAL_RCC_OscConfig+0x504>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	691b      	ldr	r3, [r3, #16]
 800140c:	061b      	lsls	r3, r3, #24
 800140e:	4973      	ldr	r1, [pc, #460]	; (80015dc <HAL_RCC_OscConfig+0x504>)
 8001410:	4313      	orrs	r3, r2
 8001412:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001414:	e040      	b.n	8001498 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d023      	beq.n	8001466 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800141e:	4b6f      	ldr	r3, [pc, #444]	; (80015dc <HAL_RCC_OscConfig+0x504>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a6e      	ldr	r2, [pc, #440]	; (80015dc <HAL_RCC_OscConfig+0x504>)
 8001424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142a:	f7ff fcff 	bl	8000e2c <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001430:	e008      	b.n	8001444 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001432:	f7ff fcfb 	bl	8000e2c <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e21d      	b.n	8001880 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001444:	4b65      	ldr	r3, [pc, #404]	; (80015dc <HAL_RCC_OscConfig+0x504>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0f0      	beq.n	8001432 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001450:	4b62      	ldr	r3, [pc, #392]	; (80015dc <HAL_RCC_OscConfig+0x504>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	061b      	lsls	r3, r3, #24
 800145e:	495f      	ldr	r1, [pc, #380]	; (80015dc <HAL_RCC_OscConfig+0x504>)
 8001460:	4313      	orrs	r3, r2
 8001462:	604b      	str	r3, [r1, #4]
 8001464:	e018      	b.n	8001498 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001466:	4b5d      	ldr	r3, [pc, #372]	; (80015dc <HAL_RCC_OscConfig+0x504>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a5c      	ldr	r2, [pc, #368]	; (80015dc <HAL_RCC_OscConfig+0x504>)
 800146c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001470:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001472:	f7ff fcdb 	bl	8000e2c <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001478:	e008      	b.n	800148c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800147a:	f7ff fcd7 	bl	8000e2c <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e1f9      	b.n	8001880 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800148c:	4b53      	ldr	r3, [pc, #332]	; (80015dc <HAL_RCC_OscConfig+0x504>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1f0      	bne.n	800147a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0308 	and.w	r3, r3, #8
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d03c      	beq.n	800151e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	695b      	ldr	r3, [r3, #20]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d01c      	beq.n	80014e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ac:	4b4b      	ldr	r3, [pc, #300]	; (80015dc <HAL_RCC_OscConfig+0x504>)
 80014ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014b2:	4a4a      	ldr	r2, [pc, #296]	; (80015dc <HAL_RCC_OscConfig+0x504>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014bc:	f7ff fcb6 	bl	8000e2c <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014c4:	f7ff fcb2 	bl	8000e2c <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e1d4      	b.n	8001880 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014d6:	4b41      	ldr	r3, [pc, #260]	; (80015dc <HAL_RCC_OscConfig+0x504>)
 80014d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0ef      	beq.n	80014c4 <HAL_RCC_OscConfig+0x3ec>
 80014e4:	e01b      	b.n	800151e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e6:	4b3d      	ldr	r3, [pc, #244]	; (80015dc <HAL_RCC_OscConfig+0x504>)
 80014e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014ec:	4a3b      	ldr	r2, [pc, #236]	; (80015dc <HAL_RCC_OscConfig+0x504>)
 80014ee:	f023 0301 	bic.w	r3, r3, #1
 80014f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f6:	f7ff fc99 	bl	8000e2c <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014fe:	f7ff fc95 	bl	8000e2c <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e1b7      	b.n	8001880 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001510:	4b32      	ldr	r3, [pc, #200]	; (80015dc <HAL_RCC_OscConfig+0x504>)
 8001512:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1ef      	bne.n	80014fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 80a6 	beq.w	8001678 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800152c:	2300      	movs	r3, #0
 800152e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001530:	4b2a      	ldr	r3, [pc, #168]	; (80015dc <HAL_RCC_OscConfig+0x504>)
 8001532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d10d      	bne.n	8001558 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800153c:	4b27      	ldr	r3, [pc, #156]	; (80015dc <HAL_RCC_OscConfig+0x504>)
 800153e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001540:	4a26      	ldr	r2, [pc, #152]	; (80015dc <HAL_RCC_OscConfig+0x504>)
 8001542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001546:	6593      	str	r3, [r2, #88]	; 0x58
 8001548:	4b24      	ldr	r3, [pc, #144]	; (80015dc <HAL_RCC_OscConfig+0x504>)
 800154a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001554:	2301      	movs	r3, #1
 8001556:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001558:	4b21      	ldr	r3, [pc, #132]	; (80015e0 <HAL_RCC_OscConfig+0x508>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001560:	2b00      	cmp	r3, #0
 8001562:	d118      	bne.n	8001596 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001564:	4b1e      	ldr	r3, [pc, #120]	; (80015e0 <HAL_RCC_OscConfig+0x508>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a1d      	ldr	r2, [pc, #116]	; (80015e0 <HAL_RCC_OscConfig+0x508>)
 800156a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001570:	f7ff fc5c 	bl	8000e2c <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001578:	f7ff fc58 	bl	8000e2c <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e17a      	b.n	8001880 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <HAL_RCC_OscConfig+0x508>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0f0      	beq.n	8001578 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d108      	bne.n	80015b0 <HAL_RCC_OscConfig+0x4d8>
 800159e:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <HAL_RCC_OscConfig+0x504>)
 80015a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015a4:	4a0d      	ldr	r2, [pc, #52]	; (80015dc <HAL_RCC_OscConfig+0x504>)
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015ae:	e029      	b.n	8001604 <HAL_RCC_OscConfig+0x52c>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	2b05      	cmp	r3, #5
 80015b6:	d115      	bne.n	80015e4 <HAL_RCC_OscConfig+0x50c>
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <HAL_RCC_OscConfig+0x504>)
 80015ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015be:	4a07      	ldr	r2, [pc, #28]	; (80015dc <HAL_RCC_OscConfig+0x504>)
 80015c0:	f043 0304 	orr.w	r3, r3, #4
 80015c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <HAL_RCC_OscConfig+0x504>)
 80015ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ce:	4a03      	ldr	r2, [pc, #12]	; (80015dc <HAL_RCC_OscConfig+0x504>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015d8:	e014      	b.n	8001604 <HAL_RCC_OscConfig+0x52c>
 80015da:	bf00      	nop
 80015dc:	40021000 	.word	0x40021000
 80015e0:	40007000 	.word	0x40007000
 80015e4:	4b9c      	ldr	r3, [pc, #624]	; (8001858 <HAL_RCC_OscConfig+0x780>)
 80015e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ea:	4a9b      	ldr	r2, [pc, #620]	; (8001858 <HAL_RCC_OscConfig+0x780>)
 80015ec:	f023 0301 	bic.w	r3, r3, #1
 80015f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015f4:	4b98      	ldr	r3, [pc, #608]	; (8001858 <HAL_RCC_OscConfig+0x780>)
 80015f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015fa:	4a97      	ldr	r2, [pc, #604]	; (8001858 <HAL_RCC_OscConfig+0x780>)
 80015fc:	f023 0304 	bic.w	r3, r3, #4
 8001600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d016      	beq.n	800163a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160c:	f7ff fc0e 	bl	8000e2c <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001612:	e00a      	b.n	800162a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001614:	f7ff fc0a 	bl	8000e2c <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001622:	4293      	cmp	r3, r2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e12a      	b.n	8001880 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800162a:	4b8b      	ldr	r3, [pc, #556]	; (8001858 <HAL_RCC_OscConfig+0x780>)
 800162c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0ed      	beq.n	8001614 <HAL_RCC_OscConfig+0x53c>
 8001638:	e015      	b.n	8001666 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800163a:	f7ff fbf7 	bl	8000e2c <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001640:	e00a      	b.n	8001658 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001642:	f7ff fbf3 	bl	8000e2c <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001650:	4293      	cmp	r3, r2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e113      	b.n	8001880 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001658:	4b7f      	ldr	r3, [pc, #508]	; (8001858 <HAL_RCC_OscConfig+0x780>)
 800165a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1ed      	bne.n	8001642 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001666:	7ffb      	ldrb	r3, [r7, #31]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d105      	bne.n	8001678 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800166c:	4b7a      	ldr	r3, [pc, #488]	; (8001858 <HAL_RCC_OscConfig+0x780>)
 800166e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001670:	4a79      	ldr	r2, [pc, #484]	; (8001858 <HAL_RCC_OscConfig+0x780>)
 8001672:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001676:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 80fe 	beq.w	800187e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001686:	2b02      	cmp	r3, #2
 8001688:	f040 80d0 	bne.w	800182c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800168c:	4b72      	ldr	r3, [pc, #456]	; (8001858 <HAL_RCC_OscConfig+0x780>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	f003 0203 	and.w	r2, r3, #3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169c:	429a      	cmp	r2, r3
 800169e:	d130      	bne.n	8001702 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	3b01      	subs	r3, #1
 80016ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d127      	bne.n	8001702 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016be:	429a      	cmp	r2, r3
 80016c0:	d11f      	bne.n	8001702 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80016cc:	2a07      	cmp	r2, #7
 80016ce:	bf14      	ite	ne
 80016d0:	2201      	movne	r2, #1
 80016d2:	2200      	moveq	r2, #0
 80016d4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d113      	bne.n	8001702 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e4:	085b      	lsrs	r3, r3, #1
 80016e6:	3b01      	subs	r3, #1
 80016e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d109      	bne.n	8001702 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f8:	085b      	lsrs	r3, r3, #1
 80016fa:	3b01      	subs	r3, #1
 80016fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016fe:	429a      	cmp	r2, r3
 8001700:	d06e      	beq.n	80017e0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	2b0c      	cmp	r3, #12
 8001706:	d069      	beq.n	80017dc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001708:	4b53      	ldr	r3, [pc, #332]	; (8001858 <HAL_RCC_OscConfig+0x780>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d105      	bne.n	8001720 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001714:	4b50      	ldr	r3, [pc, #320]	; (8001858 <HAL_RCC_OscConfig+0x780>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e0ad      	b.n	8001880 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001724:	4b4c      	ldr	r3, [pc, #304]	; (8001858 <HAL_RCC_OscConfig+0x780>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a4b      	ldr	r2, [pc, #300]	; (8001858 <HAL_RCC_OscConfig+0x780>)
 800172a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800172e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001730:	f7ff fb7c 	bl	8000e2c <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001738:	f7ff fb78 	bl	8000e2c <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e09a      	b.n	8001880 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800174a:	4b43      	ldr	r3, [pc, #268]	; (8001858 <HAL_RCC_OscConfig+0x780>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f0      	bne.n	8001738 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001756:	4b40      	ldr	r3, [pc, #256]	; (8001858 <HAL_RCC_OscConfig+0x780>)
 8001758:	68da      	ldr	r2, [r3, #12]
 800175a:	4b40      	ldr	r3, [pc, #256]	; (800185c <HAL_RCC_OscConfig+0x784>)
 800175c:	4013      	ands	r3, r2
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001766:	3a01      	subs	r2, #1
 8001768:	0112      	lsls	r2, r2, #4
 800176a:	4311      	orrs	r1, r2
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001770:	0212      	lsls	r2, r2, #8
 8001772:	4311      	orrs	r1, r2
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001778:	0852      	lsrs	r2, r2, #1
 800177a:	3a01      	subs	r2, #1
 800177c:	0552      	lsls	r2, r2, #21
 800177e:	4311      	orrs	r1, r2
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001784:	0852      	lsrs	r2, r2, #1
 8001786:	3a01      	subs	r2, #1
 8001788:	0652      	lsls	r2, r2, #25
 800178a:	4311      	orrs	r1, r2
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001790:	0912      	lsrs	r2, r2, #4
 8001792:	0452      	lsls	r2, r2, #17
 8001794:	430a      	orrs	r2, r1
 8001796:	4930      	ldr	r1, [pc, #192]	; (8001858 <HAL_RCC_OscConfig+0x780>)
 8001798:	4313      	orrs	r3, r2
 800179a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800179c:	4b2e      	ldr	r3, [pc, #184]	; (8001858 <HAL_RCC_OscConfig+0x780>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a2d      	ldr	r2, [pc, #180]	; (8001858 <HAL_RCC_OscConfig+0x780>)
 80017a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017a8:	4b2b      	ldr	r3, [pc, #172]	; (8001858 <HAL_RCC_OscConfig+0x780>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	4a2a      	ldr	r2, [pc, #168]	; (8001858 <HAL_RCC_OscConfig+0x780>)
 80017ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017b4:	f7ff fb3a 	bl	8000e2c <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017bc:	f7ff fb36 	bl	8000e2c <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e058      	b.n	8001880 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ce:	4b22      	ldr	r3, [pc, #136]	; (8001858 <HAL_RCC_OscConfig+0x780>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0f0      	beq.n	80017bc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017da:	e050      	b.n	800187e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e04f      	b.n	8001880 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017e0:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <HAL_RCC_OscConfig+0x780>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d148      	bne.n	800187e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80017ec:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <HAL_RCC_OscConfig+0x780>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a19      	ldr	r2, [pc, #100]	; (8001858 <HAL_RCC_OscConfig+0x780>)
 80017f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017f8:	4b17      	ldr	r3, [pc, #92]	; (8001858 <HAL_RCC_OscConfig+0x780>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	4a16      	ldr	r2, [pc, #88]	; (8001858 <HAL_RCC_OscConfig+0x780>)
 80017fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001802:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001804:	f7ff fb12 	bl	8000e2c <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800180c:	f7ff fb0e 	bl	8000e2c <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e030      	b.n	8001880 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <HAL_RCC_OscConfig+0x780>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d0f0      	beq.n	800180c <HAL_RCC_OscConfig+0x734>
 800182a:	e028      	b.n	800187e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	2b0c      	cmp	r3, #12
 8001830:	d023      	beq.n	800187a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <HAL_RCC_OscConfig+0x780>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a08      	ldr	r2, [pc, #32]	; (8001858 <HAL_RCC_OscConfig+0x780>)
 8001838:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800183c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183e:	f7ff faf5 	bl	8000e2c <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001844:	e00c      	b.n	8001860 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001846:	f7ff faf1 	bl	8000e2c <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d905      	bls.n	8001860 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e013      	b.n	8001880 <HAL_RCC_OscConfig+0x7a8>
 8001858:	40021000 	.word	0x40021000
 800185c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001860:	4b09      	ldr	r3, [pc, #36]	; (8001888 <HAL_RCC_OscConfig+0x7b0>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1ec      	bne.n	8001846 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_RCC_OscConfig+0x7b0>)
 800186e:	68da      	ldr	r2, [r3, #12]
 8001870:	4905      	ldr	r1, [pc, #20]	; (8001888 <HAL_RCC_OscConfig+0x7b0>)
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_RCC_OscConfig+0x7b4>)
 8001874:	4013      	ands	r3, r2
 8001876:	60cb      	str	r3, [r1, #12]
 8001878:	e001      	b.n	800187e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e000      	b.n	8001880 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3720      	adds	r7, #32
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40021000 	.word	0x40021000
 800188c:	feeefffc 	.word	0xfeeefffc

08001890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e0e7      	b.n	8001a74 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018a4:	4b75      	ldr	r3, [pc, #468]	; (8001a7c <HAL_RCC_ClockConfig+0x1ec>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0307 	and.w	r3, r3, #7
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d910      	bls.n	80018d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b2:	4b72      	ldr	r3, [pc, #456]	; (8001a7c <HAL_RCC_ClockConfig+0x1ec>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f023 0207 	bic.w	r2, r3, #7
 80018ba:	4970      	ldr	r1, [pc, #448]	; (8001a7c <HAL_RCC_ClockConfig+0x1ec>)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	4313      	orrs	r3, r2
 80018c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c2:	4b6e      	ldr	r3, [pc, #440]	; (8001a7c <HAL_RCC_ClockConfig+0x1ec>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d001      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e0cf      	b.n	8001a74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d010      	beq.n	8001902 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	4b66      	ldr	r3, [pc, #408]	; (8001a80 <HAL_RCC_ClockConfig+0x1f0>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d908      	bls.n	8001902 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018f0:	4b63      	ldr	r3, [pc, #396]	; (8001a80 <HAL_RCC_ClockConfig+0x1f0>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	4960      	ldr	r1, [pc, #384]	; (8001a80 <HAL_RCC_ClockConfig+0x1f0>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d04c      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b03      	cmp	r3, #3
 8001914:	d107      	bne.n	8001926 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001916:	4b5a      	ldr	r3, [pc, #360]	; (8001a80 <HAL_RCC_ClockConfig+0x1f0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d121      	bne.n	8001966 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e0a6      	b.n	8001a74 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d107      	bne.n	800193e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800192e:	4b54      	ldr	r3, [pc, #336]	; (8001a80 <HAL_RCC_ClockConfig+0x1f0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d115      	bne.n	8001966 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e09a      	b.n	8001a74 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d107      	bne.n	8001956 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001946:	4b4e      	ldr	r3, [pc, #312]	; (8001a80 <HAL_RCC_ClockConfig+0x1f0>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d109      	bne.n	8001966 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e08e      	b.n	8001a74 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001956:	4b4a      	ldr	r3, [pc, #296]	; (8001a80 <HAL_RCC_ClockConfig+0x1f0>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e086      	b.n	8001a74 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001966:	4b46      	ldr	r3, [pc, #280]	; (8001a80 <HAL_RCC_ClockConfig+0x1f0>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f023 0203 	bic.w	r2, r3, #3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	4943      	ldr	r1, [pc, #268]	; (8001a80 <HAL_RCC_ClockConfig+0x1f0>)
 8001974:	4313      	orrs	r3, r2
 8001976:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001978:	f7ff fa58 	bl	8000e2c <HAL_GetTick>
 800197c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197e:	e00a      	b.n	8001996 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001980:	f7ff fa54 	bl	8000e2c <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	f241 3288 	movw	r2, #5000	; 0x1388
 800198e:	4293      	cmp	r3, r2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e06e      	b.n	8001a74 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001996:	4b3a      	ldr	r3, [pc, #232]	; (8001a80 <HAL_RCC_ClockConfig+0x1f0>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 020c 	and.w	r2, r3, #12
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d1eb      	bne.n	8001980 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d010      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	4b31      	ldr	r3, [pc, #196]	; (8001a80 <HAL_RCC_ClockConfig+0x1f0>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d208      	bcs.n	80019d6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c4:	4b2e      	ldr	r3, [pc, #184]	; (8001a80 <HAL_RCC_ClockConfig+0x1f0>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	492b      	ldr	r1, [pc, #172]	; (8001a80 <HAL_RCC_ClockConfig+0x1f0>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019d6:	4b29      	ldr	r3, [pc, #164]	; (8001a7c <HAL_RCC_ClockConfig+0x1ec>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d210      	bcs.n	8001a06 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e4:	4b25      	ldr	r3, [pc, #148]	; (8001a7c <HAL_RCC_ClockConfig+0x1ec>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f023 0207 	bic.w	r2, r3, #7
 80019ec:	4923      	ldr	r1, [pc, #140]	; (8001a7c <HAL_RCC_ClockConfig+0x1ec>)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f4:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <HAL_RCC_ClockConfig+0x1ec>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0307 	and.w	r3, r3, #7
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d001      	beq.n	8001a06 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e036      	b.n	8001a74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d008      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a12:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <HAL_RCC_ClockConfig+0x1f0>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	4918      	ldr	r1, [pc, #96]	; (8001a80 <HAL_RCC_ClockConfig+0x1f0>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0308 	and.w	r3, r3, #8
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d009      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a30:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <HAL_RCC_ClockConfig+0x1f0>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	4910      	ldr	r1, [pc, #64]	; (8001a80 <HAL_RCC_ClockConfig+0x1f0>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a44:	f000 f824 	bl	8001a90 <HAL_RCC_GetSysClockFreq>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	; (8001a80 <HAL_RCC_ClockConfig+0x1f0>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	091b      	lsrs	r3, r3, #4
 8001a50:	f003 030f 	and.w	r3, r3, #15
 8001a54:	490b      	ldr	r1, [pc, #44]	; (8001a84 <HAL_RCC_ClockConfig+0x1f4>)
 8001a56:	5ccb      	ldrb	r3, [r1, r3]
 8001a58:	f003 031f 	and.w	r3, r3, #31
 8001a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a60:	4a09      	ldr	r2, [pc, #36]	; (8001a88 <HAL_RCC_ClockConfig+0x1f8>)
 8001a62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a64:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <HAL_RCC_ClockConfig+0x1fc>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff f98f 	bl	8000d8c <HAL_InitTick>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a72:	7afb      	ldrb	r3, [r7, #11]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40022000 	.word	0x40022000
 8001a80:	40021000 	.word	0x40021000
 8001a84:	08003448 	.word	0x08003448
 8001a88:	2000001c 	.word	0x2000001c
 8001a8c:	20000020 	.word	0x20000020

08001a90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b089      	sub	sp, #36	; 0x24
 8001a94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a9e:	4b3e      	ldr	r3, [pc, #248]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 030c 	and.w	r3, r3, #12
 8001aa6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001aa8:	4b3b      	ldr	r3, [pc, #236]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d005      	beq.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x34>
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	2b0c      	cmp	r3, #12
 8001abc:	d121      	bne.n	8001b02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d11e      	bne.n	8001b02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ac4:	4b34      	ldr	r3, [pc, #208]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0308 	and.w	r3, r3, #8
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d107      	bne.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ad0:	4b31      	ldr	r3, [pc, #196]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ad6:	0a1b      	lsrs	r3, r3, #8
 8001ad8:	f003 030f 	and.w	r3, r3, #15
 8001adc:	61fb      	str	r3, [r7, #28]
 8001ade:	e005      	b.n	8001aec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ae0:	4b2d      	ldr	r3, [pc, #180]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	091b      	lsrs	r3, r3, #4
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001aec:	4a2b      	ldr	r2, [pc, #172]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d10d      	bne.n	8001b18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b00:	e00a      	b.n	8001b18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	2b04      	cmp	r3, #4
 8001b06:	d102      	bne.n	8001b0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b08:	4b25      	ldr	r3, [pc, #148]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b0a:	61bb      	str	r3, [r7, #24]
 8001b0c:	e004      	b.n	8001b18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	d101      	bne.n	8001b18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b14:	4b23      	ldr	r3, [pc, #140]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	2b0c      	cmp	r3, #12
 8001b1c:	d134      	bne.n	8001b88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b1e:	4b1e      	ldr	r3, [pc, #120]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d003      	beq.n	8001b36 <HAL_RCC_GetSysClockFreq+0xa6>
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	2b03      	cmp	r3, #3
 8001b32:	d003      	beq.n	8001b3c <HAL_RCC_GetSysClockFreq+0xac>
 8001b34:	e005      	b.n	8001b42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b36:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b38:	617b      	str	r3, [r7, #20]
      break;
 8001b3a:	e005      	b.n	8001b48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b3c:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b3e:	617b      	str	r3, [r7, #20]
      break;
 8001b40:	e002      	b.n	8001b48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	617b      	str	r3, [r7, #20]
      break;
 8001b46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b48:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	091b      	lsrs	r3, r3, #4
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	3301      	adds	r3, #1
 8001b54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b56:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	0a1b      	lsrs	r3, r3, #8
 8001b5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	fb03 f202 	mul.w	r2, r3, r2
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	0e5b      	lsrs	r3, r3, #25
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	3301      	adds	r3, #1
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b88:	69bb      	ldr	r3, [r7, #24]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3724      	adds	r7, #36	; 0x24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	08003458 	.word	0x08003458
 8001ba0:	00f42400 	.word	0x00f42400
 8001ba4:	007a1200 	.word	0x007a1200

08001ba8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001bb4:	4b2a      	ldr	r3, [pc, #168]	; (8001c60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001bc0:	f7ff fa26 	bl	8001010 <HAL_PWREx_GetVoltageRange>
 8001bc4:	6178      	str	r0, [r7, #20]
 8001bc6:	e014      	b.n	8001bf2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bc8:	4b25      	ldr	r3, [pc, #148]	; (8001c60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bcc:	4a24      	ldr	r2, [pc, #144]	; (8001c60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	6593      	str	r3, [r2, #88]	; 0x58
 8001bd4:	4b22      	ldr	r3, [pc, #136]	; (8001c60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001be0:	f7ff fa16 	bl	8001010 <HAL_PWREx_GetVoltageRange>
 8001be4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001be6:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	4a1d      	ldr	r2, [pc, #116]	; (8001c60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bf0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bf8:	d10b      	bne.n	8001c12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b80      	cmp	r3, #128	; 0x80
 8001bfe:	d919      	bls.n	8001c34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2ba0      	cmp	r3, #160	; 0xa0
 8001c04:	d902      	bls.n	8001c0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c06:	2302      	movs	r3, #2
 8001c08:	613b      	str	r3, [r7, #16]
 8001c0a:	e013      	b.n	8001c34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	613b      	str	r3, [r7, #16]
 8001c10:	e010      	b.n	8001c34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b80      	cmp	r3, #128	; 0x80
 8001c16:	d902      	bls.n	8001c1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c18:	2303      	movs	r3, #3
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	e00a      	b.n	8001c34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b80      	cmp	r3, #128	; 0x80
 8001c22:	d102      	bne.n	8001c2a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c24:	2302      	movs	r3, #2
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	e004      	b.n	8001c34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b70      	cmp	r3, #112	; 0x70
 8001c2e:	d101      	bne.n	8001c34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c30:	2301      	movs	r3, #1
 8001c32:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c34:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f023 0207 	bic.w	r2, r3, #7
 8001c3c:	4909      	ldr	r1, [pc, #36]	; (8001c64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c44:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d001      	beq.n	8001c56 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40022000 	.word	0x40022000

08001c68 <_ZdlPvj>:
 8001c68:	f000 b800 	b.w	8001c6c <_ZdlPv>

08001c6c <_ZdlPv>:
 8001c6c:	f000 b800 	b.w	8001c70 <free>

08001c70 <free>:
 8001c70:	4b02      	ldr	r3, [pc, #8]	; (8001c7c <free+0xc>)
 8001c72:	4601      	mov	r1, r0
 8001c74:	6818      	ldr	r0, [r3, #0]
 8001c76:	f000 b83d 	b.w	8001cf4 <_free_r>
 8001c7a:	bf00      	nop
 8001c7c:	20000074 	.word	0x20000074

08001c80 <__malloc_lock>:
 8001c80:	4801      	ldr	r0, [pc, #4]	; (8001c88 <__malloc_lock+0x8>)
 8001c82:	f000 b835 	b.w	8001cf0 <__retarget_lock_acquire_recursive>
 8001c86:	bf00      	nop
 8001c88:	2000020c 	.word	0x2000020c

08001c8c <__malloc_unlock>:
 8001c8c:	4801      	ldr	r0, [pc, #4]	; (8001c94 <__malloc_unlock+0x8>)
 8001c8e:	f000 b830 	b.w	8001cf2 <__retarget_lock_release_recursive>
 8001c92:	bf00      	nop
 8001c94:	2000020c 	.word	0x2000020c

08001c98 <memset>:
 8001c98:	4402      	add	r2, r0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d100      	bne.n	8001ca2 <memset+0xa>
 8001ca0:	4770      	bx	lr
 8001ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8001ca6:	e7f9      	b.n	8001c9c <memset+0x4>

08001ca8 <__libc_init_array>:
 8001ca8:	b570      	push	{r4, r5, r6, lr}
 8001caa:	4d0d      	ldr	r5, [pc, #52]	; (8001ce0 <__libc_init_array+0x38>)
 8001cac:	4c0d      	ldr	r4, [pc, #52]	; (8001ce4 <__libc_init_array+0x3c>)
 8001cae:	1b64      	subs	r4, r4, r5
 8001cb0:	10a4      	asrs	r4, r4, #2
 8001cb2:	2600      	movs	r6, #0
 8001cb4:	42a6      	cmp	r6, r4
 8001cb6:	d109      	bne.n	8001ccc <__libc_init_array+0x24>
 8001cb8:	4d0b      	ldr	r5, [pc, #44]	; (8001ce8 <__libc_init_array+0x40>)
 8001cba:	4c0c      	ldr	r4, [pc, #48]	; (8001cec <__libc_init_array+0x44>)
 8001cbc:	f000 f866 	bl	8001d8c <_init>
 8001cc0:	1b64      	subs	r4, r4, r5
 8001cc2:	10a4      	asrs	r4, r4, #2
 8001cc4:	2600      	movs	r6, #0
 8001cc6:	42a6      	cmp	r6, r4
 8001cc8:	d105      	bne.n	8001cd6 <__libc_init_array+0x2e>
 8001cca:	bd70      	pop	{r4, r5, r6, pc}
 8001ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cd0:	4798      	blx	r3
 8001cd2:	3601      	adds	r6, #1
 8001cd4:	e7ee      	b.n	8001cb4 <__libc_init_array+0xc>
 8001cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cda:	4798      	blx	r3
 8001cdc:	3601      	adds	r6, #1
 8001cde:	e7f2      	b.n	8001cc6 <__libc_init_array+0x1e>
 8001ce0:	08003488 	.word	0x08003488
 8001ce4:	08003488 	.word	0x08003488
 8001ce8:	08003488 	.word	0x08003488
 8001cec:	08003490 	.word	0x08003490

08001cf0 <__retarget_lock_acquire_recursive>:
 8001cf0:	4770      	bx	lr

08001cf2 <__retarget_lock_release_recursive>:
 8001cf2:	4770      	bx	lr

08001cf4 <_free_r>:
 8001cf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001cf6:	2900      	cmp	r1, #0
 8001cf8:	d044      	beq.n	8001d84 <_free_r+0x90>
 8001cfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001cfe:	9001      	str	r0, [sp, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f1a1 0404 	sub.w	r4, r1, #4
 8001d06:	bfb8      	it	lt
 8001d08:	18e4      	addlt	r4, r4, r3
 8001d0a:	f7ff ffb9 	bl	8001c80 <__malloc_lock>
 8001d0e:	4a1e      	ldr	r2, [pc, #120]	; (8001d88 <_free_r+0x94>)
 8001d10:	9801      	ldr	r0, [sp, #4]
 8001d12:	6813      	ldr	r3, [r2, #0]
 8001d14:	b933      	cbnz	r3, 8001d24 <_free_r+0x30>
 8001d16:	6063      	str	r3, [r4, #4]
 8001d18:	6014      	str	r4, [r2, #0]
 8001d1a:	b003      	add	sp, #12
 8001d1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001d20:	f7ff bfb4 	b.w	8001c8c <__malloc_unlock>
 8001d24:	42a3      	cmp	r3, r4
 8001d26:	d908      	bls.n	8001d3a <_free_r+0x46>
 8001d28:	6825      	ldr	r5, [r4, #0]
 8001d2a:	1961      	adds	r1, r4, r5
 8001d2c:	428b      	cmp	r3, r1
 8001d2e:	bf01      	itttt	eq
 8001d30:	6819      	ldreq	r1, [r3, #0]
 8001d32:	685b      	ldreq	r3, [r3, #4]
 8001d34:	1949      	addeq	r1, r1, r5
 8001d36:	6021      	streq	r1, [r4, #0]
 8001d38:	e7ed      	b.n	8001d16 <_free_r+0x22>
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	b10b      	cbz	r3, 8001d44 <_free_r+0x50>
 8001d40:	42a3      	cmp	r3, r4
 8001d42:	d9fa      	bls.n	8001d3a <_free_r+0x46>
 8001d44:	6811      	ldr	r1, [r2, #0]
 8001d46:	1855      	adds	r5, r2, r1
 8001d48:	42a5      	cmp	r5, r4
 8001d4a:	d10b      	bne.n	8001d64 <_free_r+0x70>
 8001d4c:	6824      	ldr	r4, [r4, #0]
 8001d4e:	4421      	add	r1, r4
 8001d50:	1854      	adds	r4, r2, r1
 8001d52:	42a3      	cmp	r3, r4
 8001d54:	6011      	str	r1, [r2, #0]
 8001d56:	d1e0      	bne.n	8001d1a <_free_r+0x26>
 8001d58:	681c      	ldr	r4, [r3, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	6053      	str	r3, [r2, #4]
 8001d5e:	440c      	add	r4, r1
 8001d60:	6014      	str	r4, [r2, #0]
 8001d62:	e7da      	b.n	8001d1a <_free_r+0x26>
 8001d64:	d902      	bls.n	8001d6c <_free_r+0x78>
 8001d66:	230c      	movs	r3, #12
 8001d68:	6003      	str	r3, [r0, #0]
 8001d6a:	e7d6      	b.n	8001d1a <_free_r+0x26>
 8001d6c:	6825      	ldr	r5, [r4, #0]
 8001d6e:	1961      	adds	r1, r4, r5
 8001d70:	428b      	cmp	r3, r1
 8001d72:	bf04      	itt	eq
 8001d74:	6819      	ldreq	r1, [r3, #0]
 8001d76:	685b      	ldreq	r3, [r3, #4]
 8001d78:	6063      	str	r3, [r4, #4]
 8001d7a:	bf04      	itt	eq
 8001d7c:	1949      	addeq	r1, r1, r5
 8001d7e:	6021      	streq	r1, [r4, #0]
 8001d80:	6054      	str	r4, [r2, #4]
 8001d82:	e7ca      	b.n	8001d1a <_free_r+0x26>
 8001d84:	b003      	add	sp, #12
 8001d86:	bd30      	pop	{r4, r5, pc}
 8001d88:	200000d0 	.word	0x200000d0

08001d8c <_init>:
 8001d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d8e:	bf00      	nop
 8001d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d92:	bc08      	pop	{r3}
 8001d94:	469e      	mov	lr, r3
 8001d96:	4770      	bx	lr

08001d98 <_fini>:
 8001d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d9a:	bf00      	nop
 8001d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d9e:	bc08      	pop	{r3}
 8001da0:	469e      	mov	lr, r3
 8001da2:	4770      	bx	lr
