
CPE 316 P1 Function Generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000083c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000810  080009c4  080009c4  000109c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011d4  080011d4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080011d4  080011d4  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011d4  080011d4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011d4  080011d4  000111d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011d8  080011d8  000111d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080011dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000005c  08001238  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08001238  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003777  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000d38  00000000  00000000  00023846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000398  00000000  00000000  00024580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000028f  00000000  00000000  00024918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000261ee  00000000  00000000  00024ba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003f35  00000000  00000000  0004ad95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2bbb  00000000  00000000  0004ecca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000fa8  00000000  00000000  00131888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00132830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080009ac 	.word	0x080009ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	080009ac 	.word	0x080009ac

080001c8 <_ZN12External_DACC1Ev>:
    2559, 2544, 2530, 2515, 2501, 2486, 2472, 2457, 2443, 2428, 2413, 2399, 2384, 2370, 2355, 2341,
    2326, 2312, 2297, 2283, 2268, 2254, 2239, 2224, 2210, 2195, 2181, 2166, 2152, 2137, 2123, 2108,
    2094, 2079, 2065, 2050, 2035, 2021, 2006, 1992, 1977, 1963, 1948, 1934, 1919, 1905, 1890, 1876,
};

External_DAC::External_DAC() {
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	4a04      	ldr	r2, [pc, #16]	; (80001e4 <_ZN12External_DACC1Ev+0x1c>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	601a      	str	r2, [r3, #0]

}
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4618      	mov	r0, r3
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e2:	4770      	bx	lr
 80001e4:	080011cc 	.word	0x080011cc

080001e8 <_ZN12External_DACD1Ev>:

External_DAC::~External_DAC() {
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	4a04      	ldr	r2, [pc, #16]	; (8000204 <_ZN12External_DACD1Ev+0x1c>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	601a      	str	r2, [r3, #0]
}
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	4618      	mov	r0, r3
 80001fa:	370c      	adds	r7, #12
 80001fc:	46bd      	mov	sp, r7
 80001fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000202:	4770      	bx	lr
 8000204:	080011cc 	.word	0x080011cc

08000208 <_ZN12External_DACD0Ev>:
External_DAC::~External_DAC() {
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
}
 8000210:	6878      	ldr	r0, [r7, #4]
 8000212:	f7ff ffe9 	bl	80001e8 <_ZN12External_DACD1Ev>
 8000216:	2104      	movs	r1, #4
 8000218:	6878      	ldr	r0, [r7, #4]
 800021a:	f000 fb3c 	bl	8000896 <_ZdlPvj>
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	4618      	mov	r0, r3
 8000222:	3708      	adds	r7, #8
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}

08000228 <_ZN12External_DAC8DAC_initEv>:

void External_DAC::DAC_init(void)
{
 8000228:	b480      	push	{r7}
 800022a:	b083      	sub	sp, #12
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
	  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
 8000230:	4b2b      	ldr	r3, [pc, #172]	; (80002e0 <_ZN12External_DAC8DAC_initEv+0xb8>)
 8000232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000234:	4a2a      	ldr	r2, [pc, #168]	; (80002e0 <_ZN12External_DAC8DAC_initEv+0xb8>)
 8000236:	f043 0301 	orr.w	r3, r3, #1
 800023a:	64d3      	str	r3, [r2, #76]	; 0x4c

	  GPIOA->MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 |		// mask function
 800023c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000246:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800024a:	6013      	str	r3, [r2, #0]
						GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
	  GPIOA->MODER |= (GPIO_MODER_MODE4_1 | GPIO_MODER_MODE5_1 |	// enable alternate function
 800024c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000256:	f443 432a 	orr.w	r3, r3, #43520	; 0xaa00
 800025a:	6013      	str	r3, [r2, #0]
					   GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1);

	  GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL4 | GPIO_AFRL_AFSEL5 |		// mask AF selection
 800025c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000260:	6a1b      	ldr	r3, [r3, #32]
 8000262:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000266:	b29b      	uxth	r3, r3
 8000268:	6213      	str	r3, [r2, #32]
						  GPIO_AFRL_AFSEL6 | GPIO_AFRL_AFSEL7);
	  GPIOA->AFR[0] |= ((5 << GPIO_AFRL_AFSEL4_Pos) |				// select SPI_1 (AF5)
 800026a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800026e:	6a1b      	ldr	r3, [r3, #32]
 8000270:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000274:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000278:	f443 03aa 	orr.w	r3, r3, #5570560	; 0x550000
 800027c:	6213      	str	r3, [r2, #32]
						(5 << GPIO_AFRL_AFSEL5_Pos) |
						(5 << GPIO_AFRL_AFSEL6_Pos) |
						(5 << GPIO_AFRL_AFSEL7_Pos));

	  GPIOA->OTYPER &= ~(GPIO_OTYPER_OT4 | GPIO_OTYPER_OT5 |		// push-pull output
 800027e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000282:	685b      	ldr	r3, [r3, #4]
 8000284:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000288:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800028c:	6053      	str	r3, [r2, #4]
						  GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7);

	  GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD4 | GPIO_PUPDR_PUPD5 |		// no pull ups or pull downs
 800028e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000292:	68db      	ldr	r3, [r3, #12]
 8000294:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000298:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800029c:	60d3      	str	r3, [r2, #12]
						GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7);

	  GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED4 | 					// low speed
 800029e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002a2:	689b      	ldr	r3, [r3, #8]
 80002a4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80002ac:	6093      	str	r3, [r2, #8]
						  GPIO_OSPEEDR_OSPEED5 |
						  GPIO_OSPEEDR_OSPEED6 |
						  GPIO_OSPEEDR_OSPEED7);

	  // configure SPI 1
	  RCC->APB2ENR |= (RCC_APB2ENR_SPI1EN);		// enable SPI1 clock
 80002ae:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <_ZN12External_DAC8DAC_initEv+0xb8>)
 80002b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002b2:	4a0b      	ldr	r2, [pc, #44]	; (80002e0 <_ZN12External_DAC8DAC_initEv+0xb8>)
 80002b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002b8:	6613      	str	r3, [r2, #96]	; 0x60
	  SPI1->CR1 = (SPI_CR1_MSTR);				// enable master mode, fck/2, hardware CS, MSB first, full duplex
 80002ba:	4b0a      	ldr	r3, [pc, #40]	; (80002e4 <_ZN12External_DAC8DAC_initEv+0xbc>)
 80002bc:	2204      	movs	r2, #4
 80002be:	601a      	str	r2, [r3, #0]
	  SPI1->CR2 = (SPI_CR2_SSOE |				// enable CS output
 80002c0:	4b08      	ldr	r3, [pc, #32]	; (80002e4 <_ZN12External_DAC8DAC_initEv+0xbc>)
 80002c2:	f640 720c 	movw	r2, #3852	; 0xf0c
 80002c6:	605a      	str	r2, [r3, #4]
				   SPI_CR2_NSSP |				// create CS pulse
				   (0xF << SPI_CR2_DS_Pos));	// 16-bit data frames
	  SPI1->CR1 |= (SPI_CR1_SPE);				// enable SPI
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <_ZN12External_DAC8DAC_initEv+0xbc>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a05      	ldr	r2, [pc, #20]	; (80002e4 <_ZN12External_DAC8DAC_initEv+0xbc>)
 80002ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002d2:	6013      	str	r3, [r2, #0]
}
 80002d4:	bf00      	nop
 80002d6:	370c      	adds	r7, #12
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr
 80002e0:	40021000 	.word	0x40021000
 80002e4:	40013000 	.word	0x40013000

080002e8 <_ZN12External_DAC9DAC_writeEt>:

// Write a 12-bit value to the DAC
void External_DAC::DAC_write(uint16_t value)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	460b      	mov	r3, r1
 80002f2:	807b      	strh	r3, [r7, #2]
    uint16_t spi_data = (value & 0x0FFF) | 0x3000;  // 12-bit value, OR 0x3000 sets the Gain and buffer in the DAC see page 18 of datasheet
 80002f4:	887b      	ldrh	r3, [r7, #2]
 80002f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002fa:	b29b      	uxth	r3, r3
 80002fc:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000300:	81fb      	strh	r3, [r7, #14]
    while(!(SPI1->SR & SPI_SR_TXE));  // Wait for TXE (Transmit buffer empty)
 8000302:	bf00      	nop
 8000304:	4b09      	ldr	r3, [pc, #36]	; (800032c <_ZN12External_DAC9DAC_writeEt+0x44>)
 8000306:	689b      	ldr	r3, [r3, #8]
 8000308:	f003 0302 	and.w	r3, r3, #2
 800030c:	2b00      	cmp	r3, #0
 800030e:	bf0c      	ite	eq
 8000310:	2301      	moveq	r3, #1
 8000312:	2300      	movne	r3, #0
 8000314:	b2db      	uxtb	r3, r3
 8000316:	2b00      	cmp	r3, #0
 8000318:	d1f4      	bne.n	8000304 <_ZN12External_DAC9DAC_writeEt+0x1c>
    SPI1->DR = spi_data;  // Send the data
 800031a:	4a04      	ldr	r2, [pc, #16]	; (800032c <_ZN12External_DAC9DAC_writeEt+0x44>)
 800031c:	89fb      	ldrh	r3, [r7, #14]
 800031e:	60d3      	str	r3, [r2, #12]
}
 8000320:	bf00      	nop
 8000322:	3714      	adds	r7, #20
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr
 800032c:	40013000 	.word	0x40013000

08000330 <_Z13testWaveformsR12External_DAC>:
#include "main.h"
#include "ExternalDAC.h"

void testWaveforms(External_DAC& dac);

void testWaveforms(External_DAC& dac) {
 8000330:	b580      	push	{r7, lr}
 8000332:	b08c      	sub	sp, #48	; 0x30
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
    int arraySize = 256;  // Replace with the actual size of your waveform arrays
 8000338:	f44f 7380 	mov.w	r3, #256	; 0x100
 800033c:	60fb      	str	r3, [r7, #12]
    int delayTime = 1;  // Delay time in milliseconds, adjust as needed
 800033e:	2301      	movs	r3, #1
 8000340:	60bb      	str	r3, [r7, #8]

    // Test Sine Wave
    for(int i = 0; i < 5; i++){
 8000342:	2300      	movs	r3, #0
 8000344:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000346:	e018      	b.n	800037a <_Z13testWaveformsR12External_DAC+0x4a>
    for (int i = 0; i < arraySize; ++i) {
 8000348:	2300      	movs	r3, #0
 800034a:	62bb      	str	r3, [r7, #40]	; 0x28
 800034c:	e00e      	b.n	800036c <_Z13testWaveformsR12External_DAC+0x3c>
        dac.DAC_write(sine_wave[i]);
 800034e:	4a3d      	ldr	r2, [pc, #244]	; (8000444 <_Z13testWaveformsR12External_DAC+0x114>)
 8000350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000352:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000356:	4619      	mov	r1, r3
 8000358:	6878      	ldr	r0, [r7, #4]
 800035a:	f7ff ffc5 	bl	80002e8 <_ZN12External_DAC9DAC_writeEt>
        HAL_Delay(delayTime);
 800035e:	68bb      	ldr	r3, [r7, #8]
 8000360:	4618      	mov	r0, r3
 8000362:	f000 f98f 	bl	8000684 <HAL_Delay>
    for (int i = 0; i < arraySize; ++i) {
 8000366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000368:	3301      	adds	r3, #1
 800036a:	62bb      	str	r3, [r7, #40]	; 0x28
 800036c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	429a      	cmp	r2, r3
 8000372:	dbec      	blt.n	800034e <_Z13testWaveformsR12External_DAC+0x1e>
    for(int i = 0; i < 5; i++){
 8000374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000376:	3301      	adds	r3, #1
 8000378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800037a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800037c:	2b04      	cmp	r3, #4
 800037e:	dde3      	ble.n	8000348 <_Z13testWaveformsR12External_DAC+0x18>
    }
    }

    // Test Square Wave
    for(int i = 0; i < 5; i++){
 8000380:	2300      	movs	r3, #0
 8000382:	627b      	str	r3, [r7, #36]	; 0x24
 8000384:	e018      	b.n	80003b8 <_Z13testWaveformsR12External_DAC+0x88>
    for (int i = 0; i < arraySize; ++i) {
 8000386:	2300      	movs	r3, #0
 8000388:	623b      	str	r3, [r7, #32]
 800038a:	e00e      	b.n	80003aa <_Z13testWaveformsR12External_DAC+0x7a>
    	dac.DAC_write(square_wave[i]);
 800038c:	4a2e      	ldr	r2, [pc, #184]	; (8000448 <_Z13testWaveformsR12External_DAC+0x118>)
 800038e:	6a3b      	ldr	r3, [r7, #32]
 8000390:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000394:	4619      	mov	r1, r3
 8000396:	6878      	ldr	r0, [r7, #4]
 8000398:	f7ff ffa6 	bl	80002e8 <_ZN12External_DAC9DAC_writeEt>
        HAL_Delay(delayTime);
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	4618      	mov	r0, r3
 80003a0:	f000 f970 	bl	8000684 <HAL_Delay>
    for (int i = 0; i < arraySize; ++i) {
 80003a4:	6a3b      	ldr	r3, [r7, #32]
 80003a6:	3301      	adds	r3, #1
 80003a8:	623b      	str	r3, [r7, #32]
 80003aa:	6a3a      	ldr	r2, [r7, #32]
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	429a      	cmp	r2, r3
 80003b0:	dbec      	blt.n	800038c <_Z13testWaveformsR12External_DAC+0x5c>
    for(int i = 0; i < 5; i++){
 80003b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003b4:	3301      	adds	r3, #1
 80003b6:	627b      	str	r3, [r7, #36]	; 0x24
 80003b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003ba:	2b04      	cmp	r3, #4
 80003bc:	dde3      	ble.n	8000386 <_Z13testWaveformsR12External_DAC+0x56>
    }
    }

    // Test Triangle Wave
    for(int i = 0; i < 5; i++){
 80003be:	2300      	movs	r3, #0
 80003c0:	61fb      	str	r3, [r7, #28]
 80003c2:	e018      	b.n	80003f6 <_Z13testWaveformsR12External_DAC+0xc6>
    for (int i = 0; i < arraySize; ++i) {
 80003c4:	2300      	movs	r3, #0
 80003c6:	61bb      	str	r3, [r7, #24]
 80003c8:	e00e      	b.n	80003e8 <_Z13testWaveformsR12External_DAC+0xb8>
    	dac.DAC_write(triangle_wave[i]);
 80003ca:	4a20      	ldr	r2, [pc, #128]	; (800044c <_Z13testWaveformsR12External_DAC+0x11c>)
 80003cc:	69bb      	ldr	r3, [r7, #24]
 80003ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003d2:	4619      	mov	r1, r3
 80003d4:	6878      	ldr	r0, [r7, #4]
 80003d6:	f7ff ff87 	bl	80002e8 <_ZN12External_DAC9DAC_writeEt>
        HAL_Delay(delayTime);
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	4618      	mov	r0, r3
 80003de:	f000 f951 	bl	8000684 <HAL_Delay>
    for (int i = 0; i < arraySize; ++i) {
 80003e2:	69bb      	ldr	r3, [r7, #24]
 80003e4:	3301      	adds	r3, #1
 80003e6:	61bb      	str	r3, [r7, #24]
 80003e8:	69ba      	ldr	r2, [r7, #24]
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	dbec      	blt.n	80003ca <_Z13testWaveformsR12External_DAC+0x9a>
    for(int i = 0; i < 5; i++){
 80003f0:	69fb      	ldr	r3, [r7, #28]
 80003f2:	3301      	adds	r3, #1
 80003f4:	61fb      	str	r3, [r7, #28]
 80003f6:	69fb      	ldr	r3, [r7, #28]
 80003f8:	2b04      	cmp	r3, #4
 80003fa:	dde3      	ble.n	80003c4 <_Z13testWaveformsR12External_DAC+0x94>
    }
    }

    // Test Sawtooth Wave
    for(int i = 0; i < 5; i++){
 80003fc:	2300      	movs	r3, #0
 80003fe:	617b      	str	r3, [r7, #20]
 8000400:	e018      	b.n	8000434 <_Z13testWaveformsR12External_DAC+0x104>
    for (int i = 0; i < arraySize; ++i) {
 8000402:	2300      	movs	r3, #0
 8000404:	613b      	str	r3, [r7, #16]
 8000406:	e00e      	b.n	8000426 <_Z13testWaveformsR12External_DAC+0xf6>
    	dac.DAC_write(sawtooth_wave[i]);
 8000408:	4a11      	ldr	r2, [pc, #68]	; (8000450 <_Z13testWaveformsR12External_DAC+0x120>)
 800040a:	693b      	ldr	r3, [r7, #16]
 800040c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000410:	4619      	mov	r1, r3
 8000412:	6878      	ldr	r0, [r7, #4]
 8000414:	f7ff ff68 	bl	80002e8 <_ZN12External_DAC9DAC_writeEt>
        HAL_Delay(delayTime);
 8000418:	68bb      	ldr	r3, [r7, #8]
 800041a:	4618      	mov	r0, r3
 800041c:	f000 f932 	bl	8000684 <HAL_Delay>
    for (int i = 0; i < arraySize; ++i) {
 8000420:	693b      	ldr	r3, [r7, #16]
 8000422:	3301      	adds	r3, #1
 8000424:	613b      	str	r3, [r7, #16]
 8000426:	693a      	ldr	r2, [r7, #16]
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	429a      	cmp	r2, r3
 800042c:	dbec      	blt.n	8000408 <_Z13testWaveformsR12External_DAC+0xd8>
    for(int i = 0; i < 5; i++){
 800042e:	697b      	ldr	r3, [r7, #20]
 8000430:	3301      	adds	r3, #1
 8000432:	617b      	str	r3, [r7, #20]
 8000434:	697b      	ldr	r3, [r7, #20]
 8000436:	2b04      	cmp	r3, #4
 8000438:	dde3      	ble.n	8000402 <_Z13testWaveformsR12External_DAC+0xd2>
    }
    }
}
 800043a:	bf00      	nop
 800043c:	bf00      	nop
 800043e:	3730      	adds	r7, #48	; 0x30
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	080009c4 	.word	0x080009c4
 8000448:	08000bc4 	.word	0x08000bc4
 800044c:	08000fc4 	.word	0x08000fc4
 8000450:	08000dc4 	.word	0x08000dc4

08000454 <main>:

int main()
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0

	HAL_Init();
 800045a:	f000 f897 	bl	800058c <HAL_Init>
	External_DAC dac;
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	4618      	mov	r0, r3
 8000462:	f7ff feb1 	bl	80001c8 <_ZN12External_DACC1Ev>
	dac.DAC_init();
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	4618      	mov	r0, r3
 800046a:	f7ff fedd 	bl	8000228 <_ZN12External_DAC8DAC_initEv>

	while(1)
	{
		testWaveforms(dac);
 800046e:	1d3b      	adds	r3, r7, #4
 8000470:	4618      	mov	r0, r3
 8000472:	f7ff ff5d 	bl	8000330 <_Z13testWaveformsR12External_DAC>
 8000476:	e7fa      	b.n	800046e <main+0x1a>

08000478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800047e:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <HAL_MspInit+0x44>)
 8000480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000482:	4a0e      	ldr	r2, [pc, #56]	; (80004bc <HAL_MspInit+0x44>)
 8000484:	f043 0301 	orr.w	r3, r3, #1
 8000488:	6613      	str	r3, [r2, #96]	; 0x60
 800048a:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <HAL_MspInit+0x44>)
 800048c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800048e:	f003 0301 	and.w	r3, r3, #1
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000496:	4b09      	ldr	r3, [pc, #36]	; (80004bc <HAL_MspInit+0x44>)
 8000498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800049a:	4a08      	ldr	r2, [pc, #32]	; (80004bc <HAL_MspInit+0x44>)
 800049c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004a0:	6593      	str	r3, [r2, #88]	; 0x58
 80004a2:	4b06      	ldr	r3, [pc, #24]	; (80004bc <HAL_MspInit+0x44>)
 80004a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004aa:	603b      	str	r3, [r7, #0]
 80004ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ae:	bf00      	nop
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	40021000 	.word	0x40021000

080004c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004c4:	e7fe      	b.n	80004c4 <NMI_Handler+0x4>

080004c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ca:	e7fe      	b.n	80004ca <HardFault_Handler+0x4>

080004cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004d0:	e7fe      	b.n	80004d0 <MemManage_Handler+0x4>

080004d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004d6:	e7fe      	b.n	80004d6 <BusFault_Handler+0x4>

080004d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004dc:	e7fe      	b.n	80004dc <UsageFault_Handler+0x4>

080004de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr

080004fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr

08000508 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800050c:	f000 f89a 	bl	8000644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}

08000514 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000518:	4b06      	ldr	r3, [pc, #24]	; (8000534 <SystemInit+0x20>)
 800051a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800051e:	4a05      	ldr	r2, [pc, #20]	; (8000534 <SystemInit+0x20>)
 8000520:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000524:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	e000ed00 	.word	0xe000ed00

08000538 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000538:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000570 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800053c:	f7ff ffea 	bl	8000514 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000540:	480c      	ldr	r0, [pc, #48]	; (8000574 <LoopForever+0x6>)
  ldr r1, =_edata
 8000542:	490d      	ldr	r1, [pc, #52]	; (8000578 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000544:	4a0d      	ldr	r2, [pc, #52]	; (800057c <LoopForever+0xe>)
  movs r3, #0
 8000546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000548:	e002      	b.n	8000550 <LoopCopyDataInit>

0800054a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800054a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800054c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800054e:	3304      	adds	r3, #4

08000550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000554:	d3f9      	bcc.n	800054a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000556:	4a0a      	ldr	r2, [pc, #40]	; (8000580 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000558:	4c0a      	ldr	r4, [pc, #40]	; (8000584 <LoopForever+0x16>)
  movs r3, #0
 800055a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800055c:	e001      	b.n	8000562 <LoopFillZerobss>

0800055e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800055e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000560:	3204      	adds	r2, #4

08000562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000564:	d3fb      	bcc.n	800055e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000566:	f000 f9af 	bl	80008c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800056a:	f7ff ff73 	bl	8000454 <main>

0800056e <LoopForever>:

LoopForever:
    b LoopForever
 800056e:	e7fe      	b.n	800056e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000570:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000578:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800057c:	080011dc 	.word	0x080011dc
  ldr r2, =_sbss
 8000580:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000584:	200001bc 	.word	0x200001bc

08000588 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000588:	e7fe      	b.n	8000588 <ADC1_2_IRQHandler>
	...

0800058c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000592:	2300      	movs	r3, #0
 8000594:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000596:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <HAL_Init+0x3c>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a0b      	ldr	r2, [pc, #44]	; (80005c8 <HAL_Init+0x3c>)
 800059c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a2:	2003      	movs	r0, #3
 80005a4:	f000 f944 	bl	8000830 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005a8:	2000      	movs	r0, #0
 80005aa:	f000 f80f 	bl	80005cc <HAL_InitTick>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d002      	beq.n	80005ba <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80005b4:	2301      	movs	r3, #1
 80005b6:	71fb      	strb	r3, [r7, #7]
 80005b8:	e001      	b.n	80005be <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005ba:	f7ff ff5d 	bl	8000478 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005be:	79fb      	ldrb	r3, [r7, #7]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40022000 	.word	0x40022000

080005cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005d4:	2300      	movs	r3, #0
 80005d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005d8:	4b17      	ldr	r3, [pc, #92]	; (8000638 <HAL_InitTick+0x6c>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d023      	beq.n	8000628 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005e0:	4b16      	ldr	r3, [pc, #88]	; (800063c <HAL_InitTick+0x70>)
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	4b14      	ldr	r3, [pc, #80]	; (8000638 <HAL_InitTick+0x6c>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	4619      	mov	r1, r3
 80005ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80005f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f941 	bl	800087e <HAL_SYSTICK_Config>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d10f      	bne.n	8000622 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b0f      	cmp	r3, #15
 8000606:	d809      	bhi.n	800061c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000608:	2200      	movs	r2, #0
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	f04f 30ff 	mov.w	r0, #4294967295
 8000610:	f000 f919 	bl	8000846 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000614:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <HAL_InitTick+0x74>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6013      	str	r3, [r2, #0]
 800061a:	e007      	b.n	800062c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800061c:	2301      	movs	r3, #1
 800061e:	73fb      	strb	r3, [r7, #15]
 8000620:	e004      	b.n	800062c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000622:	2301      	movs	r3, #1
 8000624:	73fb      	strb	r3, [r7, #15]
 8000626:	e001      	b.n	800062c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000628:	2301      	movs	r3, #1
 800062a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800062c:	7bfb      	ldrb	r3, [r7, #15]
}
 800062e:	4618      	mov	r0, r3
 8000630:	3710      	adds	r7, #16
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000008 	.word	0x20000008
 800063c:	20000000 	.word	0x20000000
 8000640:	20000004 	.word	0x20000004

08000644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <HAL_IncTick+0x20>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	461a      	mov	r2, r3
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_IncTick+0x24>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4413      	add	r3, r2
 8000654:	4a04      	ldr	r2, [pc, #16]	; (8000668 <HAL_IncTick+0x24>)
 8000656:	6013      	str	r3, [r2, #0]
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	20000008 	.word	0x20000008
 8000668:	20000078 	.word	0x20000078

0800066c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return uwTick;
 8000670:	4b03      	ldr	r3, [pc, #12]	; (8000680 <HAL_GetTick+0x14>)
 8000672:	681b      	ldr	r3, [r3, #0]
}
 8000674:	4618      	mov	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	20000078 	.word	0x20000078

08000684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800068c:	f7ff ffee 	bl	800066c <HAL_GetTick>
 8000690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800069c:	d005      	beq.n	80006aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <HAL_Delay+0x44>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	461a      	mov	r2, r3
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	4413      	add	r3, r2
 80006a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006aa:	bf00      	nop
 80006ac:	f7ff ffde 	bl	800066c <HAL_GetTick>
 80006b0:	4602      	mov	r2, r0
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	68fa      	ldr	r2, [r7, #12]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d8f7      	bhi.n	80006ac <HAL_Delay+0x28>
  {
  }
}
 80006bc:	bf00      	nop
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000008 	.word	0x20000008

080006cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	f003 0307 	and.w	r3, r3, #7
 80006da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <__NVIC_SetPriorityGrouping+0x44>)
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006e2:	68ba      	ldr	r2, [r7, #8]
 80006e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006e8:	4013      	ands	r3, r2
 80006ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006fe:	4a04      	ldr	r2, [pc, #16]	; (8000710 <__NVIC_SetPriorityGrouping+0x44>)
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	60d3      	str	r3, [r2, #12]
}
 8000704:	bf00      	nop
 8000706:	3714      	adds	r7, #20
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000718:	4b04      	ldr	r3, [pc, #16]	; (800072c <__NVIC_GetPriorityGrouping+0x18>)
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	0a1b      	lsrs	r3, r3, #8
 800071e:	f003 0307 	and.w	r3, r3, #7
}
 8000722:	4618      	mov	r0, r3
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	6039      	str	r1, [r7, #0]
 800073a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800073c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000740:	2b00      	cmp	r3, #0
 8000742:	db0a      	blt.n	800075a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	b2da      	uxtb	r2, r3
 8000748:	490c      	ldr	r1, [pc, #48]	; (800077c <__NVIC_SetPriority+0x4c>)
 800074a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074e:	0112      	lsls	r2, r2, #4
 8000750:	b2d2      	uxtb	r2, r2
 8000752:	440b      	add	r3, r1
 8000754:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000758:	e00a      	b.n	8000770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4908      	ldr	r1, [pc, #32]	; (8000780 <__NVIC_SetPriority+0x50>)
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	f003 030f 	and.w	r3, r3, #15
 8000766:	3b04      	subs	r3, #4
 8000768:	0112      	lsls	r2, r2, #4
 800076a:	b2d2      	uxtb	r2, r2
 800076c:	440b      	add	r3, r1
 800076e:	761a      	strb	r2, [r3, #24]
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000e100 	.word	0xe000e100
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000784:	b480      	push	{r7}
 8000786:	b089      	sub	sp, #36	; 0x24
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	f003 0307 	and.w	r3, r3, #7
 8000796:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000798:	69fb      	ldr	r3, [r7, #28]
 800079a:	f1c3 0307 	rsb	r3, r3, #7
 800079e:	2b04      	cmp	r3, #4
 80007a0:	bf28      	it	cs
 80007a2:	2304      	movcs	r3, #4
 80007a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	3304      	adds	r3, #4
 80007aa:	2b06      	cmp	r3, #6
 80007ac:	d902      	bls.n	80007b4 <NVIC_EncodePriority+0x30>
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	3b03      	subs	r3, #3
 80007b2:	e000      	b.n	80007b6 <NVIC_EncodePriority+0x32>
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b8:	f04f 32ff 	mov.w	r2, #4294967295
 80007bc:	69bb      	ldr	r3, [r7, #24]
 80007be:	fa02 f303 	lsl.w	r3, r2, r3
 80007c2:	43da      	mvns	r2, r3
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	401a      	ands	r2, r3
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007cc:	f04f 31ff 	mov.w	r1, #4294967295
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	fa01 f303 	lsl.w	r3, r1, r3
 80007d6:	43d9      	mvns	r1, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007dc:	4313      	orrs	r3, r2
         );
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3724      	adds	r7, #36	; 0x24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
	...

080007ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	3b01      	subs	r3, #1
 80007f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007fc:	d301      	bcc.n	8000802 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007fe:	2301      	movs	r3, #1
 8000800:	e00f      	b.n	8000822 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000802:	4a0a      	ldr	r2, [pc, #40]	; (800082c <SysTick_Config+0x40>)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3b01      	subs	r3, #1
 8000808:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800080a:	210f      	movs	r1, #15
 800080c:	f04f 30ff 	mov.w	r0, #4294967295
 8000810:	f7ff ff8e 	bl	8000730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <SysTick_Config+0x40>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800081a:	4b04      	ldr	r3, [pc, #16]	; (800082c <SysTick_Config+0x40>)
 800081c:	2207      	movs	r2, #7
 800081e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000820:	2300      	movs	r3, #0
}
 8000822:	4618      	mov	r0, r3
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	e000e010 	.word	0xe000e010

08000830 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f7ff ff47 	bl	80006cc <__NVIC_SetPriorityGrouping>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b086      	sub	sp, #24
 800084a:	af00      	add	r7, sp, #0
 800084c:	4603      	mov	r3, r0
 800084e:	60b9      	str	r1, [r7, #8]
 8000850:	607a      	str	r2, [r7, #4]
 8000852:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000858:	f7ff ff5c 	bl	8000714 <__NVIC_GetPriorityGrouping>
 800085c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	68b9      	ldr	r1, [r7, #8]
 8000862:	6978      	ldr	r0, [r7, #20]
 8000864:	f7ff ff8e 	bl	8000784 <NVIC_EncodePriority>
 8000868:	4602      	mov	r2, r0
 800086a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800086e:	4611      	mov	r1, r2
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff ff5d 	bl	8000730 <__NVIC_SetPriority>
}
 8000876:	bf00      	nop
 8000878:	3718      	adds	r7, #24
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b082      	sub	sp, #8
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f7ff ffb0 	bl	80007ec <SysTick_Config>
 800088c:	4603      	mov	r3, r0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <_ZdlPvj>:
 8000896:	f000 b800 	b.w	800089a <_ZdlPv>

0800089a <_ZdlPv>:
 800089a:	f000 b801 	b.w	80008a0 <free>
	...

080008a0 <free>:
 80008a0:	4b02      	ldr	r3, [pc, #8]	; (80008ac <free+0xc>)
 80008a2:	4601      	mov	r1, r0
 80008a4:	6818      	ldr	r0, [r3, #0]
 80008a6:	f000 b835 	b.w	8000914 <_free_r>
 80008aa:	bf00      	nop
 80008ac:	20000058 	.word	0x20000058

080008b0 <__malloc_lock>:
 80008b0:	4801      	ldr	r0, [pc, #4]	; (80008b8 <__malloc_lock+0x8>)
 80008b2:	f000 b82d 	b.w	8000910 <__retarget_lock_acquire_recursive>
 80008b6:	bf00      	nop
 80008b8:	200001b8 	.word	0x200001b8

080008bc <__malloc_unlock>:
 80008bc:	4801      	ldr	r0, [pc, #4]	; (80008c4 <__malloc_unlock+0x8>)
 80008be:	f000 b828 	b.w	8000912 <__retarget_lock_release_recursive>
 80008c2:	bf00      	nop
 80008c4:	200001b8 	.word	0x200001b8

080008c8 <__libc_init_array>:
 80008c8:	b570      	push	{r4, r5, r6, lr}
 80008ca:	4d0d      	ldr	r5, [pc, #52]	; (8000900 <__libc_init_array+0x38>)
 80008cc:	4c0d      	ldr	r4, [pc, #52]	; (8000904 <__libc_init_array+0x3c>)
 80008ce:	1b64      	subs	r4, r4, r5
 80008d0:	10a4      	asrs	r4, r4, #2
 80008d2:	2600      	movs	r6, #0
 80008d4:	42a6      	cmp	r6, r4
 80008d6:	d109      	bne.n	80008ec <__libc_init_array+0x24>
 80008d8:	4d0b      	ldr	r5, [pc, #44]	; (8000908 <__libc_init_array+0x40>)
 80008da:	4c0c      	ldr	r4, [pc, #48]	; (800090c <__libc_init_array+0x44>)
 80008dc:	f000 f866 	bl	80009ac <_init>
 80008e0:	1b64      	subs	r4, r4, r5
 80008e2:	10a4      	asrs	r4, r4, #2
 80008e4:	2600      	movs	r6, #0
 80008e6:	42a6      	cmp	r6, r4
 80008e8:	d105      	bne.n	80008f6 <__libc_init_array+0x2e>
 80008ea:	bd70      	pop	{r4, r5, r6, pc}
 80008ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80008f0:	4798      	blx	r3
 80008f2:	3601      	adds	r6, #1
 80008f4:	e7ee      	b.n	80008d4 <__libc_init_array+0xc>
 80008f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80008fa:	4798      	blx	r3
 80008fc:	3601      	adds	r6, #1
 80008fe:	e7f2      	b.n	80008e6 <__libc_init_array+0x1e>
 8000900:	080011d4 	.word	0x080011d4
 8000904:	080011d4 	.word	0x080011d4
 8000908:	080011d4 	.word	0x080011d4
 800090c:	080011d8 	.word	0x080011d8

08000910 <__retarget_lock_acquire_recursive>:
 8000910:	4770      	bx	lr

08000912 <__retarget_lock_release_recursive>:
 8000912:	4770      	bx	lr

08000914 <_free_r>:
 8000914:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000916:	2900      	cmp	r1, #0
 8000918:	d044      	beq.n	80009a4 <_free_r+0x90>
 800091a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800091e:	9001      	str	r0, [sp, #4]
 8000920:	2b00      	cmp	r3, #0
 8000922:	f1a1 0404 	sub.w	r4, r1, #4
 8000926:	bfb8      	it	lt
 8000928:	18e4      	addlt	r4, r4, r3
 800092a:	f7ff ffc1 	bl	80008b0 <__malloc_lock>
 800092e:	4a1e      	ldr	r2, [pc, #120]	; (80009a8 <_free_r+0x94>)
 8000930:	9801      	ldr	r0, [sp, #4]
 8000932:	6813      	ldr	r3, [r2, #0]
 8000934:	b933      	cbnz	r3, 8000944 <_free_r+0x30>
 8000936:	6063      	str	r3, [r4, #4]
 8000938:	6014      	str	r4, [r2, #0]
 800093a:	b003      	add	sp, #12
 800093c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000940:	f7ff bfbc 	b.w	80008bc <__malloc_unlock>
 8000944:	42a3      	cmp	r3, r4
 8000946:	d908      	bls.n	800095a <_free_r+0x46>
 8000948:	6825      	ldr	r5, [r4, #0]
 800094a:	1961      	adds	r1, r4, r5
 800094c:	428b      	cmp	r3, r1
 800094e:	bf01      	itttt	eq
 8000950:	6819      	ldreq	r1, [r3, #0]
 8000952:	685b      	ldreq	r3, [r3, #4]
 8000954:	1949      	addeq	r1, r1, r5
 8000956:	6021      	streq	r1, [r4, #0]
 8000958:	e7ed      	b.n	8000936 <_free_r+0x22>
 800095a:	461a      	mov	r2, r3
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	b10b      	cbz	r3, 8000964 <_free_r+0x50>
 8000960:	42a3      	cmp	r3, r4
 8000962:	d9fa      	bls.n	800095a <_free_r+0x46>
 8000964:	6811      	ldr	r1, [r2, #0]
 8000966:	1855      	adds	r5, r2, r1
 8000968:	42a5      	cmp	r5, r4
 800096a:	d10b      	bne.n	8000984 <_free_r+0x70>
 800096c:	6824      	ldr	r4, [r4, #0]
 800096e:	4421      	add	r1, r4
 8000970:	1854      	adds	r4, r2, r1
 8000972:	42a3      	cmp	r3, r4
 8000974:	6011      	str	r1, [r2, #0]
 8000976:	d1e0      	bne.n	800093a <_free_r+0x26>
 8000978:	681c      	ldr	r4, [r3, #0]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	6053      	str	r3, [r2, #4]
 800097e:	440c      	add	r4, r1
 8000980:	6014      	str	r4, [r2, #0]
 8000982:	e7da      	b.n	800093a <_free_r+0x26>
 8000984:	d902      	bls.n	800098c <_free_r+0x78>
 8000986:	230c      	movs	r3, #12
 8000988:	6003      	str	r3, [r0, #0]
 800098a:	e7d6      	b.n	800093a <_free_r+0x26>
 800098c:	6825      	ldr	r5, [r4, #0]
 800098e:	1961      	adds	r1, r4, r5
 8000990:	428b      	cmp	r3, r1
 8000992:	bf04      	itt	eq
 8000994:	6819      	ldreq	r1, [r3, #0]
 8000996:	685b      	ldreq	r3, [r3, #4]
 8000998:	6063      	str	r3, [r4, #4]
 800099a:	bf04      	itt	eq
 800099c:	1949      	addeq	r1, r1, r5
 800099e:	6021      	streq	r1, [r4, #0]
 80009a0:	6054      	str	r4, [r2, #4]
 80009a2:	e7ca      	b.n	800093a <_free_r+0x26>
 80009a4:	b003      	add	sp, #12
 80009a6:	bd30      	pop	{r4, r5, pc}
 80009a8:	2000007c 	.word	0x2000007c

080009ac <_init>:
 80009ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ae:	bf00      	nop
 80009b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009b2:	bc08      	pop	{r3}
 80009b4:	469e      	mov	lr, r3
 80009b6:	4770      	bx	lr

080009b8 <_fini>:
 80009b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ba:	bf00      	nop
 80009bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009be:	bc08      	pop	{r3}
 80009c0:	469e      	mov	lr, r3
 80009c2:	4770      	bx	lr
