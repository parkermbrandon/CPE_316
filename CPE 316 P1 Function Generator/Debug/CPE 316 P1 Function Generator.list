
CPE 316 P1 Function Generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bb4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000824  08000d3c  08000d3c  00010d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001560  08001560  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001560  08001560  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001560  08001560  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001560  08001560  00011560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001564  08001564  00011564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000005c  080015c4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  080015c4  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003f88  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000fac  00000000  00000000  00024057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003d8  00000000  00000000  00025008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002bd  00000000  00000000  000253e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000263c2  00000000  00000000  0002569d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004854  00000000  00000000  0004ba5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2d17  00000000  00000000  000502b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001078  00000000  00000000  00132fcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00134044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000d24 	.word	0x08000d24

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08000d24 	.word	0x08000d24

080001c8 <_ZN12External_DACC1Ev>:
    2559, 2544, 2530, 2515, 2501, 2486, 2472, 2457, 2443, 2428, 2413, 2399, 2384, 2370, 2355, 2341,
    2326, 2312, 2297, 2283, 2268, 2254, 2239, 2224, 2210, 2195, 2181, 2166, 2152, 2137, 2123, 2108,
    2094, 2079, 2065, 2050, 2035, 2021, 2006, 1992, 1977, 1963, 1948, 1934, 1919, 1905, 1890, 1876,
};

External_DAC::External_DAC() {
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	4a04      	ldr	r2, [pc, #16]	; (80001e4 <_ZN12External_DACC1Ev+0x1c>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	601a      	str	r2, [r3, #0]

}
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4618      	mov	r0, r3
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e2:	4770      	bx	lr
 80001e4:	08001558 	.word	0x08001558

080001e8 <_ZN12External_DACD1Ev>:

External_DAC::~External_DAC() {
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	4a04      	ldr	r2, [pc, #16]	; (8000204 <_ZN12External_DACD1Ev+0x1c>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	601a      	str	r2, [r3, #0]
}
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	4618      	mov	r0, r3
 80001fa:	370c      	adds	r7, #12
 80001fc:	46bd      	mov	sp, r7
 80001fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000202:	4770      	bx	lr
 8000204:	08001558 	.word	0x08001558

08000208 <_ZN12External_DACD0Ev>:
External_DAC::~External_DAC() {
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
}
 8000210:	6878      	ldr	r0, [r7, #4]
 8000212:	f7ff ffe9 	bl	80001e8 <_ZN12External_DACD1Ev>
 8000216:	2104      	movs	r1, #4
 8000218:	6878      	ldr	r0, [r7, #4]
 800021a:	f000 fcf8 	bl	8000c0e <_ZdlPvj>
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	4618      	mov	r0, r3
 8000222:	3708      	adds	r7, #8
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}

08000228 <_ZN12External_DAC8DAC_initEv>:

void External_DAC::DAC_init(void)
{
 8000228:	b480      	push	{r7}
 800022a:	b083      	sub	sp, #12
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
	  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
 8000230:	4b2b      	ldr	r3, [pc, #172]	; (80002e0 <_ZN12External_DAC8DAC_initEv+0xb8>)
 8000232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000234:	4a2a      	ldr	r2, [pc, #168]	; (80002e0 <_ZN12External_DAC8DAC_initEv+0xb8>)
 8000236:	f043 0301 	orr.w	r3, r3, #1
 800023a:	64d3      	str	r3, [r2, #76]	; 0x4c

	  GPIOA->MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 |		// mask function
 800023c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000246:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800024a:	6013      	str	r3, [r2, #0]
						GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
	  GPIOA->MODER |= (GPIO_MODER_MODE4_1 | GPIO_MODER_MODE5_1 |	// enable alternate function
 800024c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000256:	f443 432a 	orr.w	r3, r3, #43520	; 0xaa00
 800025a:	6013      	str	r3, [r2, #0]
					   GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1);

	  GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL4 | GPIO_AFRL_AFSEL5 |		// mask AF selection
 800025c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000260:	6a1b      	ldr	r3, [r3, #32]
 8000262:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000266:	b29b      	uxth	r3, r3
 8000268:	6213      	str	r3, [r2, #32]
						  GPIO_AFRL_AFSEL6 | GPIO_AFRL_AFSEL7);
	  GPIOA->AFR[0] |= ((5 << GPIO_AFRL_AFSEL4_Pos) |				// select SPI_1 (AF5)
 800026a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800026e:	6a1b      	ldr	r3, [r3, #32]
 8000270:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000274:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000278:	f443 03aa 	orr.w	r3, r3, #5570560	; 0x550000
 800027c:	6213      	str	r3, [r2, #32]
						(5 << GPIO_AFRL_AFSEL5_Pos) |
						(5 << GPIO_AFRL_AFSEL6_Pos) |
						(5 << GPIO_AFRL_AFSEL7_Pos));

	  GPIOA->OTYPER &= ~(GPIO_OTYPER_OT4 | GPIO_OTYPER_OT5 |		// push-pull output
 800027e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000282:	685b      	ldr	r3, [r3, #4]
 8000284:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000288:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800028c:	6053      	str	r3, [r2, #4]
						  GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7);

	  GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD4 | GPIO_PUPDR_PUPD5 |		// no pull ups or pull downs
 800028e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000292:	68db      	ldr	r3, [r3, #12]
 8000294:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000298:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800029c:	60d3      	str	r3, [r2, #12]
						GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7);

	  GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED4 | 					// low speed
 800029e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002a2:	689b      	ldr	r3, [r3, #8]
 80002a4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80002ac:	6093      	str	r3, [r2, #8]
						  GPIO_OSPEEDR_OSPEED5 |
						  GPIO_OSPEEDR_OSPEED6 |
						  GPIO_OSPEEDR_OSPEED7);

	  // configure SPI 1
	  RCC->APB2ENR |= (RCC_APB2ENR_SPI1EN);		// enable SPI1 clock
 80002ae:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <_ZN12External_DAC8DAC_initEv+0xb8>)
 80002b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002b2:	4a0b      	ldr	r2, [pc, #44]	; (80002e0 <_ZN12External_DAC8DAC_initEv+0xb8>)
 80002b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002b8:	6613      	str	r3, [r2, #96]	; 0x60
	  SPI1->CR1 = (SPI_CR1_MSTR);				// enable master mode, fck/2, hardware CS, MSB first, full duplex
 80002ba:	4b0a      	ldr	r3, [pc, #40]	; (80002e4 <_ZN12External_DAC8DAC_initEv+0xbc>)
 80002bc:	2204      	movs	r2, #4
 80002be:	601a      	str	r2, [r3, #0]
	  SPI1->CR2 = (SPI_CR2_SSOE |				// enable CS output
 80002c0:	4b08      	ldr	r3, [pc, #32]	; (80002e4 <_ZN12External_DAC8DAC_initEv+0xbc>)
 80002c2:	f640 720c 	movw	r2, #3852	; 0xf0c
 80002c6:	605a      	str	r2, [r3, #4]
				   SPI_CR2_NSSP |				// create CS pulse
				   (0xF << SPI_CR2_DS_Pos));	// 16-bit data frames
	  SPI1->CR1 |= (SPI_CR1_SPE);				// enable SPI
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <_ZN12External_DAC8DAC_initEv+0xbc>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a05      	ldr	r2, [pc, #20]	; (80002e4 <_ZN12External_DAC8DAC_initEv+0xbc>)
 80002ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002d2:	6013      	str	r3, [r2, #0]
}
 80002d4:	bf00      	nop
 80002d6:	370c      	adds	r7, #12
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr
 80002e0:	40021000 	.word	0x40021000
 80002e4:	40013000 	.word	0x40013000

080002e8 <_ZN12External_DAC9DAC_writeEt>:

// Write a 12-bit value to the DAC
void External_DAC::DAC_write(uint16_t value)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	460b      	mov	r3, r1
 80002f2:	807b      	strh	r3, [r7, #2]
    uint16_t spi_data = (value & 0x0FFF) | 0x3000;  // 12-bit value, OR 0x3000 sets the Gain and buffer in the DAC see page 18 of datasheet
 80002f4:	887b      	ldrh	r3, [r7, #2]
 80002f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002fa:	b29b      	uxth	r3, r3
 80002fc:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000300:	81fb      	strh	r3, [r7, #14]
    while(!(SPI1->SR & SPI_SR_TXE));  // Wait for TXE (Transmit buffer empty)
 8000302:	bf00      	nop
 8000304:	4b09      	ldr	r3, [pc, #36]	; (800032c <_ZN12External_DAC9DAC_writeEt+0x44>)
 8000306:	689b      	ldr	r3, [r3, #8]
 8000308:	f003 0302 	and.w	r3, r3, #2
 800030c:	2b00      	cmp	r3, #0
 800030e:	bf0c      	ite	eq
 8000310:	2301      	moveq	r3, #1
 8000312:	2300      	movne	r3, #0
 8000314:	b2db      	uxtb	r3, r3
 8000316:	2b00      	cmp	r3, #0
 8000318:	d1f4      	bne.n	8000304 <_ZN12External_DAC9DAC_writeEt+0x1c>
    SPI1->DR = spi_data;  // Send the data
 800031a:	4a04      	ldr	r2, [pc, #16]	; (800032c <_ZN12External_DAC9DAC_writeEt+0x44>)
 800031c:	89fb      	ldrh	r3, [r7, #14]
 800031e:	60d3      	str	r3, [r2, #12]
}
 8000320:	bf00      	nop
 8000322:	3714      	adds	r7, #20
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr
 800032c:	40013000 	.word	0x40013000

08000330 <_ZN6KeypadC1Ev>:
#include "Keypad.h"

const uint8_t ROWS = 4;  // Four rows
const uint8_t COLS = 3;  // Three columns

Keypad::Keypad() {
 8000330:	b490      	push	{r4, r7}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	4a17      	ldr	r2, [pc, #92]	; (8000398 <_ZN6KeypadC1Ev+0x68>)
 800033c:	461c      	mov	r4, r3
 800033e:	4613      	mov	r3, r2
 8000340:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000342:	6020      	str	r0, [r4, #0]
 8000344:	6061      	str	r1, [r4, #4]
 8000346:	60a2      	str	r2, [r4, #8]
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	4a14      	ldr	r2, [pc, #80]	; (800039c <_ZN6KeypadC1Ev+0x6c>)
 800034c:	330c      	adds	r3, #12
 800034e:	6810      	ldr	r0, [r2, #0]
 8000350:	6018      	str	r0, [r3, #0]
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	4a12      	ldr	r2, [pc, #72]	; (80003a0 <_ZN6KeypadC1Ev+0x70>)
 8000356:	3310      	adds	r3, #16
 8000358:	8811      	ldrh	r1, [r2, #0]
 800035a:	7892      	ldrb	r2, [r2, #2]
 800035c:	8019      	strh	r1, [r3, #0]
 800035e:	709a      	strb	r2, [r3, #2]
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	3313      	adds	r3, #19
 8000364:	2200      	movs	r2, #0
 8000366:	601a      	str	r2, [r3, #0]
 8000368:	605a      	str	r2, [r3, #4]
 800036a:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < ROWS * COLS; ++i)
 800036c:	2300      	movs	r3, #0
 800036e:	60fb      	str	r3, [r7, #12]
 8000370:	e008      	b.n	8000384 <_ZN6KeypadC1Ev+0x54>
	{
		keystates[i] = 0;
 8000372:	687a      	ldr	r2, [r7, #4]
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	4413      	add	r3, r2
 8000378:	3313      	adds	r3, #19
 800037a:	2200      	movs	r2, #0
 800037c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < ROWS * COLS; ++i)
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	3301      	adds	r3, #1
 8000382:	60fb      	str	r3, [r7, #12]
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	2b0b      	cmp	r3, #11
 8000388:	ddf3      	ble.n	8000372 <_ZN6KeypadC1Ev+0x42>
	}
}
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4618      	mov	r0, r3
 800038e:	3710      	adds	r7, #16
 8000390:	46bd      	mov	sp, r7
 8000392:	bc90      	pop	{r4, r7}
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	08000d3c 	.word	0x08000d3c
 800039c:	08000d48 	.word	0x08000d48
 80003a0:	08000d4c 	.word	0x08000d4c

080003a4 <_ZN6Keypad11Keypad_initEv>:

void Keypad::Keypad_init(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b085      	sub	sp, #20
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
    // Enable GPIOA, GPIOB, and GPIOC clocks
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN | RCC_AHB2ENR_GPIOCEN | RCC_AHB2ENR_GPIOAEN;
 80003ac:	4b36      	ldr	r3, [pc, #216]	; (8000488 <_ZN6Keypad11Keypad_initEv+0xe4>)
 80003ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003b0:	4a35      	ldr	r2, [pc, #212]	; (8000488 <_ZN6Keypad11Keypad_initEv+0xe4>)
 80003b2:	f043 0307 	orr.w	r3, r3, #7
 80003b6:	64d3      	str	r3, [r2, #76]	; 0x4c

	// Clear the LED GPIO registers
	GPIOB->MODER &= ~GPIO_MODER_MODER6;
 80003b8:	4b34      	ldr	r3, [pc, #208]	; (800048c <_ZN6Keypad11Keypad_initEv+0xe8>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a33      	ldr	r2, [pc, #204]	; (800048c <_ZN6Keypad11Keypad_initEv+0xe8>)
 80003be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80003c2:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~GPIO_MODER_MODER7;
 80003c4:	4b32      	ldr	r3, [pc, #200]	; (8000490 <_ZN6Keypad11Keypad_initEv+0xec>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a31      	ldr	r2, [pc, #196]	; (8000490 <_ZN6Keypad11Keypad_initEv+0xec>)
 80003ca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80003ce:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODER9 | GPIO_MODER_MODER8);
 80003d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003da:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80003de:	6013      	str	r3, [r2, #0]

	// Set the LED GPIO pins as output
	GPIOB->MODER |= GPIO_MODER_MODER6_0;
 80003e0:	4b2a      	ldr	r3, [pc, #168]	; (800048c <_ZN6Keypad11Keypad_initEv+0xe8>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a29      	ldr	r2, [pc, #164]	; (800048c <_ZN6Keypad11Keypad_initEv+0xe8>)
 80003e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003ea:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODER7_0;
 80003ec:	4b28      	ldr	r3, [pc, #160]	; (8000490 <_ZN6Keypad11Keypad_initEv+0xec>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a27      	ldr	r2, [pc, #156]	; (8000490 <_ZN6Keypad11Keypad_initEv+0xec>)
 80003f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003f6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER9_0 | GPIO_MODER_MODER8_0;
 80003f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000402:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8000406:	6013      	str	r3, [r2, #0]

    // Configure ROWs as input with pull-up
    GPIOB->MODER &= ~(GPIO_MODER_MODER10 | GPIO_MODER_MODER3 | GPIO_MODER_MODER5 | GPIO_MODER_MODER4);
 8000408:	4b20      	ldr	r3, [pc, #128]	; (800048c <_ZN6Keypad11Keypad_initEv+0xe8>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a1f      	ldr	r2, [pc, #124]	; (800048c <_ZN6Keypad11Keypad_initEv+0xe8>)
 800040e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000412:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 8000416:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR |= (GPIO_PUPDR_PUPDR10_0 | GPIO_PUPDR_PUPDR3_0 | GPIO_PUPDR_PUPDR5_0 | GPIO_PUPDR_PUPDR4_0);
 8000418:	4b1c      	ldr	r3, [pc, #112]	; (800048c <_ZN6Keypad11Keypad_initEv+0xe8>)
 800041a:	68db      	ldr	r3, [r3, #12]
 800041c:	4a1b      	ldr	r2, [pc, #108]	; (800048c <_ZN6Keypad11Keypad_initEv+0xe8>)
 800041e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000422:	f443 63a8 	orr.w	r3, r3, #1344	; 0x540
 8000426:	60d3      	str	r3, [r2, #12]

    // Configure COLs as output
    GPIOA->MODER &= ~(GPIO_MODER_MODER12 | GPIO_MODER_MODER0 | GPIO_MODER_MODER1);
 8000428:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000432:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000436:	f023 030f 	bic.w	r3, r3, #15
 800043a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (GPIO_MODER_MODER12_0 | GPIO_MODER_MODER0_0 | GPIO_MODER_MODER1_0);
 800043c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000446:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800044a:	f043 0305 	orr.w	r3, r3, #5
 800044e:	6013      	str	r3, [r2, #0]

    // Initialize columns to high
    for (int c = 0; c < COLS; c++)
 8000450:	2300      	movs	r3, #0
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	e00d      	b.n	8000472 <_ZN6Keypad11Keypad_initEv+0xce>
    {
        GPIOA->BSRR = (1U << colPins[c]);
 8000456:	687a      	ldr	r2, [r7, #4]
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	4413      	add	r3, r2
 800045c:	3310      	adds	r3, #16
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	4619      	mov	r1, r3
 8000462:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000466:	2301      	movs	r3, #1
 8000468:	408b      	lsls	r3, r1
 800046a:	6193      	str	r3, [r2, #24]
    for (int c = 0; c < COLS; c++)
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	3301      	adds	r3, #1
 8000470:	60fb      	str	r3, [r7, #12]
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	2b02      	cmp	r3, #2
 8000476:	ddee      	ble.n	8000456 <_ZN6Keypad11Keypad_initEv+0xb2>
    }
}
 8000478:	bf00      	nop
 800047a:	bf00      	nop
 800047c:	3714      	adds	r7, #20
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	40021000 	.word	0x40021000
 800048c:	48000400 	.word	0x48000400
 8000490:	48000800 	.word	0x48000800

08000494 <_ZN6Keypad4tickEv>:

void Keypad::tick() {
 8000494:	b580      	push	{r7, lr}
 8000496:	b086      	sub	sp, #24
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  for (int c = 0; c < COLS; c++)
 800049c:	2300      	movs	r3, #0
 800049e:	617b      	str	r3, [r7, #20]
 80004a0:	e049      	b.n	8000536 <_ZN6Keypad4tickEv+0xa2>
  {
    GPIOA->BSRR = (1U << (colPins[c] + 16));  // sets the current column pin to low
 80004a2:	687a      	ldr	r2, [r7, #4]
 80004a4:	697b      	ldr	r3, [r7, #20]
 80004a6:	4413      	add	r3, r2
 80004a8:	3310      	adds	r3, #16
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	3310      	adds	r3, #16
 80004ae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004b2:	2101      	movs	r1, #1
 80004b4:	fa01 f303 	lsl.w	r3, r1, r3
 80004b8:	6193      	str	r3, [r2, #24]
    // This is done because the rows are pulled-up. When a button is pressed, this column will be shorted to one of the rows, pulling it to a low state.

    for (int r = 0; r < ROWS; r++)
 80004ba:	2300      	movs	r3, #0
 80004bc:	613b      	str	r3, [r7, #16]
 80004be:	e029      	b.n	8000514 <_ZN6Keypad4tickEv+0x80>
    {
      int i = r * COLS + c;
 80004c0:	693a      	ldr	r2, [r7, #16]
 80004c2:	4613      	mov	r3, r2
 80004c4:	005b      	lsls	r3, r3, #1
 80004c6:	4413      	add	r3, r2
 80004c8:	697a      	ldr	r2, [r7, #20]
 80004ca:	4413      	add	r3, r2
 80004cc:	60fb      	str	r3, [r7, #12]
      bool pressed = !(GPIOB->IDR & (1U << rowPins[r])); // This checks if the current row pin is low (i.e., a button on this row has been pressed).
 80004ce:	4b1f      	ldr	r3, [pc, #124]	; (800054c <_ZN6Keypad4tickEv+0xb8>)
 80004d0:	691a      	ldr	r2, [r3, #16]
 80004d2:	6879      	ldr	r1, [r7, #4]
 80004d4:	693b      	ldr	r3, [r7, #16]
 80004d6:	440b      	add	r3, r1
 80004d8:	330c      	adds	r3, #12
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	4619      	mov	r1, r3
 80004de:	2301      	movs	r3, #1
 80004e0:	408b      	lsls	r3, r1
 80004e2:	4013      	ands	r3, r2
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	bf0c      	ite	eq
 80004e8:	2301      	moveq	r3, #1
 80004ea:	2300      	movne	r3, #0
 80004ec:	72fb      	strb	r3, [r7, #11]

      if (pressed)
 80004ee:	7afb      	ldrb	r3, [r7, #11]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d006      	beq.n	8000502 <_ZN6Keypad4tickEv+0x6e>
      {
        keystates[i] = 1;
 80004f4:	687a      	ldr	r2, [r7, #4]
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	4413      	add	r3, r2
 80004fa:	3313      	adds	r3, #19
 80004fc:	2201      	movs	r2, #1
 80004fe:	701a      	strb	r2, [r3, #0]
 8000500:	e005      	b.n	800050e <_ZN6Keypad4tickEv+0x7a>
      } else {
        keystates[i] = 0;
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	4413      	add	r3, r2
 8000508:	3313      	adds	r3, #19
 800050a:	2200      	movs	r2, #0
 800050c:	701a      	strb	r2, [r3, #0]
    for (int r = 0; r < ROWS; r++)
 800050e:	693b      	ldr	r3, [r7, #16]
 8000510:	3301      	adds	r3, #1
 8000512:	613b      	str	r3, [r7, #16]
 8000514:	693b      	ldr	r3, [r7, #16]
 8000516:	2b03      	cmp	r3, #3
 8000518:	ddd2      	ble.n	80004c0 <_ZN6Keypad4tickEv+0x2c>
      }
    }
    GPIOA->BSRR = (1U << colPins[c]); // After checking all rows for a given column, the column is set back to high
 800051a:	687a      	ldr	r2, [r7, #4]
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	4413      	add	r3, r2
 8000520:	3310      	adds	r3, #16
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	4619      	mov	r1, r3
 8000526:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800052a:	2301      	movs	r3, #1
 800052c:	408b      	lsls	r3, r1
 800052e:	6193      	str	r3, [r2, #24]
  for (int c = 0; c < COLS; c++)
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	3301      	adds	r3, #1
 8000534:	617b      	str	r3, [r7, #20]
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	2b02      	cmp	r3, #2
 800053a:	ddb2      	ble.n	80004a2 <_ZN6Keypad4tickEv+0xe>
  }

  findButtonPressed();
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f000 f865 	bl	800060c <_ZN6Keypad17findButtonPressedEv>
}
 8000542:	bf00      	nop
 8000544:	3718      	adds	r7, #24
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	48000400 	.word	0x48000400

08000550 <_ZN6Keypad11update_LEDsEc>:

void Keypad::update_LEDs(char key) {
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	460b      	mov	r3, r1
 800055a:	70fb      	strb	r3, [r7, #3]

  // Clear all LEDs
  GPIOB->BSRR = GPIO_BSRR_BR_6;
 800055c:	4b29      	ldr	r3, [pc, #164]	; (8000604 <_ZN6Keypad11update_LEDsEc+0xb4>)
 800055e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000562:	619a      	str	r2, [r3, #24]
  GPIOC->BSRR = GPIO_BSRR_BR_7;
 8000564:	4b28      	ldr	r3, [pc, #160]	; (8000608 <_ZN6Keypad11update_LEDsEc+0xb8>)
 8000566:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800056a:	619a      	str	r2, [r3, #24]
  GPIOA->BSRR = GPIO_BSRR_BR_9 | GPIO_BSRR_BR_8;
 800056c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000570:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8000574:	619a      	str	r2, [r3, #24]

  int binaryRepresentation = -1;
 8000576:	f04f 33ff 	mov.w	r3, #4294967295
 800057a:	60fb      	str	r3, [r7, #12]

  if (key >= '0' && key <= '9')
 800057c:	78fb      	ldrb	r3, [r7, #3]
 800057e:	2b2f      	cmp	r3, #47	; 0x2f
 8000580:	d906      	bls.n	8000590 <_ZN6Keypad11update_LEDsEc+0x40>
 8000582:	78fb      	ldrb	r3, [r7, #3]
 8000584:	2b39      	cmp	r3, #57	; 0x39
 8000586:	d803      	bhi.n	8000590 <_ZN6Keypad11update_LEDsEc+0x40>
  {
	binaryRepresentation = key - '0';  // Convert char to int
 8000588:	78fb      	ldrb	r3, [r7, #3]
 800058a:	3b30      	subs	r3, #48	; 0x30
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	e00a      	b.n	80005a6 <_ZN6Keypad11update_LEDsEc+0x56>
  } else if (key == '*') {
 8000590:	78fb      	ldrb	r3, [r7, #3]
 8000592:	2b2a      	cmp	r3, #42	; 0x2a
 8000594:	d102      	bne.n	800059c <_ZN6Keypad11update_LEDsEc+0x4c>
	binaryRepresentation = 14;  // 1110 in binary
 8000596:	230e      	movs	r3, #14
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	e004      	b.n	80005a6 <_ZN6Keypad11update_LEDsEc+0x56>
  } else if (key == '#') {
 800059c:	78fb      	ldrb	r3, [r7, #3]
 800059e:	2b23      	cmp	r3, #35	; 0x23
 80005a0:	d101      	bne.n	80005a6 <_ZN6Keypad11update_LEDsEc+0x56>
	binaryRepresentation = 15;  // 1111 in binary
 80005a2:	230f      	movs	r3, #15
 80005a4:	60fb      	str	r3, [r7, #12]
  }

  if (binaryRepresentation != -1)
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005ac:	d023      	beq.n	80005f6 <_ZN6Keypad11update_LEDsEc+0xa6>
  {
	if (binaryRepresentation & 0b0001) GPIOB->BSRR = GPIO_BSRR_BS_6;
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	f003 0301 	and.w	r3, r3, #1
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d002      	beq.n	80005be <_ZN6Keypad11update_LEDsEc+0x6e>
 80005b8:	4b12      	ldr	r3, [pc, #72]	; (8000604 <_ZN6Keypad11update_LEDsEc+0xb4>)
 80005ba:	2240      	movs	r2, #64	; 0x40
 80005bc:	619a      	str	r2, [r3, #24]
	if (binaryRepresentation & 0b0010) GPIOC->BSRR = GPIO_BSRR_BS_7;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f003 0302 	and.w	r3, r3, #2
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d002      	beq.n	80005ce <_ZN6Keypad11update_LEDsEc+0x7e>
 80005c8:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <_ZN6Keypad11update_LEDsEc+0xb8>)
 80005ca:	2280      	movs	r2, #128	; 0x80
 80005cc:	619a      	str	r2, [r3, #24]
	if (binaryRepresentation & 0b0100) GPIOA->BSRR = GPIO_BSRR_BS_9;
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	f003 0304 	and.w	r3, r3, #4
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d004      	beq.n	80005e2 <_ZN6Keypad11update_LEDsEc+0x92>
 80005d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005e0:	619a      	str	r2, [r3, #24]
	if (binaryRepresentation & 0b1000) GPIOA->BSRR = GPIO_BSRR_BS_8;
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	f003 0308 	and.w	r3, r3, #8
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d004      	beq.n	80005f6 <_ZN6Keypad11update_LEDsEc+0xa6>
 80005ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005f4:	619a      	str	r2, [r3, #24]
  }
}
 80005f6:	bf00      	nop
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	48000400 	.word	0x48000400
 8000608:	48000800 	.word	0x48000800

0800060c <_ZN6Keypad17findButtonPressedEv>:

void Keypad::findButtonPressed()
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	for (int r = 0; r < ROWS; r++)
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
 8000618:	e02e      	b.n	8000678 <_ZN6Keypad17findButtonPressedEv+0x6c>
	{
	  for (int c = 0; c < COLS; c++)
 800061a:	2300      	movs	r3, #0
 800061c:	613b      	str	r3, [r7, #16]
 800061e:	e025      	b.n	800066c <_ZN6Keypad17findButtonPressedEv+0x60>
	  {
		int i = r * COLS + c;
 8000620:	697a      	ldr	r2, [r7, #20]
 8000622:	4613      	mov	r3, r2
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	4413      	add	r3, r2
 8000628:	693a      	ldr	r2, [r7, #16]
 800062a:	4413      	add	r3, r2
 800062c:	60fb      	str	r3, [r7, #12]
		if (keystates[i])
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	4413      	add	r3, r2
 8000634:	3313      	adds	r3, #19
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	b2db      	uxtb	r3, r3
 800063a:	2b00      	cmp	r3, #0
 800063c:	bf14      	ite	ne
 800063e:	2301      	movne	r3, #1
 8000640:	2300      	moveq	r3, #0
 8000642:	b2db      	uxtb	r3, r3
 8000644:	2b00      	cmp	r3, #0
 8000646:	d00e      	beq.n	8000666 <_ZN6Keypad17findButtonPressedEv+0x5a>
		{
		  char key = keys[r][c];
 8000648:	6879      	ldr	r1, [r7, #4]
 800064a:	697a      	ldr	r2, [r7, #20]
 800064c:	4613      	mov	r3, r2
 800064e:	005b      	lsls	r3, r3, #1
 8000650:	4413      	add	r3, r2
 8000652:	18ca      	adds	r2, r1, r3
 8000654:	693b      	ldr	r3, [r7, #16]
 8000656:	4413      	add	r3, r2
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	72fb      	strb	r3, [r7, #11]
		  update_LEDs(key);
 800065c:	7afb      	ldrb	r3, [r7, #11]
 800065e:	4619      	mov	r1, r3
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f7ff ff75 	bl	8000550 <_ZN6Keypad11update_LEDsEc>
	  for (int c = 0; c < COLS; c++)
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	3301      	adds	r3, #1
 800066a:	613b      	str	r3, [r7, #16]
 800066c:	693b      	ldr	r3, [r7, #16]
 800066e:	2b02      	cmp	r3, #2
 8000670:	ddd6      	ble.n	8000620 <_ZN6Keypad17findButtonPressedEv+0x14>
	for (int r = 0; r < ROWS; r++)
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	3301      	adds	r3, #1
 8000676:	617b      	str	r3, [r7, #20]
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	2b03      	cmp	r3, #3
 800067c:	ddcd      	ble.n	800061a <_ZN6Keypad17findButtonPressedEv+0xe>
		}
	  }
	}
}
 800067e:	bf00      	nop
 8000680:	bf00      	nop
 8000682:	3718      	adds	r7, #24
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <_Z13testWaveformsR12External_DAC>:
#include "Keypad.h"

void SystemClock_Config(void);
void testWaveforms(External_DAC& dac);

void testWaveforms(External_DAC& dac) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b08c      	sub	sp, #48	; 0x30
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
    int arraySize = 256;  // Replace with the actual size of your waveform arrays
 8000690:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000694:	60fb      	str	r3, [r7, #12]
    int delayTime = 1;  // Delay time in milliseconds, adjust as needed
 8000696:	2301      	movs	r3, #1
 8000698:	60bb      	str	r3, [r7, #8]

    // Test Sine Wave
    for(int i = 0; i < 3; i++){
 800069a:	2300      	movs	r3, #0
 800069c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800069e:	e018      	b.n	80006d2 <_Z13testWaveformsR12External_DAC+0x4a>
    for (int i = 0; i < arraySize; ++i) {
 80006a0:	2300      	movs	r3, #0
 80006a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80006a4:	e00e      	b.n	80006c4 <_Z13testWaveformsR12External_DAC+0x3c>
        dac.DAC_write(sine_wave[i]);
 80006a6:	4a3d      	ldr	r2, [pc, #244]	; (800079c <_Z13testWaveformsR12External_DAC+0x114>)
 80006a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006ae:	4619      	mov	r1, r3
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f7ff fe19 	bl	80002e8 <_ZN12External_DAC9DAC_writeEt>
        HAL_Delay(delayTime);
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 f99f 	bl	80009fc <HAL_Delay>
    for (int i = 0; i < arraySize; ++i) {
 80006be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006c0:	3301      	adds	r3, #1
 80006c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80006c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	dbec      	blt.n	80006a6 <_Z13testWaveformsR12External_DAC+0x1e>
    for(int i = 0; i < 3; i++){
 80006cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006ce:	3301      	adds	r3, #1
 80006d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006d4:	2b02      	cmp	r3, #2
 80006d6:	dde3      	ble.n	80006a0 <_Z13testWaveformsR12External_DAC+0x18>
    }
    }

    // Test Square Wave
    for(int i = 0; i < 3; i++){
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
 80006dc:	e018      	b.n	8000710 <_Z13testWaveformsR12External_DAC+0x88>
    for (int i = 0; i < arraySize; ++i) {
 80006de:	2300      	movs	r3, #0
 80006e0:	623b      	str	r3, [r7, #32]
 80006e2:	e00e      	b.n	8000702 <_Z13testWaveformsR12External_DAC+0x7a>
    	dac.DAC_write(square_wave[i]);
 80006e4:	4a2e      	ldr	r2, [pc, #184]	; (80007a0 <_Z13testWaveformsR12External_DAC+0x118>)
 80006e6:	6a3b      	ldr	r3, [r7, #32]
 80006e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006ec:	4619      	mov	r1, r3
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f7ff fdfa 	bl	80002e8 <_ZN12External_DAC9DAC_writeEt>
        HAL_Delay(delayTime);
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 f980 	bl	80009fc <HAL_Delay>
    for (int i = 0; i < arraySize; ++i) {
 80006fc:	6a3b      	ldr	r3, [r7, #32]
 80006fe:	3301      	adds	r3, #1
 8000700:	623b      	str	r3, [r7, #32]
 8000702:	6a3a      	ldr	r2, [r7, #32]
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	429a      	cmp	r2, r3
 8000708:	dbec      	blt.n	80006e4 <_Z13testWaveformsR12External_DAC+0x5c>
    for(int i = 0; i < 3; i++){
 800070a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070c:	3301      	adds	r3, #1
 800070e:	627b      	str	r3, [r7, #36]	; 0x24
 8000710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000712:	2b02      	cmp	r3, #2
 8000714:	dde3      	ble.n	80006de <_Z13testWaveformsR12External_DAC+0x56>
    }
    }

    // Test Triangle Wave
    for(int i = 0; i < 3; i++){
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
 800071a:	e018      	b.n	800074e <_Z13testWaveformsR12External_DAC+0xc6>
    for (int i = 0; i < arraySize; ++i) {
 800071c:	2300      	movs	r3, #0
 800071e:	61bb      	str	r3, [r7, #24]
 8000720:	e00e      	b.n	8000740 <_Z13testWaveformsR12External_DAC+0xb8>
    	dac.DAC_write(triangle_wave[i]);
 8000722:	4a20      	ldr	r2, [pc, #128]	; (80007a4 <_Z13testWaveformsR12External_DAC+0x11c>)
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800072a:	4619      	mov	r1, r3
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f7ff fddb 	bl	80002e8 <_ZN12External_DAC9DAC_writeEt>
        HAL_Delay(delayTime);
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	4618      	mov	r0, r3
 8000736:	f000 f961 	bl	80009fc <HAL_Delay>
    for (int i = 0; i < arraySize; ++i) {
 800073a:	69bb      	ldr	r3, [r7, #24]
 800073c:	3301      	adds	r3, #1
 800073e:	61bb      	str	r3, [r7, #24]
 8000740:	69ba      	ldr	r2, [r7, #24]
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	429a      	cmp	r2, r3
 8000746:	dbec      	blt.n	8000722 <_Z13testWaveformsR12External_DAC+0x9a>
    for(int i = 0; i < 3; i++){
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	3301      	adds	r3, #1
 800074c:	61fb      	str	r3, [r7, #28]
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	2b02      	cmp	r3, #2
 8000752:	dde3      	ble.n	800071c <_Z13testWaveformsR12External_DAC+0x94>
    }
    }

    // Test Sawtooth Wave
    for(int i = 0; i < 3; i++){
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
 8000758:	e018      	b.n	800078c <_Z13testWaveformsR12External_DAC+0x104>
    for (int i = 0; i < arraySize; ++i) {
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
 800075e:	e00e      	b.n	800077e <_Z13testWaveformsR12External_DAC+0xf6>
    	dac.DAC_write(sawtooth_wave[i]);
 8000760:	4a11      	ldr	r2, [pc, #68]	; (80007a8 <_Z13testWaveformsR12External_DAC+0x120>)
 8000762:	693b      	ldr	r3, [r7, #16]
 8000764:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000768:	4619      	mov	r1, r3
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f7ff fdbc 	bl	80002e8 <_ZN12External_DAC9DAC_writeEt>
        HAL_Delay(delayTime);
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	4618      	mov	r0, r3
 8000774:	f000 f942 	bl	80009fc <HAL_Delay>
    for (int i = 0; i < arraySize; ++i) {
 8000778:	693b      	ldr	r3, [r7, #16]
 800077a:	3301      	adds	r3, #1
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	693a      	ldr	r2, [r7, #16]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	429a      	cmp	r2, r3
 8000784:	dbec      	blt.n	8000760 <_Z13testWaveformsR12External_DAC+0xd8>
    for(int i = 0; i < 3; i++){
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	3301      	adds	r3, #1
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	2b02      	cmp	r3, #2
 8000790:	dde3      	ble.n	800075a <_Z13testWaveformsR12External_DAC+0xd2>
    }
    }
}
 8000792:	bf00      	nop
 8000794:	bf00      	nop
 8000796:	3730      	adds	r7, #48	; 0x30
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	08000d50 	.word	0x08000d50
 80007a0:	08000f50 	.word	0x08000f50
 80007a4:	08001350 	.word	0x08001350
 80007a8:	08001150 	.word	0x08001150

080007ac <main>:

int main()
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	; 0x28
 80007b0:	af00      	add	r7, sp, #0

	HAL_Init();
 80007b2:	f000 f8a7 	bl	8000904 <HAL_Init>

	Keypad keys;
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff fdb8 	bl	8000330 <_ZN6KeypadC1Ev>
	keys.Keypad_init();
 80007c0:	f107 0308 	add.w	r3, r7, #8
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff fded 	bl	80003a4 <_ZN6Keypad11Keypad_initEv>

	External_DAC dac;
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff fcfb 	bl	80001c8 <_ZN12External_DACC1Ev>
	dac.DAC_init();
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff fd27 	bl	8000228 <_ZN12External_DAC8DAC_initEv>

	while(1)
	{
		testWaveforms(dac);
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff53 	bl	8000688 <_Z13testWaveformsR12External_DAC>
		keys.tick();
 80007e2:	f107 0308 	add.w	r3, r7, #8
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff fe54 	bl	8000494 <_ZN6Keypad4tickEv>
		testWaveforms(dac);
 80007ec:	e7f5      	b.n	80007da <main+0x2e>
	...

080007f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f6:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <HAL_MspInit+0x44>)
 80007f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007fa:	4a0e      	ldr	r2, [pc, #56]	; (8000834 <HAL_MspInit+0x44>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6613      	str	r3, [r2, #96]	; 0x60
 8000802:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <HAL_MspInit+0x44>)
 8000804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <HAL_MspInit+0x44>)
 8000810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000812:	4a08      	ldr	r2, [pc, #32]	; (8000834 <HAL_MspInit+0x44>)
 8000814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000818:	6593      	str	r3, [r2, #88]	; 0x58
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <HAL_MspInit+0x44>)
 800081c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800081e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	40021000 	.word	0x40021000

08000838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800083c:	e7fe      	b.n	800083c <NMI_Handler+0x4>

0800083e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000842:	e7fe      	b.n	8000842 <HardFault_Handler+0x4>

08000844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <MemManage_Handler+0x4>

0800084a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <BusFault_Handler+0x4>

08000850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <UsageFault_Handler+0x4>

08000856 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000884:	f000 f89a 	bl	80009bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}

0800088c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <SystemInit+0x20>)
 8000892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000896:	4a05      	ldr	r2, [pc, #20]	; (80008ac <SystemInit+0x20>)
 8000898:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800089c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008b4:	f7ff ffea 	bl	800088c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b8:	480c      	ldr	r0, [pc, #48]	; (80008ec <LoopForever+0x6>)
  ldr r1, =_edata
 80008ba:	490d      	ldr	r1, [pc, #52]	; (80008f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008bc:	4a0d      	ldr	r2, [pc, #52]	; (80008f4 <LoopForever+0xe>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c0:	e002      	b.n	80008c8 <LoopCopyDataInit>

080008c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c6:	3304      	adds	r3, #4

080008c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008cc:	d3f9      	bcc.n	80008c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ce:	4a0a      	ldr	r2, [pc, #40]	; (80008f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008d0:	4c0a      	ldr	r4, [pc, #40]	; (80008fc <LoopForever+0x16>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d4:	e001      	b.n	80008da <LoopFillZerobss>

080008d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d8:	3204      	adds	r2, #4

080008da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008dc:	d3fb      	bcc.n	80008d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008de:	f000 f9af 	bl	8000c40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008e2:	f7ff ff63 	bl	80007ac <main>

080008e6 <LoopForever>:

LoopForever:
    b LoopForever
 80008e6:	e7fe      	b.n	80008e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80008ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80008f4:	08001568 	.word	0x08001568
  ldr r2, =_sbss
 80008f8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80008fc:	200001bc 	.word	0x200001bc

08000900 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000900:	e7fe      	b.n	8000900 <ADC1_2_IRQHandler>
	...

08000904 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800090a:	2300      	movs	r3, #0
 800090c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800090e:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <HAL_Init+0x3c>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a0b      	ldr	r2, [pc, #44]	; (8000940 <HAL_Init+0x3c>)
 8000914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000918:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800091a:	2003      	movs	r0, #3
 800091c:	f000 f944 	bl	8000ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000920:	2000      	movs	r0, #0
 8000922:	f000 f80f 	bl	8000944 <HAL_InitTick>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d002      	beq.n	8000932 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800092c:	2301      	movs	r3, #1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	e001      	b.n	8000936 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000932:	f7ff ff5d 	bl	80007f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000936:	79fb      	ldrb	r3, [r7, #7]
}
 8000938:	4618      	mov	r0, r3
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40022000 	.word	0x40022000

08000944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800094c:	2300      	movs	r3, #0
 800094e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000950:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <HAL_InitTick+0x6c>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d023      	beq.n	80009a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000958:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <HAL_InitTick+0x70>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <HAL_InitTick+0x6c>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	4619      	mov	r1, r3
 8000962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000966:	fbb3 f3f1 	udiv	r3, r3, r1
 800096a:	fbb2 f3f3 	udiv	r3, r2, r3
 800096e:	4618      	mov	r0, r3
 8000970:	f000 f941 	bl	8000bf6 <HAL_SYSTICK_Config>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d10f      	bne.n	800099a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2b0f      	cmp	r3, #15
 800097e:	d809      	bhi.n	8000994 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000980:	2200      	movs	r2, #0
 8000982:	6879      	ldr	r1, [r7, #4]
 8000984:	f04f 30ff 	mov.w	r0, #4294967295
 8000988:	f000 f919 	bl	8000bbe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800098c:	4a0a      	ldr	r2, [pc, #40]	; (80009b8 <HAL_InitTick+0x74>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6013      	str	r3, [r2, #0]
 8000992:	e007      	b.n	80009a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000994:	2301      	movs	r3, #1
 8000996:	73fb      	strb	r3, [r7, #15]
 8000998:	e004      	b.n	80009a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	73fb      	strb	r3, [r7, #15]
 800099e:	e001      	b.n	80009a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009a0:	2301      	movs	r3, #1
 80009a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3710      	adds	r7, #16
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000008 	.word	0x20000008
 80009b4:	20000000 	.word	0x20000000
 80009b8:	20000004 	.word	0x20000004

080009bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_IncTick+0x20>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <HAL_IncTick+0x24>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4413      	add	r3, r2
 80009cc:	4a04      	ldr	r2, [pc, #16]	; (80009e0 <HAL_IncTick+0x24>)
 80009ce:	6013      	str	r3, [r2, #0]
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	20000008 	.word	0x20000008
 80009e0:	20000078 	.word	0x20000078

080009e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return uwTick;
 80009e8:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <HAL_GetTick+0x14>)
 80009ea:	681b      	ldr	r3, [r3, #0]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	20000078 	.word	0x20000078

080009fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a04:	f7ff ffee 	bl	80009e4 <HAL_GetTick>
 8000a08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a14:	d005      	beq.n	8000a22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a16:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <HAL_Delay+0x44>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	4413      	add	r3, r2
 8000a20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a22:	bf00      	nop
 8000a24:	f7ff ffde 	bl	80009e4 <HAL_GetTick>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	68fa      	ldr	r2, [r7, #12]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d8f7      	bhi.n	8000a24 <HAL_Delay+0x28>
  {
  }
}
 8000a34:	bf00      	nop
 8000a36:	bf00      	nop
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000008 	.word	0x20000008

08000a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f003 0307 	and.w	r3, r3, #7
 8000a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <__NVIC_SetPriorityGrouping+0x44>)
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a5a:	68ba      	ldr	r2, [r7, #8]
 8000a5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a60:	4013      	ands	r3, r2
 8000a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a76:	4a04      	ldr	r2, [pc, #16]	; (8000a88 <__NVIC_SetPriorityGrouping+0x44>)
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	60d3      	str	r3, [r2, #12]
}
 8000a7c:	bf00      	nop
 8000a7e:	3714      	adds	r7, #20
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a90:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	0a1b      	lsrs	r3, r3, #8
 8000a96:	f003 0307 	and.w	r3, r3, #7
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	6039      	str	r1, [r7, #0]
 8000ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	db0a      	blt.n	8000ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	490c      	ldr	r1, [pc, #48]	; (8000af4 <__NVIC_SetPriority+0x4c>)
 8000ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac6:	0112      	lsls	r2, r2, #4
 8000ac8:	b2d2      	uxtb	r2, r2
 8000aca:	440b      	add	r3, r1
 8000acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad0:	e00a      	b.n	8000ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4908      	ldr	r1, [pc, #32]	; (8000af8 <__NVIC_SetPriority+0x50>)
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	f003 030f 	and.w	r3, r3, #15
 8000ade:	3b04      	subs	r3, #4
 8000ae0:	0112      	lsls	r2, r2, #4
 8000ae2:	b2d2      	uxtb	r2, r2
 8000ae4:	440b      	add	r3, r1
 8000ae6:	761a      	strb	r2, [r3, #24]
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000e100 	.word	0xe000e100
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b089      	sub	sp, #36	; 0x24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	f1c3 0307 	rsb	r3, r3, #7
 8000b16:	2b04      	cmp	r3, #4
 8000b18:	bf28      	it	cs
 8000b1a:	2304      	movcs	r3, #4
 8000b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	3304      	adds	r3, #4
 8000b22:	2b06      	cmp	r3, #6
 8000b24:	d902      	bls.n	8000b2c <NVIC_EncodePriority+0x30>
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3b03      	subs	r3, #3
 8000b2a:	e000      	b.n	8000b2e <NVIC_EncodePriority+0x32>
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b30:	f04f 32ff 	mov.w	r2, #4294967295
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	43da      	mvns	r2, r3
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	401a      	ands	r2, r3
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b44:	f04f 31ff 	mov.w	r1, #4294967295
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4e:	43d9      	mvns	r1, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b54:	4313      	orrs	r3, r2
         );
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3724      	adds	r7, #36	; 0x24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
	...

08000b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b74:	d301      	bcc.n	8000b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b76:	2301      	movs	r3, #1
 8000b78:	e00f      	b.n	8000b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <SysTick_Config+0x40>)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b82:	210f      	movs	r1, #15
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	f7ff ff8e 	bl	8000aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <SysTick_Config+0x40>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b92:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <SysTick_Config+0x40>)
 8000b94:	2207      	movs	r2, #7
 8000b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	e000e010 	.word	0xe000e010

08000ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff ff47 	bl	8000a44 <__NVIC_SetPriorityGrouping>
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b086      	sub	sp, #24
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
 8000bca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd0:	f7ff ff5c 	bl	8000a8c <__NVIC_GetPriorityGrouping>
 8000bd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	68b9      	ldr	r1, [r7, #8]
 8000bda:	6978      	ldr	r0, [r7, #20]
 8000bdc:	f7ff ff8e 	bl	8000afc <NVIC_EncodePriority>
 8000be0:	4602      	mov	r2, r0
 8000be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000be6:	4611      	mov	r1, r2
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff ff5d 	bl	8000aa8 <__NVIC_SetPriority>
}
 8000bee:	bf00      	nop
 8000bf0:	3718      	adds	r7, #24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff ffb0 	bl	8000b64 <SysTick_Config>
 8000c04:	4603      	mov	r3, r0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <_ZdlPvj>:
 8000c0e:	f000 b800 	b.w	8000c12 <_ZdlPv>

08000c12 <_ZdlPv>:
 8000c12:	f000 b801 	b.w	8000c18 <free>
	...

08000c18 <free>:
 8000c18:	4b02      	ldr	r3, [pc, #8]	; (8000c24 <free+0xc>)
 8000c1a:	4601      	mov	r1, r0
 8000c1c:	6818      	ldr	r0, [r3, #0]
 8000c1e:	f000 b835 	b.w	8000c8c <_free_r>
 8000c22:	bf00      	nop
 8000c24:	20000058 	.word	0x20000058

08000c28 <__malloc_lock>:
 8000c28:	4801      	ldr	r0, [pc, #4]	; (8000c30 <__malloc_lock+0x8>)
 8000c2a:	f000 b82d 	b.w	8000c88 <__retarget_lock_acquire_recursive>
 8000c2e:	bf00      	nop
 8000c30:	200001b8 	.word	0x200001b8

08000c34 <__malloc_unlock>:
 8000c34:	4801      	ldr	r0, [pc, #4]	; (8000c3c <__malloc_unlock+0x8>)
 8000c36:	f000 b828 	b.w	8000c8a <__retarget_lock_release_recursive>
 8000c3a:	bf00      	nop
 8000c3c:	200001b8 	.word	0x200001b8

08000c40 <__libc_init_array>:
 8000c40:	b570      	push	{r4, r5, r6, lr}
 8000c42:	4d0d      	ldr	r5, [pc, #52]	; (8000c78 <__libc_init_array+0x38>)
 8000c44:	4c0d      	ldr	r4, [pc, #52]	; (8000c7c <__libc_init_array+0x3c>)
 8000c46:	1b64      	subs	r4, r4, r5
 8000c48:	10a4      	asrs	r4, r4, #2
 8000c4a:	2600      	movs	r6, #0
 8000c4c:	42a6      	cmp	r6, r4
 8000c4e:	d109      	bne.n	8000c64 <__libc_init_array+0x24>
 8000c50:	4d0b      	ldr	r5, [pc, #44]	; (8000c80 <__libc_init_array+0x40>)
 8000c52:	4c0c      	ldr	r4, [pc, #48]	; (8000c84 <__libc_init_array+0x44>)
 8000c54:	f000 f866 	bl	8000d24 <_init>
 8000c58:	1b64      	subs	r4, r4, r5
 8000c5a:	10a4      	asrs	r4, r4, #2
 8000c5c:	2600      	movs	r6, #0
 8000c5e:	42a6      	cmp	r6, r4
 8000c60:	d105      	bne.n	8000c6e <__libc_init_array+0x2e>
 8000c62:	bd70      	pop	{r4, r5, r6, pc}
 8000c64:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c68:	4798      	blx	r3
 8000c6a:	3601      	adds	r6, #1
 8000c6c:	e7ee      	b.n	8000c4c <__libc_init_array+0xc>
 8000c6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c72:	4798      	blx	r3
 8000c74:	3601      	adds	r6, #1
 8000c76:	e7f2      	b.n	8000c5e <__libc_init_array+0x1e>
 8000c78:	08001560 	.word	0x08001560
 8000c7c:	08001560 	.word	0x08001560
 8000c80:	08001560 	.word	0x08001560
 8000c84:	08001564 	.word	0x08001564

08000c88 <__retarget_lock_acquire_recursive>:
 8000c88:	4770      	bx	lr

08000c8a <__retarget_lock_release_recursive>:
 8000c8a:	4770      	bx	lr

08000c8c <_free_r>:
 8000c8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000c8e:	2900      	cmp	r1, #0
 8000c90:	d044      	beq.n	8000d1c <_free_r+0x90>
 8000c92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000c96:	9001      	str	r0, [sp, #4]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	f1a1 0404 	sub.w	r4, r1, #4
 8000c9e:	bfb8      	it	lt
 8000ca0:	18e4      	addlt	r4, r4, r3
 8000ca2:	f7ff ffc1 	bl	8000c28 <__malloc_lock>
 8000ca6:	4a1e      	ldr	r2, [pc, #120]	; (8000d20 <_free_r+0x94>)
 8000ca8:	9801      	ldr	r0, [sp, #4]
 8000caa:	6813      	ldr	r3, [r2, #0]
 8000cac:	b933      	cbnz	r3, 8000cbc <_free_r+0x30>
 8000cae:	6063      	str	r3, [r4, #4]
 8000cb0:	6014      	str	r4, [r2, #0]
 8000cb2:	b003      	add	sp, #12
 8000cb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000cb8:	f7ff bfbc 	b.w	8000c34 <__malloc_unlock>
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	d908      	bls.n	8000cd2 <_free_r+0x46>
 8000cc0:	6825      	ldr	r5, [r4, #0]
 8000cc2:	1961      	adds	r1, r4, r5
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	bf01      	itttt	eq
 8000cc8:	6819      	ldreq	r1, [r3, #0]
 8000cca:	685b      	ldreq	r3, [r3, #4]
 8000ccc:	1949      	addeq	r1, r1, r5
 8000cce:	6021      	streq	r1, [r4, #0]
 8000cd0:	e7ed      	b.n	8000cae <_free_r+0x22>
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	b10b      	cbz	r3, 8000cdc <_free_r+0x50>
 8000cd8:	42a3      	cmp	r3, r4
 8000cda:	d9fa      	bls.n	8000cd2 <_free_r+0x46>
 8000cdc:	6811      	ldr	r1, [r2, #0]
 8000cde:	1855      	adds	r5, r2, r1
 8000ce0:	42a5      	cmp	r5, r4
 8000ce2:	d10b      	bne.n	8000cfc <_free_r+0x70>
 8000ce4:	6824      	ldr	r4, [r4, #0]
 8000ce6:	4421      	add	r1, r4
 8000ce8:	1854      	adds	r4, r2, r1
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	6011      	str	r1, [r2, #0]
 8000cee:	d1e0      	bne.n	8000cb2 <_free_r+0x26>
 8000cf0:	681c      	ldr	r4, [r3, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	6053      	str	r3, [r2, #4]
 8000cf6:	440c      	add	r4, r1
 8000cf8:	6014      	str	r4, [r2, #0]
 8000cfa:	e7da      	b.n	8000cb2 <_free_r+0x26>
 8000cfc:	d902      	bls.n	8000d04 <_free_r+0x78>
 8000cfe:	230c      	movs	r3, #12
 8000d00:	6003      	str	r3, [r0, #0]
 8000d02:	e7d6      	b.n	8000cb2 <_free_r+0x26>
 8000d04:	6825      	ldr	r5, [r4, #0]
 8000d06:	1961      	adds	r1, r4, r5
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	bf04      	itt	eq
 8000d0c:	6819      	ldreq	r1, [r3, #0]
 8000d0e:	685b      	ldreq	r3, [r3, #4]
 8000d10:	6063      	str	r3, [r4, #4]
 8000d12:	bf04      	itt	eq
 8000d14:	1949      	addeq	r1, r1, r5
 8000d16:	6021      	streq	r1, [r4, #0]
 8000d18:	6054      	str	r4, [r2, #4]
 8000d1a:	e7ca      	b.n	8000cb2 <_free_r+0x26>
 8000d1c:	b003      	add	sp, #12
 8000d1e:	bd30      	pop	{r4, r5, pc}
 8000d20:	2000007c 	.word	0x2000007c

08000d24 <_init>:
 8000d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d26:	bf00      	nop
 8000d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d2a:	bc08      	pop	{r3}
 8000d2c:	469e      	mov	lr, r3
 8000d2e:	4770      	bx	lr

08000d30 <_fini>:
 8000d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d32:	bf00      	nop
 8000d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d36:	bc08      	pop	{r3}
 8000d38:	469e      	mov	lr, r3
 8000d3a:	4770      	bx	lr
