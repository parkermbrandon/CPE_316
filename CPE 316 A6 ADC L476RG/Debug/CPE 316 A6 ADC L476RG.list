
CPE 316 A6 ADC L476RG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001734  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080018bc  080018bc  000118bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800196c  0800196c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800196c  0800196c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800196c  0800196c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800196c  0800196c  0001196c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001970  08001970  00011970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  2000000c  08001980  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000058  08001980  00020058  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000065d6  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014ea  00000000  00000000  00026655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006e0  00000000  00000000  00027b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000511  00000000  00000000  00028220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024a57  00000000  00000000  00028731  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007394  00000000  00000000  0004d188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e33ce  00000000  00000000  0005451c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000019ac  00000000  00000000  001378ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00139298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080018a4 	.word	0x080018a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080018a4 	.word	0x080018a4

080001c8 <USART_init>:
volatile uint8_t adc_flag = 0;
uint16_t adc_samples[20];

#define F_CLK 24000000 // 80 Mhz

void USART_init() {
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
    // Enable USART2 clock
    RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
 80001cc:	4b22      	ldr	r3, [pc, #136]	; (8000258 <USART_init+0x90>)
 80001ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80001d0:	4a21      	ldr	r2, [pc, #132]	; (8000258 <USART_init+0x90>)
 80001d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001d6:	6593      	str	r3, [r2, #88]	; 0x58

    // Enable GPIOA clock
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80001d8:	4b1f      	ldr	r3, [pc, #124]	; (8000258 <USART_init+0x90>)
 80001da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001dc:	4a1e      	ldr	r2, [pc, #120]	; (8000258 <USART_init+0x90>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	64d3      	str	r3, [r2, #76]	; 0x4c

    // Configure PA2 as USART2_TX and PA3 as USART2_RX
    GPIOA->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
 80001e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80001f2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);
 80001f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001fe:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000202:	6013      	str	r3, [r2, #0]

    // Set pins to alternate function for USART2 (AF7 for STM32L476)
    GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL2 | GPIO_AFRL_AFSEL3);		// mask AF selection
 8000204:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000208:	6a1b      	ldr	r3, [r3, #32]
 800020a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800020e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000212:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= ((7 << GPIO_AFRL_AFSEL2_Pos ) | (7 << GPIO_AFRL_AFSEL3_Pos));
 8000214:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000218:	6a1b      	ldr	r3, [r3, #32]
 800021a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800021e:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000222:	6213      	str	r3, [r2, #32]

    // Configure for 8 data bits
    USART2->CR1 &= ~(USART_CR1_M);
 8000224:	4b0d      	ldr	r3, [pc, #52]	; (800025c <USART_init+0x94>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a0c      	ldr	r2, [pc, #48]	; (800025c <USART_init+0x94>)
 800022a:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 800022e:	6013      	str	r3, [r2, #0]

    // Set the baudrate to 115200
    USART2->BRR = F_CLK / 115200;
 8000230:	4b0a      	ldr	r3, [pc, #40]	; (800025c <USART_init+0x94>)
 8000232:	22d0      	movs	r2, #208	; 0xd0
 8000234:	60da      	str	r2, [r3, #12]

    // Configure for 1 stop bit
    USART2->CR2 &= ~(USART_CR2_STOP);
 8000236:	4b09      	ldr	r3, [pc, #36]	; (800025c <USART_init+0x94>)
 8000238:	685b      	ldr	r3, [r3, #4]
 800023a:	4a08      	ldr	r2, [pc, #32]	; (800025c <USART_init+0x94>)
 800023c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000240:	6053      	str	r3, [r2, #4]

    // Enable USART, Transmitter and Receiver
    USART2->CR1 |= (USART_CR1_UE | USART_CR1_TE | USART_CR1_RE);
 8000242:	4b06      	ldr	r3, [pc, #24]	; (800025c <USART_init+0x94>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4a05      	ldr	r2, [pc, #20]	; (800025c <USART_init+0x94>)
 8000248:	f043 030d 	orr.w	r3, r3, #13
 800024c:	6013      	str	r3, [r2, #0]
}
 800024e:	bf00      	nop
 8000250:	46bd      	mov	sp, r7
 8000252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000256:	4770      	bx	lr
 8000258:	40021000 	.word	0x40021000
 800025c:	40004400 	.word	0x40004400

08000260 <ADC_init>:

void ADC_init(void) {
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0


    // Enable the ADC interface clock
    RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;
 8000264:	4b39      	ldr	r3, [pc, #228]	; (800034c <ADC_init+0xec>)
 8000266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000268:	4a38      	ldr	r2, [pc, #224]	; (800034c <ADC_init+0xec>)
 800026a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800026e:	64d3      	str	r3, [r2, #76]	; 0x4c

    // Configure the ADC clock source
    RCC->CCIPR &= ~RCC_CCIPR_ADCSEL;   // Clear the ADC clock selection bits
 8000270:	4b36      	ldr	r3, [pc, #216]	; (800034c <ADC_init+0xec>)
 8000272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000276:	4a35      	ldr	r2, [pc, #212]	; (800034c <ADC_init+0xec>)
 8000278:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800027c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    RCC->CCIPR |= RCC_CCIPR_ADCSEL_1;  // Select HSI16 (16 MHz RC oscillator) as ADC clock
 8000280:	4b32      	ldr	r3, [pc, #200]	; (800034c <ADC_init+0xec>)
 8000282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000286:	4a31      	ldr	r2, [pc, #196]	; (800034c <ADC_init+0xec>)
 8000288:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800028c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    // Clock divider setup
    ADC123_COMMON->CCR &= ~ADC_CCR_PRESC;  // Clear prescaler bits
 8000290:	4b2f      	ldr	r3, [pc, #188]	; (8000350 <ADC_init+0xf0>)
 8000292:	689b      	ldr	r3, [r3, #8]
 8000294:	4a2e      	ldr	r2, [pc, #184]	; (8000350 <ADC_init+0xf0>)
 8000296:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 800029a:	6093      	str	r3, [r2, #8]
    //ADC123_COMMON->CCR |= ADC_CLOCK_ASYNC_DIV1; // Set prescaler to DIV1

    // ADC configuration
    ADC1->CFGR &= ~ADC_CFGR_RES; // 12-bit resolution
 800029c:	4b2d      	ldr	r3, [pc, #180]	; (8000354 <ADC_init+0xf4>)
 800029e:	68db      	ldr	r3, [r3, #12]
 80002a0:	4a2c      	ldr	r2, [pc, #176]	; (8000354 <ADC_init+0xf4>)
 80002a2:	f023 0318 	bic.w	r3, r3, #24
 80002a6:	60d3      	str	r3, [r2, #12]
    ADC1->CFGR &= ~ADC_CFGR_ALIGN; // Right alignment
 80002a8:	4b2a      	ldr	r3, [pc, #168]	; (8000354 <ADC_init+0xf4>)
 80002aa:	68db      	ldr	r3, [r3, #12]
 80002ac:	4a29      	ldr	r2, [pc, #164]	; (8000354 <ADC_init+0xf4>)
 80002ae:	f023 0320 	bic.w	r3, r3, #32
 80002b2:	60d3      	str	r3, [r2, #12]
    ADC1->CFGR &= ~ADC_CFGR_CONT; // Disable continuous conversion
 80002b4:	4b27      	ldr	r3, [pc, #156]	; (8000354 <ADC_init+0xf4>)
 80002b6:	68db      	ldr	r3, [r3, #12]
 80002b8:	4a26      	ldr	r2, [pc, #152]	; (8000354 <ADC_init+0xf4>)
 80002ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80002be:	60d3      	str	r3, [r2, #12]
    //ADC1->CFGR |= ADC_CFGR_CONT; // Enabled continuous conversion

    // ADC Sampling Time Configuration for Channel 9
    ADC1->SMPR1 &= ~ADC_SMPR1_SMP9; // Clear previous settings
 80002c0:	4b24      	ldr	r3, [pc, #144]	; (8000354 <ADC_init+0xf4>)
 80002c2:	695b      	ldr	r3, [r3, #20]
 80002c4:	4a23      	ldr	r2, [pc, #140]	; (8000354 <ADC_init+0xf4>)
 80002c6:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 80002ca:	6153      	str	r3, [r2, #20]
    ADC1->SMPR1 |= ADC_SMPR1_SMP9_0; // Sampling time: 2.5 ADC clock cycles
 80002cc:	4b21      	ldr	r3, [pc, #132]	; (8000354 <ADC_init+0xf4>)
 80002ce:	695b      	ldr	r3, [r3, #20]
 80002d0:	4a20      	ldr	r2, [pc, #128]	; (8000354 <ADC_init+0xf4>)
 80002d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80002d6:	6153      	str	r3, [r2, #20]

    // ADC Regular Channel Configuration
    ADC1->SQR1 &= ~ADC_SQR1_SQ1; // Reset channel
 80002d8:	4b1e      	ldr	r3, [pc, #120]	; (8000354 <ADC_init+0xf4>)
 80002da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002dc:	4a1d      	ldr	r2, [pc, #116]	; (8000354 <ADC_init+0xf4>)
 80002de:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 80002e2:	6313      	str	r3, [r2, #48]	; 0x30
    ADC1->SQR1 |= ADC_SQR1_SQ1_0 | ADC_SQR1_SQ1_3; // Set channel 9 to rank 1
 80002e4:	4b1b      	ldr	r3, [pc, #108]	; (8000354 <ADC_init+0xf4>)
 80002e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e8:	4a1a      	ldr	r2, [pc, #104]	; (8000354 <ADC_init+0xf4>)
 80002ea:	f443 7310 	orr.w	r3, r3, #576	; 0x240
 80002ee:	6313      	str	r3, [r2, #48]	; 0x30

    // Disable ADC deep power-down mode
    ADC1->CR &= ~ADC_CR_DEEPPWD;
 80002f0:	4b18      	ldr	r3, [pc, #96]	; (8000354 <ADC_init+0xf4>)
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	4a17      	ldr	r2, [pc, #92]	; (8000354 <ADC_init+0xf4>)
 80002f6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80002fa:	6093      	str	r3, [r2, #8]

    // Enable ADC internal voltage regulator
    ADC1->CR |= ADC_CR_ADVREGEN;
 80002fc:	4b15      	ldr	r3, [pc, #84]	; (8000354 <ADC_init+0xf4>)
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	4a14      	ldr	r2, [pc, #80]	; (8000354 <ADC_init+0xf4>)
 8000302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000306:	6093      	str	r3, [r2, #8]

    // Delay for ADC voltage regulator stabilization (time is dependent on the system clock)
    HAL_Delay(1000);
 8000308:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800030c:	f000 fb48 	bl	80009a0 <HAL_Delay>

    // Wait for calibration to complete
    //while (ADC1->CR & ADC_CR_ADCAL);

    // Enable ADC1
    ADC1->CR |= ADC_CR_ADEN;
 8000310:	4b10      	ldr	r3, [pc, #64]	; (8000354 <ADC_init+0xf4>)
 8000312:	689b      	ldr	r3, [r3, #8]
 8000314:	4a0f      	ldr	r2, [pc, #60]	; (8000354 <ADC_init+0xf4>)
 8000316:	f043 0301 	orr.w	r3, r3, #1
 800031a:	6093      	str	r3, [r2, #8]
    while(!(ADC1->ISR & ADC_ISR_ADRDY)); // Wait for ADC ready
 800031c:	bf00      	nop
 800031e:	4b0d      	ldr	r3, [pc, #52]	; (8000354 <ADC_init+0xf4>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f003 0301 	and.w	r3, r3, #1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d0f9      	beq.n	800031e <ADC_init+0xbe>

    // Enable GPIOA clock
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 800032a:	4b08      	ldr	r3, [pc, #32]	; (800034c <ADC_init+0xec>)
 800032c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800032e:	4a07      	ldr	r2, [pc, #28]	; (800034c <ADC_init+0xec>)
 8000330:	f043 0301 	orr.w	r3, r3, #1
 8000334:	64d3      	str	r3, [r2, #76]	; 0x4c

    // Set PA4 as analog mode
    GPIOA->MODER |= GPIO_MODER_MODE0;
 8000336:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000340:	f043 0303 	orr.w	r3, r3, #3
 8000344:	6013      	str	r3, [r2, #0]
}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40021000 	.word	0x40021000
 8000350:	50040300 	.word	0x50040300
 8000354:	50040000 	.word	0x50040000

08000358 <USART_print>:

// Function to print a string via USART2
void USART_print(const char *str) {
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000360:	e015      	b.n	800038e <USART_print+0x36>
        // Wait for Transmit Data Register Empty
        while (!(USART2->ISR & USART_ISR_TXE));
 8000362:	bf00      	nop
 8000364:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <USART_print+0x4c>)
 8000366:	69db      	ldr	r3, [r3, #28]
 8000368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800036c:	2b00      	cmp	r3, #0
 800036e:	d0f9      	beq.n	8000364 <USART_print+0xc>

        // Write data to TDR
        USART2->TDR = *str;
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	781a      	ldrb	r2, [r3, #0]
 8000374:	4b0b      	ldr	r3, [pc, #44]	; (80003a4 <USART_print+0x4c>)
 8000376:	b292      	uxth	r2, r2
 8000378:	851a      	strh	r2, [r3, #40]	; 0x28

        // Wait for Transmission Complete
        while (!(USART2->ISR & USART_ISR_TC));
 800037a:	bf00      	nop
 800037c:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <USART_print+0x4c>)
 800037e:	69db      	ldr	r3, [r3, #28]
 8000380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000384:	2b00      	cmp	r3, #0
 8000386:	d0f9      	beq.n	800037c <USART_print+0x24>

        str++;
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	3301      	adds	r3, #1
 800038c:	607b      	str	r3, [r7, #4]
    while (*str) {
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d1e5      	bne.n	8000362 <USART_print+0xa>
    }
}
 8000396:	bf00      	nop
 8000398:	bf00      	nop
 800039a:	370c      	adds	r7, #12
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr
 80003a4:	40004400 	.word	0x40004400

080003a8 <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler(void) {
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
    // Check if ADC conversion is complete
    if (ADC1->ISR & ADC_ISR_EOC) {
 80003ac:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <ADC1_2_IRQHandler+0x2c>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f003 0304 	and.w	r3, r3, #4
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d007      	beq.n	80003c8 <ADC1_2_IRQHandler+0x20>
        adc_val = ADC1->DR;  // Save conversion result
 80003b8:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <ADC1_2_IRQHandler+0x2c>)
 80003ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003bc:	b29a      	uxth	r2, r3
 80003be:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <ADC1_2_IRQHandler+0x30>)
 80003c0:	801a      	strh	r2, [r3, #0]
        adc_flag = 1;  // Set flag
 80003c2:	4b06      	ldr	r3, [pc, #24]	; (80003dc <ADC1_2_IRQHandler+0x34>)
 80003c4:	2201      	movs	r2, #1
 80003c6:	701a      	strb	r2, [r3, #0]
    }
}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	50040000 	.word	0x50040000
 80003d8:	20000028 	.word	0x20000028
 80003dc:	2000002a 	.word	0x2000002a

080003e0 <ADC_Read>:

uint32_t ADC_Read(void) {
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
    ADC1->CR |= ADC_CR_ADSTART;
 80003e4:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <ADC_Read+0x34>)
 80003e6:	689b      	ldr	r3, [r3, #8]
 80003e8:	4a0a      	ldr	r2, [pc, #40]	; (8000414 <ADC_Read+0x34>)
 80003ea:	f043 0304 	orr.w	r3, r3, #4
 80003ee:	6093      	str	r3, [r2, #8]
    while(adc_flag == 0);  // Wait for ADC conversion to complete
 80003f0:	bf00      	nop
 80003f2:	4b09      	ldr	r3, [pc, #36]	; (8000418 <ADC_Read+0x38>)
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d0fa      	beq.n	80003f2 <ADC_Read+0x12>
    adc_flag = 0;  // Clear flag
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <ADC_Read+0x38>)
 80003fe:	2200      	movs	r2, #0
 8000400:	701a      	strb	r2, [r3, #0]
    return adc_val;
 8000402:	4b06      	ldr	r3, [pc, #24]	; (800041c <ADC_Read+0x3c>)
 8000404:	881b      	ldrh	r3, [r3, #0]
 8000406:	b29b      	uxth	r3, r3
}
 8000408:	4618      	mov	r0, r3
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	50040000 	.word	0x50040000
 8000418:	2000002a 	.word	0x2000002a
 800041c:	20000028 	.word	0x20000028

08000420 <process_samples>:

void process_samples(uint16_t samples[], uint16_t *min, uint16_t *max, uint32_t *avg) {
 8000420:	b480      	push	{r7}
 8000422:	b087      	sub	sp, #28
 8000424:	af00      	add	r7, sp, #0
 8000426:	60f8      	str	r0, [r7, #12]
 8000428:	60b9      	str	r1, [r7, #8]
 800042a:	607a      	str	r2, [r7, #4]
 800042c:	603b      	str	r3, [r7, #0]
    *min = UINT16_MAX;
 800042e:	68bb      	ldr	r3, [r7, #8]
 8000430:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000434:	801a      	strh	r2, [r3, #0]
    *max = 0;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	2200      	movs	r2, #0
 800043a:	801a      	strh	r2, [r3, #0]
    *avg = 0;
 800043c:	683b      	ldr	r3, [r7, #0]
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < 20; i++) {
 8000442:	2300      	movs	r3, #0
 8000444:	617b      	str	r3, [r7, #20]
 8000446:	e02c      	b.n	80004a2 <process_samples+0x82>
        if (samples[i] < *min) *min = samples[i];
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	005b      	lsls	r3, r3, #1
 800044c:	68fa      	ldr	r2, [r7, #12]
 800044e:	4413      	add	r3, r2
 8000450:	881a      	ldrh	r2, [r3, #0]
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	881b      	ldrh	r3, [r3, #0]
 8000456:	429a      	cmp	r2, r3
 8000458:	d206      	bcs.n	8000468 <process_samples+0x48>
 800045a:	697b      	ldr	r3, [r7, #20]
 800045c:	005b      	lsls	r3, r3, #1
 800045e:	68fa      	ldr	r2, [r7, #12]
 8000460:	4413      	add	r3, r2
 8000462:	881a      	ldrh	r2, [r3, #0]
 8000464:	68bb      	ldr	r3, [r7, #8]
 8000466:	801a      	strh	r2, [r3, #0]
        if (samples[i] > *max) *max = samples[i];
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	005b      	lsls	r3, r3, #1
 800046c:	68fa      	ldr	r2, [r7, #12]
 800046e:	4413      	add	r3, r2
 8000470:	881a      	ldrh	r2, [r3, #0]
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	881b      	ldrh	r3, [r3, #0]
 8000476:	429a      	cmp	r2, r3
 8000478:	d906      	bls.n	8000488 <process_samples+0x68>
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	005b      	lsls	r3, r3, #1
 800047e:	68fa      	ldr	r2, [r7, #12]
 8000480:	4413      	add	r3, r2
 8000482:	881a      	ldrh	r2, [r3, #0]
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	801a      	strh	r2, [r3, #0]
        *avg += samples[i];
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	697a      	ldr	r2, [r7, #20]
 800048e:	0052      	lsls	r2, r2, #1
 8000490:	68f9      	ldr	r1, [r7, #12]
 8000492:	440a      	add	r2, r1
 8000494:	8812      	ldrh	r2, [r2, #0]
 8000496:	441a      	add	r2, r3
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 20; i++) {
 800049c:	697b      	ldr	r3, [r7, #20]
 800049e:	3301      	adds	r3, #1
 80004a0:	617b      	str	r3, [r7, #20]
 80004a2:	697b      	ldr	r3, [r7, #20]
 80004a4:	2b13      	cmp	r3, #19
 80004a6:	ddcf      	ble.n	8000448 <process_samples+0x28>
    }
    *avg /= 20;
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a05      	ldr	r2, [pc, #20]	; (80004c4 <process_samples+0xa4>)
 80004ae:	fba2 2303 	umull	r2, r3, r2, r3
 80004b2:	091a      	lsrs	r2, r3, #4
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	601a      	str	r2, [r3, #0]
}
 80004b8:	bf00      	nop
 80004ba:	371c      	adds	r7, #28
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr
 80004c4:	cccccccd 	.word	0xcccccccd

080004c8 <calibrate_adc_value>:

uint32_t calibrate_adc_value(uint16_t adc_value) {
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	80fb      	strh	r3, [r7, #6]
    // 3.3V reference and 12-bit ADC
    // The value returned is in millivolts to avoid floating point.
    return (3300 * adc_value) / 4095;
 80004d2:	88fb      	ldrh	r3, [r7, #6]
 80004d4:	f640 42e4 	movw	r2, #3300	; 0xce4
 80004d8:	fb02 f303 	mul.w	r3, r2, r3
 80004dc:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <calibrate_adc_value+0x30>)
 80004de:	fb82 1203 	smull	r1, r2, r2, r3
 80004e2:	441a      	add	r2, r3
 80004e4:	12d2      	asrs	r2, r2, #11
 80004e6:	17db      	asrs	r3, r3, #31
 80004e8:	1ad3      	subs	r3, r2, r3
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	80080081 	.word	0x80080081

080004fc <USART_print_number>:

void USART_print_number(uint32_t number) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08a      	sub	sp, #40	; 0x28
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
    char buffer[10];
    int index = 0;
 8000504:	2300      	movs	r3, #0
 8000506:	627b      	str	r3, [r7, #36]	; 0x24

    if (number == 0) {
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d103      	bne.n	8000516 <USART_print_number+0x1a>
        USART_print("0.00");
 800050e:	4830      	ldr	r0, [pc, #192]	; (80005d0 <USART_print_number+0xd4>)
 8000510:	f7ff ff22 	bl	8000358 <USART_print>
 8000514:	e059      	b.n	80005ca <USART_print_number+0xce>
        return;
    }

    // Convert integer part
    uint32_t int_part = number / 100;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4a2e      	ldr	r2, [pc, #184]	; (80005d4 <USART_print_number+0xd8>)
 800051a:	fba2 2303 	umull	r2, r3, r2, r3
 800051e:	095b      	lsrs	r3, r3, #5
 8000520:	623b      	str	r3, [r7, #32]
    uint32_t dec_part = number % 100;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4a2b      	ldr	r2, [pc, #172]	; (80005d4 <USART_print_number+0xd8>)
 8000526:	fba2 1203 	umull	r1, r2, r2, r3
 800052a:	0952      	lsrs	r2, r2, #5
 800052c:	2164      	movs	r1, #100	; 0x64
 800052e:	fb01 f202 	mul.w	r2, r1, r2
 8000532:	1a9b      	subs	r3, r3, r2
 8000534:	61bb      	str	r3, [r7, #24]

    while (int_part > 0) {
 8000536:	e019      	b.n	800056c <USART_print_number+0x70>
        buffer[index++] = '0' + (int_part % 10);
 8000538:	6a39      	ldr	r1, [r7, #32]
 800053a:	4b27      	ldr	r3, [pc, #156]	; (80005d8 <USART_print_number+0xdc>)
 800053c:	fba3 2301 	umull	r2, r3, r3, r1
 8000540:	08da      	lsrs	r2, r3, #3
 8000542:	4613      	mov	r3, r2
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	4413      	add	r3, r2
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	1aca      	subs	r2, r1, r3
 800054c:	b2d2      	uxtb	r2, r2
 800054e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000550:	1c59      	adds	r1, r3, #1
 8000552:	6279      	str	r1, [r7, #36]	; 0x24
 8000554:	3230      	adds	r2, #48	; 0x30
 8000556:	b2d2      	uxtb	r2, r2
 8000558:	3328      	adds	r3, #40	; 0x28
 800055a:	443b      	add	r3, r7
 800055c:	f803 2c1c 	strb.w	r2, [r3, #-28]
        int_part /= 10;
 8000560:	6a3b      	ldr	r3, [r7, #32]
 8000562:	4a1d      	ldr	r2, [pc, #116]	; (80005d8 <USART_print_number+0xdc>)
 8000564:	fba2 2303 	umull	r2, r3, r2, r3
 8000568:	08db      	lsrs	r3, r3, #3
 800056a:	623b      	str	r3, [r7, #32]
    while (int_part > 0) {
 800056c:	6a3b      	ldr	r3, [r7, #32]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d1e2      	bne.n	8000538 <USART_print_number+0x3c>
    }

    for (int i = index - 1; i >= 0; i--) {
 8000572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000574:	3b01      	subs	r3, #1
 8000576:	61fb      	str	r3, [r7, #28]
 8000578:	e00f      	b.n	800059a <USART_print_number+0x9e>
        char str[2] = {buffer[i], '\0'};
 800057a:	f107 020c 	add.w	r2, r7, #12
 800057e:	69fb      	ldr	r3, [r7, #28]
 8000580:	4413      	add	r3, r2
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	723b      	strb	r3, [r7, #8]
 8000586:	2300      	movs	r3, #0
 8000588:	727b      	strb	r3, [r7, #9]
        USART_print(str);
 800058a:	f107 0308 	add.w	r3, r7, #8
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff fee2 	bl	8000358 <USART_print>
    for (int i = index - 1; i >= 0; i--) {
 8000594:	69fb      	ldr	r3, [r7, #28]
 8000596:	3b01      	subs	r3, #1
 8000598:	61fb      	str	r3, [r7, #28]
 800059a:	69fb      	ldr	r3, [r7, #28]
 800059c:	2b00      	cmp	r3, #0
 800059e:	daec      	bge.n	800057a <USART_print_number+0x7e>
    }

    USART_print(".");
 80005a0:	480e      	ldr	r0, [pc, #56]	; (80005dc <USART_print_number+0xe0>)
 80005a2:	f7ff fed9 	bl	8000358 <USART_print>

    USART_print((dec_part < 10) ? "0" : "");
 80005a6:	69bb      	ldr	r3, [r7, #24]
 80005a8:	2b09      	cmp	r3, #9
 80005aa:	d801      	bhi.n	80005b0 <USART_print_number+0xb4>
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <USART_print_number+0xe4>)
 80005ae:	e000      	b.n	80005b2 <USART_print_number+0xb6>
 80005b0:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <USART_print_number+0xe8>)
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff fed0 	bl	8000358 <USART_print>
    if (dec_part < 10) {
 80005b8:	69bb      	ldr	r3, [r7, #24]
 80005ba:	2b09      	cmp	r3, #9
 80005bc:	d802      	bhi.n	80005c4 <USART_print_number+0xc8>
        USART_print("0");  // Print leading zero for numbers below 10
 80005be:	4808      	ldr	r0, [pc, #32]	; (80005e0 <USART_print_number+0xe4>)
 80005c0:	f7ff feca 	bl	8000358 <USART_print>
    }
    USART_print_number(dec_part);  // Print the two-digit decimal part
 80005c4:	69b8      	ldr	r0, [r7, #24]
 80005c6:	f7ff ff99 	bl	80004fc <USART_print_number>
}
 80005ca:	3728      	adds	r7, #40	; 0x28
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	080018bc 	.word	0x080018bc
 80005d4:	51eb851f 	.word	0x51eb851f
 80005d8:	cccccccd 	.word	0xcccccccd
 80005dc:	080018c4 	.word	0x080018c4
 80005e0:	080018c8 	.word	0x080018c8
 80005e4:	080018cc 	.word	0x080018cc

080005e8 <main>:

int main(void){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0

	HAL_Init();
 80005ee:	f000 f95b 	bl	80008a8 <HAL_Init>
	SystemClock_Config();
 80005f2:	f000 f873 	bl	80006dc <SystemClock_Config>

	uint32_t sysClockFreq = HAL_RCC_GetSysClockFreq();
 80005f6:	f001 f82d 	bl	8001654 <HAL_RCC_GetSysClockFreq>
 80005fa:	60b8      	str	r0, [r7, #8]
	USART_print_number(sysClockFreq);
 80005fc:	68b8      	ldr	r0, [r7, #8]
 80005fe:	f7ff ff7d 	bl	80004fc <USART_print_number>


	USART_init();
 8000602:	f7ff fde1 	bl	80001c8 <USART_init>
	USART_print("The ADC is initializing\n");
 8000606:	482d      	ldr	r0, [pc, #180]	; (80006bc <main+0xd4>)
 8000608:	f7ff fea6 	bl	8000358 <USART_print>
	ADC_init();
 800060c:	f7ff fe28 	bl	8000260 <ADC_init>
	USART_print("The ADC has initialized\n");
 8000610:	482b      	ldr	r0, [pc, #172]	; (80006c0 <main+0xd8>)
 8000612:	f7ff fea1 	bl	8000358 <USART_print>
	uint32_t avg;



    while(1) {
        for (int i = 0; i < 20; i++) {
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	e00a      	b.n	8000632 <main+0x4a>
            adc_samples[i] = ADC_Read();
 800061c:	f7ff fee0 	bl	80003e0 <ADC_Read>
 8000620:	4603      	mov	r3, r0
 8000622:	b299      	uxth	r1, r3
 8000624:	4a27      	ldr	r2, [pc, #156]	; (80006c4 <main+0xdc>)
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int i = 0; i < 20; i++) {
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	3301      	adds	r3, #1
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	2b13      	cmp	r3, #19
 8000636:	ddf1      	ble.n	800061c <main+0x34>
        }

        process_samples(adc_samples, &min, &max, &avg);
 8000638:	463b      	mov	r3, r7
 800063a:	1d3a      	adds	r2, r7, #4
 800063c:	1db9      	adds	r1, r7, #6
 800063e:	4821      	ldr	r0, [pc, #132]	; (80006c4 <main+0xdc>)
 8000640:	f7ff feee 	bl	8000420 <process_samples>

        min = calibrate_adc_value(min);
 8000644:	88fb      	ldrh	r3, [r7, #6]
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff ff3e 	bl	80004c8 <calibrate_adc_value>
 800064c:	4603      	mov	r3, r0
 800064e:	b29b      	uxth	r3, r3
 8000650:	80fb      	strh	r3, [r7, #6]
        max = calibrate_adc_value(max);
 8000652:	88bb      	ldrh	r3, [r7, #4]
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff ff37 	bl	80004c8 <calibrate_adc_value>
 800065a:	4603      	mov	r3, r0
 800065c:	b29b      	uxth	r3, r3
 800065e:	80bb      	strh	r3, [r7, #4]
        avg = calibrate_adc_value(avg);
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	b29b      	uxth	r3, r3
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff ff2f 	bl	80004c8 <calibrate_adc_value>
 800066a:	4603      	mov	r3, r0
 800066c:	603b      	str	r3, [r7, #0]

        USART_print("Min: ");
 800066e:	4816      	ldr	r0, [pc, #88]	; (80006c8 <main+0xe0>)
 8000670:	f7ff fe72 	bl	8000358 <USART_print>
        USART_print_number(min);
 8000674:	88fb      	ldrh	r3, [r7, #6]
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ff40 	bl	80004fc <USART_print_number>
        USART_print(" mV\r\n");
 800067c:	4813      	ldr	r0, [pc, #76]	; (80006cc <main+0xe4>)
 800067e:	f7ff fe6b 	bl	8000358 <USART_print>

        USART_print("Max: ");
 8000682:	4813      	ldr	r0, [pc, #76]	; (80006d0 <main+0xe8>)
 8000684:	f7ff fe68 	bl	8000358 <USART_print>
        USART_print_number(max);
 8000688:	88bb      	ldrh	r3, [r7, #4]
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff ff36 	bl	80004fc <USART_print_number>
        USART_print(" mV\r\n");
 8000690:	480e      	ldr	r0, [pc, #56]	; (80006cc <main+0xe4>)
 8000692:	f7ff fe61 	bl	8000358 <USART_print>

        USART_print("Avg: ");
 8000696:	480f      	ldr	r0, [pc, #60]	; (80006d4 <main+0xec>)
 8000698:	f7ff fe5e 	bl	8000358 <USART_print>
        USART_print_number(avg);
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff ff2c 	bl	80004fc <USART_print_number>
        USART_print(" mV\r\n");
 80006a4:	4809      	ldr	r0, [pc, #36]	; (80006cc <main+0xe4>)
 80006a6:	f7ff fe57 	bl	8000358 <USART_print>

        USART_print("\r\n");  // Newline for clarity
 80006aa:	480b      	ldr	r0, [pc, #44]	; (80006d8 <main+0xf0>)
 80006ac:	f7ff fe54 	bl	8000358 <USART_print>

        HAL_Delay(1000);  // Delay for a second before the next batch of readings
 80006b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006b4:	f000 f974 	bl	80009a0 <HAL_Delay>
        for (int i = 0; i < 20; i++) {
 80006b8:	e7ad      	b.n	8000616 <main+0x2e>
 80006ba:	bf00      	nop
 80006bc:	080018d0 	.word	0x080018d0
 80006c0:	080018ec 	.word	0x080018ec
 80006c4:	2000002c 	.word	0x2000002c
 80006c8:	08001908 	.word	0x08001908
 80006cc:	08001910 	.word	0x08001910
 80006d0:	08001918 	.word	0x08001918
 80006d4:	08001920 	.word	0x08001920
 80006d8:	08001928 	.word	0x08001928

080006dc <SystemClock_Config>:
    }
}

void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b096      	sub	sp, #88	; 0x58
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	2244      	movs	r2, #68	; 0x44
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 f8ae 	bl	800184c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	463b      	mov	r3, r7
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000702:	f000 fa75 	bl	8000bf0 <HAL_PWREx_ControlVoltageScaling>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800070c:	f000 f83c 	bl	8000788 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000710:	f000 fa50 	bl	8000bb4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <SystemClock_Config+0xa8>)
 8000716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800071a:	4a1a      	ldr	r2, [pc, #104]	; (8000784 <SystemClock_Config+0xa8>)
 800071c:	f023 0318 	bic.w	r3, r3, #24
 8000720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000724:	2314      	movs	r3, #20
 8000726:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000728:	2301      	movs	r3, #1
 800072a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800072c:	2301      	movs	r3, #1
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8000734:	2390      	movs	r3, #144	; 0x90
 8000736:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000738:	2300      	movs	r3, #0
 800073a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	4618      	mov	r0, r3
 8000742:	f000 faab 	bl	8000c9c <HAL_RCC_OscConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800074c:	f000 f81c 	bl	8000788 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000750:	230f      	movs	r3, #15
 8000752:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000764:	463b      	mov	r3, r7
 8000766:	2101      	movs	r1, #1
 8000768:	4618      	mov	r0, r3
 800076a:	f000 fe73 	bl	8001454 <HAL_RCC_ClockConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000774:	f000 f808 	bl	8000788 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000778:	f001 f858 	bl	800182c <HAL_RCCEx_EnableMSIPLLMode>
}
 800077c:	bf00      	nop
 800077e:	3758      	adds	r7, #88	; 0x58
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40021000 	.word	0x40021000

08000788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078c:	b672      	cpsid	i
}
 800078e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000790:	e7fe      	b.n	8000790 <Error_Handler+0x8>
	...

08000794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <HAL_MspInit+0x44>)
 800079c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800079e:	4a0e      	ldr	r2, [pc, #56]	; (80007d8 <HAL_MspInit+0x44>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6613      	str	r3, [r2, #96]	; 0x60
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <HAL_MspInit+0x44>)
 80007a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <HAL_MspInit+0x44>)
 80007b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007b6:	4a08      	ldr	r2, [pc, #32]	; (80007d8 <HAL_MspInit+0x44>)
 80007b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007bc:	6593      	str	r3, [r2, #88]	; 0x58
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <HAL_MspInit+0x44>)
 80007c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40021000 	.word	0x40021000

080007dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <NMI_Handler+0x4>

080007e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <HardFault_Handler+0x4>

080007e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <MemManage_Handler+0x4>

080007ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <BusFault_Handler+0x4>

080007f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <UsageFault_Handler+0x4>

080007fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr

08000816 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000828:	f000 f89a 	bl	8000960 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}

08000830 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <SystemInit+0x20>)
 8000836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800083a:	4a05      	ldr	r2, [pc, #20]	; (8000850 <SystemInit+0x20>)
 800083c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000840:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000854:	f8df d034 	ldr.w	sp, [pc, #52]	; 800088c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000858:	f7ff ffea 	bl	8000830 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800085c:	480c      	ldr	r0, [pc, #48]	; (8000890 <LoopForever+0x6>)
  ldr r1, =_edata
 800085e:	490d      	ldr	r1, [pc, #52]	; (8000894 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000860:	4a0d      	ldr	r2, [pc, #52]	; (8000898 <LoopForever+0xe>)
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000864:	e002      	b.n	800086c <LoopCopyDataInit>

08000866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086a:	3304      	adds	r3, #4

0800086c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800086c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800086e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000870:	d3f9      	bcc.n	8000866 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000872:	4a0a      	ldr	r2, [pc, #40]	; (800089c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000874:	4c0a      	ldr	r4, [pc, #40]	; (80008a0 <LoopForever+0x16>)
  movs r3, #0
 8000876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000878:	e001      	b.n	800087e <LoopFillZerobss>

0800087a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800087c:	3204      	adds	r2, #4

0800087e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800087e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000880:	d3fb      	bcc.n	800087a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000882:	f000 ffeb 	bl	800185c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000886:	f7ff feaf 	bl	80005e8 <main>

0800088a <LoopForever>:

LoopForever:
    b LoopForever
 800088a:	e7fe      	b.n	800088a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800088c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000894:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000898:	08001974 	.word	0x08001974
  ldr r2, =_sbss
 800089c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008a0:	20000058 	.word	0x20000058

080008a4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008a4:	e7fe      	b.n	80008a4 <ADC3_IRQHandler>
	...

080008a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008ae:	2300      	movs	r3, #0
 80008b0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b2:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <HAL_Init+0x3c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <HAL_Init+0x3c>)
 80008b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008bc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008be:	2003      	movs	r0, #3
 80008c0:	f000 f944 	bl	8000b4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008c4:	2000      	movs	r0, #0
 80008c6:	f000 f80f 	bl	80008e8 <HAL_InitTick>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d002      	beq.n	80008d6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80008d0:	2301      	movs	r3, #1
 80008d2:	71fb      	strb	r3, [r7, #7]
 80008d4:	e001      	b.n	80008da <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008d6:	f7ff ff5d 	bl	8000794 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008da:	79fb      	ldrb	r3, [r7, #7]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40022000 	.word	0x40022000

080008e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008f0:	2300      	movs	r3, #0
 80008f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80008f4:	4b17      	ldr	r3, [pc, #92]	; (8000954 <HAL_InitTick+0x6c>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d023      	beq.n	8000944 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008fc:	4b16      	ldr	r3, [pc, #88]	; (8000958 <HAL_InitTick+0x70>)
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <HAL_InitTick+0x6c>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	4619      	mov	r1, r3
 8000906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090a:	fbb3 f3f1 	udiv	r3, r3, r1
 800090e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000912:	4618      	mov	r0, r3
 8000914:	f000 f941 	bl	8000b9a <HAL_SYSTICK_Config>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d10f      	bne.n	800093e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2b0f      	cmp	r3, #15
 8000922:	d809      	bhi.n	8000938 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000924:	2200      	movs	r2, #0
 8000926:	6879      	ldr	r1, [r7, #4]
 8000928:	f04f 30ff 	mov.w	r0, #4294967295
 800092c:	f000 f919 	bl	8000b62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000930:	4a0a      	ldr	r2, [pc, #40]	; (800095c <HAL_InitTick+0x74>)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6013      	str	r3, [r2, #0]
 8000936:	e007      	b.n	8000948 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000938:	2301      	movs	r3, #1
 800093a:	73fb      	strb	r3, [r7, #15]
 800093c:	e004      	b.n	8000948 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800093e:	2301      	movs	r3, #1
 8000940:	73fb      	strb	r3, [r7, #15]
 8000942:	e001      	b.n	8000948 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000944:	2301      	movs	r3, #1
 8000946:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000948:	7bfb      	ldrb	r3, [r7, #15]
}
 800094a:	4618      	mov	r0, r3
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000008 	.word	0x20000008
 8000958:	20000000 	.word	0x20000000
 800095c:	20000004 	.word	0x20000004

08000960 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_IncTick+0x20>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	461a      	mov	r2, r3
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_IncTick+0x24>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4413      	add	r3, r2
 8000970:	4a04      	ldr	r2, [pc, #16]	; (8000984 <HAL_IncTick+0x24>)
 8000972:	6013      	str	r3, [r2, #0]
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	20000008 	.word	0x20000008
 8000984:	20000054 	.word	0x20000054

08000988 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  return uwTick;
 800098c:	4b03      	ldr	r3, [pc, #12]	; (800099c <HAL_GetTick+0x14>)
 800098e:	681b      	ldr	r3, [r3, #0]
}
 8000990:	4618      	mov	r0, r3
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	20000054 	.word	0x20000054

080009a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009a8:	f7ff ffee 	bl	8000988 <HAL_GetTick>
 80009ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009b8:	d005      	beq.n	80009c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80009ba:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <HAL_Delay+0x44>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	461a      	mov	r2, r3
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	4413      	add	r3, r2
 80009c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009c6:	bf00      	nop
 80009c8:	f7ff ffde 	bl	8000988 <HAL_GetTick>
 80009cc:	4602      	mov	r2, r0
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d8f7      	bhi.n	80009c8 <HAL_Delay+0x28>
  {
  }
}
 80009d8:	bf00      	nop
 80009da:	bf00      	nop
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000008 	.word	0x20000008

080009e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <__NVIC_SetPriorityGrouping+0x44>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009fe:	68ba      	ldr	r2, [r7, #8]
 8000a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a04:	4013      	ands	r3, r2
 8000a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a1a:	4a04      	ldr	r2, [pc, #16]	; (8000a2c <__NVIC_SetPriorityGrouping+0x44>)
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	60d3      	str	r3, [r2, #12]
}
 8000a20:	bf00      	nop
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <__NVIC_GetPriorityGrouping+0x18>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	0a1b      	lsrs	r3, r3, #8
 8000a3a:	f003 0307 	and.w	r3, r3, #7
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	6039      	str	r1, [r7, #0]
 8000a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	db0a      	blt.n	8000a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	490c      	ldr	r1, [pc, #48]	; (8000a98 <__NVIC_SetPriority+0x4c>)
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	0112      	lsls	r2, r2, #4
 8000a6c:	b2d2      	uxtb	r2, r2
 8000a6e:	440b      	add	r3, r1
 8000a70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a74:	e00a      	b.n	8000a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	4908      	ldr	r1, [pc, #32]	; (8000a9c <__NVIC_SetPriority+0x50>)
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	f003 030f 	and.w	r3, r3, #15
 8000a82:	3b04      	subs	r3, #4
 8000a84:	0112      	lsls	r2, r2, #4
 8000a86:	b2d2      	uxtb	r2, r2
 8000a88:	440b      	add	r3, r1
 8000a8a:	761a      	strb	r2, [r3, #24]
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	e000e100 	.word	0xe000e100
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b089      	sub	sp, #36	; 0x24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	f1c3 0307 	rsb	r3, r3, #7
 8000aba:	2b04      	cmp	r3, #4
 8000abc:	bf28      	it	cs
 8000abe:	2304      	movcs	r3, #4
 8000ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	3304      	adds	r3, #4
 8000ac6:	2b06      	cmp	r3, #6
 8000ac8:	d902      	bls.n	8000ad0 <NVIC_EncodePriority+0x30>
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3b03      	subs	r3, #3
 8000ace:	e000      	b.n	8000ad2 <NVIC_EncodePriority+0x32>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43da      	mvns	r2, r3
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	401a      	ands	r2, r3
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	fa01 f303 	lsl.w	r3, r1, r3
 8000af2:	43d9      	mvns	r1, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af8:	4313      	orrs	r3, r2
         );
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3724      	adds	r7, #36	; 0x24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
	...

08000b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b18:	d301      	bcc.n	8000b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e00f      	b.n	8000b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <SysTick_Config+0x40>)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b26:	210f      	movs	r1, #15
 8000b28:	f04f 30ff 	mov.w	r0, #4294967295
 8000b2c:	f7ff ff8e 	bl	8000a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b30:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <SysTick_Config+0x40>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b36:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <SysTick_Config+0x40>)
 8000b38:	2207      	movs	r2, #7
 8000b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	e000e010 	.word	0xe000e010

08000b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff ff47 	bl	80009e8 <__NVIC_SetPriorityGrouping>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b086      	sub	sp, #24
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	4603      	mov	r3, r0
 8000b6a:	60b9      	str	r1, [r7, #8]
 8000b6c:	607a      	str	r2, [r7, #4]
 8000b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b74:	f7ff ff5c 	bl	8000a30 <__NVIC_GetPriorityGrouping>
 8000b78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	68b9      	ldr	r1, [r7, #8]
 8000b7e:	6978      	ldr	r0, [r7, #20]
 8000b80:	f7ff ff8e 	bl	8000aa0 <NVIC_EncodePriority>
 8000b84:	4602      	mov	r2, r0
 8000b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff5d 	bl	8000a4c <__NVIC_SetPriority>
}
 8000b92:	bf00      	nop
 8000b94:	3718      	adds	r7, #24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff ffb0 	bl	8000b08 <SysTick_Config>
 8000ba8:	4603      	mov	r3, r0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bc2:	6013      	str	r3, [r2, #0]
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	40007000 	.word	0x40007000

08000bd4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000bd8:	4b04      	ldr	r3, [pc, #16]	; (8000bec <HAL_PWREx_GetVoltageRange+0x18>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	40007000 	.word	0x40007000

08000bf0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bfe:	d130      	bne.n	8000c62 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c00:	4b23      	ldr	r3, [pc, #140]	; (8000c90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c0c:	d038      	beq.n	8000c80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c0e:	4b20      	ldr	r3, [pc, #128]	; (8000c90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c16:	4a1e      	ldr	r2, [pc, #120]	; (8000c90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c1c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c1e:	4b1d      	ldr	r3, [pc, #116]	; (8000c94 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2232      	movs	r2, #50	; 0x32
 8000c24:	fb02 f303 	mul.w	r3, r2, r3
 8000c28:	4a1b      	ldr	r2, [pc, #108]	; (8000c98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2e:	0c9b      	lsrs	r3, r3, #18
 8000c30:	3301      	adds	r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c34:	e002      	b.n	8000c3c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c3c:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c3e:	695b      	ldr	r3, [r3, #20]
 8000c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c48:	d102      	bne.n	8000c50 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d1f2      	bne.n	8000c36 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c50:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c52:	695b      	ldr	r3, [r3, #20]
 8000c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c5c:	d110      	bne.n	8000c80 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	e00f      	b.n	8000c82 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c62:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c6e:	d007      	beq.n	8000c80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c70:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c78:	4a05      	ldr	r2, [pc, #20]	; (8000c90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c7e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3714      	adds	r7, #20
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	40007000 	.word	0x40007000
 8000c94:	20000000 	.word	0x20000000
 8000c98:	431bde83 	.word	0x431bde83

08000c9c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b088      	sub	sp, #32
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d101      	bne.n	8000cae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e3ca      	b.n	8001444 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cae:	4b97      	ldr	r3, [pc, #604]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	f003 030c 	and.w	r3, r3, #12
 8000cb6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cb8:	4b94      	ldr	r3, [pc, #592]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	f003 0303 	and.w	r3, r3, #3
 8000cc0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 0310 	and.w	r3, r3, #16
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f000 80e4 	beq.w	8000e98 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d007      	beq.n	8000ce6 <HAL_RCC_OscConfig+0x4a>
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	2b0c      	cmp	r3, #12
 8000cda:	f040 808b 	bne.w	8000df4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	f040 8087 	bne.w	8000df4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ce6:	4b89      	ldr	r3, [pc, #548]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d005      	beq.n	8000cfe <HAL_RCC_OscConfig+0x62>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d101      	bne.n	8000cfe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e3a2      	b.n	8001444 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6a1a      	ldr	r2, [r3, #32]
 8000d02:	4b82      	ldr	r3, [pc, #520]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f003 0308 	and.w	r3, r3, #8
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d004      	beq.n	8000d18 <HAL_RCC_OscConfig+0x7c>
 8000d0e:	4b7f      	ldr	r3, [pc, #508]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d16:	e005      	b.n	8000d24 <HAL_RCC_OscConfig+0x88>
 8000d18:	4b7c      	ldr	r3, [pc, #496]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d1e:	091b      	lsrs	r3, r3, #4
 8000d20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d223      	bcs.n	8000d70 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6a1b      	ldr	r3, [r3, #32]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f000 fd1d 	bl	800176c <RCC_SetFlashLatencyFromMSIRange>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e383      	b.n	8001444 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d3c:	4b73      	ldr	r3, [pc, #460]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a72      	ldr	r2, [pc, #456]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000d42:	f043 0308 	orr.w	r3, r3, #8
 8000d46:	6013      	str	r3, [r2, #0]
 8000d48:	4b70      	ldr	r3, [pc, #448]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6a1b      	ldr	r3, [r3, #32]
 8000d54:	496d      	ldr	r1, [pc, #436]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000d56:	4313      	orrs	r3, r2
 8000d58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d5a:	4b6c      	ldr	r3, [pc, #432]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	021b      	lsls	r3, r3, #8
 8000d68:	4968      	ldr	r1, [pc, #416]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	604b      	str	r3, [r1, #4]
 8000d6e:	e025      	b.n	8000dbc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d70:	4b66      	ldr	r3, [pc, #408]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a65      	ldr	r2, [pc, #404]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000d76:	f043 0308 	orr.w	r3, r3, #8
 8000d7a:	6013      	str	r3, [r2, #0]
 8000d7c:	4b63      	ldr	r3, [pc, #396]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6a1b      	ldr	r3, [r3, #32]
 8000d88:	4960      	ldr	r1, [pc, #384]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d8e:	4b5f      	ldr	r3, [pc, #380]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	021b      	lsls	r3, r3, #8
 8000d9c:	495b      	ldr	r1, [pc, #364]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d109      	bne.n	8000dbc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6a1b      	ldr	r3, [r3, #32]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 fcdd 	bl	800176c <RCC_SetFlashLatencyFromMSIRange>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	e343      	b.n	8001444 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000dbc:	f000 fc4a 	bl	8001654 <HAL_RCC_GetSysClockFreq>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	4b52      	ldr	r3, [pc, #328]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	091b      	lsrs	r3, r3, #4
 8000dc8:	f003 030f 	and.w	r3, r3, #15
 8000dcc:	4950      	ldr	r1, [pc, #320]	; (8000f10 <HAL_RCC_OscConfig+0x274>)
 8000dce:	5ccb      	ldrb	r3, [r1, r3]
 8000dd0:	f003 031f 	and.w	r3, r3, #31
 8000dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8000dd8:	4a4e      	ldr	r2, [pc, #312]	; (8000f14 <HAL_RCC_OscConfig+0x278>)
 8000dda:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000ddc:	4b4e      	ldr	r3, [pc, #312]	; (8000f18 <HAL_RCC_OscConfig+0x27c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff fd81 	bl	80008e8 <HAL_InitTick>
 8000de6:	4603      	mov	r3, r0
 8000de8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d052      	beq.n	8000e96 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	e327      	b.n	8001444 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d032      	beq.n	8000e62 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000dfc:	4b43      	ldr	r3, [pc, #268]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a42      	ldr	r2, [pc, #264]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e08:	f7ff fdbe 	bl	8000988 <HAL_GetTick>
 8000e0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e0e:	e008      	b.n	8000e22 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e10:	f7ff fdba 	bl	8000988 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d901      	bls.n	8000e22 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e310      	b.n	8001444 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e22:	4b3a      	ldr	r3, [pc, #232]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d0f0      	beq.n	8000e10 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e2e:	4b37      	ldr	r3, [pc, #220]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a36      	ldr	r2, [pc, #216]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000e34:	f043 0308 	orr.w	r3, r3, #8
 8000e38:	6013      	str	r3, [r2, #0]
 8000e3a:	4b34      	ldr	r3, [pc, #208]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6a1b      	ldr	r3, [r3, #32]
 8000e46:	4931      	ldr	r1, [pc, #196]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e4c:	4b2f      	ldr	r3, [pc, #188]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	69db      	ldr	r3, [r3, #28]
 8000e58:	021b      	lsls	r3, r3, #8
 8000e5a:	492c      	ldr	r1, [pc, #176]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	604b      	str	r3, [r1, #4]
 8000e60:	e01a      	b.n	8000e98 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e62:	4b2a      	ldr	r3, [pc, #168]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a29      	ldr	r2, [pc, #164]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000e68:	f023 0301 	bic.w	r3, r3, #1
 8000e6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e6e:	f7ff fd8b 	bl	8000988 <HAL_GetTick>
 8000e72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e74:	e008      	b.n	8000e88 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e76:	f7ff fd87 	bl	8000988 <HAL_GetTick>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d901      	bls.n	8000e88 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000e84:	2303      	movs	r3, #3
 8000e86:	e2dd      	b.n	8001444 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e88:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d1f0      	bne.n	8000e76 <HAL_RCC_OscConfig+0x1da>
 8000e94:	e000      	b.n	8000e98 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e96:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d074      	beq.n	8000f8e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	2b08      	cmp	r3, #8
 8000ea8:	d005      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x21a>
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	2b0c      	cmp	r3, #12
 8000eae:	d10e      	bne.n	8000ece <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	2b03      	cmp	r3, #3
 8000eb4:	d10b      	bne.n	8000ece <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d064      	beq.n	8000f8c <HAL_RCC_OscConfig+0x2f0>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d160      	bne.n	8000f8c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e2ba      	b.n	8001444 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ed6:	d106      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x24a>
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	e026      	b.n	8000f34 <HAL_RCC_OscConfig+0x298>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000eee:	d115      	bne.n	8000f1c <HAL_RCC_OscConfig+0x280>
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a05      	ldr	r2, [pc, #20]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000ef6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a02      	ldr	r2, [pc, #8]	; (8000f0c <HAL_RCC_OscConfig+0x270>)
 8000f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f06:	6013      	str	r3, [r2, #0]
 8000f08:	e014      	b.n	8000f34 <HAL_RCC_OscConfig+0x298>
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	0800192c 	.word	0x0800192c
 8000f14:	20000000 	.word	0x20000000
 8000f18:	20000004 	.word	0x20000004
 8000f1c:	4ba0      	ldr	r3, [pc, #640]	; (80011a0 <HAL_RCC_OscConfig+0x504>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a9f      	ldr	r2, [pc, #636]	; (80011a0 <HAL_RCC_OscConfig+0x504>)
 8000f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f26:	6013      	str	r3, [r2, #0]
 8000f28:	4b9d      	ldr	r3, [pc, #628]	; (80011a0 <HAL_RCC_OscConfig+0x504>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a9c      	ldr	r2, [pc, #624]	; (80011a0 <HAL_RCC_OscConfig+0x504>)
 8000f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d013      	beq.n	8000f64 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f3c:	f7ff fd24 	bl	8000988 <HAL_GetTick>
 8000f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f42:	e008      	b.n	8000f56 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f44:	f7ff fd20 	bl	8000988 <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	2b64      	cmp	r3, #100	; 0x64
 8000f50:	d901      	bls.n	8000f56 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000f52:	2303      	movs	r3, #3
 8000f54:	e276      	b.n	8001444 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f56:	4b92      	ldr	r3, [pc, #584]	; (80011a0 <HAL_RCC_OscConfig+0x504>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d0f0      	beq.n	8000f44 <HAL_RCC_OscConfig+0x2a8>
 8000f62:	e014      	b.n	8000f8e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f64:	f7ff fd10 	bl	8000988 <HAL_GetTick>
 8000f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f6a:	e008      	b.n	8000f7e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f6c:	f7ff fd0c 	bl	8000988 <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	2b64      	cmp	r3, #100	; 0x64
 8000f78:	d901      	bls.n	8000f7e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e262      	b.n	8001444 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f7e:	4b88      	ldr	r3, [pc, #544]	; (80011a0 <HAL_RCC_OscConfig+0x504>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d1f0      	bne.n	8000f6c <HAL_RCC_OscConfig+0x2d0>
 8000f8a:	e000      	b.n	8000f8e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d060      	beq.n	800105c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	2b04      	cmp	r3, #4
 8000f9e:	d005      	beq.n	8000fac <HAL_RCC_OscConfig+0x310>
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	2b0c      	cmp	r3, #12
 8000fa4:	d119      	bne.n	8000fda <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d116      	bne.n	8000fda <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fac:	4b7c      	ldr	r3, [pc, #496]	; (80011a0 <HAL_RCC_OscConfig+0x504>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d005      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x328>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d101      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e23f      	b.n	8001444 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fc4:	4b76      	ldr	r3, [pc, #472]	; (80011a0 <HAL_RCC_OscConfig+0x504>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	691b      	ldr	r3, [r3, #16]
 8000fd0:	061b      	lsls	r3, r3, #24
 8000fd2:	4973      	ldr	r1, [pc, #460]	; (80011a0 <HAL_RCC_OscConfig+0x504>)
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fd8:	e040      	b.n	800105c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d023      	beq.n	800102a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fe2:	4b6f      	ldr	r3, [pc, #444]	; (80011a0 <HAL_RCC_OscConfig+0x504>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a6e      	ldr	r2, [pc, #440]	; (80011a0 <HAL_RCC_OscConfig+0x504>)
 8000fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fee:	f7ff fccb 	bl	8000988 <HAL_GetTick>
 8000ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ff4:	e008      	b.n	8001008 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ff6:	f7ff fcc7 	bl	8000988 <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d901      	bls.n	8001008 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e21d      	b.n	8001444 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001008:	4b65      	ldr	r3, [pc, #404]	; (80011a0 <HAL_RCC_OscConfig+0x504>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001010:	2b00      	cmp	r3, #0
 8001012:	d0f0      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001014:	4b62      	ldr	r3, [pc, #392]	; (80011a0 <HAL_RCC_OscConfig+0x504>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	691b      	ldr	r3, [r3, #16]
 8001020:	061b      	lsls	r3, r3, #24
 8001022:	495f      	ldr	r1, [pc, #380]	; (80011a0 <HAL_RCC_OscConfig+0x504>)
 8001024:	4313      	orrs	r3, r2
 8001026:	604b      	str	r3, [r1, #4]
 8001028:	e018      	b.n	800105c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800102a:	4b5d      	ldr	r3, [pc, #372]	; (80011a0 <HAL_RCC_OscConfig+0x504>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a5c      	ldr	r2, [pc, #368]	; (80011a0 <HAL_RCC_OscConfig+0x504>)
 8001030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001034:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001036:	f7ff fca7 	bl	8000988 <HAL_GetTick>
 800103a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800103c:	e008      	b.n	8001050 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800103e:	f7ff fca3 	bl	8000988 <HAL_GetTick>
 8001042:	4602      	mov	r2, r0
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d901      	bls.n	8001050 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800104c:	2303      	movs	r3, #3
 800104e:	e1f9      	b.n	8001444 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001050:	4b53      	ldr	r3, [pc, #332]	; (80011a0 <HAL_RCC_OscConfig+0x504>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1f0      	bne.n	800103e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0308 	and.w	r3, r3, #8
 8001064:	2b00      	cmp	r3, #0
 8001066:	d03c      	beq.n	80010e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d01c      	beq.n	80010aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001070:	4b4b      	ldr	r3, [pc, #300]	; (80011a0 <HAL_RCC_OscConfig+0x504>)
 8001072:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001076:	4a4a      	ldr	r2, [pc, #296]	; (80011a0 <HAL_RCC_OscConfig+0x504>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001080:	f7ff fc82 	bl	8000988 <HAL_GetTick>
 8001084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001086:	e008      	b.n	800109a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001088:	f7ff fc7e 	bl	8000988 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	2b02      	cmp	r3, #2
 8001094:	d901      	bls.n	800109a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e1d4      	b.n	8001444 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800109a:	4b41      	ldr	r3, [pc, #260]	; (80011a0 <HAL_RCC_OscConfig+0x504>)
 800109c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d0ef      	beq.n	8001088 <HAL_RCC_OscConfig+0x3ec>
 80010a8:	e01b      	b.n	80010e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010aa:	4b3d      	ldr	r3, [pc, #244]	; (80011a0 <HAL_RCC_OscConfig+0x504>)
 80010ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010b0:	4a3b      	ldr	r2, [pc, #236]	; (80011a0 <HAL_RCC_OscConfig+0x504>)
 80010b2:	f023 0301 	bic.w	r3, r3, #1
 80010b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010ba:	f7ff fc65 	bl	8000988 <HAL_GetTick>
 80010be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010c2:	f7ff fc61 	bl	8000988 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e1b7      	b.n	8001444 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010d4:	4b32      	ldr	r3, [pc, #200]	; (80011a0 <HAL_RCC_OscConfig+0x504>)
 80010d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1ef      	bne.n	80010c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0304 	and.w	r3, r3, #4
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f000 80a6 	beq.w	800123c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010f0:	2300      	movs	r3, #0
 80010f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80010f4:	4b2a      	ldr	r3, [pc, #168]	; (80011a0 <HAL_RCC_OscConfig+0x504>)
 80010f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d10d      	bne.n	800111c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001100:	4b27      	ldr	r3, [pc, #156]	; (80011a0 <HAL_RCC_OscConfig+0x504>)
 8001102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001104:	4a26      	ldr	r2, [pc, #152]	; (80011a0 <HAL_RCC_OscConfig+0x504>)
 8001106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110a:	6593      	str	r3, [r2, #88]	; 0x58
 800110c:	4b24      	ldr	r3, [pc, #144]	; (80011a0 <HAL_RCC_OscConfig+0x504>)
 800110e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001118:	2301      	movs	r3, #1
 800111a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800111c:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <HAL_RCC_OscConfig+0x508>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001124:	2b00      	cmp	r3, #0
 8001126:	d118      	bne.n	800115a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001128:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <HAL_RCC_OscConfig+0x508>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a1d      	ldr	r2, [pc, #116]	; (80011a4 <HAL_RCC_OscConfig+0x508>)
 800112e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001132:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001134:	f7ff fc28 	bl	8000988 <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800113c:	f7ff fc24 	bl	8000988 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e17a      	b.n	8001444 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <HAL_RCC_OscConfig+0x508>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001156:	2b00      	cmp	r3, #0
 8001158:	d0f0      	beq.n	800113c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d108      	bne.n	8001174 <HAL_RCC_OscConfig+0x4d8>
 8001162:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <HAL_RCC_OscConfig+0x504>)
 8001164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001168:	4a0d      	ldr	r2, [pc, #52]	; (80011a0 <HAL_RCC_OscConfig+0x504>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001172:	e029      	b.n	80011c8 <HAL_RCC_OscConfig+0x52c>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	2b05      	cmp	r3, #5
 800117a:	d115      	bne.n	80011a8 <HAL_RCC_OscConfig+0x50c>
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <HAL_RCC_OscConfig+0x504>)
 800117e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001182:	4a07      	ldr	r2, [pc, #28]	; (80011a0 <HAL_RCC_OscConfig+0x504>)
 8001184:	f043 0304 	orr.w	r3, r3, #4
 8001188:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800118c:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <HAL_RCC_OscConfig+0x504>)
 800118e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001192:	4a03      	ldr	r2, [pc, #12]	; (80011a0 <HAL_RCC_OscConfig+0x504>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800119c:	e014      	b.n	80011c8 <HAL_RCC_OscConfig+0x52c>
 800119e:	bf00      	nop
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40007000 	.word	0x40007000
 80011a8:	4b9c      	ldr	r3, [pc, #624]	; (800141c <HAL_RCC_OscConfig+0x780>)
 80011aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011ae:	4a9b      	ldr	r2, [pc, #620]	; (800141c <HAL_RCC_OscConfig+0x780>)
 80011b0:	f023 0301 	bic.w	r3, r3, #1
 80011b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011b8:	4b98      	ldr	r3, [pc, #608]	; (800141c <HAL_RCC_OscConfig+0x780>)
 80011ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011be:	4a97      	ldr	r2, [pc, #604]	; (800141c <HAL_RCC_OscConfig+0x780>)
 80011c0:	f023 0304 	bic.w	r3, r3, #4
 80011c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d016      	beq.n	80011fe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011d0:	f7ff fbda 	bl	8000988 <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011d6:	e00a      	b.n	80011ee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011d8:	f7ff fbd6 	bl	8000988 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e12a      	b.n	8001444 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011ee:	4b8b      	ldr	r3, [pc, #556]	; (800141c <HAL_RCC_OscConfig+0x780>)
 80011f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d0ed      	beq.n	80011d8 <HAL_RCC_OscConfig+0x53c>
 80011fc:	e015      	b.n	800122a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011fe:	f7ff fbc3 	bl	8000988 <HAL_GetTick>
 8001202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001204:	e00a      	b.n	800121c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001206:	f7ff fbbf 	bl	8000988 <HAL_GetTick>
 800120a:	4602      	mov	r2, r0
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	f241 3288 	movw	r2, #5000	; 0x1388
 8001214:	4293      	cmp	r3, r2
 8001216:	d901      	bls.n	800121c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e113      	b.n	8001444 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800121c:	4b7f      	ldr	r3, [pc, #508]	; (800141c <HAL_RCC_OscConfig+0x780>)
 800121e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1ed      	bne.n	8001206 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800122a:	7ffb      	ldrb	r3, [r7, #31]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d105      	bne.n	800123c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001230:	4b7a      	ldr	r3, [pc, #488]	; (800141c <HAL_RCC_OscConfig+0x780>)
 8001232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001234:	4a79      	ldr	r2, [pc, #484]	; (800141c <HAL_RCC_OscConfig+0x780>)
 8001236:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800123a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001240:	2b00      	cmp	r3, #0
 8001242:	f000 80fe 	beq.w	8001442 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800124a:	2b02      	cmp	r3, #2
 800124c:	f040 80d0 	bne.w	80013f0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001250:	4b72      	ldr	r3, [pc, #456]	; (800141c <HAL_RCC_OscConfig+0x780>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	f003 0203 	and.w	r2, r3, #3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001260:	429a      	cmp	r2, r3
 8001262:	d130      	bne.n	80012c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	3b01      	subs	r3, #1
 8001270:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001272:	429a      	cmp	r2, r3
 8001274:	d127      	bne.n	80012c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001280:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001282:	429a      	cmp	r2, r3
 8001284:	d11f      	bne.n	80012c6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001290:	2a07      	cmp	r2, #7
 8001292:	bf14      	ite	ne
 8001294:	2201      	movne	r2, #1
 8001296:	2200      	moveq	r2, #0
 8001298:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800129a:	4293      	cmp	r3, r2
 800129c:	d113      	bne.n	80012c6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012a8:	085b      	lsrs	r3, r3, #1
 80012aa:	3b01      	subs	r3, #1
 80012ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d109      	bne.n	80012c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012bc:	085b      	lsrs	r3, r3, #1
 80012be:	3b01      	subs	r3, #1
 80012c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d06e      	beq.n	80013a4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	2b0c      	cmp	r3, #12
 80012ca:	d069      	beq.n	80013a0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80012cc:	4b53      	ldr	r3, [pc, #332]	; (800141c <HAL_RCC_OscConfig+0x780>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d105      	bne.n	80012e4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80012d8:	4b50      	ldr	r3, [pc, #320]	; (800141c <HAL_RCC_OscConfig+0x780>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e0ad      	b.n	8001444 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80012e8:	4b4c      	ldr	r3, [pc, #304]	; (800141c <HAL_RCC_OscConfig+0x780>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a4b      	ldr	r2, [pc, #300]	; (800141c <HAL_RCC_OscConfig+0x780>)
 80012ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012f2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80012f4:	f7ff fb48 	bl	8000988 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012fc:	f7ff fb44 	bl	8000988 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e09a      	b.n	8001444 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800130e:	4b43      	ldr	r3, [pc, #268]	; (800141c <HAL_RCC_OscConfig+0x780>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f0      	bne.n	80012fc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800131a:	4b40      	ldr	r3, [pc, #256]	; (800141c <HAL_RCC_OscConfig+0x780>)
 800131c:	68da      	ldr	r2, [r3, #12]
 800131e:	4b40      	ldr	r3, [pc, #256]	; (8001420 <HAL_RCC_OscConfig+0x784>)
 8001320:	4013      	ands	r3, r2
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800132a:	3a01      	subs	r2, #1
 800132c:	0112      	lsls	r2, r2, #4
 800132e:	4311      	orrs	r1, r2
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001334:	0212      	lsls	r2, r2, #8
 8001336:	4311      	orrs	r1, r2
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800133c:	0852      	lsrs	r2, r2, #1
 800133e:	3a01      	subs	r2, #1
 8001340:	0552      	lsls	r2, r2, #21
 8001342:	4311      	orrs	r1, r2
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001348:	0852      	lsrs	r2, r2, #1
 800134a:	3a01      	subs	r2, #1
 800134c:	0652      	lsls	r2, r2, #25
 800134e:	4311      	orrs	r1, r2
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001354:	0912      	lsrs	r2, r2, #4
 8001356:	0452      	lsls	r2, r2, #17
 8001358:	430a      	orrs	r2, r1
 800135a:	4930      	ldr	r1, [pc, #192]	; (800141c <HAL_RCC_OscConfig+0x780>)
 800135c:	4313      	orrs	r3, r2
 800135e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001360:	4b2e      	ldr	r3, [pc, #184]	; (800141c <HAL_RCC_OscConfig+0x780>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a2d      	ldr	r2, [pc, #180]	; (800141c <HAL_RCC_OscConfig+0x780>)
 8001366:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800136a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800136c:	4b2b      	ldr	r3, [pc, #172]	; (800141c <HAL_RCC_OscConfig+0x780>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	4a2a      	ldr	r2, [pc, #168]	; (800141c <HAL_RCC_OscConfig+0x780>)
 8001372:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001376:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001378:	f7ff fb06 	bl	8000988 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001380:	f7ff fb02 	bl	8000988 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e058      	b.n	8001444 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001392:	4b22      	ldr	r3, [pc, #136]	; (800141c <HAL_RCC_OscConfig+0x780>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0f0      	beq.n	8001380 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800139e:	e050      	b.n	8001442 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e04f      	b.n	8001444 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013a4:	4b1d      	ldr	r3, [pc, #116]	; (800141c <HAL_RCC_OscConfig+0x780>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d148      	bne.n	8001442 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80013b0:	4b1a      	ldr	r3, [pc, #104]	; (800141c <HAL_RCC_OscConfig+0x780>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a19      	ldr	r2, [pc, #100]	; (800141c <HAL_RCC_OscConfig+0x780>)
 80013b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013bc:	4b17      	ldr	r3, [pc, #92]	; (800141c <HAL_RCC_OscConfig+0x780>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	4a16      	ldr	r2, [pc, #88]	; (800141c <HAL_RCC_OscConfig+0x780>)
 80013c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80013c8:	f7ff fade 	bl	8000988 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013d0:	f7ff fada 	bl	8000988 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e030      	b.n	8001444 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <HAL_RCC_OscConfig+0x780>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0f0      	beq.n	80013d0 <HAL_RCC_OscConfig+0x734>
 80013ee:	e028      	b.n	8001442 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	2b0c      	cmp	r3, #12
 80013f4:	d023      	beq.n	800143e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <HAL_RCC_OscConfig+0x780>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a08      	ldr	r2, [pc, #32]	; (800141c <HAL_RCC_OscConfig+0x780>)
 80013fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001402:	f7ff fac1 	bl	8000988 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001408:	e00c      	b.n	8001424 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800140a:	f7ff fabd 	bl	8000988 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d905      	bls.n	8001424 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e013      	b.n	8001444 <HAL_RCC_OscConfig+0x7a8>
 800141c:	40021000 	.word	0x40021000
 8001420:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001424:	4b09      	ldr	r3, [pc, #36]	; (800144c <HAL_RCC_OscConfig+0x7b0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1ec      	bne.n	800140a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_RCC_OscConfig+0x7b0>)
 8001432:	68da      	ldr	r2, [r3, #12]
 8001434:	4905      	ldr	r1, [pc, #20]	; (800144c <HAL_RCC_OscConfig+0x7b0>)
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_RCC_OscConfig+0x7b4>)
 8001438:	4013      	ands	r3, r2
 800143a:	60cb      	str	r3, [r1, #12]
 800143c:	e001      	b.n	8001442 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e000      	b.n	8001444 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3720      	adds	r7, #32
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40021000 	.word	0x40021000
 8001450:	feeefffc 	.word	0xfeeefffc

08001454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d101      	bne.n	8001468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e0e7      	b.n	8001638 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001468:	4b75      	ldr	r3, [pc, #468]	; (8001640 <HAL_RCC_ClockConfig+0x1ec>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	429a      	cmp	r2, r3
 8001474:	d910      	bls.n	8001498 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001476:	4b72      	ldr	r3, [pc, #456]	; (8001640 <HAL_RCC_ClockConfig+0x1ec>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f023 0207 	bic.w	r2, r3, #7
 800147e:	4970      	ldr	r1, [pc, #448]	; (8001640 <HAL_RCC_ClockConfig+0x1ec>)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	4313      	orrs	r3, r2
 8001484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001486:	4b6e      	ldr	r3, [pc, #440]	; (8001640 <HAL_RCC_ClockConfig+0x1ec>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	429a      	cmp	r2, r3
 8001492:	d001      	beq.n	8001498 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e0cf      	b.n	8001638 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d010      	beq.n	80014c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	4b66      	ldr	r3, [pc, #408]	; (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d908      	bls.n	80014c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014b4:	4b63      	ldr	r3, [pc, #396]	; (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	4960      	ldr	r1, [pc, #384]	; (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d04c      	beq.n	800156c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	d107      	bne.n	80014ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014da:	4b5a      	ldr	r3, [pc, #360]	; (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d121      	bne.n	800152a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e0a6      	b.n	8001638 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d107      	bne.n	8001502 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014f2:	4b54      	ldr	r3, [pc, #336]	; (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d115      	bne.n	800152a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e09a      	b.n	8001638 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d107      	bne.n	800151a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800150a:	4b4e      	ldr	r3, [pc, #312]	; (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d109      	bne.n	800152a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e08e      	b.n	8001638 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800151a:	4b4a      	ldr	r3, [pc, #296]	; (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e086      	b.n	8001638 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800152a:	4b46      	ldr	r3, [pc, #280]	; (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f023 0203 	bic.w	r2, r3, #3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	4943      	ldr	r1, [pc, #268]	; (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 8001538:	4313      	orrs	r3, r2
 800153a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800153c:	f7ff fa24 	bl	8000988 <HAL_GetTick>
 8001540:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001542:	e00a      	b.n	800155a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001544:	f7ff fa20 	bl	8000988 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001552:	4293      	cmp	r3, r2
 8001554:	d901      	bls.n	800155a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e06e      	b.n	8001638 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800155a:	4b3a      	ldr	r3, [pc, #232]	; (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 020c 	and.w	r2, r3, #12
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	429a      	cmp	r2, r3
 800156a:	d1eb      	bne.n	8001544 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d010      	beq.n	800159a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	4b31      	ldr	r3, [pc, #196]	; (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001584:	429a      	cmp	r2, r3
 8001586:	d208      	bcs.n	800159a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001588:	4b2e      	ldr	r3, [pc, #184]	; (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	492b      	ldr	r1, [pc, #172]	; (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 8001596:	4313      	orrs	r3, r2
 8001598:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800159a:	4b29      	ldr	r3, [pc, #164]	; (8001640 <HAL_RCC_ClockConfig+0x1ec>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d210      	bcs.n	80015ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a8:	4b25      	ldr	r3, [pc, #148]	; (8001640 <HAL_RCC_ClockConfig+0x1ec>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f023 0207 	bic.w	r2, r3, #7
 80015b0:	4923      	ldr	r1, [pc, #140]	; (8001640 <HAL_RCC_ClockConfig+0x1ec>)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b8:	4b21      	ldr	r3, [pc, #132]	; (8001640 <HAL_RCC_ClockConfig+0x1ec>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d001      	beq.n	80015ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e036      	b.n	8001638 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0304 	and.w	r3, r3, #4
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d008      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015d6:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	4918      	ldr	r1, [pc, #96]	; (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d009      	beq.n	8001608 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015f4:	4b13      	ldr	r3, [pc, #76]	; (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	4910      	ldr	r1, [pc, #64]	; (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 8001604:	4313      	orrs	r3, r2
 8001606:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001608:	f000 f824 	bl	8001654 <HAL_RCC_GetSysClockFreq>
 800160c:	4602      	mov	r2, r0
 800160e:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	091b      	lsrs	r3, r3, #4
 8001614:	f003 030f 	and.w	r3, r3, #15
 8001618:	490b      	ldr	r1, [pc, #44]	; (8001648 <HAL_RCC_ClockConfig+0x1f4>)
 800161a:	5ccb      	ldrb	r3, [r1, r3]
 800161c:	f003 031f 	and.w	r3, r3, #31
 8001620:	fa22 f303 	lsr.w	r3, r2, r3
 8001624:	4a09      	ldr	r2, [pc, #36]	; (800164c <HAL_RCC_ClockConfig+0x1f8>)
 8001626:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <HAL_RCC_ClockConfig+0x1fc>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff f95b 	bl	80008e8 <HAL_InitTick>
 8001632:	4603      	mov	r3, r0
 8001634:	72fb      	strb	r3, [r7, #11]

  return status;
 8001636:	7afb      	ldrb	r3, [r7, #11]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40022000 	.word	0x40022000
 8001644:	40021000 	.word	0x40021000
 8001648:	0800192c 	.word	0x0800192c
 800164c:	20000000 	.word	0x20000000
 8001650:	20000004 	.word	0x20000004

08001654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001654:	b480      	push	{r7}
 8001656:	b089      	sub	sp, #36	; 0x24
 8001658:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001662:	4b3e      	ldr	r3, [pc, #248]	; (800175c <HAL_RCC_GetSysClockFreq+0x108>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 030c 	and.w	r3, r3, #12
 800166a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800166c:	4b3b      	ldr	r3, [pc, #236]	; (800175c <HAL_RCC_GetSysClockFreq+0x108>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	f003 0303 	and.w	r3, r3, #3
 8001674:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d005      	beq.n	8001688 <HAL_RCC_GetSysClockFreq+0x34>
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	2b0c      	cmp	r3, #12
 8001680:	d121      	bne.n	80016c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d11e      	bne.n	80016c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001688:	4b34      	ldr	r3, [pc, #208]	; (800175c <HAL_RCC_GetSysClockFreq+0x108>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0308 	and.w	r3, r3, #8
 8001690:	2b00      	cmp	r3, #0
 8001692:	d107      	bne.n	80016a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001694:	4b31      	ldr	r3, [pc, #196]	; (800175c <HAL_RCC_GetSysClockFreq+0x108>)
 8001696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800169a:	0a1b      	lsrs	r3, r3, #8
 800169c:	f003 030f 	and.w	r3, r3, #15
 80016a0:	61fb      	str	r3, [r7, #28]
 80016a2:	e005      	b.n	80016b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80016a4:	4b2d      	ldr	r3, [pc, #180]	; (800175c <HAL_RCC_GetSysClockFreq+0x108>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	091b      	lsrs	r3, r3, #4
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80016b0:	4a2b      	ldr	r2, [pc, #172]	; (8001760 <HAL_RCC_GetSysClockFreq+0x10c>)
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d10d      	bne.n	80016dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016c4:	e00a      	b.n	80016dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	2b04      	cmp	r3, #4
 80016ca:	d102      	bne.n	80016d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80016cc:	4b25      	ldr	r3, [pc, #148]	; (8001764 <HAL_RCC_GetSysClockFreq+0x110>)
 80016ce:	61bb      	str	r3, [r7, #24]
 80016d0:	e004      	b.n	80016dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d101      	bne.n	80016dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016d8:	4b23      	ldr	r3, [pc, #140]	; (8001768 <HAL_RCC_GetSysClockFreq+0x114>)
 80016da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	2b0c      	cmp	r3, #12
 80016e0:	d134      	bne.n	800174c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016e2:	4b1e      	ldr	r3, [pc, #120]	; (800175c <HAL_RCC_GetSysClockFreq+0x108>)
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	f003 0303 	and.w	r3, r3, #3
 80016ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d003      	beq.n	80016fa <HAL_RCC_GetSysClockFreq+0xa6>
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	2b03      	cmp	r3, #3
 80016f6:	d003      	beq.n	8001700 <HAL_RCC_GetSysClockFreq+0xac>
 80016f8:	e005      	b.n	8001706 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80016fa:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <HAL_RCC_GetSysClockFreq+0x110>)
 80016fc:	617b      	str	r3, [r7, #20]
      break;
 80016fe:	e005      	b.n	800170c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001700:	4b19      	ldr	r3, [pc, #100]	; (8001768 <HAL_RCC_GetSysClockFreq+0x114>)
 8001702:	617b      	str	r3, [r7, #20]
      break;
 8001704:	e002      	b.n	800170c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	617b      	str	r3, [r7, #20]
      break;
 800170a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800170c:	4b13      	ldr	r3, [pc, #76]	; (800175c <HAL_RCC_GetSysClockFreq+0x108>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	091b      	lsrs	r3, r3, #4
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	3301      	adds	r3, #1
 8001718:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800171a:	4b10      	ldr	r3, [pc, #64]	; (800175c <HAL_RCC_GetSysClockFreq+0x108>)
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	0a1b      	lsrs	r3, r3, #8
 8001720:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001724:	697a      	ldr	r2, [r7, #20]
 8001726:	fb03 f202 	mul.w	r2, r3, r2
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001730:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001732:	4b0a      	ldr	r3, [pc, #40]	; (800175c <HAL_RCC_GetSysClockFreq+0x108>)
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	0e5b      	lsrs	r3, r3, #25
 8001738:	f003 0303 	and.w	r3, r3, #3
 800173c:	3301      	adds	r3, #1
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	fbb2 f3f3 	udiv	r3, r2, r3
 800174a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800174c:	69bb      	ldr	r3, [r7, #24]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3724      	adds	r7, #36	; 0x24
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40021000 	.word	0x40021000
 8001760:	0800193c 	.word	0x0800193c
 8001764:	00f42400 	.word	0x00f42400
 8001768:	007a1200 	.word	0x007a1200

0800176c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001774:	2300      	movs	r3, #0
 8001776:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001778:	4b2a      	ldr	r3, [pc, #168]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800177a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001784:	f7ff fa26 	bl	8000bd4 <HAL_PWREx_GetVoltageRange>
 8001788:	6178      	str	r0, [r7, #20]
 800178a:	e014      	b.n	80017b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800178c:	4b25      	ldr	r3, [pc, #148]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800178e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001790:	4a24      	ldr	r2, [pc, #144]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001796:	6593      	str	r3, [r2, #88]	; 0x58
 8001798:	4b22      	ldr	r3, [pc, #136]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800179a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80017a4:	f7ff fa16 	bl	8000bd4 <HAL_PWREx_GetVoltageRange>
 80017a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80017aa:	4b1e      	ldr	r3, [pc, #120]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ae:	4a1d      	ldr	r2, [pc, #116]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017bc:	d10b      	bne.n	80017d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b80      	cmp	r3, #128	; 0x80
 80017c2:	d919      	bls.n	80017f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2ba0      	cmp	r3, #160	; 0xa0
 80017c8:	d902      	bls.n	80017d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017ca:	2302      	movs	r3, #2
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	e013      	b.n	80017f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017d0:	2301      	movs	r3, #1
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	e010      	b.n	80017f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b80      	cmp	r3, #128	; 0x80
 80017da:	d902      	bls.n	80017e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80017dc:	2303      	movs	r3, #3
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	e00a      	b.n	80017f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b80      	cmp	r3, #128	; 0x80
 80017e6:	d102      	bne.n	80017ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017e8:	2302      	movs	r3, #2
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	e004      	b.n	80017f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b70      	cmp	r3, #112	; 0x70
 80017f2:	d101      	bne.n	80017f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017f4:	2301      	movs	r3, #1
 80017f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f023 0207 	bic.w	r2, r3, #7
 8001800:	4909      	ldr	r1, [pc, #36]	; (8001828 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001808:	4b07      	ldr	r3, [pc, #28]	; (8001828 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0307 	and.w	r3, r3, #7
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	429a      	cmp	r2, r3
 8001814:	d001      	beq.n	800181a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40021000 	.word	0x40021000
 8001828:	40022000 	.word	0x40022000

0800182c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8001830:	4b05      	ldr	r3, [pc, #20]	; (8001848 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a04      	ldr	r2, [pc, #16]	; (8001848 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001836:	f043 0304 	orr.w	r3, r3, #4
 800183a:	6013      	str	r3, [r2, #0]
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40021000 	.word	0x40021000

0800184c <memset>:
 800184c:	4402      	add	r2, r0
 800184e:	4603      	mov	r3, r0
 8001850:	4293      	cmp	r3, r2
 8001852:	d100      	bne.n	8001856 <memset+0xa>
 8001854:	4770      	bx	lr
 8001856:	f803 1b01 	strb.w	r1, [r3], #1
 800185a:	e7f9      	b.n	8001850 <memset+0x4>

0800185c <__libc_init_array>:
 800185c:	b570      	push	{r4, r5, r6, lr}
 800185e:	4d0d      	ldr	r5, [pc, #52]	; (8001894 <__libc_init_array+0x38>)
 8001860:	4c0d      	ldr	r4, [pc, #52]	; (8001898 <__libc_init_array+0x3c>)
 8001862:	1b64      	subs	r4, r4, r5
 8001864:	10a4      	asrs	r4, r4, #2
 8001866:	2600      	movs	r6, #0
 8001868:	42a6      	cmp	r6, r4
 800186a:	d109      	bne.n	8001880 <__libc_init_array+0x24>
 800186c:	4d0b      	ldr	r5, [pc, #44]	; (800189c <__libc_init_array+0x40>)
 800186e:	4c0c      	ldr	r4, [pc, #48]	; (80018a0 <__libc_init_array+0x44>)
 8001870:	f000 f818 	bl	80018a4 <_init>
 8001874:	1b64      	subs	r4, r4, r5
 8001876:	10a4      	asrs	r4, r4, #2
 8001878:	2600      	movs	r6, #0
 800187a:	42a6      	cmp	r6, r4
 800187c:	d105      	bne.n	800188a <__libc_init_array+0x2e>
 800187e:	bd70      	pop	{r4, r5, r6, pc}
 8001880:	f855 3b04 	ldr.w	r3, [r5], #4
 8001884:	4798      	blx	r3
 8001886:	3601      	adds	r6, #1
 8001888:	e7ee      	b.n	8001868 <__libc_init_array+0xc>
 800188a:	f855 3b04 	ldr.w	r3, [r5], #4
 800188e:	4798      	blx	r3
 8001890:	3601      	adds	r6, #1
 8001892:	e7f2      	b.n	800187a <__libc_init_array+0x1e>
 8001894:	0800196c 	.word	0x0800196c
 8001898:	0800196c 	.word	0x0800196c
 800189c:	0800196c 	.word	0x0800196c
 80018a0:	08001970 	.word	0x08001970

080018a4 <_init>:
 80018a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018a6:	bf00      	nop
 80018a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018aa:	bc08      	pop	{r3}
 80018ac:	469e      	mov	lr, r3
 80018ae:	4770      	bx	lr

080018b0 <_fini>:
 80018b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018b2:	bf00      	nop
 80018b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018b6:	bc08      	pop	{r3}
 80018b8:	469e      	mov	lr, r3
 80018ba:	4770      	bx	lr
