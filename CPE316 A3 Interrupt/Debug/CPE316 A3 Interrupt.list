
CPE316 A3 Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000032c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004b4  080004b4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004b4  080004b4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080004b4  080004b4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004b4  080004b4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004b4  080004b4  000104b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004b8  080004b8  000104b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080004bc  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080004c0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080004c0  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001bde  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000570  00000000  00000000  00021c55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000210  00000000  00000000  000221c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000175  00000000  00000000  000223d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023f86  00000000  00000000  0002254d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000022cb  00000000  00000000  000464d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e18b9  00000000  00000000  0004879e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000694  00000000  00000000  0012a058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0012a6ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800049c 	.word	0x0800049c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	0800049c 	.word	0x0800049c

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	; (8000200 <__NVIC_EnableIRQ+0x38>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <main>:
void TIM2_IRQHandler(void);

volatile uint8_t flag = 0;

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
    // Enable clock for GPIOA and TIM2
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000208:	4b3e      	ldr	r3, [pc, #248]	; (8000304 <main+0x100>)
 800020a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800020c:	4a3d      	ldr	r2, [pc, #244]	; (8000304 <main+0x100>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	64d3      	str	r3, [r2, #76]	; 0x4c
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 8000214:	4b3b      	ldr	r3, [pc, #236]	; (8000304 <main+0x100>)
 8000216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000218:	4a3a      	ldr	r2, [pc, #232]	; (8000304 <main+0x100>)
 800021a:	f043 0301 	orr.w	r3, r3, #1
 800021e:	6593      	str	r3, [r2, #88]	; 0x58

    // Configure PA0 and PA1 as output
    GPIOA->MODER &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1);
 8000220:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800022a:	f023 030f 	bic.w	r3, r3, #15
 800022e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= GPIO_MODER_MODE0_0 | GPIO_MODER_MODE1_0;
 8000230:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800023a:	f043 0305 	orr.w	r3, r3, #5
 800023e:	6013      	str	r3, [r2, #0]

    // Set up TIM2
    TIM2->PSC = 0;  // No prescaling
 8000240:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000244:	2200      	movs	r2, #0
 8000246:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 0xFFFFFFFF;  // Run continuously
 8000248:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800024c:	f04f 32ff 	mov.w	r2, #4294967295
 8000250:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CCR1 = 400;  // 50% duty cycle
 8000252:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000256:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800025a:	635a      	str	r2, [r3, #52]	; 0x34
    TIM2->DIER |= TIM_DIER_CC1IE;  // Enable Capture/Compare 1 interrupt
 800025c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000260:	68db      	ldr	r3, [r3, #12]
 8000262:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000266:	f043 0302 	orr.w	r3, r3, #2
 800026a:	60d3      	str	r3, [r2, #12]

    // Enable TIM2
    TIM2->CR1 |= TIM_CR1_CEN;
 800026c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000276:	f043 0301 	orr.w	r3, r3, #1
 800027a:	6013      	str	r3, [r2, #0]

    // Enable TIM2 interrupt
    NVIC_EnableIRQ(TIM2_IRQn);
 800027c:	201c      	movs	r0, #28
 800027e:	f7ff ffa3 	bl	80001c8 <__NVIC_EnableIRQ>

    // Enable MCO, select MSI (4 MHz source)
    RCC->CFGR = ((RCC->CFGR & ~(RCC_CFGR_MCOSEL)) | (RCC_CFGR_MCOSEL_0));
 8000282:	4b20      	ldr	r3, [pc, #128]	; (8000304 <main+0x100>)
 8000284:	689b      	ldr	r3, [r3, #8]
 8000286:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800028a:	4a1e      	ldr	r2, [pc, #120]	; (8000304 <main+0x100>)
 800028c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000290:	6093      	str	r3, [r2, #8]

    // Configure MCO output on PA8
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000292:	4b1c      	ldr	r3, [pc, #112]	; (8000304 <main+0x100>)
 8000294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000296:	4a1b      	ldr	r2, [pc, #108]	; (8000304 <main+0x100>)
 8000298:	f043 0301 	orr.w	r3, r3, #1
 800029c:	64d3      	str	r3, [r2, #76]	; 0x4c
    GPIOA->MODER &= ~GPIO_MODER_MODE8;
 800029e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002a8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80002ac:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (2 << GPIO_MODER_MODE8_Pos);
 80002ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002bc:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~GPIO_OTYPER_OT8;
 80002be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002c2:	685b      	ldr	r3, [r3, #4]
 80002c4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80002cc:	6053      	str	r3, [r2, #4]
    GPIOA->PUPDR &= ~GPIO_PUPDR_PUPD8;
 80002ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002d2:	68db      	ldr	r3, [r3, #12]
 80002d4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002d8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80002dc:	60d3      	str	r3, [r2, #12]
    GPIOA->OSPEEDR |= GPIO_OSPEEDR_OSPEED8;
 80002de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002e2:	689b      	ldr	r3, [r3, #8]
 80002e4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002e8:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80002ec:	6093      	str	r3, [r2, #8]
    GPIOA->AFR[1] &= ~GPIO_AFRH_AFSEL8;
 80002ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002f4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002f8:	f023 030f 	bic.w	r3, r3, #15
 80002fc:	6253      	str	r3, [r2, #36]	; 0x24
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80002fe:	b662      	cpsie	i
}
 8000300:	bf00      	nop

    // Enable global interrupts
    __enable_irq();

    while (1)
 8000302:	e7fe      	b.n	8000302 <main+0xfe>
 8000304:	40021000 	.word	0x40021000

08000308 <TIM2_IRQHandler>:
        // Do nothing, let ISR handle everything
    }
}

void TIM2_IRQHandler(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
    // Set PA1 high at ISR entry
    GPIOA->BSRR = GPIO_BSRR_BS1;
 800030c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000310:	2202      	movs	r2, #2
 8000312:	619a      	str	r2, [r3, #24]

    // Check if the Capture/Compare 1 interrupt flag is set
    if (TIM2->SR & TIM_SR_CC1IF)
 8000314:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000318:	691b      	ldr	r3, [r3, #16]
 800031a:	f003 0302 	and.w	r3, r3, #2
 800031e:	2b00      	cmp	r3, #0
 8000320:	d013      	beq.n	800034a <TIM2_IRQHandler+0x42>
    {
        // Clear the Capture/Compare 1 interrupt flag
        TIM2->SR &= ~TIM_SR_CC1IF;
 8000322:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000326:	691b      	ldr	r3, [r3, #16]
 8000328:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800032c:	f023 0302 	bic.w	r3, r3, #2
 8000330:	6113      	str	r3, [r2, #16]

        // Toggle PA0
        GPIOA->ODR ^= GPIO_ODR_OD0;
 8000332:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000336:	695b      	ldr	r3, [r3, #20]
 8000338:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800033c:	f083 0301 	eor.w	r3, r3, #1
 8000340:	6153      	str	r3, [r2, #20]

        // Reset the counter
        TIM2->CNT = 0;
 8000342:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000346:	2200      	movs	r2, #0
 8000348:	625a      	str	r2, [r3, #36]	; 0x24
    }

    // Set PA1 low at ISR exit
    GPIOA->BSRR = GPIO_BSRR_BR1;
 800034a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800034e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000352:	619a      	str	r2, [r3, #24]
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr

0800035e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800035e:	b480      	push	{r7}
 8000360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000362:	e7fe      	b.n	8000362 <NMI_Handler+0x4>

08000364 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000368:	e7fe      	b.n	8000368 <HardFault_Handler+0x4>

0800036a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800036a:	b480      	push	{r7}
 800036c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800036e:	e7fe      	b.n	800036e <MemManage_Handler+0x4>

08000370 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000374:	e7fe      	b.n	8000374 <BusFault_Handler+0x4>

08000376 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000376:	b480      	push	{r7}
 8000378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800037a:	e7fe      	b.n	800037a <UsageFault_Handler+0x4>

0800037c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000380:	bf00      	nop
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr

0800038a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800038a:	b480      	push	{r7}
 800038c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800038e:	bf00      	nop
 8000390:	46bd      	mov	sp, r7
 8000392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000396:	4770      	bx	lr

08000398 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800039c:	bf00      	nop
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr

080003a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003a6:	b580      	push	{r7, lr}
 80003a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003aa:	f000 f83f 	bl	800042c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
	...

080003b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80003b8:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <SystemInit+0x20>)
 80003ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003be:	4a05      	ldr	r2, [pc, #20]	; (80003d4 <SystemInit+0x20>)
 80003c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	e000ed00 	.word	0xe000ed00

080003d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80003d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000410 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80003dc:	f7ff ffea 	bl	80003b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003e0:	480c      	ldr	r0, [pc, #48]	; (8000414 <LoopForever+0x6>)
  ldr r1, =_edata
 80003e2:	490d      	ldr	r1, [pc, #52]	; (8000418 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003e4:	4a0d      	ldr	r2, [pc, #52]	; (800041c <LoopForever+0xe>)
  movs r3, #0
 80003e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003e8:	e002      	b.n	80003f0 <LoopCopyDataInit>

080003ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ee:	3304      	adds	r3, #4

080003f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003f4:	d3f9      	bcc.n	80003ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003f6:	4a0a      	ldr	r2, [pc, #40]	; (8000420 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003f8:	4c0a      	ldr	r4, [pc, #40]	; (8000424 <LoopForever+0x16>)
  movs r3, #0
 80003fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003fc:	e001      	b.n	8000402 <LoopFillZerobss>

080003fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000400:	3204      	adds	r2, #4

08000402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000404:	d3fb      	bcc.n	80003fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000406:	f000 f825 	bl	8000454 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800040a:	f7ff fefb 	bl	8000204 <main>

0800040e <LoopForever>:

LoopForever:
    b LoopForever
 800040e:	e7fe      	b.n	800040e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000410:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000418:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800041c:	080004bc 	.word	0x080004bc
  ldr r2, =_sbss
 8000420:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000424:	20000024 	.word	0x20000024

08000428 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000428:	e7fe      	b.n	8000428 <ADC1_2_IRQHandler>
	...

0800042c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000430:	4b06      	ldr	r3, [pc, #24]	; (800044c <HAL_IncTick+0x20>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	461a      	mov	r2, r3
 8000436:	4b06      	ldr	r3, [pc, #24]	; (8000450 <HAL_IncTick+0x24>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4413      	add	r3, r2
 800043c:	4a04      	ldr	r2, [pc, #16]	; (8000450 <HAL_IncTick+0x24>)
 800043e:	6013      	str	r3, [r2, #0]
}
 8000440:	bf00      	nop
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	20000000 	.word	0x20000000
 8000450:	20000020 	.word	0x20000020

08000454 <__libc_init_array>:
 8000454:	b570      	push	{r4, r5, r6, lr}
 8000456:	4d0d      	ldr	r5, [pc, #52]	; (800048c <__libc_init_array+0x38>)
 8000458:	4c0d      	ldr	r4, [pc, #52]	; (8000490 <__libc_init_array+0x3c>)
 800045a:	1b64      	subs	r4, r4, r5
 800045c:	10a4      	asrs	r4, r4, #2
 800045e:	2600      	movs	r6, #0
 8000460:	42a6      	cmp	r6, r4
 8000462:	d109      	bne.n	8000478 <__libc_init_array+0x24>
 8000464:	4d0b      	ldr	r5, [pc, #44]	; (8000494 <__libc_init_array+0x40>)
 8000466:	4c0c      	ldr	r4, [pc, #48]	; (8000498 <__libc_init_array+0x44>)
 8000468:	f000 f818 	bl	800049c <_init>
 800046c:	1b64      	subs	r4, r4, r5
 800046e:	10a4      	asrs	r4, r4, #2
 8000470:	2600      	movs	r6, #0
 8000472:	42a6      	cmp	r6, r4
 8000474:	d105      	bne.n	8000482 <__libc_init_array+0x2e>
 8000476:	bd70      	pop	{r4, r5, r6, pc}
 8000478:	f855 3b04 	ldr.w	r3, [r5], #4
 800047c:	4798      	blx	r3
 800047e:	3601      	adds	r6, #1
 8000480:	e7ee      	b.n	8000460 <__libc_init_array+0xc>
 8000482:	f855 3b04 	ldr.w	r3, [r5], #4
 8000486:	4798      	blx	r3
 8000488:	3601      	adds	r6, #1
 800048a:	e7f2      	b.n	8000472 <__libc_init_array+0x1e>
 800048c:	080004b4 	.word	0x080004b4
 8000490:	080004b4 	.word	0x080004b4
 8000494:	080004b4 	.word	0x080004b4
 8000498:	080004b8 	.word	0x080004b8

0800049c <_init>:
 800049c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049e:	bf00      	nop
 80004a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004a2:	bc08      	pop	{r3}
 80004a4:	469e      	mov	lr, r3
 80004a6:	4770      	bx	lr

080004a8 <_fini>:
 80004a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004aa:	bf00      	nop
 80004ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ae:	bc08      	pop	{r3}
 80004b0:	469e      	mov	lr, r3
 80004b2:	4770      	bx	lr
