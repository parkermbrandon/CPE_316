
CPE 316 P2 Audio Processor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c7c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003e04  08003e04  00013e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e4c  08003e4c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003e4c  08003e4c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e4c  08003e4c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e4c  08003e4c  00013e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e50  08003e50  00013e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003e54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000540  20000010  08003e64  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  08003e64  00020550  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009fb5  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ac5  00000000  00000000  0002a038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e0  00000000  00000000  0002bb00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006b2  00000000  00000000  0002c3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a79  00000000  00000000  0002ca92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a61f  00000000  00000000  0005450b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00101aa1  00000000  00000000  0005eb2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000022a4  00000000  00000000  001605cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00162870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003dec 	.word	0x08003dec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08003dec 	.word	0x08003dec

080001c8 <HAL_SAI_RxHalfCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SAI_RxHalfCpltCallback (SAI_HandleTypeDef * hsai) {
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	inBufferPtr  = &adcData[BUFFER_SIZE/2];
 80001d0:	4b07      	ldr	r3, [pc, #28]	; (80001f0 <HAL_SAI_RxHalfCpltCallback+0x28>)
 80001d2:	4a08      	ldr	r2, [pc, #32]	; (80001f4 <HAL_SAI_RxHalfCpltCallback+0x2c>)
 80001d4:	601a      	str	r2, [r3, #0]
	outBufferPtr = &adcData[BUFFER_SIZE/2];
 80001d6:	4b08      	ldr	r3, [pc, #32]	; (80001f8 <HAL_SAI_RxHalfCpltCallback+0x30>)
 80001d8:	4a06      	ldr	r2, [pc, #24]	; (80001f4 <HAL_SAI_RxHalfCpltCallback+0x2c>)
 80001da:	601a      	str	r2, [r3, #0]

	dataReadyFlag = 1;
 80001dc:	4b07      	ldr	r3, [pc, #28]	; (80001fc <HAL_SAI_RxHalfCpltCallback+0x34>)
 80001de:	2201      	movs	r2, #1
 80001e0:	701a      	strb	r2, [r3, #0]
}
 80001e2:	bf00      	nop
 80001e4:	370c      	adds	r7, #12
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	20000540 	.word	0x20000540
 80001f4:	20000240 	.word	0x20000240
 80001f8:	20000000 	.word	0x20000000
 80001fc:	20000544 	.word	0x20000544

08000200 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback (SAI_HandleTypeDef * hsai) {
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
	inBufferPtr  = &adcData[BUFFER_SIZE/2];
 8000208:	4b07      	ldr	r3, [pc, #28]	; (8000228 <HAL_SAI_RxCpltCallback+0x28>)
 800020a:	4a08      	ldr	r2, [pc, #32]	; (800022c <HAL_SAI_RxCpltCallback+0x2c>)
 800020c:	601a      	str	r2, [r3, #0]
	outBufferPtr = &adcData[BUFFER_SIZE/2];
 800020e:	4b08      	ldr	r3, [pc, #32]	; (8000230 <HAL_SAI_RxCpltCallback+0x30>)
 8000210:	4a06      	ldr	r2, [pc, #24]	; (800022c <HAL_SAI_RxCpltCallback+0x2c>)
 8000212:	601a      	str	r2, [r3, #0]

	dataReadyFlag = 1;
 8000214:	4b07      	ldr	r3, [pc, #28]	; (8000234 <HAL_SAI_RxCpltCallback+0x34>)
 8000216:	2201      	movs	r2, #1
 8000218:	701a      	strb	r2, [r3, #0]
}
 800021a:	bf00      	nop
 800021c:	370c      	adds	r7, #12
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	20000540 	.word	0x20000540
 800022c:	20000240 	.word	0x20000240
 8000230:	20000000 	.word	0x20000000
 8000234:	20000544 	.word	0x20000544

08000238 <processData>:
//	  }
//
//	  // Toggle the LED on PA5 to indicate data processing
//	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
//}
void processData() {
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Toggle LED on PA5
 800023c:	2120      	movs	r1, #32
 800023e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000242:	f000 ffc7 	bl	80011d4 <HAL_GPIO_TogglePin>
}
 8000246:	bf00      	nop
 8000248:	bd80      	pop	{r7, pc}
	...

0800024c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
//	      dataReadyFlag = 0; // Reset the flag
//	    }
//    /* USER CODE BEGIN 3 */
//  }
//  /* USER CODE END 3 */
	HAL_Init();  // Initialize the Hardware Abstraction Layer
 8000252:	f000 fa77 	bl	8000744 <HAL_Init>
	  SystemClock_Config();  // Configure the System Clock
 8000256:	f000 f81d 	bl	8000294 <SystemClock_Config>

	  MX_GPIO_Init();        // Initialize GPIO for LED
 800025a:	f000 f8c5 	bl	80003e8 <MX_GPIO_Init>
	  MX_DMA_Init();         // Initialize DMA for SAI
 800025e:	f000 f89d 	bl	800039c <MX_DMA_Init>
	  MX_SAI2_Init();        // Initialize SAI for audio input
 8000262:	f000 f869 	bl	8000338 <MX_SAI2_Init>

	  HAL_StatusTypeDef rxStatus = HAL_SAI_Receive_DMA(&hsai_BlockA2, (uint8_t *)adcData, BUFFER_SIZE);
 8000266:	2280      	movs	r2, #128	; 0x80
 8000268:	4907      	ldr	r1, [pc, #28]	; (8000288 <main+0x3c>)
 800026a:	4808      	ldr	r0, [pc, #32]	; (800028c <main+0x40>)
 800026c:	f003 faee 	bl	800384c <HAL_SAI_Receive_DMA>
 8000270:	4603      	mov	r3, r0
 8000272:	71fb      	strb	r3, [r7, #7]

	  while (1)
	  {
	    if (dataReadyFlag == 1)
 8000274:	4b06      	ldr	r3, [pc, #24]	; (8000290 <main+0x44>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	2b01      	cmp	r3, #1
 800027a:	d1fb      	bne.n	8000274 <main+0x28>
	    {
	      processData();
 800027c:	f7ff ffdc 	bl	8000238 <processData>
	      dataReadyFlag = 0;
 8000280:	4b03      	ldr	r3, [pc, #12]	; (8000290 <main+0x44>)
 8000282:	2200      	movs	r2, #0
 8000284:	701a      	strb	r2, [r3, #0]
	    if (dataReadyFlag == 1)
 8000286:	e7f5      	b.n	8000274 <main+0x28>
 8000288:	20000140 	.word	0x20000140
 800028c:	20000074 	.word	0x20000074
 8000290:	20000544 	.word	0x20000544

08000294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b096      	sub	sp, #88	; 0x58
 8000298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029a:	f107 0314 	add.w	r3, r7, #20
 800029e:	2244      	movs	r2, #68	; 0x44
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f003 fd76 	bl	8003d94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a8:	463b      	mov	r3, r7
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
 80002b2:	60da      	str	r2, [r3, #12]
 80002b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002ba:	f000 ffb3 	bl	8001224 <HAL_PWREx_ControlVoltageScaling>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002c4:	f000 f912 	bl	80004ec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c8:	2302      	movs	r3, #2
 80002ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d2:	2310      	movs	r3, #16
 80002d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d6:	2302      	movs	r3, #2
 80002d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002da:	2302      	movs	r3, #2
 80002dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 4;
 80002de:	2304      	movs	r3, #4
 80002e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 35;
 80002e2:	2323      	movs	r3, #35	; 0x23
 80002e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002e6:	2307      	movs	r3, #7
 80002e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002ea:	2302      	movs	r3, #2
 80002ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002ee:	2302      	movs	r3, #2
 80002f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f2:	f107 0314 	add.w	r3, r7, #20
 80002f6:	4618      	mov	r0, r3
 80002f8:	f000 ffea 	bl	80012d0 <HAL_RCC_OscConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000302:	f000 f8f3 	bl	80004ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000306:	230f      	movs	r3, #15
 8000308:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030a:	2303      	movs	r3, #3
 800030c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800031a:	463b      	mov	r3, r7
 800031c:	2104      	movs	r1, #4
 800031e:	4618      	mov	r0, r3
 8000320:	f001 fbb2 	bl	8001a88 <HAL_RCC_ClockConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800032a:	f000 f8df 	bl	80004ec <Error_Handler>
  }
}
 800032e:	bf00      	nop
 8000330:	3758      	adds	r7, #88	; 0x58
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
	...

08000338 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
	hsai_BlockA2.Instance = SAI2_Block_A;
 800033c:	4b15      	ldr	r3, [pc, #84]	; (8000394 <MX_SAI2_Init+0x5c>)
 800033e:	4a16      	ldr	r2, [pc, #88]	; (8000398 <MX_SAI2_Init+0x60>)
 8000340:	601a      	str	r2, [r3, #0]
	hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_RX;
 8000342:	4b14      	ldr	r3, [pc, #80]	; (8000394 <MX_SAI2_Init+0x5c>)
 8000344:	2201      	movs	r2, #1
 8000346:	605a      	str	r2, [r3, #4]
	hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000348:	4b12      	ldr	r3, [pc, #72]	; (8000394 <MX_SAI2_Init+0x5c>)
 800034a:	2200      	movs	r2, #0
 800034c:	609a      	str	r2, [r3, #8]
	hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800034e:	4b11      	ldr	r3, [pc, #68]	; (8000394 <MX_SAI2_Init+0x5c>)
 8000350:	2200      	movs	r2, #0
 8000352:	611a      	str	r2, [r3, #16]
	hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000354:	4b0f      	ldr	r3, [pc, #60]	; (8000394 <MX_SAI2_Init+0x5c>)
 8000356:	2200      	movs	r2, #0
 8000358:	615a      	str	r2, [r3, #20]
	hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_HF;
 800035a:	4b0e      	ldr	r3, [pc, #56]	; (8000394 <MX_SAI2_Init+0x5c>)
 800035c:	2202      	movs	r2, #2
 800035e:	619a      	str	r2, [r3, #24]
	hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K; // Adjust as needed
 8000360:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <MX_SAI2_Init+0x5c>)
 8000362:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000366:	61da      	str	r2, [r3, #28]
	hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000368:	4b0a      	ldr	r3, [pc, #40]	; (8000394 <MX_SAI2_Init+0x5c>)
 800036a:	2200      	movs	r2, #0
 800036c:	60da      	str	r2, [r3, #12]
	hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE; // I2S typically uses stereo mode
 800036e:	4b09      	ldr	r3, [pc, #36]	; (8000394 <MX_SAI2_Init+0x5c>)
 8000370:	2200      	movs	r2, #0
 8000372:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000374:	4b07      	ldr	r3, [pc, #28]	; (8000394 <MX_SAI2_Init+0x5c>)
 8000376:	2200      	movs	r2, #0
 8000378:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800037a:	2302      	movs	r3, #2
 800037c:	2202      	movs	r2, #2
 800037e:	2100      	movs	r1, #0
 8000380:	4804      	ldr	r0, [pc, #16]	; (8000394 <MX_SAI2_Init+0x5c>)
 8000382:	f003 f8bf 	bl	8003504 <HAL_SAI_InitProtocol>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_SAI2_Init+0x58>
	{
	  Error_Handler();
 800038c:	f000 f8ae 	bl	80004ec <Error_Handler>
	}
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000390:	bf00      	nop
 8000392:	bd80      	pop	{r7, pc}
 8000394:	20000074 	.word	0x20000074
 8000398:	40015804 	.word	0x40015804

0800039c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003a2:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <MX_DMA_Init+0x48>)
 80003a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80003a6:	4a0f      	ldr	r2, [pc, #60]	; (80003e4 <MX_DMA_Init+0x48>)
 80003a8:	f043 0301 	orr.w	r3, r3, #1
 80003ac:	6493      	str	r3, [r2, #72]	; 0x48
 80003ae:	4b0d      	ldr	r3, [pc, #52]	; (80003e4 <MX_DMA_Init+0x48>)
 80003b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80003b2:	f003 0301 	and.w	r3, r3, #1
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2100      	movs	r1, #0
 80003be:	200b      	movs	r0, #11
 80003c0:	f000 fb17 	bl	80009f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80003c4:	200b      	movs	r0, #11
 80003c6:	f000 fb30 	bl	8000a2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80003ca:	2200      	movs	r2, #0
 80003cc:	2100      	movs	r1, #0
 80003ce:	2010      	movs	r0, #16
 80003d0:	f000 fb0f 	bl	80009f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80003d4:	2010      	movs	r0, #16
 80003d6:	f000 fb28 	bl	8000a2a <HAL_NVIC_EnableIRQ>

}
 80003da:	bf00      	nop
 80003dc:	3708      	adds	r7, #8
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40021000 	.word	0x40021000

080003e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b08a      	sub	sp, #40	; 0x28
 80003ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ee:	f107 0314 	add.w	r3, r7, #20
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]
 80003fa:	60da      	str	r2, [r3, #12]
 80003fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003fe:	4b39      	ldr	r3, [pc, #228]	; (80004e4 <MX_GPIO_Init+0xfc>)
 8000400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000402:	4a38      	ldr	r2, [pc, #224]	; (80004e4 <MX_GPIO_Init+0xfc>)
 8000404:	f043 0304 	orr.w	r3, r3, #4
 8000408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800040a:	4b36      	ldr	r3, [pc, #216]	; (80004e4 <MX_GPIO_Init+0xfc>)
 800040c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040e:	f003 0304 	and.w	r3, r3, #4
 8000412:	613b      	str	r3, [r7, #16]
 8000414:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000416:	4b33      	ldr	r3, [pc, #204]	; (80004e4 <MX_GPIO_Init+0xfc>)
 8000418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800041a:	4a32      	ldr	r2, [pc, #200]	; (80004e4 <MX_GPIO_Init+0xfc>)
 800041c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000422:	4b30      	ldr	r3, [pc, #192]	; (80004e4 <MX_GPIO_Init+0xfc>)
 8000424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042e:	4b2d      	ldr	r3, [pc, #180]	; (80004e4 <MX_GPIO_Init+0xfc>)
 8000430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000432:	4a2c      	ldr	r2, [pc, #176]	; (80004e4 <MX_GPIO_Init+0xfc>)
 8000434:	f043 0301 	orr.w	r3, r3, #1
 8000438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800043a:	4b2a      	ldr	r3, [pc, #168]	; (80004e4 <MX_GPIO_Init+0xfc>)
 800043c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043e:	f003 0301 	and.w	r3, r3, #1
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000446:	4b27      	ldr	r3, [pc, #156]	; (80004e4 <MX_GPIO_Init+0xfc>)
 8000448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044a:	4a26      	ldr	r2, [pc, #152]	; (80004e4 <MX_GPIO_Init+0xfc>)
 800044c:	f043 0302 	orr.w	r3, r3, #2
 8000450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000452:	4b24      	ldr	r3, [pc, #144]	; (80004e4 <MX_GPIO_Init+0xfc>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000456:	f003 0302 	and.w	r3, r3, #2
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800045e:	2200      	movs	r2, #0
 8000460:	2120      	movs	r1, #32
 8000462:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000466:	f000 fe9d 	bl	80011a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800046a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800046e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000470:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000474:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000476:	2300      	movs	r3, #0
 8000478:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800047a:	f107 0314 	add.w	r3, r7, #20
 800047e:	4619      	mov	r1, r3
 8000480:	4819      	ldr	r0, [pc, #100]	; (80004e8 <MX_GPIO_Init+0x100>)
 8000482:	f000 fce5 	bl	8000e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000486:	2320      	movs	r3, #32
 8000488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048a:	2301      	movs	r3, #1
 800048c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048e:	2300      	movs	r3, #0
 8000490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000492:	2300      	movs	r3, #0
 8000494:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000496:	f107 0314 	add.w	r3, r7, #20
 800049a:	4619      	mov	r1, r3
 800049c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a0:	f000 fcd6 	bl	8000e50 <HAL_GPIO_Init>
/* USER CODE BEGIN MX_GPIO_Init_2 */

  //GPIO_InitTypeDef GPIO_InitStruct = {0};

	// Initialize GPIO pin for the LED on PA5
	__HAL_RCC_GPIOA_CLK_ENABLE(); // Enable clock for GPIOA
 80004a4:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <MX_GPIO_Init+0xfc>)
 80004a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a8:	4a0e      	ldr	r2, [pc, #56]	; (80004e4 <MX_GPIO_Init+0xfc>)
 80004aa:	f043 0301 	orr.w	r3, r3, #1
 80004ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004b0:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <MX_GPIO_Init+0xfc>)
 80004b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004b4:	f003 0301 	and.w	r3, r3, #1
 80004b8:	603b      	str	r3, [r7, #0]
 80004ba:	683b      	ldr	r3, [r7, #0]
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 80004bc:	2320      	movs	r3, #32
 80004be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c0:	2301      	movs	r3, #1
 80004c2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c4:	2300      	movs	r3, #0
 80004c6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c8:	2300      	movs	r3, #0
 80004ca:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004cc:	f107 0314 	add.w	r3, r7, #20
 80004d0:	4619      	mov	r1, r3
 80004d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d6:	f000 fcbb 	bl	8000e50 <HAL_GPIO_Init>
/* USER CODE END MX_GPIO_Init_2 */
}
 80004da:	bf00      	nop
 80004dc:	3728      	adds	r7, #40	; 0x28
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40021000 	.word	0x40021000
 80004e8:	48000800 	.word	0x48000800

080004ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f0:	b672      	cpsid	i
}
 80004f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <Error_Handler+0x8>
	...

080004f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004fe:	4b0f      	ldr	r3, [pc, #60]	; (800053c <HAL_MspInit+0x44>)
 8000500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000502:	4a0e      	ldr	r2, [pc, #56]	; (800053c <HAL_MspInit+0x44>)
 8000504:	f043 0301 	orr.w	r3, r3, #1
 8000508:	6613      	str	r3, [r2, #96]	; 0x60
 800050a:	4b0c      	ldr	r3, [pc, #48]	; (800053c <HAL_MspInit+0x44>)
 800050c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000516:	4b09      	ldr	r3, [pc, #36]	; (800053c <HAL_MspInit+0x44>)
 8000518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800051a:	4a08      	ldr	r2, [pc, #32]	; (800053c <HAL_MspInit+0x44>)
 800051c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000520:	6593      	str	r3, [r2, #88]	; 0x58
 8000522:	4b06      	ldr	r3, [pc, #24]	; (800053c <HAL_MspInit+0x44>)
 8000524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052a:	603b      	str	r3, [r7, #0]
 800052c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	40021000 	.word	0x40021000

08000540 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_a;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b0aa      	sub	sp, #168	; 0xa8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	2288      	movs	r2, #136	; 0x88
 800054e:	2100      	movs	r1, #0
 8000550:	4618      	mov	r0, r3
 8000552:	f003 fc1f 	bl	8003d94 <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a37      	ldr	r2, [pc, #220]	; (8000638 <HAL_SAI_MspInit+0xf8>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d166      	bne.n	800062e <HAL_SAI_MspInit+0xee>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000560:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000564:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLL;
 8000566:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800056a:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	4618      	mov	r0, r3
 8000572:	f001 fcad 	bl	8001ed0 <HAL_RCCEx_PeriphCLKConfig>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <HAL_SAI_MspInit+0x40>
    {
      Error_Handler();
 800057c:	f7ff ffb6 	bl	80004ec <Error_Handler>
    }

    if (SAI2_client == 0)
 8000580:	4b2e      	ldr	r3, [pc, #184]	; (800063c <HAL_SAI_MspInit+0xfc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d10b      	bne.n	80005a0 <HAL_SAI_MspInit+0x60>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000588:	4b2d      	ldr	r3, [pc, #180]	; (8000640 <HAL_SAI_MspInit+0x100>)
 800058a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800058c:	4a2c      	ldr	r2, [pc, #176]	; (8000640 <HAL_SAI_MspInit+0x100>)
 800058e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000592:	6613      	str	r3, [r2, #96]	; 0x60
 8000594:	4b2a      	ldr	r3, [pc, #168]	; (8000640 <HAL_SAI_MspInit+0x100>)
 8000596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000598:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 80005a0:	4b26      	ldr	r3, [pc, #152]	; (800063c <HAL_SAI_MspInit+0xfc>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	3301      	adds	r3, #1
 80005a6:	4a25      	ldr	r2, [pc, #148]	; (800063c <HAL_SAI_MspInit+0xfc>)
 80005a8:	6013      	str	r3, [r2, #0]
    /**SAI2_A_Block_A GPIO Configuration
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80005aa:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80005ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b2:	2302      	movs	r3, #2
 80005b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005be:	2300      	movs	r3, #0
 80005c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80005c4:	230d      	movs	r3, #13
 80005c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ca:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80005ce:	4619      	mov	r1, r3
 80005d0:	481c      	ldr	r0, [pc, #112]	; (8000644 <HAL_SAI_MspInit+0x104>)
 80005d2:	f000 fc3d 	bl	8000e50 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 80005d6:	4b1c      	ldr	r3, [pc, #112]	; (8000648 <HAL_SAI_MspInit+0x108>)
 80005d8:	4a1c      	ldr	r2, [pc, #112]	; (800064c <HAL_SAI_MspInit+0x10c>)
 80005da:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 80005dc:	4b1a      	ldr	r3, [pc, #104]	; (8000648 <HAL_SAI_MspInit+0x108>)
 80005de:	2201      	movs	r2, #1
 80005e0:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005e2:	4b19      	ldr	r3, [pc, #100]	; (8000648 <HAL_SAI_MspInit+0x108>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80005e8:	4b17      	ldr	r3, [pc, #92]	; (8000648 <HAL_SAI_MspInit+0x108>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 80005ee:	4b16      	ldr	r3, [pc, #88]	; (8000648 <HAL_SAI_MspInit+0x108>)
 80005f0:	2280      	movs	r2, #128	; 0x80
 80005f2:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80005f4:	4b14      	ldr	r3, [pc, #80]	; (8000648 <HAL_SAI_MspInit+0x108>)
 80005f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005fa:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <HAL_SAI_MspInit+0x108>)
 80005fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000602:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8000604:	4b10      	ldr	r3, [pc, #64]	; (8000648 <HAL_SAI_MspInit+0x108>)
 8000606:	2220      	movs	r2, #32
 8000608:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800060a:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <HAL_SAI_MspInit+0x108>)
 800060c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000610:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8000612:	480d      	ldr	r0, [pc, #52]	; (8000648 <HAL_SAI_MspInit+0x108>)
 8000614:	f000 fa24 	bl	8000a60 <HAL_DMA_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <HAL_SAI_MspInit+0xe2>
    {
      Error_Handler();
 800061e:	f7ff ff65 	bl	80004ec <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a08      	ldr	r2, [pc, #32]	; (8000648 <HAL_SAI_MspInit+0x108>)
 8000626:	671a      	str	r2, [r3, #112]	; 0x70
 8000628:	4a07      	ldr	r2, [pc, #28]	; (8000648 <HAL_SAI_MspInit+0x108>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6293      	str	r3, [r2, #40]	; 0x28

    //__HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);

    }
}
 800062e:	bf00      	nop
 8000630:	37a8      	adds	r7, #168	; 0xa8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40015804 	.word	0x40015804
 800063c:	20000548 	.word	0x20000548
 8000640:	40021000 	.word	0x40021000
 8000644:	48000400 	.word	0x48000400
 8000648:	200000f8 	.word	0x200000f8
 800064c:	4002006c 	.word	0x4002006c

08000650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <NMI_Handler+0x4>

08000656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065a:	e7fe      	b.n	800065a <HardFault_Handler+0x4>

0800065c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000660:	e7fe      	b.n	8000660 <MemManage_Handler+0x4>

08000662 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000666:	e7fe      	b.n	8000666 <BusFault_Handler+0x4>

08000668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800066c:	e7fe      	b.n	800066c <UsageFault_Handler+0x4>

0800066e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000672:	bf00      	nop
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800069c:	f000 f8ae 	bl	80007fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80006a8:	4802      	ldr	r0, [pc, #8]	; (80006b4 <DMA1_Channel1_IRQHandler+0x10>)
 80006aa:	f000 faf1 	bl	8000c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	2000002c 	.word	0x2000002c

080006b8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 80006bc:	4802      	ldr	r0, [pc, #8]	; (80006c8 <DMA1_Channel6_IRQHandler+0x10>)
 80006be:	f000 fae7 	bl	8000c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	200000f8 	.word	0x200000f8

080006cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <SystemInit+0x20>)
 80006d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006d6:	4a05      	ldr	r2, [pc, #20]	; (80006ec <SystemInit+0x20>)
 80006d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000728 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006f4:	f7ff ffea 	bl	80006cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f8:	480c      	ldr	r0, [pc, #48]	; (800072c <LoopForever+0x6>)
  ldr r1, =_edata
 80006fa:	490d      	ldr	r1, [pc, #52]	; (8000730 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006fc:	4a0d      	ldr	r2, [pc, #52]	; (8000734 <LoopForever+0xe>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000700:	e002      	b.n	8000708 <LoopCopyDataInit>

08000702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000706:	3304      	adds	r3, #4

08000708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800070c:	d3f9      	bcc.n	8000702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800070e:	4a0a      	ldr	r2, [pc, #40]	; (8000738 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000710:	4c0a      	ldr	r4, [pc, #40]	; (800073c <LoopForever+0x16>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000714:	e001      	b.n	800071a <LoopFillZerobss>

08000716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000718:	3204      	adds	r2, #4

0800071a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800071c:	d3fb      	bcc.n	8000716 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800071e:	f003 fb41 	bl	8003da4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000722:	f7ff fd93 	bl	800024c <main>

08000726 <LoopForever>:

LoopForever:
    b LoopForever
 8000726:	e7fe      	b.n	8000726 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000728:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800072c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000730:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000734:	08003e54 	.word	0x08003e54
  ldr r2, =_sbss
 8000738:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800073c:	20000550 	.word	0x20000550

08000740 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000740:	e7fe      	b.n	8000740 <ADC1_2_IRQHandler>
	...

08000744 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800074a:	2300      	movs	r3, #0
 800074c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <HAL_Init+0x3c>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a0b      	ldr	r2, [pc, #44]	; (8000780 <HAL_Init+0x3c>)
 8000754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000758:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800075a:	2003      	movs	r0, #3
 800075c:	f000 f93e 	bl	80009dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000760:	2000      	movs	r0, #0
 8000762:	f000 f80f 	bl	8000784 <HAL_InitTick>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d002      	beq.n	8000772 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800076c:	2301      	movs	r3, #1
 800076e:	71fb      	strb	r3, [r7, #7]
 8000770:	e001      	b.n	8000776 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000772:	f7ff fec1 	bl	80004f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000776:	79fb      	ldrb	r3, [r7, #7]
}
 8000778:	4618      	mov	r0, r3
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40022000 	.word	0x40022000

08000784 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800078c:	2300      	movs	r3, #0
 800078e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000790:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <HAL_InitTick+0x6c>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d023      	beq.n	80007e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000798:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <HAL_InitTick+0x70>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <HAL_InitTick+0x6c>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4619      	mov	r1, r3
 80007a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 f949 	bl	8000a46 <HAL_SYSTICK_Config>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d10f      	bne.n	80007da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2b0f      	cmp	r3, #15
 80007be:	d809      	bhi.n	80007d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007c0:	2200      	movs	r2, #0
 80007c2:	6879      	ldr	r1, [r7, #4]
 80007c4:	f04f 30ff 	mov.w	r0, #4294967295
 80007c8:	f000 f913 	bl	80009f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007cc:	4a0a      	ldr	r2, [pc, #40]	; (80007f8 <HAL_InitTick+0x74>)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	6013      	str	r3, [r2, #0]
 80007d2:	e007      	b.n	80007e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80007d4:	2301      	movs	r3, #1
 80007d6:	73fb      	strb	r3, [r7, #15]
 80007d8:	e004      	b.n	80007e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007da:	2301      	movs	r3, #1
 80007dc:	73fb      	strb	r3, [r7, #15]
 80007de:	e001      	b.n	80007e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007e0:	2301      	movs	r3, #1
 80007e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3710      	adds	r7, #16
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	2000000c 	.word	0x2000000c
 80007f4:	20000004 	.word	0x20000004
 80007f8:	20000008 	.word	0x20000008

080007fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <HAL_IncTick+0x20>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	461a      	mov	r2, r3
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <HAL_IncTick+0x24>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4413      	add	r3, r2
 800080c:	4a04      	ldr	r2, [pc, #16]	; (8000820 <HAL_IncTick+0x24>)
 800080e:	6013      	str	r3, [r2, #0]
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	2000000c 	.word	0x2000000c
 8000820:	2000054c 	.word	0x2000054c

08000824 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  return uwTick;
 8000828:	4b03      	ldr	r3, [pc, #12]	; (8000838 <HAL_GetTick+0x14>)
 800082a:	681b      	ldr	r3, [r3, #0]
}
 800082c:	4618      	mov	r0, r3
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	2000054c 	.word	0x2000054c

0800083c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f003 0307 	and.w	r3, r3, #7
 800084a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <__NVIC_SetPriorityGrouping+0x44>)
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000852:	68ba      	ldr	r2, [r7, #8]
 8000854:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000858:	4013      	ands	r3, r2
 800085a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000864:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800086c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800086e:	4a04      	ldr	r2, [pc, #16]	; (8000880 <__NVIC_SetPriorityGrouping+0x44>)
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	60d3      	str	r3, [r2, #12]
}
 8000874:	bf00      	nop
 8000876:	3714      	adds	r7, #20
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000888:	4b04      	ldr	r3, [pc, #16]	; (800089c <__NVIC_GetPriorityGrouping+0x18>)
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	0a1b      	lsrs	r3, r3, #8
 800088e:	f003 0307 	and.w	r3, r3, #7
}
 8000892:	4618      	mov	r0, r3
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	db0b      	blt.n	80008ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	f003 021f 	and.w	r2, r3, #31
 80008b8:	4907      	ldr	r1, [pc, #28]	; (80008d8 <__NVIC_EnableIRQ+0x38>)
 80008ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008be:	095b      	lsrs	r3, r3, #5
 80008c0:	2001      	movs	r0, #1
 80008c2:	fa00 f202 	lsl.w	r2, r0, r2
 80008c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000e100 	.word	0xe000e100

080008dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	6039      	str	r1, [r7, #0]
 80008e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	db0a      	blt.n	8000906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	490c      	ldr	r1, [pc, #48]	; (8000928 <__NVIC_SetPriority+0x4c>)
 80008f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fa:	0112      	lsls	r2, r2, #4
 80008fc:	b2d2      	uxtb	r2, r2
 80008fe:	440b      	add	r3, r1
 8000900:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000904:	e00a      	b.n	800091c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	b2da      	uxtb	r2, r3
 800090a:	4908      	ldr	r1, [pc, #32]	; (800092c <__NVIC_SetPriority+0x50>)
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	f003 030f 	and.w	r3, r3, #15
 8000912:	3b04      	subs	r3, #4
 8000914:	0112      	lsls	r2, r2, #4
 8000916:	b2d2      	uxtb	r2, r2
 8000918:	440b      	add	r3, r1
 800091a:	761a      	strb	r2, [r3, #24]
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	e000e100 	.word	0xe000e100
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000930:	b480      	push	{r7}
 8000932:	b089      	sub	sp, #36	; 0x24
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	f003 0307 	and.w	r3, r3, #7
 8000942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	f1c3 0307 	rsb	r3, r3, #7
 800094a:	2b04      	cmp	r3, #4
 800094c:	bf28      	it	cs
 800094e:	2304      	movcs	r3, #4
 8000950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	3304      	adds	r3, #4
 8000956:	2b06      	cmp	r3, #6
 8000958:	d902      	bls.n	8000960 <NVIC_EncodePriority+0x30>
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	3b03      	subs	r3, #3
 800095e:	e000      	b.n	8000962 <NVIC_EncodePriority+0x32>
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000964:	f04f 32ff 	mov.w	r2, #4294967295
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	43da      	mvns	r2, r3
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	401a      	ands	r2, r3
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000978:	f04f 31ff 	mov.w	r1, #4294967295
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	fa01 f303 	lsl.w	r3, r1, r3
 8000982:	43d9      	mvns	r1, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000988:	4313      	orrs	r3, r2
         );
}
 800098a:	4618      	mov	r0, r3
 800098c:	3724      	adds	r7, #36	; 0x24
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
	...

08000998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3b01      	subs	r3, #1
 80009a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009a8:	d301      	bcc.n	80009ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009aa:	2301      	movs	r3, #1
 80009ac:	e00f      	b.n	80009ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ae:	4a0a      	ldr	r2, [pc, #40]	; (80009d8 <SysTick_Config+0x40>)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3b01      	subs	r3, #1
 80009b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009b6:	210f      	movs	r1, #15
 80009b8:	f04f 30ff 	mov.w	r0, #4294967295
 80009bc:	f7ff ff8e 	bl	80008dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <SysTick_Config+0x40>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009c6:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <SysTick_Config+0x40>)
 80009c8:	2207      	movs	r2, #7
 80009ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	e000e010 	.word	0xe000e010

080009dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f7ff ff29 	bl	800083c <__NVIC_SetPriorityGrouping>
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b086      	sub	sp, #24
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	4603      	mov	r3, r0
 80009fa:	60b9      	str	r1, [r7, #8]
 80009fc:	607a      	str	r2, [r7, #4]
 80009fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a04:	f7ff ff3e 	bl	8000884 <__NVIC_GetPriorityGrouping>
 8000a08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	68b9      	ldr	r1, [r7, #8]
 8000a0e:	6978      	ldr	r0, [r7, #20]
 8000a10:	f7ff ff8e 	bl	8000930 <NVIC_EncodePriority>
 8000a14:	4602      	mov	r2, r0
 8000a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a1a:	4611      	mov	r1, r2
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ff5d 	bl	80008dc <__NVIC_SetPriority>
}
 8000a22:	bf00      	nop
 8000a24:	3718      	adds	r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	4603      	mov	r3, r0
 8000a32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ff31 	bl	80008a0 <__NVIC_EnableIRQ>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b082      	sub	sp, #8
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f7ff ffa2 	bl	8000998 <SysTick_Config>
 8000a54:	4603      	mov	r3, r0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
	...

08000a60 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d101      	bne.n	8000a72 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e098      	b.n	8000ba4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	461a      	mov	r2, r3
 8000a78:	4b4d      	ldr	r3, [pc, #308]	; (8000bb0 <HAL_DMA_Init+0x150>)
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d80f      	bhi.n	8000a9e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	461a      	mov	r2, r3
 8000a84:	4b4b      	ldr	r3, [pc, #300]	; (8000bb4 <HAL_DMA_Init+0x154>)
 8000a86:	4413      	add	r3, r2
 8000a88:	4a4b      	ldr	r2, [pc, #300]	; (8000bb8 <HAL_DMA_Init+0x158>)
 8000a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a8e:	091b      	lsrs	r3, r3, #4
 8000a90:	009a      	lsls	r2, r3, #2
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4a48      	ldr	r2, [pc, #288]	; (8000bbc <HAL_DMA_Init+0x15c>)
 8000a9a:	641a      	str	r2, [r3, #64]	; 0x40
 8000a9c:	e00e      	b.n	8000abc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	4b46      	ldr	r3, [pc, #280]	; (8000bc0 <HAL_DMA_Init+0x160>)
 8000aa6:	4413      	add	r3, r2
 8000aa8:	4a43      	ldr	r2, [pc, #268]	; (8000bb8 <HAL_DMA_Init+0x158>)
 8000aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8000aae:	091b      	lsrs	r3, r3, #4
 8000ab0:	009a      	lsls	r2, r3, #2
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a42      	ldr	r2, [pc, #264]	; (8000bc4 <HAL_DMA_Init+0x164>)
 8000aba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2202      	movs	r2, #2
 8000ac0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ad6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	691b      	ldr	r3, [r3, #16]
 8000ae6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000aec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000af8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6a1b      	ldr	r3, [r3, #32]
 8000afe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000b00:	68fa      	ldr	r2, [r7, #12]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000b16:	d039      	beq.n	8000b8c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1c:	4a27      	ldr	r2, [pc, #156]	; (8000bbc <HAL_DMA_Init+0x15c>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d11a      	bne.n	8000b58 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000b22:	4b29      	ldr	r3, [pc, #164]	; (8000bc8 <HAL_DMA_Init+0x168>)
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	f003 031c 	and.w	r3, r3, #28
 8000b2e:	210f      	movs	r1, #15
 8000b30:	fa01 f303 	lsl.w	r3, r1, r3
 8000b34:	43db      	mvns	r3, r3
 8000b36:	4924      	ldr	r1, [pc, #144]	; (8000bc8 <HAL_DMA_Init+0x168>)
 8000b38:	4013      	ands	r3, r2
 8000b3a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000b3c:	4b22      	ldr	r3, [pc, #136]	; (8000bc8 <HAL_DMA_Init+0x168>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6859      	ldr	r1, [r3, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b48:	f003 031c 	and.w	r3, r3, #28
 8000b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b50:	491d      	ldr	r1, [pc, #116]	; (8000bc8 <HAL_DMA_Init+0x168>)
 8000b52:	4313      	orrs	r3, r2
 8000b54:	600b      	str	r3, [r1, #0]
 8000b56:	e019      	b.n	8000b8c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000b58:	4b1c      	ldr	r3, [pc, #112]	; (8000bcc <HAL_DMA_Init+0x16c>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b60:	f003 031c 	and.w	r3, r3, #28
 8000b64:	210f      	movs	r1, #15
 8000b66:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	4917      	ldr	r1, [pc, #92]	; (8000bcc <HAL_DMA_Init+0x16c>)
 8000b6e:	4013      	ands	r3, r2
 8000b70:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000b72:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <HAL_DMA_Init+0x16c>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6859      	ldr	r1, [r3, #4]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7e:	f003 031c 	and.w	r3, r3, #28
 8000b82:	fa01 f303 	lsl.w	r3, r1, r3
 8000b86:	4911      	ldr	r1, [pc, #68]	; (8000bcc <HAL_DMA_Init+0x16c>)
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2201      	movs	r2, #1
 8000b96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000ba2:	2300      	movs	r3, #0
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	40020407 	.word	0x40020407
 8000bb4:	bffdfff8 	.word	0xbffdfff8
 8000bb8:	cccccccd 	.word	0xcccccccd
 8000bbc:	40020000 	.word	0x40020000
 8000bc0:	bffdfbf8 	.word	0xbffdfbf8
 8000bc4:	40020400 	.word	0x40020400
 8000bc8:	400200a8 	.word	0x400200a8
 8000bcc:	400204a8 	.word	0x400204a8

08000bd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
 8000bdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d101      	bne.n	8000bf0 <HAL_DMA_Start_IT+0x20>
 8000bec:	2302      	movs	r3, #2
 8000bee:	e04b      	b.n	8000c88 <HAL_DMA_Start_IT+0xb8>
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d13a      	bne.n	8000c7a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2202      	movs	r2, #2
 8000c08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f022 0201 	bic.w	r2, r2, #1
 8000c20:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	68b9      	ldr	r1, [r7, #8]
 8000c28:	68f8      	ldr	r0, [r7, #12]
 8000c2a:	f000 f8e0 	bl	8000dee <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d008      	beq.n	8000c48 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f042 020e 	orr.w	r2, r2, #14
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	e00f      	b.n	8000c68 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f022 0204 	bic.w	r2, r2, #4
 8000c56:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f042 020a 	orr.w	r2, r2, #10
 8000c66:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f042 0201 	orr.w	r2, r2, #1
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	e005      	b.n	8000c86 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000c82:	2302      	movs	r3, #2
 8000c84:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3718      	adds	r7, #24
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cac:	f003 031c 	and.w	r3, r3, #28
 8000cb0:	2204      	movs	r2, #4
 8000cb2:	409a      	lsls	r2, r3
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d026      	beq.n	8000d0a <HAL_DMA_IRQHandler+0x7a>
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	f003 0304 	and.w	r3, r3, #4
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d021      	beq.n	8000d0a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f003 0320 	and.w	r3, r3, #32
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d107      	bne.n	8000ce4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f022 0204 	bic.w	r2, r2, #4
 8000ce2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce8:	f003 021c 	and.w	r2, r3, #28
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf0:	2104      	movs	r1, #4
 8000cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d071      	beq.n	8000de4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000d08:	e06c      	b.n	8000de4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	f003 031c 	and.w	r3, r3, #28
 8000d12:	2202      	movs	r2, #2
 8000d14:	409a      	lsls	r2, r3
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d02e      	beq.n	8000d7c <HAL_DMA_IRQHandler+0xec>
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	f003 0302 	and.w	r3, r3, #2
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d029      	beq.n	8000d7c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f003 0320 	and.w	r3, r3, #32
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d10b      	bne.n	8000d4e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f022 020a 	bic.w	r2, r2, #10
 8000d44:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2201      	movs	r2, #1
 8000d4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	f003 021c 	and.w	r2, r3, #28
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	2102      	movs	r1, #2
 8000d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d60:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2200      	movs	r2, #0
 8000d66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d038      	beq.n	8000de4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000d7a:	e033      	b.n	8000de4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d80:	f003 031c 	and.w	r3, r3, #28
 8000d84:	2208      	movs	r2, #8
 8000d86:	409a      	lsls	r2, r3
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d02a      	beq.n	8000de6 <HAL_DMA_IRQHandler+0x156>
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	f003 0308 	and.w	r3, r3, #8
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d025      	beq.n	8000de6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f022 020e 	bic.w	r2, r2, #14
 8000da8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	f003 021c 	and.w	r2, r3, #28
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	2101      	movs	r1, #1
 8000db8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dbc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d004      	beq.n	8000de6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000de4:	bf00      	nop
 8000de6:	bf00      	nop
}
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b085      	sub	sp, #20
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	60f8      	str	r0, [r7, #12]
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
 8000dfa:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e00:	f003 021c 	and.w	r2, r3, #28
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e08:	2101      	movs	r1, #1
 8000e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e0e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	683a      	ldr	r2, [r7, #0]
 8000e16:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	2b10      	cmp	r3, #16
 8000e1e:	d108      	bne.n	8000e32 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	68ba      	ldr	r2, [r7, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000e30:	e007      	b.n	8000e42 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	60da      	str	r2, [r3, #12]
}
 8000e42:	bf00      	nop
 8000e44:	3714      	adds	r7, #20
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
	...

08000e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b087      	sub	sp, #28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e5e:	e17f      	b.n	8001160 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	2101      	movs	r1, #1
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f000 8171 	beq.w	800115a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0303 	and.w	r3, r3, #3
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d005      	beq.n	8000e90 <HAL_GPIO_Init+0x40>
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f003 0303 	and.w	r3, r3, #3
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d130      	bne.n	8000ef2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	68da      	ldr	r2, [r3, #12]
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	091b      	lsrs	r3, r3, #4
 8000edc:	f003 0201 	and.w	r2, r3, #1
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 0303 	and.w	r3, r3, #3
 8000efa:	2b03      	cmp	r3, #3
 8000efc:	d118      	bne.n	8000f30 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f04:	2201      	movs	r2, #1
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	08db      	lsrs	r3, r3, #3
 8000f1a:	f003 0201 	and.w	r2, r3, #1
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 0303 	and.w	r3, r3, #3
 8000f38:	2b03      	cmp	r3, #3
 8000f3a:	d017      	beq.n	8000f6c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	2203      	movs	r2, #3
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 0303 	and.w	r3, r3, #3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d123      	bne.n	8000fc0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	08da      	lsrs	r2, r3, #3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3208      	adds	r2, #8
 8000f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	f003 0307 	and.w	r3, r3, #7
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	220f      	movs	r2, #15
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	691a      	ldr	r2, [r3, #16]
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	08da      	lsrs	r2, r3, #3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3208      	adds	r2, #8
 8000fba:	6939      	ldr	r1, [r7, #16]
 8000fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0203 	and.w	r2, r3, #3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	f000 80ac 	beq.w	800115a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001002:	4b5f      	ldr	r3, [pc, #380]	; (8001180 <HAL_GPIO_Init+0x330>)
 8001004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001006:	4a5e      	ldr	r2, [pc, #376]	; (8001180 <HAL_GPIO_Init+0x330>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6613      	str	r3, [r2, #96]	; 0x60
 800100e:	4b5c      	ldr	r3, [pc, #368]	; (8001180 <HAL_GPIO_Init+0x330>)
 8001010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800101a:	4a5a      	ldr	r2, [pc, #360]	; (8001184 <HAL_GPIO_Init+0x334>)
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	089b      	lsrs	r3, r3, #2
 8001020:	3302      	adds	r3, #2
 8001022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001026:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	f003 0303 	and.w	r3, r3, #3
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	220f      	movs	r2, #15
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001044:	d025      	beq.n	8001092 <HAL_GPIO_Init+0x242>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4f      	ldr	r2, [pc, #316]	; (8001188 <HAL_GPIO_Init+0x338>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d01f      	beq.n	800108e <HAL_GPIO_Init+0x23e>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a4e      	ldr	r2, [pc, #312]	; (800118c <HAL_GPIO_Init+0x33c>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d019      	beq.n	800108a <HAL_GPIO_Init+0x23a>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a4d      	ldr	r2, [pc, #308]	; (8001190 <HAL_GPIO_Init+0x340>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d013      	beq.n	8001086 <HAL_GPIO_Init+0x236>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a4c      	ldr	r2, [pc, #304]	; (8001194 <HAL_GPIO_Init+0x344>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d00d      	beq.n	8001082 <HAL_GPIO_Init+0x232>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a4b      	ldr	r2, [pc, #300]	; (8001198 <HAL_GPIO_Init+0x348>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d007      	beq.n	800107e <HAL_GPIO_Init+0x22e>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a4a      	ldr	r2, [pc, #296]	; (800119c <HAL_GPIO_Init+0x34c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d101      	bne.n	800107a <HAL_GPIO_Init+0x22a>
 8001076:	2306      	movs	r3, #6
 8001078:	e00c      	b.n	8001094 <HAL_GPIO_Init+0x244>
 800107a:	2307      	movs	r3, #7
 800107c:	e00a      	b.n	8001094 <HAL_GPIO_Init+0x244>
 800107e:	2305      	movs	r3, #5
 8001080:	e008      	b.n	8001094 <HAL_GPIO_Init+0x244>
 8001082:	2304      	movs	r3, #4
 8001084:	e006      	b.n	8001094 <HAL_GPIO_Init+0x244>
 8001086:	2303      	movs	r3, #3
 8001088:	e004      	b.n	8001094 <HAL_GPIO_Init+0x244>
 800108a:	2302      	movs	r3, #2
 800108c:	e002      	b.n	8001094 <HAL_GPIO_Init+0x244>
 800108e:	2301      	movs	r3, #1
 8001090:	e000      	b.n	8001094 <HAL_GPIO_Init+0x244>
 8001092:	2300      	movs	r3, #0
 8001094:	697a      	ldr	r2, [r7, #20]
 8001096:	f002 0203 	and.w	r2, r2, #3
 800109a:	0092      	lsls	r2, r2, #2
 800109c:	4093      	lsls	r3, r2
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010a4:	4937      	ldr	r1, [pc, #220]	; (8001184 <HAL_GPIO_Init+0x334>)
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	089b      	lsrs	r3, r3, #2
 80010aa:	3302      	adds	r3, #2
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010b2:	4b3b      	ldr	r3, [pc, #236]	; (80011a0 <HAL_GPIO_Init+0x350>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010d6:	4a32      	ldr	r2, [pc, #200]	; (80011a0 <HAL_GPIO_Init+0x350>)
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010dc:	4b30      	ldr	r3, [pc, #192]	; (80011a0 <HAL_GPIO_Init+0x350>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001100:	4a27      	ldr	r2, [pc, #156]	; (80011a0 <HAL_GPIO_Init+0x350>)
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001106:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <HAL_GPIO_Init+0x350>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	43db      	mvns	r3, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800112a:	4a1d      	ldr	r2, [pc, #116]	; (80011a0 <HAL_GPIO_Init+0x350>)
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <HAL_GPIO_Init+0x350>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	43db      	mvns	r3, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001154:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <HAL_GPIO_Init+0x350>)
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	3301      	adds	r3, #1
 800115e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	fa22 f303 	lsr.w	r3, r2, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	f47f ae78 	bne.w	8000e60 <HAL_GPIO_Init+0x10>
  }
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	371c      	adds	r7, #28
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000
 8001184:	40010000 	.word	0x40010000
 8001188:	48000400 	.word	0x48000400
 800118c:	48000800 	.word	0x48000800
 8001190:	48000c00 	.word	0x48000c00
 8001194:	48001000 	.word	0x48001000
 8001198:	48001400 	.word	0x48001400
 800119c:	48001800 	.word	0x48001800
 80011a0:	40010400 	.word	0x40010400

080011a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	807b      	strh	r3, [r7, #2]
 80011b0:	4613      	mov	r3, r2
 80011b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b4:	787b      	ldrb	r3, [r7, #1]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011ba:	887a      	ldrh	r2, [r7, #2]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011c0:	e002      	b.n	80011c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011c2:	887a      	ldrh	r2, [r7, #2]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011e6:	887a      	ldrh	r2, [r7, #2]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4013      	ands	r3, r2
 80011ec:	041a      	lsls	r2, r3, #16
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	43d9      	mvns	r1, r3
 80011f2:	887b      	ldrh	r3, [r7, #2]
 80011f4:	400b      	ands	r3, r1
 80011f6:	431a      	orrs	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	619a      	str	r2, [r3, #24]
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800120c:	4b04      	ldr	r3, [pc, #16]	; (8001220 <HAL_PWREx_GetVoltageRange+0x18>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40007000 	.word	0x40007000

08001224 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001232:	d130      	bne.n	8001296 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001234:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800123c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001240:	d038      	beq.n	80012b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001242:	4b20      	ldr	r3, [pc, #128]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800124a:	4a1e      	ldr	r2, [pc, #120]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800124c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001250:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001252:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2232      	movs	r2, #50	; 0x32
 8001258:	fb02 f303 	mul.w	r3, r2, r3
 800125c:	4a1b      	ldr	r2, [pc, #108]	; (80012cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800125e:	fba2 2303 	umull	r2, r3, r2, r3
 8001262:	0c9b      	lsrs	r3, r3, #18
 8001264:	3301      	adds	r3, #1
 8001266:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001268:	e002      	b.n	8001270 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	3b01      	subs	r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001270:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001272:	695b      	ldr	r3, [r3, #20]
 8001274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800127c:	d102      	bne.n	8001284 <HAL_PWREx_ControlVoltageScaling+0x60>
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1f2      	bne.n	800126a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001284:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800128c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001290:	d110      	bne.n	80012b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e00f      	b.n	80012b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001296:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800129e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012a2:	d007      	beq.n	80012b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012a4:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012ac:	4a05      	ldr	r2, [pc, #20]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	40007000 	.word	0x40007000
 80012c8:	20000004 	.word	0x20000004
 80012cc:	431bde83 	.word	0x431bde83

080012d0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b088      	sub	sp, #32
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e3ca      	b.n	8001a78 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012e2:	4b97      	ldr	r3, [pc, #604]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 030c 	and.w	r3, r3, #12
 80012ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012ec:	4b94      	ldr	r3, [pc, #592]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0310 	and.w	r3, r3, #16
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f000 80e4 	beq.w	80014cc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d007      	beq.n	800131a <HAL_RCC_OscConfig+0x4a>
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	2b0c      	cmp	r3, #12
 800130e:	f040 808b 	bne.w	8001428 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	2b01      	cmp	r3, #1
 8001316:	f040 8087 	bne.w	8001428 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800131a:	4b89      	ldr	r3, [pc, #548]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d005      	beq.n	8001332 <HAL_RCC_OscConfig+0x62>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	699b      	ldr	r3, [r3, #24]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e3a2      	b.n	8001a78 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a1a      	ldr	r2, [r3, #32]
 8001336:	4b82      	ldr	r3, [pc, #520]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	2b00      	cmp	r3, #0
 8001340:	d004      	beq.n	800134c <HAL_RCC_OscConfig+0x7c>
 8001342:	4b7f      	ldr	r3, [pc, #508]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800134a:	e005      	b.n	8001358 <HAL_RCC_OscConfig+0x88>
 800134c:	4b7c      	ldr	r3, [pc, #496]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 800134e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001352:	091b      	lsrs	r3, r3, #4
 8001354:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001358:	4293      	cmp	r3, r2
 800135a:	d223      	bcs.n	80013a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	4618      	mov	r0, r3
 8001362:	f000 fd55 	bl	8001e10 <RCC_SetFlashLatencyFromMSIRange>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e383      	b.n	8001a78 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001370:	4b73      	ldr	r3, [pc, #460]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a72      	ldr	r2, [pc, #456]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 8001376:	f043 0308 	orr.w	r3, r3, #8
 800137a:	6013      	str	r3, [r2, #0]
 800137c:	4b70      	ldr	r3, [pc, #448]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	496d      	ldr	r1, [pc, #436]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 800138a:	4313      	orrs	r3, r2
 800138c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800138e:	4b6c      	ldr	r3, [pc, #432]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	021b      	lsls	r3, r3, #8
 800139c:	4968      	ldr	r1, [pc, #416]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	604b      	str	r3, [r1, #4]
 80013a2:	e025      	b.n	80013f0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013a4:	4b66      	ldr	r3, [pc, #408]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a65      	ldr	r2, [pc, #404]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 80013aa:	f043 0308 	orr.w	r3, r3, #8
 80013ae:	6013      	str	r3, [r2, #0]
 80013b0:	4b63      	ldr	r3, [pc, #396]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	4960      	ldr	r1, [pc, #384]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013c2:	4b5f      	ldr	r3, [pc, #380]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	021b      	lsls	r3, r3, #8
 80013d0:	495b      	ldr	r1, [pc, #364]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 80013d2:	4313      	orrs	r3, r2
 80013d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d109      	bne.n	80013f0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 fd15 	bl	8001e10 <RCC_SetFlashLatencyFromMSIRange>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e343      	b.n	8001a78 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013f0:	f000 fc4a 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
 80013f4:	4602      	mov	r2, r0
 80013f6:	4b52      	ldr	r3, [pc, #328]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	091b      	lsrs	r3, r3, #4
 80013fc:	f003 030f 	and.w	r3, r3, #15
 8001400:	4950      	ldr	r1, [pc, #320]	; (8001544 <HAL_RCC_OscConfig+0x274>)
 8001402:	5ccb      	ldrb	r3, [r1, r3]
 8001404:	f003 031f 	and.w	r3, r3, #31
 8001408:	fa22 f303 	lsr.w	r3, r2, r3
 800140c:	4a4e      	ldr	r2, [pc, #312]	; (8001548 <HAL_RCC_OscConfig+0x278>)
 800140e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001410:	4b4e      	ldr	r3, [pc, #312]	; (800154c <HAL_RCC_OscConfig+0x27c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f9b5 	bl	8000784 <HAL_InitTick>
 800141a:	4603      	mov	r3, r0
 800141c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d052      	beq.n	80014ca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	e327      	b.n	8001a78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d032      	beq.n	8001496 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001430:	4b43      	ldr	r3, [pc, #268]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a42      	ldr	r2, [pc, #264]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800143c:	f7ff f9f2 	bl	8000824 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001444:	f7ff f9ee 	bl	8000824 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e310      	b.n	8001a78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001456:	4b3a      	ldr	r3, [pc, #232]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f0      	beq.n	8001444 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001462:	4b37      	ldr	r3, [pc, #220]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a36      	ldr	r2, [pc, #216]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 8001468:	f043 0308 	orr.w	r3, r3, #8
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	4b34      	ldr	r3, [pc, #208]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a1b      	ldr	r3, [r3, #32]
 800147a:	4931      	ldr	r1, [pc, #196]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 800147c:	4313      	orrs	r3, r2
 800147e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001480:	4b2f      	ldr	r3, [pc, #188]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	69db      	ldr	r3, [r3, #28]
 800148c:	021b      	lsls	r3, r3, #8
 800148e:	492c      	ldr	r1, [pc, #176]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 8001490:	4313      	orrs	r3, r2
 8001492:	604b      	str	r3, [r1, #4]
 8001494:	e01a      	b.n	80014cc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001496:	4b2a      	ldr	r3, [pc, #168]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a29      	ldr	r2, [pc, #164]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 800149c:	f023 0301 	bic.w	r3, r3, #1
 80014a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014a2:	f7ff f9bf 	bl	8000824 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014aa:	f7ff f9bb 	bl	8000824 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e2dd      	b.n	8001a78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014bc:	4b20      	ldr	r3, [pc, #128]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1f0      	bne.n	80014aa <HAL_RCC_OscConfig+0x1da>
 80014c8:	e000      	b.n	80014cc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d074      	beq.n	80015c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	2b08      	cmp	r3, #8
 80014dc:	d005      	beq.n	80014ea <HAL_RCC_OscConfig+0x21a>
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	2b0c      	cmp	r3, #12
 80014e2:	d10e      	bne.n	8001502 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d10b      	bne.n	8001502 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d064      	beq.n	80015c0 <HAL_RCC_OscConfig+0x2f0>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d160      	bne.n	80015c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e2ba      	b.n	8001a78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800150a:	d106      	bne.n	800151a <HAL_RCC_OscConfig+0x24a>
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 8001512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	e026      	b.n	8001568 <HAL_RCC_OscConfig+0x298>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001522:	d115      	bne.n	8001550 <HAL_RCC_OscConfig+0x280>
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a05      	ldr	r2, [pc, #20]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 800152a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	4b03      	ldr	r3, [pc, #12]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a02      	ldr	r2, [pc, #8]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 8001536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800153a:	6013      	str	r3, [r2, #0]
 800153c:	e014      	b.n	8001568 <HAL_RCC_OscConfig+0x298>
 800153e:	bf00      	nop
 8001540:	40021000 	.word	0x40021000
 8001544:	08003e04 	.word	0x08003e04
 8001548:	20000004 	.word	0x20000004
 800154c:	20000008 	.word	0x20000008
 8001550:	4ba0      	ldr	r3, [pc, #640]	; (80017d4 <HAL_RCC_OscConfig+0x504>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a9f      	ldr	r2, [pc, #636]	; (80017d4 <HAL_RCC_OscConfig+0x504>)
 8001556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	4b9d      	ldr	r3, [pc, #628]	; (80017d4 <HAL_RCC_OscConfig+0x504>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a9c      	ldr	r2, [pc, #624]	; (80017d4 <HAL_RCC_OscConfig+0x504>)
 8001562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001566:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d013      	beq.n	8001598 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001570:	f7ff f958 	bl	8000824 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001578:	f7ff f954 	bl	8000824 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b64      	cmp	r3, #100	; 0x64
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e276      	b.n	8001a78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800158a:	4b92      	ldr	r3, [pc, #584]	; (80017d4 <HAL_RCC_OscConfig+0x504>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0f0      	beq.n	8001578 <HAL_RCC_OscConfig+0x2a8>
 8001596:	e014      	b.n	80015c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001598:	f7ff f944 	bl	8000824 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a0:	f7ff f940 	bl	8000824 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b64      	cmp	r3, #100	; 0x64
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e262      	b.n	8001a78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015b2:	4b88      	ldr	r3, [pc, #544]	; (80017d4 <HAL_RCC_OscConfig+0x504>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f0      	bne.n	80015a0 <HAL_RCC_OscConfig+0x2d0>
 80015be:	e000      	b.n	80015c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d060      	beq.n	8001690 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	2b04      	cmp	r3, #4
 80015d2:	d005      	beq.n	80015e0 <HAL_RCC_OscConfig+0x310>
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	2b0c      	cmp	r3, #12
 80015d8:	d119      	bne.n	800160e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d116      	bne.n	800160e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015e0:	4b7c      	ldr	r3, [pc, #496]	; (80017d4 <HAL_RCC_OscConfig+0x504>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d005      	beq.n	80015f8 <HAL_RCC_OscConfig+0x328>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e23f      	b.n	8001a78 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f8:	4b76      	ldr	r3, [pc, #472]	; (80017d4 <HAL_RCC_OscConfig+0x504>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	061b      	lsls	r3, r3, #24
 8001606:	4973      	ldr	r1, [pc, #460]	; (80017d4 <HAL_RCC_OscConfig+0x504>)
 8001608:	4313      	orrs	r3, r2
 800160a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800160c:	e040      	b.n	8001690 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d023      	beq.n	800165e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001616:	4b6f      	ldr	r3, [pc, #444]	; (80017d4 <HAL_RCC_OscConfig+0x504>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a6e      	ldr	r2, [pc, #440]	; (80017d4 <HAL_RCC_OscConfig+0x504>)
 800161c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001620:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001622:	f7ff f8ff 	bl	8000824 <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800162a:	f7ff f8fb 	bl	8000824 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e21d      	b.n	8001a78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800163c:	4b65      	ldr	r3, [pc, #404]	; (80017d4 <HAL_RCC_OscConfig+0x504>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0f0      	beq.n	800162a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001648:	4b62      	ldr	r3, [pc, #392]	; (80017d4 <HAL_RCC_OscConfig+0x504>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	061b      	lsls	r3, r3, #24
 8001656:	495f      	ldr	r1, [pc, #380]	; (80017d4 <HAL_RCC_OscConfig+0x504>)
 8001658:	4313      	orrs	r3, r2
 800165a:	604b      	str	r3, [r1, #4]
 800165c:	e018      	b.n	8001690 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800165e:	4b5d      	ldr	r3, [pc, #372]	; (80017d4 <HAL_RCC_OscConfig+0x504>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a5c      	ldr	r2, [pc, #368]	; (80017d4 <HAL_RCC_OscConfig+0x504>)
 8001664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166a:	f7ff f8db 	bl	8000824 <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001672:	f7ff f8d7 	bl	8000824 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e1f9      	b.n	8001a78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001684:	4b53      	ldr	r3, [pc, #332]	; (80017d4 <HAL_RCC_OscConfig+0x504>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1f0      	bne.n	8001672 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	2b00      	cmp	r3, #0
 800169a:	d03c      	beq.n	8001716 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	695b      	ldr	r3, [r3, #20]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d01c      	beq.n	80016de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016a4:	4b4b      	ldr	r3, [pc, #300]	; (80017d4 <HAL_RCC_OscConfig+0x504>)
 80016a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016aa:	4a4a      	ldr	r2, [pc, #296]	; (80017d4 <HAL_RCC_OscConfig+0x504>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b4:	f7ff f8b6 	bl	8000824 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016bc:	f7ff f8b2 	bl	8000824 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e1d4      	b.n	8001a78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016ce:	4b41      	ldr	r3, [pc, #260]	; (80017d4 <HAL_RCC_OscConfig+0x504>)
 80016d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0ef      	beq.n	80016bc <HAL_RCC_OscConfig+0x3ec>
 80016dc:	e01b      	b.n	8001716 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016de:	4b3d      	ldr	r3, [pc, #244]	; (80017d4 <HAL_RCC_OscConfig+0x504>)
 80016e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016e4:	4a3b      	ldr	r2, [pc, #236]	; (80017d4 <HAL_RCC_OscConfig+0x504>)
 80016e6:	f023 0301 	bic.w	r3, r3, #1
 80016ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ee:	f7ff f899 	bl	8000824 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f6:	f7ff f895 	bl	8000824 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e1b7      	b.n	8001a78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001708:	4b32      	ldr	r3, [pc, #200]	; (80017d4 <HAL_RCC_OscConfig+0x504>)
 800170a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1ef      	bne.n	80016f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0304 	and.w	r3, r3, #4
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 80a6 	beq.w	8001870 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001724:	2300      	movs	r3, #0
 8001726:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001728:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <HAL_RCC_OscConfig+0x504>)
 800172a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d10d      	bne.n	8001750 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001734:	4b27      	ldr	r3, [pc, #156]	; (80017d4 <HAL_RCC_OscConfig+0x504>)
 8001736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001738:	4a26      	ldr	r2, [pc, #152]	; (80017d4 <HAL_RCC_OscConfig+0x504>)
 800173a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173e:	6593      	str	r3, [r2, #88]	; 0x58
 8001740:	4b24      	ldr	r3, [pc, #144]	; (80017d4 <HAL_RCC_OscConfig+0x504>)
 8001742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800174c:	2301      	movs	r3, #1
 800174e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001750:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <HAL_RCC_OscConfig+0x508>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001758:	2b00      	cmp	r3, #0
 800175a:	d118      	bne.n	800178e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800175c:	4b1e      	ldr	r3, [pc, #120]	; (80017d8 <HAL_RCC_OscConfig+0x508>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a1d      	ldr	r2, [pc, #116]	; (80017d8 <HAL_RCC_OscConfig+0x508>)
 8001762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001766:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001768:	f7ff f85c 	bl	8000824 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001770:	f7ff f858 	bl	8000824 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e17a      	b.n	8001a78 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <HAL_RCC_OscConfig+0x508>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0f0      	beq.n	8001770 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d108      	bne.n	80017a8 <HAL_RCC_OscConfig+0x4d8>
 8001796:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <HAL_RCC_OscConfig+0x504>)
 8001798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800179c:	4a0d      	ldr	r2, [pc, #52]	; (80017d4 <HAL_RCC_OscConfig+0x504>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017a6:	e029      	b.n	80017fc <HAL_RCC_OscConfig+0x52c>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	2b05      	cmp	r3, #5
 80017ae:	d115      	bne.n	80017dc <HAL_RCC_OscConfig+0x50c>
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <HAL_RCC_OscConfig+0x504>)
 80017b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b6:	4a07      	ldr	r2, [pc, #28]	; (80017d4 <HAL_RCC_OscConfig+0x504>)
 80017b8:	f043 0304 	orr.w	r3, r3, #4
 80017bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017c0:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <HAL_RCC_OscConfig+0x504>)
 80017c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c6:	4a03      	ldr	r2, [pc, #12]	; (80017d4 <HAL_RCC_OscConfig+0x504>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017d0:	e014      	b.n	80017fc <HAL_RCC_OscConfig+0x52c>
 80017d2:	bf00      	nop
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40007000 	.word	0x40007000
 80017dc:	4b9c      	ldr	r3, [pc, #624]	; (8001a50 <HAL_RCC_OscConfig+0x780>)
 80017de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e2:	4a9b      	ldr	r2, [pc, #620]	; (8001a50 <HAL_RCC_OscConfig+0x780>)
 80017e4:	f023 0301 	bic.w	r3, r3, #1
 80017e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017ec:	4b98      	ldr	r3, [pc, #608]	; (8001a50 <HAL_RCC_OscConfig+0x780>)
 80017ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f2:	4a97      	ldr	r2, [pc, #604]	; (8001a50 <HAL_RCC_OscConfig+0x780>)
 80017f4:	f023 0304 	bic.w	r3, r3, #4
 80017f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d016      	beq.n	8001832 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001804:	f7ff f80e 	bl	8000824 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800180a:	e00a      	b.n	8001822 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800180c:	f7ff f80a 	bl	8000824 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	f241 3288 	movw	r2, #5000	; 0x1388
 800181a:	4293      	cmp	r3, r2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e12a      	b.n	8001a78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001822:	4b8b      	ldr	r3, [pc, #556]	; (8001a50 <HAL_RCC_OscConfig+0x780>)
 8001824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0ed      	beq.n	800180c <HAL_RCC_OscConfig+0x53c>
 8001830:	e015      	b.n	800185e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001832:	f7fe fff7 	bl	8000824 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001838:	e00a      	b.n	8001850 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800183a:	f7fe fff3 	bl	8000824 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	f241 3288 	movw	r2, #5000	; 0x1388
 8001848:	4293      	cmp	r3, r2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e113      	b.n	8001a78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001850:	4b7f      	ldr	r3, [pc, #508]	; (8001a50 <HAL_RCC_OscConfig+0x780>)
 8001852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1ed      	bne.n	800183a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800185e:	7ffb      	ldrb	r3, [r7, #31]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d105      	bne.n	8001870 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001864:	4b7a      	ldr	r3, [pc, #488]	; (8001a50 <HAL_RCC_OscConfig+0x780>)
 8001866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001868:	4a79      	ldr	r2, [pc, #484]	; (8001a50 <HAL_RCC_OscConfig+0x780>)
 800186a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800186e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 80fe 	beq.w	8001a76 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187e:	2b02      	cmp	r3, #2
 8001880:	f040 80d0 	bne.w	8001a24 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001884:	4b72      	ldr	r3, [pc, #456]	; (8001a50 <HAL_RCC_OscConfig+0x780>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	f003 0203 	and.w	r2, r3, #3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001894:	429a      	cmp	r2, r3
 8001896:	d130      	bne.n	80018fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	3b01      	subs	r3, #1
 80018a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d127      	bne.n	80018fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d11f      	bne.n	80018fa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018c4:	2a07      	cmp	r2, #7
 80018c6:	bf14      	ite	ne
 80018c8:	2201      	movne	r2, #1
 80018ca:	2200      	moveq	r2, #0
 80018cc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d113      	bne.n	80018fa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018dc:	085b      	lsrs	r3, r3, #1
 80018de:	3b01      	subs	r3, #1
 80018e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d109      	bne.n	80018fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f0:	085b      	lsrs	r3, r3, #1
 80018f2:	3b01      	subs	r3, #1
 80018f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d06e      	beq.n	80019d8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	2b0c      	cmp	r3, #12
 80018fe:	d069      	beq.n	80019d4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001900:	4b53      	ldr	r3, [pc, #332]	; (8001a50 <HAL_RCC_OscConfig+0x780>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d105      	bne.n	8001918 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800190c:	4b50      	ldr	r3, [pc, #320]	; (8001a50 <HAL_RCC_OscConfig+0x780>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e0ad      	b.n	8001a78 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800191c:	4b4c      	ldr	r3, [pc, #304]	; (8001a50 <HAL_RCC_OscConfig+0x780>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a4b      	ldr	r2, [pc, #300]	; (8001a50 <HAL_RCC_OscConfig+0x780>)
 8001922:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001926:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001928:	f7fe ff7c 	bl	8000824 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001930:	f7fe ff78 	bl	8000824 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e09a      	b.n	8001a78 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001942:	4b43      	ldr	r3, [pc, #268]	; (8001a50 <HAL_RCC_OscConfig+0x780>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800194e:	4b40      	ldr	r3, [pc, #256]	; (8001a50 <HAL_RCC_OscConfig+0x780>)
 8001950:	68da      	ldr	r2, [r3, #12]
 8001952:	4b40      	ldr	r3, [pc, #256]	; (8001a54 <HAL_RCC_OscConfig+0x784>)
 8001954:	4013      	ands	r3, r2
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800195e:	3a01      	subs	r2, #1
 8001960:	0112      	lsls	r2, r2, #4
 8001962:	4311      	orrs	r1, r2
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001968:	0212      	lsls	r2, r2, #8
 800196a:	4311      	orrs	r1, r2
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001970:	0852      	lsrs	r2, r2, #1
 8001972:	3a01      	subs	r2, #1
 8001974:	0552      	lsls	r2, r2, #21
 8001976:	4311      	orrs	r1, r2
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800197c:	0852      	lsrs	r2, r2, #1
 800197e:	3a01      	subs	r2, #1
 8001980:	0652      	lsls	r2, r2, #25
 8001982:	4311      	orrs	r1, r2
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001988:	0912      	lsrs	r2, r2, #4
 800198a:	0452      	lsls	r2, r2, #17
 800198c:	430a      	orrs	r2, r1
 800198e:	4930      	ldr	r1, [pc, #192]	; (8001a50 <HAL_RCC_OscConfig+0x780>)
 8001990:	4313      	orrs	r3, r2
 8001992:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001994:	4b2e      	ldr	r3, [pc, #184]	; (8001a50 <HAL_RCC_OscConfig+0x780>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a2d      	ldr	r2, [pc, #180]	; (8001a50 <HAL_RCC_OscConfig+0x780>)
 800199a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800199e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019a0:	4b2b      	ldr	r3, [pc, #172]	; (8001a50 <HAL_RCC_OscConfig+0x780>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	4a2a      	ldr	r2, [pc, #168]	; (8001a50 <HAL_RCC_OscConfig+0x780>)
 80019a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019ac:	f7fe ff3a 	bl	8000824 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b4:	f7fe ff36 	bl	8000824 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e058      	b.n	8001a78 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c6:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <HAL_RCC_OscConfig+0x780>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d0f0      	beq.n	80019b4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019d2:	e050      	b.n	8001a76 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e04f      	b.n	8001a78 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d8:	4b1d      	ldr	r3, [pc, #116]	; (8001a50 <HAL_RCC_OscConfig+0x780>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d148      	bne.n	8001a76 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019e4:	4b1a      	ldr	r3, [pc, #104]	; (8001a50 <HAL_RCC_OscConfig+0x780>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a19      	ldr	r2, [pc, #100]	; (8001a50 <HAL_RCC_OscConfig+0x780>)
 80019ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019f0:	4b17      	ldr	r3, [pc, #92]	; (8001a50 <HAL_RCC_OscConfig+0x780>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	4a16      	ldr	r2, [pc, #88]	; (8001a50 <HAL_RCC_OscConfig+0x780>)
 80019f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019fc:	f7fe ff12 	bl	8000824 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a04:	f7fe ff0e 	bl	8000824 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e030      	b.n	8001a78 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a16:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <HAL_RCC_OscConfig+0x780>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d0f0      	beq.n	8001a04 <HAL_RCC_OscConfig+0x734>
 8001a22:	e028      	b.n	8001a76 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	2b0c      	cmp	r3, #12
 8001a28:	d023      	beq.n	8001a72 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <HAL_RCC_OscConfig+0x780>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a08      	ldr	r2, [pc, #32]	; (8001a50 <HAL_RCC_OscConfig+0x780>)
 8001a30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a36:	f7fe fef5 	bl	8000824 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a3c:	e00c      	b.n	8001a58 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a3e:	f7fe fef1 	bl	8000824 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d905      	bls.n	8001a58 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e013      	b.n	8001a78 <HAL_RCC_OscConfig+0x7a8>
 8001a50:	40021000 	.word	0x40021000
 8001a54:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a58:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <HAL_RCC_OscConfig+0x7b0>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1ec      	bne.n	8001a3e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_RCC_OscConfig+0x7b0>)
 8001a66:	68da      	ldr	r2, [r3, #12]
 8001a68:	4905      	ldr	r1, [pc, #20]	; (8001a80 <HAL_RCC_OscConfig+0x7b0>)
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_RCC_OscConfig+0x7b4>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	60cb      	str	r3, [r1, #12]
 8001a70:	e001      	b.n	8001a76 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e000      	b.n	8001a78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3720      	adds	r7, #32
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40021000 	.word	0x40021000
 8001a84:	feeefffc 	.word	0xfeeefffc

08001a88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e0e7      	b.n	8001c6c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a9c:	4b75      	ldr	r3, [pc, #468]	; (8001c74 <HAL_RCC_ClockConfig+0x1ec>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0307 	and.w	r3, r3, #7
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d910      	bls.n	8001acc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aaa:	4b72      	ldr	r3, [pc, #456]	; (8001c74 <HAL_RCC_ClockConfig+0x1ec>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f023 0207 	bic.w	r2, r3, #7
 8001ab2:	4970      	ldr	r1, [pc, #448]	; (8001c74 <HAL_RCC_ClockConfig+0x1ec>)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aba:	4b6e      	ldr	r3, [pc, #440]	; (8001c74 <HAL_RCC_ClockConfig+0x1ec>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d001      	beq.n	8001acc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e0cf      	b.n	8001c6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d010      	beq.n	8001afa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	4b66      	ldr	r3, [pc, #408]	; (8001c78 <HAL_RCC_ClockConfig+0x1f0>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d908      	bls.n	8001afa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae8:	4b63      	ldr	r3, [pc, #396]	; (8001c78 <HAL_RCC_ClockConfig+0x1f0>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	4960      	ldr	r1, [pc, #384]	; (8001c78 <HAL_RCC_ClockConfig+0x1f0>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d04c      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	d107      	bne.n	8001b1e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b0e:	4b5a      	ldr	r3, [pc, #360]	; (8001c78 <HAL_RCC_ClockConfig+0x1f0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d121      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e0a6      	b.n	8001c6c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d107      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b26:	4b54      	ldr	r3, [pc, #336]	; (8001c78 <HAL_RCC_ClockConfig+0x1f0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d115      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e09a      	b.n	8001c6c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d107      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b3e:	4b4e      	ldr	r3, [pc, #312]	; (8001c78 <HAL_RCC_ClockConfig+0x1f0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d109      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e08e      	b.n	8001c6c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b4e:	4b4a      	ldr	r3, [pc, #296]	; (8001c78 <HAL_RCC_ClockConfig+0x1f0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e086      	b.n	8001c6c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b5e:	4b46      	ldr	r3, [pc, #280]	; (8001c78 <HAL_RCC_ClockConfig+0x1f0>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f023 0203 	bic.w	r2, r3, #3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	4943      	ldr	r1, [pc, #268]	; (8001c78 <HAL_RCC_ClockConfig+0x1f0>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b70:	f7fe fe58 	bl	8000824 <HAL_GetTick>
 8001b74:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b76:	e00a      	b.n	8001b8e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b78:	f7fe fe54 	bl	8000824 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e06e      	b.n	8001c6c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8e:	4b3a      	ldr	r3, [pc, #232]	; (8001c78 <HAL_RCC_ClockConfig+0x1f0>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 020c 	and.w	r2, r3, #12
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d1eb      	bne.n	8001b78 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d010      	beq.n	8001bce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	4b31      	ldr	r3, [pc, #196]	; (8001c78 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d208      	bcs.n	8001bce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bbc:	4b2e      	ldr	r3, [pc, #184]	; (8001c78 <HAL_RCC_ClockConfig+0x1f0>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	492b      	ldr	r1, [pc, #172]	; (8001c78 <HAL_RCC_ClockConfig+0x1f0>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bce:	4b29      	ldr	r3, [pc, #164]	; (8001c74 <HAL_RCC_ClockConfig+0x1ec>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d210      	bcs.n	8001bfe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bdc:	4b25      	ldr	r3, [pc, #148]	; (8001c74 <HAL_RCC_ClockConfig+0x1ec>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f023 0207 	bic.w	r2, r3, #7
 8001be4:	4923      	ldr	r1, [pc, #140]	; (8001c74 <HAL_RCC_ClockConfig+0x1ec>)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bec:	4b21      	ldr	r3, [pc, #132]	; (8001c74 <HAL_RCC_ClockConfig+0x1ec>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d001      	beq.n	8001bfe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e036      	b.n	8001c6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0304 	and.w	r3, r3, #4
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d008      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c0a:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <HAL_RCC_ClockConfig+0x1f0>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	4918      	ldr	r1, [pc, #96]	; (8001c78 <HAL_RCC_ClockConfig+0x1f0>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0308 	and.w	r3, r3, #8
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d009      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c28:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <HAL_RCC_ClockConfig+0x1f0>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	4910      	ldr	r1, [pc, #64]	; (8001c78 <HAL_RCC_ClockConfig+0x1f0>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c3c:	f000 f824 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
 8001c40:	4602      	mov	r2, r0
 8001c42:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <HAL_RCC_ClockConfig+0x1f0>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	091b      	lsrs	r3, r3, #4
 8001c48:	f003 030f 	and.w	r3, r3, #15
 8001c4c:	490b      	ldr	r1, [pc, #44]	; (8001c7c <HAL_RCC_ClockConfig+0x1f4>)
 8001c4e:	5ccb      	ldrb	r3, [r1, r3]
 8001c50:	f003 031f 	and.w	r3, r3, #31
 8001c54:	fa22 f303 	lsr.w	r3, r2, r3
 8001c58:	4a09      	ldr	r2, [pc, #36]	; (8001c80 <HAL_RCC_ClockConfig+0x1f8>)
 8001c5a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c5c:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <HAL_RCC_ClockConfig+0x1fc>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7fe fd8f 	bl	8000784 <HAL_InitTick>
 8001c66:	4603      	mov	r3, r0
 8001c68:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c6a:	7afb      	ldrb	r3, [r7, #11]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40022000 	.word	0x40022000
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	08003e04 	.word	0x08003e04
 8001c80:	20000004 	.word	0x20000004
 8001c84:	20000008 	.word	0x20000008

08001c88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b089      	sub	sp, #36	; 0x24
 8001c8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
 8001c92:	2300      	movs	r3, #0
 8001c94:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c96:	4b3e      	ldr	r3, [pc, #248]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
 8001c9e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ca0:	4b3b      	ldr	r3, [pc, #236]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d005      	beq.n	8001cbc <HAL_RCC_GetSysClockFreq+0x34>
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	2b0c      	cmp	r3, #12
 8001cb4:	d121      	bne.n	8001cfa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d11e      	bne.n	8001cfa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cbc:	4b34      	ldr	r3, [pc, #208]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0308 	and.w	r3, r3, #8
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d107      	bne.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cc8:	4b31      	ldr	r3, [pc, #196]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cce:	0a1b      	lsrs	r3, r3, #8
 8001cd0:	f003 030f 	and.w	r3, r3, #15
 8001cd4:	61fb      	str	r3, [r7, #28]
 8001cd6:	e005      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cd8:	4b2d      	ldr	r3, [pc, #180]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	091b      	lsrs	r3, r3, #4
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ce4:	4a2b      	ldr	r2, [pc, #172]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d10d      	bne.n	8001d10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cf8:	e00a      	b.n	8001d10 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d102      	bne.n	8001d06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d00:	4b25      	ldr	r3, [pc, #148]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d02:	61bb      	str	r3, [r7, #24]
 8001d04:	e004      	b.n	8001d10 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d101      	bne.n	8001d10 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d0c:	4b23      	ldr	r3, [pc, #140]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x114>)
 8001d0e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	2b0c      	cmp	r3, #12
 8001d14:	d134      	bne.n	8001d80 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d16:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d003      	beq.n	8001d2e <HAL_RCC_GetSysClockFreq+0xa6>
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	2b03      	cmp	r3, #3
 8001d2a:	d003      	beq.n	8001d34 <HAL_RCC_GetSysClockFreq+0xac>
 8001d2c:	e005      	b.n	8001d3a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d2e:	4b1a      	ldr	r3, [pc, #104]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d30:	617b      	str	r3, [r7, #20]
      break;
 8001d32:	e005      	b.n	8001d40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d34:	4b19      	ldr	r3, [pc, #100]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x114>)
 8001d36:	617b      	str	r3, [r7, #20]
      break;
 8001d38:	e002      	b.n	8001d40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	617b      	str	r3, [r7, #20]
      break;
 8001d3e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d40:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	091b      	lsrs	r3, r3, #4
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	0a1b      	lsrs	r3, r3, #8
 8001d54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	fb03 f202 	mul.w	r2, r3, r2
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d64:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d66:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	0e5b      	lsrs	r3, r3, #25
 8001d6c:	f003 0303 	and.w	r3, r3, #3
 8001d70:	3301      	adds	r3, #1
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d80:	69bb      	ldr	r3, [r7, #24]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3724      	adds	r7, #36	; 0x24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40021000 	.word	0x40021000
 8001d94:	08003e1c 	.word	0x08003e1c
 8001d98:	00f42400 	.word	0x00f42400
 8001d9c:	007a1200 	.word	0x007a1200

08001da0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001da4:	4b03      	ldr	r3, [pc, #12]	; (8001db4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001da6:	681b      	ldr	r3, [r3, #0]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	20000004 	.word	0x20000004

08001db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001dbc:	f7ff fff0 	bl	8001da0 <HAL_RCC_GetHCLKFreq>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	0a1b      	lsrs	r3, r3, #8
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	4904      	ldr	r1, [pc, #16]	; (8001de0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dce:	5ccb      	ldrb	r3, [r1, r3]
 8001dd0:	f003 031f 	and.w	r3, r3, #31
 8001dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	08003e14 	.word	0x08003e14

08001de4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001de8:	f7ff ffda 	bl	8001da0 <HAL_RCC_GetHCLKFreq>
 8001dec:	4602      	mov	r2, r0
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	0adb      	lsrs	r3, r3, #11
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	4904      	ldr	r1, [pc, #16]	; (8001e0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dfa:	5ccb      	ldrb	r3, [r1, r3]
 8001dfc:	f003 031f 	and.w	r3, r3, #31
 8001e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	08003e14 	.word	0x08003e14

08001e10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e18:	2300      	movs	r3, #0
 8001e1a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e1c:	4b2a      	ldr	r3, [pc, #168]	; (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e28:	f7ff f9ee 	bl	8001208 <HAL_PWREx_GetVoltageRange>
 8001e2c:	6178      	str	r0, [r7, #20]
 8001e2e:	e014      	b.n	8001e5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e30:	4b25      	ldr	r3, [pc, #148]	; (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e34:	4a24      	ldr	r2, [pc, #144]	; (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e3c:	4b22      	ldr	r3, [pc, #136]	; (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e48:	f7ff f9de 	bl	8001208 <HAL_PWREx_GetVoltageRange>
 8001e4c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e4e:	4b1e      	ldr	r3, [pc, #120]	; (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e52:	4a1d      	ldr	r2, [pc, #116]	; (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e58:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e60:	d10b      	bne.n	8001e7a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b80      	cmp	r3, #128	; 0x80
 8001e66:	d919      	bls.n	8001e9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2ba0      	cmp	r3, #160	; 0xa0
 8001e6c:	d902      	bls.n	8001e74 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e6e:	2302      	movs	r3, #2
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	e013      	b.n	8001e9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e74:	2301      	movs	r3, #1
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	e010      	b.n	8001e9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b80      	cmp	r3, #128	; 0x80
 8001e7e:	d902      	bls.n	8001e86 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e80:	2303      	movs	r3, #3
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	e00a      	b.n	8001e9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b80      	cmp	r3, #128	; 0x80
 8001e8a:	d102      	bne.n	8001e92 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	e004      	b.n	8001e9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b70      	cmp	r3, #112	; 0x70
 8001e96:	d101      	bne.n	8001e9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e98:	2301      	movs	r3, #1
 8001e9a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f023 0207 	bic.w	r2, r3, #7
 8001ea4:	4909      	ldr	r1, [pc, #36]	; (8001ecc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001eac:	4b07      	ldr	r3, [pc, #28]	; (8001ecc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d001      	beq.n	8001ebe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	40022000 	.word	0x40022000

08001ed0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ed8:	2300      	movs	r3, #0
 8001eda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001edc:	2300      	movs	r3, #0
 8001ede:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d041      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ef0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ef4:	d02a      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001ef6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001efa:	d824      	bhi.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001efc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f00:	d008      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f06:	d81e      	bhi.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00a      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f10:	d010      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f12:	e018      	b.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f14:	4b86      	ldr	r3, [pc, #536]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	4a85      	ldr	r2, [pc, #532]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f1e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f20:	e015      	b.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3304      	adds	r3, #4
 8001f26:	2100      	movs	r1, #0
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f001 f829 	bl	8002f80 <RCCEx_PLLSAI1_Config>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f32:	e00c      	b.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3320      	adds	r3, #32
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f001 f914 	bl	8003168 <RCCEx_PLLSAI2_Config>
 8001f40:	4603      	mov	r3, r0
 8001f42:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f44:	e003      	b.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	74fb      	strb	r3, [r7, #19]
      break;
 8001f4a:	e000      	b.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f4e:	7cfb      	ldrb	r3, [r7, #19]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d10b      	bne.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f54:	4b76      	ldr	r3, [pc, #472]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f62:	4973      	ldr	r1, [pc, #460]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f6a:	e001      	b.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f6c:	7cfb      	ldrb	r3, [r7, #19]
 8001f6e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d041      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f80:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f84:	d02a      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f86:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f8a:	d824      	bhi.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f90:	d008      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f96:	d81e      	bhi.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00a      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fa0:	d010      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001fa2:	e018      	b.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fa4:	4b62      	ldr	r3, [pc, #392]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	4a61      	ldr	r2, [pc, #388]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fb0:	e015      	b.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f000 ffe1 	bl	8002f80 <RCCEx_PLLSAI1_Config>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fc2:	e00c      	b.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3320      	adds	r3, #32
 8001fc8:	2100      	movs	r1, #0
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f001 f8cc 	bl	8003168 <RCCEx_PLLSAI2_Config>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fd4:	e003      	b.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	74fb      	strb	r3, [r7, #19]
      break;
 8001fda:	e000      	b.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001fdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fde:	7cfb      	ldrb	r3, [r7, #19]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10b      	bne.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fe4:	4b52      	ldr	r3, [pc, #328]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ff2:	494f      	ldr	r1, [pc, #316]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001ffa:	e001      	b.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ffc:	7cfb      	ldrb	r3, [r7, #19]
 8001ffe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002008:	2b00      	cmp	r3, #0
 800200a:	f000 80a0 	beq.w	800214e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800200e:	2300      	movs	r3, #0
 8002010:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002012:	4b47      	ldr	r3, [pc, #284]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800201e:	2301      	movs	r3, #1
 8002020:	e000      	b.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002022:	2300      	movs	r3, #0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00d      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002028:	4b41      	ldr	r3, [pc, #260]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202c:	4a40      	ldr	r2, [pc, #256]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002032:	6593      	str	r3, [r2, #88]	; 0x58
 8002034:	4b3e      	ldr	r3, [pc, #248]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002040:	2301      	movs	r3, #1
 8002042:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002044:	4b3b      	ldr	r3, [pc, #236]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a3a      	ldr	r2, [pc, #232]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800204a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800204e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002050:	f7fe fbe8 	bl	8000824 <HAL_GetTick>
 8002054:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002056:	e009      	b.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002058:	f7fe fbe4 	bl	8000824 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d902      	bls.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	74fb      	strb	r3, [r7, #19]
        break;
 800206a:	e005      	b.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800206c:	4b31      	ldr	r3, [pc, #196]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0ef      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002078:	7cfb      	ldrb	r3, [r7, #19]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d15c      	bne.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800207e:	4b2c      	ldr	r3, [pc, #176]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002084:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002088:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d01f      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	429a      	cmp	r2, r3
 800209a:	d019      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800209c:	4b24      	ldr	r3, [pc, #144]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020a8:	4b21      	ldr	r3, [pc, #132]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ae:	4a20      	ldr	r2, [pc, #128]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020b8:	4b1d      	ldr	r3, [pc, #116]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020be:	4a1c      	ldr	r2, [pc, #112]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020c8:	4a19      	ldr	r2, [pc, #100]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d016      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020da:	f7fe fba3 	bl	8000824 <HAL_GetTick>
 80020de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020e0:	e00b      	b.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e2:	f7fe fb9f 	bl	8000824 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d902      	bls.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	74fb      	strb	r3, [r7, #19]
            break;
 80020f8:	e006      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020fa:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0ec      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002108:	7cfb      	ldrb	r3, [r7, #19]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10c      	bne.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800210e:	4b08      	ldr	r3, [pc, #32]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002114:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800211e:	4904      	ldr	r1, [pc, #16]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002120:	4313      	orrs	r3, r2
 8002122:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002126:	e009      	b.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002128:	7cfb      	ldrb	r3, [r7, #19]
 800212a:	74bb      	strb	r3, [r7, #18]
 800212c:	e006      	b.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800212e:	bf00      	nop
 8002130:	40021000 	.word	0x40021000
 8002134:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002138:	7cfb      	ldrb	r3, [r7, #19]
 800213a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800213c:	7c7b      	ldrb	r3, [r7, #17]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d105      	bne.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002142:	4b9e      	ldr	r3, [pc, #632]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002146:	4a9d      	ldr	r2, [pc, #628]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800214c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00a      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800215a:	4b98      	ldr	r3, [pc, #608]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002160:	f023 0203 	bic.w	r2, r3, #3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002168:	4994      	ldr	r1, [pc, #592]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216a:	4313      	orrs	r3, r2
 800216c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00a      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800217c:	4b8f      	ldr	r3, [pc, #572]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002182:	f023 020c 	bic.w	r2, r3, #12
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800218a:	498c      	ldr	r1, [pc, #560]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218c:	4313      	orrs	r3, r2
 800218e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0304 	and.w	r3, r3, #4
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00a      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800219e:	4b87      	ldr	r3, [pc, #540]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	4983      	ldr	r1, [pc, #524]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00a      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021c0:	4b7e      	ldr	r3, [pc, #504]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	497b      	ldr	r1, [pc, #492]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0310 	and.w	r3, r3, #16
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00a      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021e2:	4b76      	ldr	r3, [pc, #472]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f0:	4972      	ldr	r1, [pc, #456]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0320 	and.w	r3, r3, #32
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00a      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002204:	4b6d      	ldr	r3, [pc, #436]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002212:	496a      	ldr	r1, [pc, #424]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002214:	4313      	orrs	r3, r2
 8002216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00a      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002226:	4b65      	ldr	r3, [pc, #404]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002234:	4961      	ldr	r1, [pc, #388]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002236:	4313      	orrs	r3, r2
 8002238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00a      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002248:	4b5c      	ldr	r3, [pc, #368]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800224a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002256:	4959      	ldr	r1, [pc, #356]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002258:	4313      	orrs	r3, r2
 800225a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00a      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800226a:	4b54      	ldr	r3, [pc, #336]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800226c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002270:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002278:	4950      	ldr	r1, [pc, #320]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227a:	4313      	orrs	r3, r2
 800227c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00a      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800228c:	4b4b      	ldr	r3, [pc, #300]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002292:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229a:	4948      	ldr	r1, [pc, #288]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229c:	4313      	orrs	r3, r2
 800229e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00a      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022ae:	4b43      	ldr	r3, [pc, #268]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022bc:	493f      	ldr	r1, [pc, #252]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d028      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022d0:	4b3a      	ldr	r3, [pc, #232]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022de:	4937      	ldr	r1, [pc, #220]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022ee:	d106      	bne.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022f0:	4b32      	ldr	r3, [pc, #200]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	4a31      	ldr	r2, [pc, #196]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022fa:	60d3      	str	r3, [r2, #12]
 80022fc:	e011      	b.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002302:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002306:	d10c      	bne.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3304      	adds	r3, #4
 800230c:	2101      	movs	r1, #1
 800230e:	4618      	mov	r0, r3
 8002310:	f000 fe36 	bl	8002f80 <RCCEx_PLLSAI1_Config>
 8002314:	4603      	mov	r3, r0
 8002316:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002318:	7cfb      	ldrb	r3, [r7, #19]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800231e:	7cfb      	ldrb	r3, [r7, #19]
 8002320:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d028      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800232e:	4b23      	ldr	r3, [pc, #140]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002334:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233c:	491f      	ldr	r1, [pc, #124]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233e:	4313      	orrs	r3, r2
 8002340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002348:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800234c:	d106      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800234e:	4b1b      	ldr	r3, [pc, #108]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	4a1a      	ldr	r2, [pc, #104]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002354:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002358:	60d3      	str	r3, [r2, #12]
 800235a:	e011      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002360:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002364:	d10c      	bne.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3304      	adds	r3, #4
 800236a:	2101      	movs	r1, #1
 800236c:	4618      	mov	r0, r3
 800236e:	f000 fe07 	bl	8002f80 <RCCEx_PLLSAI1_Config>
 8002372:	4603      	mov	r3, r0
 8002374:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002376:	7cfb      	ldrb	r3, [r7, #19]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800237c:	7cfb      	ldrb	r3, [r7, #19]
 800237e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d02b      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800238c:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002392:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800239a:	4908      	ldr	r1, [pc, #32]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239c:	4313      	orrs	r3, r2
 800239e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023aa:	d109      	bne.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023ac:	4b03      	ldr	r3, [pc, #12]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	4a02      	ldr	r2, [pc, #8]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023b6:	60d3      	str	r3, [r2, #12]
 80023b8:	e014      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80023ba:	bf00      	nop
 80023bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023c8:	d10c      	bne.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3304      	adds	r3, #4
 80023ce:	2101      	movs	r1, #1
 80023d0:	4618      	mov	r0, r3
 80023d2:	f000 fdd5 	bl	8002f80 <RCCEx_PLLSAI1_Config>
 80023d6:	4603      	mov	r3, r0
 80023d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023da:	7cfb      	ldrb	r3, [r7, #19]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80023e0:	7cfb      	ldrb	r3, [r7, #19]
 80023e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d02f      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023f0:	4b2b      	ldr	r3, [pc, #172]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023fe:	4928      	ldr	r1, [pc, #160]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002400:	4313      	orrs	r3, r2
 8002402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800240a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800240e:	d10d      	bne.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3304      	adds	r3, #4
 8002414:	2102      	movs	r1, #2
 8002416:	4618      	mov	r0, r3
 8002418:	f000 fdb2 	bl	8002f80 <RCCEx_PLLSAI1_Config>
 800241c:	4603      	mov	r3, r0
 800241e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002420:	7cfb      	ldrb	r3, [r7, #19]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d014      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002426:	7cfb      	ldrb	r3, [r7, #19]
 8002428:	74bb      	strb	r3, [r7, #18]
 800242a:	e011      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002434:	d10c      	bne.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3320      	adds	r3, #32
 800243a:	2102      	movs	r1, #2
 800243c:	4618      	mov	r0, r3
 800243e:	f000 fe93 	bl	8003168 <RCCEx_PLLSAI2_Config>
 8002442:	4603      	mov	r3, r0
 8002444:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002446:	7cfb      	ldrb	r3, [r7, #19]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800244c:	7cfb      	ldrb	r3, [r7, #19]
 800244e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00a      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800245c:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800245e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002462:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800246a:	490d      	ldr	r1, [pc, #52]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800246c:	4313      	orrs	r3, r2
 800246e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00b      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800247e:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002484:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800248e:	4904      	ldr	r1, [pc, #16]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002490:	4313      	orrs	r3, r2
 8002492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002496:	7cbb      	ldrb	r3, [r7, #18]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40021000 	.word	0x40021000

080024a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b088      	sub	sp, #32
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024b6:	d13e      	bne.n	8002536 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80024b8:	4bb2      	ldr	r3, [pc, #712]	; (8002784 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80024ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024c2:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024ca:	d028      	beq.n	800251e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024d2:	f200 8542 	bhi.w	8002f5a <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024dc:	d005      	beq.n	80024ea <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024e4:	d00e      	beq.n	8002504 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80024e6:	f000 bd38 	b.w	8002f5a <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80024ea:	4ba6      	ldr	r3, [pc, #664]	; (8002784 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80024ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	f040 8532 	bne.w	8002f5e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 80024fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024fe:	61fb      	str	r3, [r7, #28]
      break;
 8002500:	f000 bd2d 	b.w	8002f5e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002504:	4b9f      	ldr	r3, [pc, #636]	; (8002784 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002506:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b02      	cmp	r3, #2
 8002510:	f040 8527 	bne.w	8002f62 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8002514:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002518:	61fb      	str	r3, [r7, #28]
      break;
 800251a:	f000 bd22 	b.w	8002f62 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800251e:	4b99      	ldr	r3, [pc, #612]	; (8002784 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800252a:	f040 851c 	bne.w	8002f66 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 800252e:	4b96      	ldr	r3, [pc, #600]	; (8002788 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8002530:	61fb      	str	r3, [r7, #28]
      break;
 8002532:	f000 bd18 	b.w	8002f66 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002536:	4b93      	ldr	r3, [pc, #588]	; (8002784 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	2b03      	cmp	r3, #3
 8002544:	d036      	beq.n	80025b4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	2b03      	cmp	r3, #3
 800254a:	d840      	bhi.n	80025ce <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d003      	beq.n	800255a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2b02      	cmp	r3, #2
 8002556:	d020      	beq.n	800259a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8002558:	e039      	b.n	80025ce <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800255a:	4b8a      	ldr	r3, [pc, #552]	; (8002784 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b02      	cmp	r3, #2
 8002564:	d116      	bne.n	8002594 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002566:	4b87      	ldr	r3, [pc, #540]	; (8002784 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	2b00      	cmp	r3, #0
 8002570:	d005      	beq.n	800257e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8002572:	4b84      	ldr	r3, [pc, #528]	; (8002784 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	091b      	lsrs	r3, r3, #4
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	e005      	b.n	800258a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800257e:	4b81      	ldr	r3, [pc, #516]	; (8002784 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002580:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002584:	0a1b      	lsrs	r3, r3, #8
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	4a80      	ldr	r2, [pc, #512]	; (800278c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800258c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002590:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002592:	e01f      	b.n	80025d4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	61bb      	str	r3, [r7, #24]
      break;
 8002598:	e01c      	b.n	80025d4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800259a:	4b7a      	ldr	r3, [pc, #488]	; (8002784 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025a6:	d102      	bne.n	80025ae <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80025a8:	4b79      	ldr	r3, [pc, #484]	; (8002790 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80025aa:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80025ac:	e012      	b.n	80025d4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61bb      	str	r3, [r7, #24]
      break;
 80025b2:	e00f      	b.n	80025d4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80025b4:	4b73      	ldr	r3, [pc, #460]	; (8002784 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025c0:	d102      	bne.n	80025c8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80025c2:	4b74      	ldr	r3, [pc, #464]	; (8002794 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80025c4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80025c6:	e005      	b.n	80025d4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	61bb      	str	r3, [r7, #24]
      break;
 80025cc:	e002      	b.n	80025d4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61bb      	str	r3, [r7, #24]
      break;
 80025d2:	bf00      	nop
    }

    switch(PeriphClk)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025da:	f000 80dd 	beq.w	8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025e4:	f200 84c1 	bhi.w	8002f6a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025ee:	f000 80d3 	beq.w	8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025f8:	f200 84b7 	bhi.w	8002f6a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002602:	f000 835f 	beq.w	8002cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800260c:	f200 84ad 	bhi.w	8002f6a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002616:	f000 847e 	beq.w	8002f16 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002620:	f200 84a3 	bhi.w	8002f6a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800262a:	f000 82cd 	beq.w	8002bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002634:	f200 8499 	bhi.w	8002f6a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800263e:	f000 80ab 	beq.w	8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002648:	f200 848f 	bhi.w	8002f6a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002652:	f000 8090 	beq.w	8002776 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800265c:	f200 8485 	bhi.w	8002f6a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002666:	d07f      	beq.n	8002768 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800266e:	f200 847c 	bhi.w	8002f6a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002678:	f000 8403 	beq.w	8002e82 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002682:	f200 8472 	bhi.w	8002f6a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800268c:	f000 83af 	beq.w	8002dee <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002696:	f200 8468 	bhi.w	8002f6a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026a0:	f000 8379 	beq.w	8002d96 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026aa:	f200 845e 	bhi.w	8002f6a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b80      	cmp	r3, #128	; 0x80
 80026b2:	f000 8344 	beq.w	8002d3e <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b80      	cmp	r3, #128	; 0x80
 80026ba:	f200 8456 	bhi.w	8002f6a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b20      	cmp	r3, #32
 80026c2:	d84b      	bhi.n	800275c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 844f 	beq.w	8002f6a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	2b1f      	cmp	r3, #31
 80026d2:	f200 844a 	bhi.w	8002f6a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80026d6:	a201      	add	r2, pc, #4	; (adr r2, 80026dc <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 80026d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026dc:	080028c5 	.word	0x080028c5
 80026e0:	08002933 	.word	0x08002933
 80026e4:	08002f6b 	.word	0x08002f6b
 80026e8:	080029c7 	.word	0x080029c7
 80026ec:	08002f6b 	.word	0x08002f6b
 80026f0:	08002f6b 	.word	0x08002f6b
 80026f4:	08002f6b 	.word	0x08002f6b
 80026f8:	08002a4d 	.word	0x08002a4d
 80026fc:	08002f6b 	.word	0x08002f6b
 8002700:	08002f6b 	.word	0x08002f6b
 8002704:	08002f6b 	.word	0x08002f6b
 8002708:	08002f6b 	.word	0x08002f6b
 800270c:	08002f6b 	.word	0x08002f6b
 8002710:	08002f6b 	.word	0x08002f6b
 8002714:	08002f6b 	.word	0x08002f6b
 8002718:	08002ac5 	.word	0x08002ac5
 800271c:	08002f6b 	.word	0x08002f6b
 8002720:	08002f6b 	.word	0x08002f6b
 8002724:	08002f6b 	.word	0x08002f6b
 8002728:	08002f6b 	.word	0x08002f6b
 800272c:	08002f6b 	.word	0x08002f6b
 8002730:	08002f6b 	.word	0x08002f6b
 8002734:	08002f6b 	.word	0x08002f6b
 8002738:	08002f6b 	.word	0x08002f6b
 800273c:	08002f6b 	.word	0x08002f6b
 8002740:	08002f6b 	.word	0x08002f6b
 8002744:	08002f6b 	.word	0x08002f6b
 8002748:	08002f6b 	.word	0x08002f6b
 800274c:	08002f6b 	.word	0x08002f6b
 8002750:	08002f6b 	.word	0x08002f6b
 8002754:	08002f6b 	.word	0x08002f6b
 8002758:	08002b47 	.word	0x08002b47
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b40      	cmp	r3, #64	; 0x40
 8002760:	f000 82c1 	beq.w	8002ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8002764:	f000 bc01 	b.w	8002f6a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8002768:	69b9      	ldr	r1, [r7, #24]
 800276a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800276e:	f000 fdd9 	bl	8003324 <RCCEx_GetSAIxPeriphCLKFreq>
 8002772:	61f8      	str	r0, [r7, #28]
      break;
 8002774:	e3fa      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8002776:	69b9      	ldr	r1, [r7, #24]
 8002778:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800277c:	f000 fdd2 	bl	8003324 <RCCEx_GetSAIxPeriphCLKFreq>
 8002780:	61f8      	str	r0, [r7, #28]
      break;
 8002782:	e3f3      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8002784:	40021000 	.word	0x40021000
 8002788:	0003d090 	.word	0x0003d090
 800278c:	08003e1c 	.word	0x08003e1c
 8002790:	00f42400 	.word	0x00f42400
 8002794:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8002798:	4ba9      	ldr	r3, [pc, #676]	; (8002a40 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80027a2:	613b      	str	r3, [r7, #16]
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80027aa:	d00c      	beq.n	80027c6 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80027b2:	d87f      	bhi.n	80028b4 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027ba:	d04e      	beq.n	800285a <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027c2:	d01d      	beq.n	8002800 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 80027c4:	e076      	b.n	80028b4 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80027c6:	4b9e      	ldr	r3, [pc, #632]	; (8002a40 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d172      	bne.n	80028b8 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80027d2:	4b9b      	ldr	r3, [pc, #620]	; (8002a40 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d005      	beq.n	80027ea <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 80027de:	4b98      	ldr	r3, [pc, #608]	; (8002a40 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	091b      	lsrs	r3, r3, #4
 80027e4:	f003 030f 	and.w	r3, r3, #15
 80027e8:	e005      	b.n	80027f6 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 80027ea:	4b95      	ldr	r3, [pc, #596]	; (8002a40 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80027ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027f0:	0a1b      	lsrs	r3, r3, #8
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	4a93      	ldr	r2, [pc, #588]	; (8002a44 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80027f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027fc:	61fb      	str	r3, [r7, #28]
          break;
 80027fe:	e05b      	b.n	80028b8 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8002800:	4b8f      	ldr	r3, [pc, #572]	; (8002a40 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002808:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800280c:	d156      	bne.n	80028bc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800280e:	4b8c      	ldr	r3, [pc, #560]	; (8002a40 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002816:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800281a:	d14f      	bne.n	80028bc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800281c:	4b88      	ldr	r3, [pc, #544]	; (8002a40 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	0a1b      	lsrs	r3, r3, #8
 8002822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002826:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	fb03 f202 	mul.w	r2, r3, r2
 8002830:	4b83      	ldr	r3, [pc, #524]	; (8002a40 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	091b      	lsrs	r3, r3, #4
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	3301      	adds	r3, #1
 800283c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002840:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8002842:	4b7f      	ldr	r3, [pc, #508]	; (8002a40 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	0d5b      	lsrs	r3, r3, #21
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	3301      	adds	r3, #1
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	fbb2 f3f3 	udiv	r3, r2, r3
 8002856:	61fb      	str	r3, [r7, #28]
          break;
 8002858:	e030      	b.n	80028bc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800285a:	4b79      	ldr	r3, [pc, #484]	; (8002a40 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002862:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002866:	d12b      	bne.n	80028c0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8002868:	4b75      	ldr	r3, [pc, #468]	; (8002a40 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002870:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002874:	d124      	bne.n	80028c0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002876:	4b72      	ldr	r3, [pc, #456]	; (8002a40 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	0a1b      	lsrs	r3, r3, #8
 800287c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002880:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	fb03 f202 	mul.w	r2, r3, r2
 800288a:	4b6d      	ldr	r3, [pc, #436]	; (8002a40 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	091b      	lsrs	r3, r3, #4
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	3301      	adds	r3, #1
 8002896:	fbb2 f3f3 	udiv	r3, r2, r3
 800289a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800289c:	4b68      	ldr	r3, [pc, #416]	; (8002a40 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	0d5b      	lsrs	r3, r3, #21
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	3301      	adds	r3, #1
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b0:	61fb      	str	r3, [r7, #28]
          break;
 80028b2:	e005      	b.n	80028c0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 80028b4:	bf00      	nop
 80028b6:	e359      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80028b8:	bf00      	nop
 80028ba:	e357      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80028bc:	bf00      	nop
 80028be:	e355      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80028c0:	bf00      	nop
        break;
 80028c2:	e353      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80028c4:	4b5e      	ldr	r3, [pc, #376]	; (8002a40 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80028c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	613b      	str	r3, [r7, #16]
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	d827      	bhi.n	8002926 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 80028d6:	a201      	add	r2, pc, #4	; (adr r2, 80028dc <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80028d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028dc:	080028ed 	.word	0x080028ed
 80028e0:	080028f5 	.word	0x080028f5
 80028e4:	080028fd 	.word	0x080028fd
 80028e8:	08002911 	.word	0x08002911
          frequency = HAL_RCC_GetPCLK2Freq();
 80028ec:	f7ff fa7a 	bl	8001de4 <HAL_RCC_GetPCLK2Freq>
 80028f0:	61f8      	str	r0, [r7, #28]
          break;
 80028f2:	e01d      	b.n	8002930 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 80028f4:	f7ff f9c8 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
 80028f8:	61f8      	str	r0, [r7, #28]
          break;
 80028fa:	e019      	b.n	8002930 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80028fc:	4b50      	ldr	r3, [pc, #320]	; (8002a40 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002908:	d10f      	bne.n	800292a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 800290a:	4b4f      	ldr	r3, [pc, #316]	; (8002a48 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800290c:	61fb      	str	r3, [r7, #28]
          break;
 800290e:	e00c      	b.n	800292a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002910:	4b4b      	ldr	r3, [pc, #300]	; (8002a40 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b02      	cmp	r3, #2
 800291c:	d107      	bne.n	800292e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 800291e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002922:	61fb      	str	r3, [r7, #28]
          break;
 8002924:	e003      	b.n	800292e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8002926:	bf00      	nop
 8002928:	e320      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800292a:	bf00      	nop
 800292c:	e31e      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800292e:	bf00      	nop
        break;
 8002930:	e31c      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8002932:	4b43      	ldr	r3, [pc, #268]	; (8002a40 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002938:	f003 030c 	and.w	r3, r3, #12
 800293c:	613b      	str	r3, [r7, #16]
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	2b0c      	cmp	r3, #12
 8002942:	d83a      	bhi.n	80029ba <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8002944:	a201      	add	r2, pc, #4	; (adr r2, 800294c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8002946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294a:	bf00      	nop
 800294c:	08002981 	.word	0x08002981
 8002950:	080029bb 	.word	0x080029bb
 8002954:	080029bb 	.word	0x080029bb
 8002958:	080029bb 	.word	0x080029bb
 800295c:	08002989 	.word	0x08002989
 8002960:	080029bb 	.word	0x080029bb
 8002964:	080029bb 	.word	0x080029bb
 8002968:	080029bb 	.word	0x080029bb
 800296c:	08002991 	.word	0x08002991
 8002970:	080029bb 	.word	0x080029bb
 8002974:	080029bb 	.word	0x080029bb
 8002978:	080029bb 	.word	0x080029bb
 800297c:	080029a5 	.word	0x080029a5
          frequency = HAL_RCC_GetPCLK1Freq();
 8002980:	f7ff fa1a 	bl	8001db8 <HAL_RCC_GetPCLK1Freq>
 8002984:	61f8      	str	r0, [r7, #28]
          break;
 8002986:	e01d      	b.n	80029c4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8002988:	f7ff f97e 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
 800298c:	61f8      	str	r0, [r7, #28]
          break;
 800298e:	e019      	b.n	80029c4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002990:	4b2b      	ldr	r3, [pc, #172]	; (8002a40 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800299c:	d10f      	bne.n	80029be <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 800299e:	4b2a      	ldr	r3, [pc, #168]	; (8002a48 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80029a0:	61fb      	str	r3, [r7, #28]
          break;
 80029a2:	e00c      	b.n	80029be <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80029a4:	4b26      	ldr	r3, [pc, #152]	; (8002a40 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80029a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d107      	bne.n	80029c2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 80029b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029b6:	61fb      	str	r3, [r7, #28]
          break;
 80029b8:	e003      	b.n	80029c2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 80029ba:	bf00      	nop
 80029bc:	e2d6      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80029be:	bf00      	nop
 80029c0:	e2d4      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80029c2:	bf00      	nop
        break;
 80029c4:	e2d2      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80029c6:	4b1e      	ldr	r3, [pc, #120]	; (8002a40 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80029c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80029d0:	613b      	str	r3, [r7, #16]
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	2b30      	cmp	r3, #48	; 0x30
 80029d6:	d021      	beq.n	8002a1c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	2b30      	cmp	r3, #48	; 0x30
 80029dc:	d829      	bhi.n	8002a32 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	2b20      	cmp	r3, #32
 80029e2:	d011      	beq.n	8002a08 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	2b20      	cmp	r3, #32
 80029e8:	d823      	bhi.n	8002a32 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	2b10      	cmp	r3, #16
 80029f4:	d004      	beq.n	8002a00 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 80029f6:	e01c      	b.n	8002a32 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80029f8:	f7ff f9de 	bl	8001db8 <HAL_RCC_GetPCLK1Freq>
 80029fc:	61f8      	str	r0, [r7, #28]
          break;
 80029fe:	e01d      	b.n	8002a3c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8002a00:	f7ff f942 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
 8002a04:	61f8      	str	r0, [r7, #28]
          break;
 8002a06:	e019      	b.n	8002a3c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002a08:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a14:	d10f      	bne.n	8002a36 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8002a16:	4b0c      	ldr	r3, [pc, #48]	; (8002a48 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8002a18:	61fb      	str	r3, [r7, #28]
          break;
 8002a1a:	e00c      	b.n	8002a36 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002a1c:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d107      	bne.n	8002a3a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8002a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a2e:	61fb      	str	r3, [r7, #28]
          break;
 8002a30:	e003      	b.n	8002a3a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8002a32:	bf00      	nop
 8002a34:	e29a      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002a36:	bf00      	nop
 8002a38:	e298      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002a3a:	bf00      	nop
        break;
 8002a3c:	e296      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8002a3e:	bf00      	nop
 8002a40:	40021000 	.word	0x40021000
 8002a44:	08003e1c 	.word	0x08003e1c
 8002a48:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8002a4c:	4b9b      	ldr	r3, [pc, #620]	; (8002cbc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a52:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002a56:	613b      	str	r3, [r7, #16]
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	2bc0      	cmp	r3, #192	; 0xc0
 8002a5c:	d021      	beq.n	8002aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	2bc0      	cmp	r3, #192	; 0xc0
 8002a62:	d829      	bhi.n	8002ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	2b80      	cmp	r3, #128	; 0x80
 8002a68:	d011      	beq.n	8002a8e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	2b80      	cmp	r3, #128	; 0x80
 8002a6e:	d823      	bhi.n	8002ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	2b40      	cmp	r3, #64	; 0x40
 8002a7a:	d004      	beq.n	8002a86 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8002a7c:	e01c      	b.n	8002ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002a7e:	f7ff f99b 	bl	8001db8 <HAL_RCC_GetPCLK1Freq>
 8002a82:	61f8      	str	r0, [r7, #28]
          break;
 8002a84:	e01d      	b.n	8002ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8002a86:	f7ff f8ff 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
 8002a8a:	61f8      	str	r0, [r7, #28]
          break;
 8002a8c:	e019      	b.n	8002ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002a8e:	4b8b      	ldr	r3, [pc, #556]	; (8002cbc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a9a:	d10f      	bne.n	8002abc <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8002a9c:	4b88      	ldr	r3, [pc, #544]	; (8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8002a9e:	61fb      	str	r3, [r7, #28]
          break;
 8002aa0:	e00c      	b.n	8002abc <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002aa2:	4b86      	ldr	r3, [pc, #536]	; (8002cbc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d107      	bne.n	8002ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8002ab0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ab4:	61fb      	str	r3, [r7, #28]
          break;
 8002ab6:	e003      	b.n	8002ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8002ab8:	bf00      	nop
 8002aba:	e257      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002abc:	bf00      	nop
 8002abe:	e255      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002ac0:	bf00      	nop
        break;
 8002ac2:	e253      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8002ac4:	4b7d      	ldr	r3, [pc, #500]	; (8002cbc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ace:	613b      	str	r3, [r7, #16]
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ad6:	d025      	beq.n	8002b24 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ade:	d82c      	bhi.n	8002b3a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ae6:	d013      	beq.n	8002b10 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aee:	d824      	bhi.n	8002b3a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d004      	beq.n	8002b00 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002afc:	d004      	beq.n	8002b08 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8002afe:	e01c      	b.n	8002b3a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002b00:	f7ff f95a 	bl	8001db8 <HAL_RCC_GetPCLK1Freq>
 8002b04:	61f8      	str	r0, [r7, #28]
          break;
 8002b06:	e01d      	b.n	8002b44 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8002b08:	f7ff f8be 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
 8002b0c:	61f8      	str	r0, [r7, #28]
          break;
 8002b0e:	e019      	b.n	8002b44 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002b10:	4b6a      	ldr	r3, [pc, #424]	; (8002cbc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b1c:	d10f      	bne.n	8002b3e <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8002b1e:	4b68      	ldr	r3, [pc, #416]	; (8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8002b20:	61fb      	str	r3, [r7, #28]
          break;
 8002b22:	e00c      	b.n	8002b3e <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002b24:	4b65      	ldr	r3, [pc, #404]	; (8002cbc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d107      	bne.n	8002b42 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8002b32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b36:	61fb      	str	r3, [r7, #28]
          break;
 8002b38:	e003      	b.n	8002b42 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8002b3a:	bf00      	nop
 8002b3c:	e216      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002b3e:	bf00      	nop
 8002b40:	e214      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002b42:	bf00      	nop
        break;
 8002b44:	e212      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8002b46:	4b5d      	ldr	r3, [pc, #372]	; (8002cbc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b50:	613b      	str	r3, [r7, #16]
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b58:	d025      	beq.n	8002ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b60:	d82c      	bhi.n	8002bbc <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b68:	d013      	beq.n	8002b92 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b70:	d824      	bhi.n	8002bbc <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d004      	beq.n	8002b82 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b7e:	d004      	beq.n	8002b8a <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8002b80:	e01c      	b.n	8002bbc <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002b82:	f7ff f919 	bl	8001db8 <HAL_RCC_GetPCLK1Freq>
 8002b86:	61f8      	str	r0, [r7, #28]
          break;
 8002b88:	e01d      	b.n	8002bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8002b8a:	f7ff f87d 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
 8002b8e:	61f8      	str	r0, [r7, #28]
          break;
 8002b90:	e019      	b.n	8002bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002b92:	4b4a      	ldr	r3, [pc, #296]	; (8002cbc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b9e:	d10f      	bne.n	8002bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8002ba0:	4b47      	ldr	r3, [pc, #284]	; (8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8002ba2:	61fb      	str	r3, [r7, #28]
          break;
 8002ba4:	e00c      	b.n	8002bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002ba6:	4b45      	ldr	r3, [pc, #276]	; (8002cbc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d107      	bne.n	8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8002bb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bb8:	61fb      	str	r3, [r7, #28]
          break;
 8002bba:	e003      	b.n	8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8002bbc:	bf00      	nop
 8002bbe:	e1d5      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002bc0:	bf00      	nop
 8002bc2:	e1d3      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002bc4:	bf00      	nop
        break;
 8002bc6:	e1d1      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8002bc8:	4b3c      	ldr	r3, [pc, #240]	; (8002cbc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bd2:	613b      	str	r3, [r7, #16]
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002bda:	d00c      	beq.n	8002bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002be2:	d864      	bhi.n	8002cae <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bea:	d008      	beq.n	8002bfe <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bf2:	d030      	beq.n	8002c56 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8002bf4:	e05b      	b.n	8002cae <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8002bf6:	f7ff f847 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
 8002bfa:	61f8      	str	r0, [r7, #28]
          break;
 8002bfc:	e05c      	b.n	8002cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8002bfe:	4b2f      	ldr	r3, [pc, #188]	; (8002cbc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c0a:	d152      	bne.n	8002cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8002c0c:	4b2b      	ldr	r3, [pc, #172]	; (8002cbc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d04c      	beq.n	8002cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002c18:	4b28      	ldr	r3, [pc, #160]	; (8002cbc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	0a1b      	lsrs	r3, r3, #8
 8002c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c22:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	fb03 f202 	mul.w	r2, r3, r2
 8002c2c:	4b23      	ldr	r3, [pc, #140]	; (8002cbc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	091b      	lsrs	r3, r3, #4
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	3301      	adds	r3, #1
 8002c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8002c3e:	4b1f      	ldr	r3, [pc, #124]	; (8002cbc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	0e5b      	lsrs	r3, r3, #25
 8002c44:	f003 0303 	and.w	r3, r3, #3
 8002c48:	3301      	adds	r3, #1
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c52:	61fb      	str	r3, [r7, #28]
          break;
 8002c54:	e02d      	b.n	8002cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8002c56:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c62:	d128      	bne.n	8002cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8002c64:	4b15      	ldr	r3, [pc, #84]	; (8002cbc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d022      	beq.n	8002cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8002c70:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	0a1b      	lsrs	r3, r3, #8
 8002c76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c7a:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	fb03 f202 	mul.w	r2, r3, r2
 8002c84:	4b0d      	ldr	r3, [pc, #52]	; (8002cbc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	091b      	lsrs	r3, r3, #4
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	3301      	adds	r3, #1
 8002c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c94:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8002c96:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	0e5b      	lsrs	r3, r3, #25
 8002c9c:	f003 0303 	and.w	r3, r3, #3
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002caa:	61fb      	str	r3, [r7, #28]
          break;
 8002cac:	e003      	b.n	8002cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8002cae:	bf00      	nop
 8002cb0:	e15c      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002cb2:	bf00      	nop
 8002cb4:	e15a      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002cb6:	bf00      	nop
        break;
 8002cb8:	e158      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8002cba:	bf00      	nop
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8002cc4:	4b9d      	ldr	r3, [pc, #628]	; (8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8002cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002cce:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d103      	bne.n	8002cde <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8002cd6:	f7ff f885 	bl	8001de4 <HAL_RCC_GetPCLK2Freq>
 8002cda:	61f8      	str	r0, [r7, #28]
        break;
 8002cdc:	e146      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8002cde:	f7fe ffd3 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
 8002ce2:	61f8      	str	r0, [r7, #28]
        break;
 8002ce4:	e142      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8002ce6:	4b95      	ldr	r3, [pc, #596]	; (8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8002ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cec:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002cf0:	613b      	str	r3, [r7, #16]
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cf8:	d013      	beq.n	8002d22 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d00:	d819      	bhi.n	8002d36 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d004      	beq.n	8002d12 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d0e:	d004      	beq.n	8002d1a <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8002d10:	e011      	b.n	8002d36 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002d12:	f7ff f851 	bl	8001db8 <HAL_RCC_GetPCLK1Freq>
 8002d16:	61f8      	str	r0, [r7, #28]
          break;
 8002d18:	e010      	b.n	8002d3c <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8002d1a:	f7fe ffb5 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
 8002d1e:	61f8      	str	r0, [r7, #28]
          break;
 8002d20:	e00c      	b.n	8002d3c <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002d22:	4b86      	ldr	r3, [pc, #536]	; (8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d2e:	d104      	bne.n	8002d3a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8002d30:	4b83      	ldr	r3, [pc, #524]	; (8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8002d32:	61fb      	str	r3, [r7, #28]
          break;
 8002d34:	e001      	b.n	8002d3a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8002d36:	bf00      	nop
 8002d38:	e118      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002d3a:	bf00      	nop
        break;
 8002d3c:	e116      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8002d3e:	4b7f      	ldr	r3, [pc, #508]	; (8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8002d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d48:	613b      	str	r3, [r7, #16]
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d50:	d013      	beq.n	8002d7a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d58:	d819      	bhi.n	8002d8e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d004      	beq.n	8002d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d66:	d004      	beq.n	8002d72 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8002d68:	e011      	b.n	8002d8e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002d6a:	f7ff f825 	bl	8001db8 <HAL_RCC_GetPCLK1Freq>
 8002d6e:	61f8      	str	r0, [r7, #28]
          break;
 8002d70:	e010      	b.n	8002d94 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8002d72:	f7fe ff89 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
 8002d76:	61f8      	str	r0, [r7, #28]
          break;
 8002d78:	e00c      	b.n	8002d94 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002d7a:	4b70      	ldr	r3, [pc, #448]	; (8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d86:	d104      	bne.n	8002d92 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8002d88:	4b6d      	ldr	r3, [pc, #436]	; (8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8002d8a:	61fb      	str	r3, [r7, #28]
          break;
 8002d8c:	e001      	b.n	8002d92 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8002d8e:	bf00      	nop
 8002d90:	e0ec      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002d92:	bf00      	nop
        break;
 8002d94:	e0ea      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8002d96:	4b69      	ldr	r3, [pc, #420]	; (8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8002d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002da8:	d013      	beq.n	8002dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002db0:	d819      	bhi.n	8002de6 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d004      	beq.n	8002dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dbe:	d004      	beq.n	8002dca <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8002dc0:	e011      	b.n	8002de6 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002dc2:	f7fe fff9 	bl	8001db8 <HAL_RCC_GetPCLK1Freq>
 8002dc6:	61f8      	str	r0, [r7, #28]
          break;
 8002dc8:	e010      	b.n	8002dec <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8002dca:	f7fe ff5d 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
 8002dce:	61f8      	str	r0, [r7, #28]
          break;
 8002dd0:	e00c      	b.n	8002dec <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002dd2:	4b5a      	ldr	r3, [pc, #360]	; (8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dde:	d104      	bne.n	8002dea <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8002de0:	4b57      	ldr	r3, [pc, #348]	; (8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8002de2:	61fb      	str	r3, [r7, #28]
          break;
 8002de4:	e001      	b.n	8002dea <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8002de6:	bf00      	nop
 8002de8:	e0c0      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002dea:	bf00      	nop
        break;
 8002dec:	e0be      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8002dee:	4b53      	ldr	r3, [pc, #332]	; (8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8002df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e00:	d02c      	beq.n	8002e5c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e08:	d833      	bhi.n	8002e72 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e10:	d01a      	beq.n	8002e48 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e18:	d82b      	bhi.n	8002e72 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d004      	beq.n	8002e2a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e26:	d004      	beq.n	8002e32 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8002e28:	e023      	b.n	8002e72 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002e2a:	f7fe ffc5 	bl	8001db8 <HAL_RCC_GetPCLK1Freq>
 8002e2e:	61f8      	str	r0, [r7, #28]
          break;
 8002e30:	e026      	b.n	8002e80 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002e32:	4b42      	ldr	r3, [pc, #264]	; (8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8002e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d11a      	bne.n	8002e76 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8002e40:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002e44:	61fb      	str	r3, [r7, #28]
          break;
 8002e46:	e016      	b.n	8002e76 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002e48:	4b3c      	ldr	r3, [pc, #240]	; (8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e54:	d111      	bne.n	8002e7a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8002e56:	4b3a      	ldr	r3, [pc, #232]	; (8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8002e58:	61fb      	str	r3, [r7, #28]
          break;
 8002e5a:	e00e      	b.n	8002e7a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002e5c:	4b37      	ldr	r3, [pc, #220]	; (8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8002e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d109      	bne.n	8002e7e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8002e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e6e:	61fb      	str	r3, [r7, #28]
          break;
 8002e70:	e005      	b.n	8002e7e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8002e72:	bf00      	nop
 8002e74:	e07a      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002e76:	bf00      	nop
 8002e78:	e078      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002e7a:	bf00      	nop
 8002e7c:	e076      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002e7e:	bf00      	nop
        break;
 8002e80:	e074      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8002e82:	4b2e      	ldr	r3, [pc, #184]	; (8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8002e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e88:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002e8c:	613b      	str	r3, [r7, #16]
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e94:	d02c      	beq.n	8002ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e9c:	d833      	bhi.n	8002f06 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ea4:	d01a      	beq.n	8002edc <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002eac:	d82b      	bhi.n	8002f06 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d004      	beq.n	8002ebe <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002eba:	d004      	beq.n	8002ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8002ebc:	e023      	b.n	8002f06 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002ebe:	f7fe ff7b 	bl	8001db8 <HAL_RCC_GetPCLK1Freq>
 8002ec2:	61f8      	str	r0, [r7, #28]
          break;
 8002ec4:	e026      	b.n	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002ec6:	4b1d      	ldr	r3, [pc, #116]	; (8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8002ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d11a      	bne.n	8002f0a <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8002ed4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002ed8:	61fb      	str	r3, [r7, #28]
          break;
 8002eda:	e016      	b.n	8002f0a <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002edc:	4b17      	ldr	r3, [pc, #92]	; (8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ee8:	d111      	bne.n	8002f0e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8002eea:	4b15      	ldr	r3, [pc, #84]	; (8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8002eec:	61fb      	str	r3, [r7, #28]
          break;
 8002eee:	e00e      	b.n	8002f0e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002ef0:	4b12      	ldr	r3, [pc, #72]	; (8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8002ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d109      	bne.n	8002f12 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8002efe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f02:	61fb      	str	r3, [r7, #28]
          break;
 8002f04:	e005      	b.n	8002f12 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8002f06:	bf00      	nop
 8002f08:	e030      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002f0a:	bf00      	nop
 8002f0c:	e02e      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002f0e:	bf00      	nop
 8002f10:	e02c      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002f12:	bf00      	nop
        break;
 8002f14:	e02a      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8002f16:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8002f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002f20:	613b      	str	r3, [r7, #16]
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d004      	beq.n	8002f32 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f2e:	d009      	beq.n	8002f44 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8002f30:	e012      	b.n	8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002f32:	f7fe ff41 	bl	8001db8 <HAL_RCC_GetPCLK1Freq>
 8002f36:	61f8      	str	r0, [r7, #28]
          break;
 8002f38:	e00e      	b.n	8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8002f3a:	bf00      	nop
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002f44:	4b0c      	ldr	r3, [pc, #48]	; (8002f78 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f50:	d101      	bne.n	8002f56 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8002f52:	4b0a      	ldr	r3, [pc, #40]	; (8002f7c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8002f54:	61fb      	str	r3, [r7, #28]
          break;
 8002f56:	bf00      	nop
        break;
 8002f58:	e008      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8002f5a:	bf00      	nop
 8002f5c:	e006      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8002f5e:	bf00      	nop
 8002f60:	e004      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8002f62:	bf00      	nop
 8002f64:	e002      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8002f66:	bf00      	nop
 8002f68:	e000      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8002f6a:	bf00      	nop
    }
  }

  return(frequency);
 8002f6c:	69fb      	ldr	r3, [r7, #28]
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3720      	adds	r7, #32
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	00f42400 	.word	0x00f42400

08002f80 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f8e:	4b75      	ldr	r3, [pc, #468]	; (8003164 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d018      	beq.n	8002fcc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f9a:	4b72      	ldr	r3, [pc, #456]	; (8003164 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f003 0203 	and.w	r2, r3, #3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d10d      	bne.n	8002fc6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
       ||
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d009      	beq.n	8002fc6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002fb2:	4b6c      	ldr	r3, [pc, #432]	; (8003164 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	091b      	lsrs	r3, r3, #4
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	1c5a      	adds	r2, r3, #1
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
       ||
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d047      	beq.n	8003056 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	73fb      	strb	r3, [r7, #15]
 8002fca:	e044      	b.n	8003056 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b03      	cmp	r3, #3
 8002fd2:	d018      	beq.n	8003006 <RCCEx_PLLSAI1_Config+0x86>
 8002fd4:	2b03      	cmp	r3, #3
 8002fd6:	d825      	bhi.n	8003024 <RCCEx_PLLSAI1_Config+0xa4>
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d002      	beq.n	8002fe2 <RCCEx_PLLSAI1_Config+0x62>
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d009      	beq.n	8002ff4 <RCCEx_PLLSAI1_Config+0x74>
 8002fe0:	e020      	b.n	8003024 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fe2:	4b60      	ldr	r3, [pc, #384]	; (8003164 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d11d      	bne.n	800302a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ff2:	e01a      	b.n	800302a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ff4:	4b5b      	ldr	r3, [pc, #364]	; (8003164 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d116      	bne.n	800302e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003004:	e013      	b.n	800302e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003006:	4b57      	ldr	r3, [pc, #348]	; (8003164 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10f      	bne.n	8003032 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003012:	4b54      	ldr	r3, [pc, #336]	; (8003164 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d109      	bne.n	8003032 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003022:	e006      	b.n	8003032 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	73fb      	strb	r3, [r7, #15]
      break;
 8003028:	e004      	b.n	8003034 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800302a:	bf00      	nop
 800302c:	e002      	b.n	8003034 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800302e:	bf00      	nop
 8003030:	e000      	b.n	8003034 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003032:	bf00      	nop
    }

    if(status == HAL_OK)
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10d      	bne.n	8003056 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800303a:	4b4a      	ldr	r3, [pc, #296]	; (8003164 <RCCEx_PLLSAI1_Config+0x1e4>)
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6819      	ldr	r1, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	3b01      	subs	r3, #1
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	430b      	orrs	r3, r1
 8003050:	4944      	ldr	r1, [pc, #272]	; (8003164 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003052:	4313      	orrs	r3, r2
 8003054:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003056:	7bfb      	ldrb	r3, [r7, #15]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d17d      	bne.n	8003158 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800305c:	4b41      	ldr	r3, [pc, #260]	; (8003164 <RCCEx_PLLSAI1_Config+0x1e4>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a40      	ldr	r2, [pc, #256]	; (8003164 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003062:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003066:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003068:	f7fd fbdc 	bl	8000824 <HAL_GetTick>
 800306c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800306e:	e009      	b.n	8003084 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003070:	f7fd fbd8 	bl	8000824 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d902      	bls.n	8003084 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	73fb      	strb	r3, [r7, #15]
        break;
 8003082:	e005      	b.n	8003090 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003084:	4b37      	ldr	r3, [pc, #220]	; (8003164 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1ef      	bne.n	8003070 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d160      	bne.n	8003158 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d111      	bne.n	80030c0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800309c:	4b31      	ldr	r3, [pc, #196]	; (8003164 <RCCEx_PLLSAI1_Config+0x1e4>)
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80030a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6892      	ldr	r2, [r2, #8]
 80030ac:	0211      	lsls	r1, r2, #8
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	68d2      	ldr	r2, [r2, #12]
 80030b2:	0912      	lsrs	r2, r2, #4
 80030b4:	0452      	lsls	r2, r2, #17
 80030b6:	430a      	orrs	r2, r1
 80030b8:	492a      	ldr	r1, [pc, #168]	; (8003164 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	610b      	str	r3, [r1, #16]
 80030be:	e027      	b.n	8003110 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d112      	bne.n	80030ec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030c6:	4b27      	ldr	r3, [pc, #156]	; (8003164 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80030ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6892      	ldr	r2, [r2, #8]
 80030d6:	0211      	lsls	r1, r2, #8
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6912      	ldr	r2, [r2, #16]
 80030dc:	0852      	lsrs	r2, r2, #1
 80030de:	3a01      	subs	r2, #1
 80030e0:	0552      	lsls	r2, r2, #21
 80030e2:	430a      	orrs	r2, r1
 80030e4:	491f      	ldr	r1, [pc, #124]	; (8003164 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	610b      	str	r3, [r1, #16]
 80030ea:	e011      	b.n	8003110 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030ec:	4b1d      	ldr	r3, [pc, #116]	; (8003164 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6892      	ldr	r2, [r2, #8]
 80030fc:	0211      	lsls	r1, r2, #8
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6952      	ldr	r2, [r2, #20]
 8003102:	0852      	lsrs	r2, r2, #1
 8003104:	3a01      	subs	r2, #1
 8003106:	0652      	lsls	r2, r2, #25
 8003108:	430a      	orrs	r2, r1
 800310a:	4916      	ldr	r1, [pc, #88]	; (8003164 <RCCEx_PLLSAI1_Config+0x1e4>)
 800310c:	4313      	orrs	r3, r2
 800310e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003110:	4b14      	ldr	r3, [pc, #80]	; (8003164 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a13      	ldr	r2, [pc, #76]	; (8003164 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003116:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800311a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800311c:	f7fd fb82 	bl	8000824 <HAL_GetTick>
 8003120:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003122:	e009      	b.n	8003138 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003124:	f7fd fb7e 	bl	8000824 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d902      	bls.n	8003138 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	73fb      	strb	r3, [r7, #15]
          break;
 8003136:	e005      	b.n	8003144 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003138:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <RCCEx_PLLSAI1_Config+0x1e4>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0ef      	beq.n	8003124 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003144:	7bfb      	ldrb	r3, [r7, #15]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d106      	bne.n	8003158 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800314a:	4b06      	ldr	r3, [pc, #24]	; (8003164 <RCCEx_PLLSAI1_Config+0x1e4>)
 800314c:	691a      	ldr	r2, [r3, #16]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	4904      	ldr	r1, [pc, #16]	; (8003164 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003154:	4313      	orrs	r3, r2
 8003156:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003158:	7bfb      	ldrb	r3, [r7, #15]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	40021000 	.word	0x40021000

08003168 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003172:	2300      	movs	r3, #0
 8003174:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003176:	4b6a      	ldr	r3, [pc, #424]	; (8003320 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d018      	beq.n	80031b4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003182:	4b67      	ldr	r3, [pc, #412]	; (8003320 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f003 0203 	and.w	r2, r3, #3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	d10d      	bne.n	80031ae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
       ||
 8003196:	2b00      	cmp	r3, #0
 8003198:	d009      	beq.n	80031ae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800319a:	4b61      	ldr	r3, [pc, #388]	; (8003320 <RCCEx_PLLSAI2_Config+0x1b8>)
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	091b      	lsrs	r3, r3, #4
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
       ||
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d047      	beq.n	800323e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	73fb      	strb	r3, [r7, #15]
 80031b2:	e044      	b.n	800323e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b03      	cmp	r3, #3
 80031ba:	d018      	beq.n	80031ee <RCCEx_PLLSAI2_Config+0x86>
 80031bc:	2b03      	cmp	r3, #3
 80031be:	d825      	bhi.n	800320c <RCCEx_PLLSAI2_Config+0xa4>
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d002      	beq.n	80031ca <RCCEx_PLLSAI2_Config+0x62>
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d009      	beq.n	80031dc <RCCEx_PLLSAI2_Config+0x74>
 80031c8:	e020      	b.n	800320c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031ca:	4b55      	ldr	r3, [pc, #340]	; (8003320 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d11d      	bne.n	8003212 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031da:	e01a      	b.n	8003212 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031dc:	4b50      	ldr	r3, [pc, #320]	; (8003320 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d116      	bne.n	8003216 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031ec:	e013      	b.n	8003216 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031ee:	4b4c      	ldr	r3, [pc, #304]	; (8003320 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10f      	bne.n	800321a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031fa:	4b49      	ldr	r3, [pc, #292]	; (8003320 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d109      	bne.n	800321a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800320a:	e006      	b.n	800321a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	73fb      	strb	r3, [r7, #15]
      break;
 8003210:	e004      	b.n	800321c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003212:	bf00      	nop
 8003214:	e002      	b.n	800321c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003216:	bf00      	nop
 8003218:	e000      	b.n	800321c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800321a:	bf00      	nop
    }

    if(status == HAL_OK)
 800321c:	7bfb      	ldrb	r3, [r7, #15]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10d      	bne.n	800323e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003222:	4b3f      	ldr	r3, [pc, #252]	; (8003320 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6819      	ldr	r1, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	3b01      	subs	r3, #1
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	430b      	orrs	r3, r1
 8003238:	4939      	ldr	r1, [pc, #228]	; (8003320 <RCCEx_PLLSAI2_Config+0x1b8>)
 800323a:	4313      	orrs	r3, r2
 800323c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800323e:	7bfb      	ldrb	r3, [r7, #15]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d167      	bne.n	8003314 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003244:	4b36      	ldr	r3, [pc, #216]	; (8003320 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a35      	ldr	r2, [pc, #212]	; (8003320 <RCCEx_PLLSAI2_Config+0x1b8>)
 800324a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800324e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003250:	f7fd fae8 	bl	8000824 <HAL_GetTick>
 8003254:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003256:	e009      	b.n	800326c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003258:	f7fd fae4 	bl	8000824 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d902      	bls.n	800326c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	73fb      	strb	r3, [r7, #15]
        break;
 800326a:	e005      	b.n	8003278 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800326c:	4b2c      	ldr	r3, [pc, #176]	; (8003320 <RCCEx_PLLSAI2_Config+0x1b8>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1ef      	bne.n	8003258 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003278:	7bfb      	ldrb	r3, [r7, #15]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d14a      	bne.n	8003314 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d111      	bne.n	80032a8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003284:	4b26      	ldr	r3, [pc, #152]	; (8003320 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800328c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6892      	ldr	r2, [r2, #8]
 8003294:	0211      	lsls	r1, r2, #8
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	68d2      	ldr	r2, [r2, #12]
 800329a:	0912      	lsrs	r2, r2, #4
 800329c:	0452      	lsls	r2, r2, #17
 800329e:	430a      	orrs	r2, r1
 80032a0:	491f      	ldr	r1, [pc, #124]	; (8003320 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	614b      	str	r3, [r1, #20]
 80032a6:	e011      	b.n	80032cc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032a8:	4b1d      	ldr	r3, [pc, #116]	; (8003320 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80032b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6892      	ldr	r2, [r2, #8]
 80032b8:	0211      	lsls	r1, r2, #8
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6912      	ldr	r2, [r2, #16]
 80032be:	0852      	lsrs	r2, r2, #1
 80032c0:	3a01      	subs	r2, #1
 80032c2:	0652      	lsls	r2, r2, #25
 80032c4:	430a      	orrs	r2, r1
 80032c6:	4916      	ldr	r1, [pc, #88]	; (8003320 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80032cc:	4b14      	ldr	r3, [pc, #80]	; (8003320 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a13      	ldr	r2, [pc, #76]	; (8003320 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d8:	f7fd faa4 	bl	8000824 <HAL_GetTick>
 80032dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032de:	e009      	b.n	80032f4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032e0:	f7fd faa0 	bl	8000824 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d902      	bls.n	80032f4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	73fb      	strb	r3, [r7, #15]
          break;
 80032f2:	e005      	b.n	8003300 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032f4:	4b0a      	ldr	r3, [pc, #40]	; (8003320 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0ef      	beq.n	80032e0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003300:	7bfb      	ldrb	r3, [r7, #15]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d106      	bne.n	8003314 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003306:	4b06      	ldr	r3, [pc, #24]	; (8003320 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003308:	695a      	ldr	r2, [r3, #20]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	4904      	ldr	r1, [pc, #16]	; (8003320 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003310:	4313      	orrs	r3, r2
 8003312:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003314:	7bfb      	ldrb	r3, [r7, #15]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40021000 	.word	0x40021000

08003324 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8003324:	b480      	push	{r7}
 8003326:	b089      	sub	sp, #36	; 0x24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800332e:	2300      	movs	r3, #0
 8003330:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8003332:	2300      	movs	r3, #0
 8003334:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8003336:	2300      	movs	r3, #0
 8003338:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003340:	d10c      	bne.n	800335c <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8003342:	4b6e      	ldr	r3, [pc, #440]	; (80034fc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003348:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800334c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003354:	d112      	bne.n	800337c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8003356:	4b6a      	ldr	r3, [pc, #424]	; (8003500 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8003358:	61fb      	str	r3, [r7, #28]
 800335a:	e00f      	b.n	800337c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003362:	d10b      	bne.n	800337c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8003364:	4b65      	ldr	r3, [pc, #404]	; (80034fc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800336e:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003376:	d101      	bne.n	800337c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8003378:	4b61      	ldr	r3, [pc, #388]	; (8003500 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800337a:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	2b00      	cmp	r3, #0
 8003380:	f040 80b4 	bne.w	80034ec <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800338e:	d003      	beq.n	8003398 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003396:	d135      	bne.n	8003404 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8003398:	4b58      	ldr	r3, [pc, #352]	; (80034fc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033a4:	f040 80a1 	bne.w	80034ea <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 80033a8:	4b54      	ldr	r3, [pc, #336]	; (80034fc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 809a 	beq.w	80034ea <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80033b6:	4b51      	ldr	r3, [pc, #324]	; (80034fc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	091b      	lsrs	r3, r3, #4
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	3301      	adds	r3, #1
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c8:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80033ca:	4b4c      	ldr	r3, [pc, #304]	; (80034fc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	0a1b      	lsrs	r3, r3, #8
 80033d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033d4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10a      	bne.n	80033f2 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80033dc:	4b47      	ldr	r3, [pc, #284]	; (80034fc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d002      	beq.n	80033ee <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 80033e8:	2311      	movs	r3, #17
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	e001      	b.n	80033f2 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 80033ee:	2307      	movs	r3, #7
 80033f0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	fb03 f202 	mul.w	r2, r3, r2
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003400:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8003402:	e072      	b.n	80034ea <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d133      	bne.n	8003472 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800340a:	4b3c      	ldr	r3, [pc, #240]	; (80034fc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003412:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003416:	d169      	bne.n	80034ec <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8003418:	4b38      	ldr	r3, [pc, #224]	; (80034fc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d063      	beq.n	80034ec <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003424:	4b35      	ldr	r3, [pc, #212]	; (80034fc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	091b      	lsrs	r3, r3, #4
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	3301      	adds	r3, #1
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	fbb2 f3f3 	udiv	r3, r2, r3
 8003436:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003438:	4b30      	ldr	r3, [pc, #192]	; (80034fc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	0a1b      	lsrs	r3, r3, #8
 800343e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003442:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10a      	bne.n	8003460 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800344a:	4b2c      	ldr	r3, [pc, #176]	; (80034fc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8003456:	2311      	movs	r3, #17
 8003458:	617b      	str	r3, [r7, #20]
 800345a:	e001      	b.n	8003460 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 800345c:	2307      	movs	r3, #7
 800345e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	fb03 f202 	mul.w	r2, r3, r2
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	fbb2 f3f3 	udiv	r3, r2, r3
 800346e:	61fb      	str	r3, [r7, #28]
 8003470:	e03c      	b.n	80034ec <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003478:	d003      	beq.n	8003482 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003480:	d134      	bne.n	80034ec <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8003482:	4b1e      	ldr	r3, [pc, #120]	; (80034fc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800348a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800348e:	d12d      	bne.n	80034ec <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8003490:	4b1a      	ldr	r3, [pc, #104]	; (80034fc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d027      	beq.n	80034ec <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800349c:	4b17      	ldr	r3, [pc, #92]	; (80034fc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	091b      	lsrs	r3, r3, #4
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	3301      	adds	r3, #1
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ae:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80034b0:	4b12      	ldr	r3, [pc, #72]	; (80034fc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	0a1b      	lsrs	r3, r3, #8
 80034b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034ba:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10a      	bne.n	80034d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80034c2:	4b0e      	ldr	r3, [pc, #56]	; (80034fc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d002      	beq.n	80034d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 80034ce:	2311      	movs	r3, #17
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	e001      	b.n	80034d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 80034d4:	2307      	movs	r3, #7
 80034d6:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	fb03 f202 	mul.w	r2, r3, r2
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e6:	61fb      	str	r3, [r7, #28]
 80034e8:	e000      	b.n	80034ec <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80034ea:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80034ec:	69fb      	ldr	r3, [r7, #28]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3724      	adds	r7, #36	; 0x24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	40021000 	.word	0x40021000
 8003500:	001fff68 	.word	0x001fff68

08003504 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
 8003510:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	2b02      	cmp	r3, #2
 8003516:	d904      	bls.n	8003522 <HAL_SAI_InitProtocol+0x1e>
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	3b03      	subs	r3, #3
 800351c:	2b01      	cmp	r3, #1
 800351e:	d812      	bhi.n	8003546 <HAL_SAI_InitProtocol+0x42>
 8003520:	e008      	b.n	8003534 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	68b9      	ldr	r1, [r7, #8]
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f000 fa27 	bl	800397c <SAI_InitI2S>
 800352e:	4603      	mov	r3, r0
 8003530:	75fb      	strb	r3, [r7, #23]
      break;
 8003532:	e00b      	b.n	800354c <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	68b9      	ldr	r1, [r7, #8]
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f000 fad0 	bl	8003ae0 <SAI_InitPCM>
 8003540:	4603      	mov	r3, r0
 8003542:	75fb      	strb	r3, [r7, #23]
      break;
 8003544:	e002      	b.n	800354c <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	75fb      	strb	r3, [r7, #23]
      break;
 800354a:	bf00      	nop
  }

  if (status == HAL_OK)
 800354c:	7dfb      	ldrb	r3, [r7, #23]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d104      	bne.n	800355c <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 f808 	bl	8003568 <HAL_SAI_Init>
 8003558:	4603      	mov	r3, r0
 800355a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800355c:	7dfb      	ldrb	r3, [r7, #23]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b088      	sub	sp, #32
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e155      	b.n	8003826 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d106      	bne.n	8003594 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7fc ffd6 	bl	8000540 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 fb5d 	bl	8003c54 <SAI_Disable>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e140      	b.n	8003826 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d00c      	beq.n	80035ce <HAL_SAI_Init+0x66>
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d80d      	bhi.n	80035d4 <HAL_SAI_Init+0x6c>
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d002      	beq.n	80035c2 <HAL_SAI_Init+0x5a>
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d003      	beq.n	80035c8 <HAL_SAI_Init+0x60>
 80035c0:	e008      	b.n	80035d4 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61fb      	str	r3, [r7, #28]
      break;
 80035c6:	e008      	b.n	80035da <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80035c8:	2310      	movs	r3, #16
 80035ca:	61fb      	str	r3, [r7, #28]
      break;
 80035cc:	e005      	b.n	80035da <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80035ce:	2320      	movs	r3, #32
 80035d0:	61fb      	str	r3, [r7, #28]
      break;
 80035d2:	e002      	b.n	80035da <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 80035d4:	2300      	movs	r3, #0
 80035d6:	61fb      	str	r3, [r7, #28]
      break;
 80035d8:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	2b03      	cmp	r3, #3
 80035e0:	d81d      	bhi.n	800361e <HAL_SAI_Init+0xb6>
 80035e2:	a201      	add	r2, pc, #4	; (adr r2, 80035e8 <HAL_SAI_Init+0x80>)
 80035e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e8:	080035f9 	.word	0x080035f9
 80035ec:	080035ff 	.word	0x080035ff
 80035f0:	08003607 	.word	0x08003607
 80035f4:	0800360f 	.word	0x0800360f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80035f8:	2300      	movs	r3, #0
 80035fa:	617b      	str	r3, [r7, #20]
      break;
 80035fc:	e012      	b.n	8003624 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80035fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003602:	617b      	str	r3, [r7, #20]
      break;
 8003604:	e00e      	b.n	8003624 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8003606:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800360a:	617b      	str	r3, [r7, #20]
      break;
 800360c:	e00a      	b.n	8003624 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800360e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003612:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	f043 0301 	orr.w	r3, r3, #1
 800361a:	61fb      	str	r3, [r7, #28]
      break;
 800361c:	e002      	b.n	8003624 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800361e:	2300      	movs	r3, #0
 8003620:	617b      	str	r3, [r7, #20]
      break;
 8003622:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a81      	ldr	r2, [pc, #516]	; (8003830 <HAL_SAI_Init+0x2c8>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d004      	beq.n	8003638 <HAL_SAI_Init+0xd0>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a80      	ldr	r2, [pc, #512]	; (8003834 <HAL_SAI_Init+0x2cc>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d103      	bne.n	8003640 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8003638:	4a7f      	ldr	r2, [pc, #508]	; (8003838 <HAL_SAI_Init+0x2d0>)
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	e002      	b.n	8003646 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8003640:	4a7e      	ldr	r2, [pc, #504]	; (800383c <HAL_SAI_Init+0x2d4>)
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d041      	beq.n	80036d2 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a77      	ldr	r2, [pc, #476]	; (8003830 <HAL_SAI_Init+0x2c8>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d004      	beq.n	8003662 <HAL_SAI_Init+0xfa>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a75      	ldr	r2, [pc, #468]	; (8003834 <HAL_SAI_Init+0x2cc>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d105      	bne.n	800366e <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8003662:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003666:	f7fe ff1d 	bl	80024a4 <HAL_RCCEx_GetPeriphCLKFreq>
 800366a:	6138      	str	r0, [r7, #16]
 800366c:	e004      	b.n	8003678 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800366e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003672:	f7fe ff17 	bl	80024a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003676:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4613      	mov	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4413      	add	r3, r2
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	461a      	mov	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	025b      	lsls	r3, r3, #9
 800368a:	fbb2 f3f3 	udiv	r3, r2, r3
 800368e:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4a6b      	ldr	r2, [pc, #428]	; (8003840 <HAL_SAI_Init+0x2d8>)
 8003694:	fba2 2303 	umull	r2, r3, r2, r3
 8003698:	08da      	lsrs	r2, r3, #3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800369e:	68f9      	ldr	r1, [r7, #12]
 80036a0:	4b67      	ldr	r3, [pc, #412]	; (8003840 <HAL_SAI_Init+0x2d8>)
 80036a2:	fba3 2301 	umull	r2, r3, r3, r1
 80036a6:	08da      	lsrs	r2, r3, #3
 80036a8:	4613      	mov	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	1aca      	subs	r2, r1, r3
 80036b2:	2a08      	cmp	r2, #8
 80036b4:	d904      	bls.n	80036c0 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	1c5a      	adds	r2, r3, #1
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	d104      	bne.n	80036d2 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	085a      	lsrs	r2, r3, #1
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_SAI_Init+0x17a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d109      	bne.n	80036f6 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d101      	bne.n	80036ee <HAL_SAI_Init+0x186>
 80036ea:	2300      	movs	r3, #0
 80036ec:	e001      	b.n	80036f2 <HAL_SAI_Init+0x18a>
 80036ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036f2:	61bb      	str	r3, [r7, #24]
 80036f4:	e008      	b.n	8003708 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d102      	bne.n	8003704 <HAL_SAI_Init+0x19c>
 80036fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003702:	e000      	b.n	8003706 <HAL_SAI_Init+0x19e>
 8003704:	2300      	movs	r3, #0
 8003706:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6819      	ldr	r1, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	4b4c      	ldr	r3, [pc, #304]	; (8003844 <HAL_SAI_Init+0x2dc>)
 8003714:	400b      	ands	r3, r1
 8003716:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6819      	ldr	r1, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800372c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003732:	431a      	orrs	r2, r3
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8003740:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800374c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	051b      	lsls	r3, r3, #20
 8003754:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6812      	ldr	r2, [r2, #0]
 8003768:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800376c:	f023 030f 	bic.w	r3, r3, #15
 8003770:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6859      	ldr	r1, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	699a      	ldr	r2, [r3, #24]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003780:	431a      	orrs	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6899      	ldr	r1, [r3, #8]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	4b2b      	ldr	r3, [pc, #172]	; (8003848 <HAL_SAI_Init+0x2e0>)
 800379c:	400b      	ands	r3, r1
 800379e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6899      	ldr	r1, [r3, #8]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80037b0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 80037b6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 80037bc:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c2:	3b01      	subs	r3, #1
 80037c4:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80037c6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68d9      	ldr	r1, [r3, #12]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	f24f 0320 	movw	r3, #61472	; 0xf020
 80037de:	400b      	ands	r3, r1
 80037e0:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68d9      	ldr	r1, [r3, #12]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037f6:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80037f8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fe:	3b01      	subs	r3, #1
 8003800:	021b      	lsls	r3, r3, #8
 8003802:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3720      	adds	r7, #32
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	40015404 	.word	0x40015404
 8003834:	40015424 	.word	0x40015424
 8003838:	40015400 	.word	0x40015400
 800383c:	40015800 	.word	0x40015800
 8003840:	cccccccd 	.word	0xcccccccd
 8003844:	ff05c010 	.word	0xff05c010
 8003848:	fff88000 	.word	0xfff88000

0800384c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	4613      	mov	r3, r2
 8003858:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d002      	beq.n	8003866 <HAL_SAI_Receive_DMA+0x1a>
 8003860:	88fb      	ldrh	r3, [r7, #6]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e074      	b.n	8003954 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b01      	cmp	r3, #1
 8003874:	d16d      	bne.n	8003952 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800387c:	2b01      	cmp	r3, #1
 800387e:	d101      	bne.n	8003884 <HAL_SAI_Receive_DMA+0x38>
 8003880:	2302      	movs	r3, #2
 8003882:	e067      	b.n	8003954 <HAL_SAI_Receive_DMA+0x108>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	68ba      	ldr	r2, [r7, #8]
 8003890:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	88fa      	ldrh	r2, [r7, #6]
 8003896:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	88fa      	ldrh	r2, [r7, #6]
 800389e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2222      	movs	r2, #34	; 0x22
 80038ae:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b6:	4a29      	ldr	r2, [pc, #164]	; (800395c <HAL_SAI_Receive_DMA+0x110>)
 80038b8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038be:	4a28      	ldr	r2, [pc, #160]	; (8003960 <HAL_SAI_Receive_DMA+0x114>)
 80038c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c6:	4a27      	ldr	r2, [pc, #156]	; (8003964 <HAL_SAI_Receive_DMA+0x118>)
 80038c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ce:	2200      	movs	r2, #0
 80038d0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	331c      	adds	r3, #28
 80038dc:	4619      	mov	r1, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038e2:	461a      	mov	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80038ea:	f7fd f971 	bl	8000bd0 <HAL_DMA_Start_IT>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d005      	beq.n	8003900 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e029      	b.n	8003954 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8003900:	2100      	movs	r1, #0
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 f96e 	bl	8003be4 <SAI_InterruptFlag>
 8003908:	4601      	mov	r1, r0
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	691a      	ldr	r2, [r3, #16]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003926:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d107      	bne.n	8003946 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003944:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800394e:	2300      	movs	r3, #0
 8003950:	e000      	b.n	8003954 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8003952:	2302      	movs	r3, #2
  }
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	08003d27 	.word	0x08003d27
 8003960:	08003cc9 	.word	0x08003cc9
 8003964:	08003d43 	.word	0x08003d43

08003968 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800398a:	2300      	movs	r3, #0
 800398c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <SAI_InitI2S+0x2e>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d103      	bne.n	80039b2 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80039b0:	e002      	b.n	80039b8 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2201      	movs	r2, #1
 80039b6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80039be:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039c6:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e077      	b.n	8003ad2 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d107      	bne.n	80039f8 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80039f4:	651a      	str	r2, [r3, #80]	; 0x50
 80039f6:	e006      	b.n	8003a06 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039fe:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Frame definition */
  switch (datasize)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	d84f      	bhi.n	8003aac <SAI_InitI2S+0x130>
 8003a0c:	a201      	add	r2, pc, #4	; (adr r2, 8003a14 <SAI_InitI2S+0x98>)
 8003a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a12:	bf00      	nop
 8003a14:	08003a25 	.word	0x08003a25
 8003a18:	08003a47 	.word	0x08003a47
 8003a1c:	08003a69 	.word	0x08003a69
 8003a20:	08003a8b 	.word	0x08003a8b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2280      	movs	r2, #128	; 0x80
 8003a28:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	085b      	lsrs	r3, r3, #1
 8003a2e:	015a      	lsls	r2, r3, #5
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	085b      	lsrs	r3, r3, #1
 8003a38:	011a      	lsls	r2, r3, #4
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2240      	movs	r2, #64	; 0x40
 8003a42:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8003a44:	e035      	b.n	8003ab2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2280      	movs	r2, #128	; 0x80
 8003a4a:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	085b      	lsrs	r3, r3, #1
 8003a50:	019a      	lsls	r2, r3, #6
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	085b      	lsrs	r3, r3, #1
 8003a5a:	015a      	lsls	r2, r3, #5
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2280      	movs	r2, #128	; 0x80
 8003a64:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8003a66:	e024      	b.n	8003ab2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	22c0      	movs	r2, #192	; 0xc0
 8003a6c:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	085b      	lsrs	r3, r3, #1
 8003a72:	019a      	lsls	r2, r3, #6
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	085b      	lsrs	r3, r3, #1
 8003a7c:	015a      	lsls	r2, r3, #5
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2280      	movs	r2, #128	; 0x80
 8003a86:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8003a88:	e013      	b.n	8003ab2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	22e0      	movs	r2, #224	; 0xe0
 8003a8e:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	085b      	lsrs	r3, r3, #1
 8003a94:	019a      	lsls	r2, r3, #6
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	085b      	lsrs	r3, r3, #1
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2280      	movs	r2, #128	; 0x80
 8003aa8:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8003aaa:	e002      	b.n	8003ab2 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	75fb      	strb	r3, [r7, #23]
      break;
 8003ab0:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d10b      	bne.n	8003ad0 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d102      	bne.n	8003ac4 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2210      	movs	r2, #16
 8003ac2:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d102      	bne.n	8003ad0 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2208      	movs	r2, #8
 8003ace:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  return status;
 8003ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	371c      	adds	r7, #28
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop

08003ae0 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aee:	2300      	movs	r3, #0
 8003af0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <SAI_InitPCM+0x2e>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d103      	bne.n	8003b16 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2201      	movs	r2, #1
 8003b12:	63da      	str	r2, [r3, #60]	; 0x3c
 8003b14:	e002      	b.n	8003b1c <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b28:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003b30:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b44:	661a      	str	r2, [r3, #96]	; 0x60

  if (protocol == SAI_PCM_SHORT)
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2b04      	cmp	r3, #4
 8003b4a:	d103      	bne.n	8003b54 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	645a      	str	r2, [r3, #68]	; 0x44
 8003b52:	e002      	b.n	8003b5a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	220d      	movs	r2, #13
 8003b58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  switch (datasize)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b03      	cmp	r3, #3
 8003b5e:	d837      	bhi.n	8003bd0 <SAI_InitPCM+0xf0>
 8003b60:	a201      	add	r2, pc, #4	; (adr r2, 8003b68 <SAI_InitPCM+0x88>)
 8003b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b66:	bf00      	nop
 8003b68:	08003b79 	.word	0x08003b79
 8003b6c:	08003b8f 	.word	0x08003b8f
 8003b70:	08003ba5 	.word	0x08003ba5
 8003b74:	08003bbb 	.word	0x08003bbb
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2280      	movs	r2, #128	; 0x80
 8003b7c:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	011a      	lsls	r2, r3, #4
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2240      	movs	r2, #64	; 0x40
 8003b8a:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8003b8c:	e023      	b.n	8003bd6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2280      	movs	r2, #128	; 0x80
 8003b92:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	015a      	lsls	r2, r3, #5
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2280      	movs	r2, #128	; 0x80
 8003ba0:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8003ba2:	e018      	b.n	8003bd6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	22c0      	movs	r2, #192	; 0xc0
 8003ba8:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2280      	movs	r2, #128	; 0x80
 8003bb6:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8003bb8:	e00d      	b.n	8003bd6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	22e0      	movs	r2, #224	; 0xe0
 8003bbe:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2280      	movs	r2, #128	; 0x80
 8003bcc:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8003bce:	e002      	b.n	8003bd6 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	75fb      	strb	r3, [r7, #23]
      break;
 8003bd4:	bf00      	nop
  }

  return status;
 8003bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	371c      	adds	r7, #28
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8003bf4:	78fb      	ldrb	r3, [r7, #3]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d103      	bne.n	8003c02 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f043 0308 	orr.w	r3, r3, #8
 8003c00:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c06:	2b08      	cmp	r3, #8
 8003c08:	d10b      	bne.n	8003c22 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8003c0e:	2b03      	cmp	r3, #3
 8003c10:	d003      	beq.n	8003c1a <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d103      	bne.n	8003c22 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f043 0310 	orr.w	r3, r3, #16
 8003c20:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b03      	cmp	r3, #3
 8003c28:	d003      	beq.n	8003c32 <SAI_InterruptFlag+0x4e>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d104      	bne.n	8003c3c <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	e003      	b.n	8003c44 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f043 0304 	orr.w	r3, r3, #4
 8003c42:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8003c44:	68fb      	ldr	r3, [r7, #12]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
	...

08003c54 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8003c5c:	4b18      	ldr	r3, [pc, #96]	; (8003cc0 <SAI_Disable+0x6c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a18      	ldr	r2, [pc, #96]	; (8003cc4 <SAI_Disable+0x70>)
 8003c62:	fba2 2303 	umull	r2, r3, r2, r3
 8003c66:	0b1b      	lsrs	r3, r3, #12
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003c7e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10a      	bne.n	8003c9c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c8c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	72fb      	strb	r3, [r7, #11]
      break;
 8003c9a:	e009      	b.n	8003cb0 <SAI_Disable+0x5c>
    }
    count--;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1e7      	bne.n	8003c80 <SAI_Disable+0x2c>

  return status;
 8003cb0:	7afb      	ldrb	r3, [r7, #11]
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	20000004 	.word	0x20000004
 8003cc4:	95cbec1b 	.word	0x95cbec1b

08003cc8 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	2b20      	cmp	r3, #32
 8003cdc:	d01c      	beq.n	8003d18 <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003cec:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f7ff ff73 	bl	8003be4 <SAI_InterruptFlag>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	43d9      	mvns	r1, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	691a      	ldr	r2, [r3, #16]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	400a      	ands	r2, r1
 8003d0e:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f7fc fa71 	bl	8000200 <HAL_SAI_RxCpltCallback>
#endif
}
 8003d1e:	bf00      	nop
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b084      	sub	sp, #16
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d32:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f7fc fa47 	bl	80001c8 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8003d3a:	bf00      	nop
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b084      	sub	sp, #16
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d56:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003d6e:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f7ff ff6f 	bl	8003c54 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f7ff fdee 	bl	8003968 <HAL_SAI_ErrorCallback>
#endif
}
 8003d8c:	bf00      	nop
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <memset>:
 8003d94:	4402      	add	r2, r0
 8003d96:	4603      	mov	r3, r0
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d100      	bne.n	8003d9e <memset+0xa>
 8003d9c:	4770      	bx	lr
 8003d9e:	f803 1b01 	strb.w	r1, [r3], #1
 8003da2:	e7f9      	b.n	8003d98 <memset+0x4>

08003da4 <__libc_init_array>:
 8003da4:	b570      	push	{r4, r5, r6, lr}
 8003da6:	4d0d      	ldr	r5, [pc, #52]	; (8003ddc <__libc_init_array+0x38>)
 8003da8:	4c0d      	ldr	r4, [pc, #52]	; (8003de0 <__libc_init_array+0x3c>)
 8003daa:	1b64      	subs	r4, r4, r5
 8003dac:	10a4      	asrs	r4, r4, #2
 8003dae:	2600      	movs	r6, #0
 8003db0:	42a6      	cmp	r6, r4
 8003db2:	d109      	bne.n	8003dc8 <__libc_init_array+0x24>
 8003db4:	4d0b      	ldr	r5, [pc, #44]	; (8003de4 <__libc_init_array+0x40>)
 8003db6:	4c0c      	ldr	r4, [pc, #48]	; (8003de8 <__libc_init_array+0x44>)
 8003db8:	f000 f818 	bl	8003dec <_init>
 8003dbc:	1b64      	subs	r4, r4, r5
 8003dbe:	10a4      	asrs	r4, r4, #2
 8003dc0:	2600      	movs	r6, #0
 8003dc2:	42a6      	cmp	r6, r4
 8003dc4:	d105      	bne.n	8003dd2 <__libc_init_array+0x2e>
 8003dc6:	bd70      	pop	{r4, r5, r6, pc}
 8003dc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dcc:	4798      	blx	r3
 8003dce:	3601      	adds	r6, #1
 8003dd0:	e7ee      	b.n	8003db0 <__libc_init_array+0xc>
 8003dd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dd6:	4798      	blx	r3
 8003dd8:	3601      	adds	r6, #1
 8003dda:	e7f2      	b.n	8003dc2 <__libc_init_array+0x1e>
 8003ddc:	08003e4c 	.word	0x08003e4c
 8003de0:	08003e4c 	.word	0x08003e4c
 8003de4:	08003e4c 	.word	0x08003e4c
 8003de8:	08003e50 	.word	0x08003e50

08003dec <_init>:
 8003dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dee:	bf00      	nop
 8003df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003df2:	bc08      	pop	{r3}
 8003df4:	469e      	mov	lr, r3
 8003df6:	4770      	bx	lr

08003df8 <_fini>:
 8003df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dfa:	bf00      	nop
 8003dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dfe:	bc08      	pop	{r3}
 8003e00:	469e      	mov	lr, r3
 8003e02:	4770      	bx	lr
