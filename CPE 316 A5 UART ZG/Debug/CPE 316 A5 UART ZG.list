
CPE 316 A5 UART ZG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014c0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800166c  0800166c  0001166c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001718  08001718  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001718  08001718  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001718  08001718  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001718  08001718  00011718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800171c  0800171c  0001171c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001720  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  0800172c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  0800172c  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007000  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001529  00000000  00000000  0002707f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000710  00000000  00000000  000285a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000054c  00000000  00000000  00028cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027584  00000000  00000000  00029204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000783a  00000000  00000000  00050788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2bd4  00000000  00000000  00057fc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001a94  00000000  00000000  0014ab98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0014c62c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001654 	.word	0x08001654

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08001654 	.word	0x08001654

080001ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	4603      	mov	r3, r0
 80001f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	db0b      	blt.n	8000216 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001fe:	79fb      	ldrb	r3, [r7, #7]
 8000200:	f003 021f 	and.w	r2, r3, #31
 8000204:	4907      	ldr	r1, [pc, #28]	; (8000224 <__NVIC_EnableIRQ+0x38>)
 8000206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800020a:	095b      	lsrs	r3, r3, #5
 800020c:	2001      	movs	r0, #1
 800020e:	fa00 f202 	lsl.w	r2, r0, r2
 8000212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000216:	bf00      	nop
 8000218:	370c      	adds	r7, #12
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	e000e100 	.word	0xe000e100

08000228 <LPUART1_init>:
#include "stm32l4xx_hal.h"  // For HAL_Delay

void SystemClock_Config(void);

// Function to initialize LPUART1
void LPUART1_init() {
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
    // Set IOSV bit for PG[15:2]
    PWR->CR2 |= PWR_CR2_IOSV;
 800022c:	4b21      	ldr	r3, [pc, #132]	; (80002b4 <LPUART1_init+0x8c>)
 800022e:	685b      	ldr	r3, [r3, #4]
 8000230:	4a20      	ldr	r2, [pc, #128]	; (80002b4 <LPUART1_init+0x8c>)
 8000232:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000236:	6053      	str	r3, [r2, #4]

    // Enable LPUART1 clock
    RCC->APB1ENR2 |= RCC_APB1ENR2_LPUART1EN;
 8000238:	4b1f      	ldr	r3, [pc, #124]	; (80002b8 <LPUART1_init+0x90>)
 800023a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800023c:	4a1e      	ldr	r2, [pc, #120]	; (80002b8 <LPUART1_init+0x90>)
 800023e:	f043 0301 	orr.w	r3, r3, #1
 8000242:	65d3      	str	r3, [r2, #92]	; 0x5c

    // Enable GPIOG clock
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOGEN;
 8000244:	4b1c      	ldr	r3, [pc, #112]	; (80002b8 <LPUART1_init+0x90>)
 8000246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000248:	4a1b      	ldr	r2, [pc, #108]	; (80002b8 <LPUART1_init+0x90>)
 800024a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800024e:	64d3      	str	r3, [r2, #76]	; 0x4c

    // Configure PG7 as LPUART1_TX and PG8 as LPUART1_RX
    GPIOG->MODER &= ~(GPIO_MODER_MODE7 | GPIO_MODER_MODE8);
 8000250:	4b1a      	ldr	r3, [pc, #104]	; (80002bc <LPUART1_init+0x94>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a19      	ldr	r2, [pc, #100]	; (80002bc <LPUART1_init+0x94>)
 8000256:	f423 3370 	bic.w	r3, r3, #245760	; 0x3c000
 800025a:	6013      	str	r3, [r2, #0]
    GPIOG->MODER |= (GPIO_MODER_MODE7_1 | GPIO_MODER_MODE8_1);
 800025c:	4b17      	ldr	r3, [pc, #92]	; (80002bc <LPUART1_init+0x94>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a16      	ldr	r2, [pc, #88]	; (80002bc <LPUART1_init+0x94>)
 8000262:	f443 3320 	orr.w	r3, r3, #163840	; 0x28000
 8000266:	6013      	str	r3, [r2, #0]

    // Set Alternate Function for PG7 (LPUART1_TX)
    GPIOG->AFR[0] |= (8U << GPIO_AFRL_AFSEL7_Pos);
 8000268:	4b14      	ldr	r3, [pc, #80]	; (80002bc <LPUART1_init+0x94>)
 800026a:	6a1b      	ldr	r3, [r3, #32]
 800026c:	4a13      	ldr	r2, [pc, #76]	; (80002bc <LPUART1_init+0x94>)
 800026e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000272:	6213      	str	r3, [r2, #32]

    // Set Alternate Function for PG8 (LPUART1_RX)
    GPIOG->AFR[1] |= (8U << GPIO_AFRH_AFSEL8_Pos);
 8000274:	4b11      	ldr	r3, [pc, #68]	; (80002bc <LPUART1_init+0x94>)
 8000276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000278:	4a10      	ldr	r2, [pc, #64]	; (80002bc <LPUART1_init+0x94>)
 800027a:	f043 0308 	orr.w	r3, r3, #8
 800027e:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure for 8 data bits
	LPUART1->CR1 &= ~(USART_CR1_M);
 8000280:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <LPUART1_init+0x98>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a0e      	ldr	r2, [pc, #56]	; (80002c0 <LPUART1_init+0x98>)
 8000286:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 800028a:	6013      	str	r3, [r2, #0]

    // Set Baud Rate Divisor
    LPUART1->BRR = 0x2B671;  // 90Mhz * 256 / 115200 (desired baud) = 0x2B671
 800028c:	4b0c      	ldr	r3, [pc, #48]	; (80002c0 <LPUART1_init+0x98>)
 800028e:	4a0d      	ldr	r2, [pc, #52]	; (80002c4 <LPUART1_init+0x9c>)
 8000290:	60da      	str	r2, [r3, #12]

    // Configure for 1 stop bit
	LPUART1->CR2 &= ~(USART_CR2_STOP);
 8000292:	4b0b      	ldr	r3, [pc, #44]	; (80002c0 <LPUART1_init+0x98>)
 8000294:	685b      	ldr	r3, [r3, #4]
 8000296:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <LPUART1_init+0x98>)
 8000298:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800029c:	6053      	str	r3, [r2, #4]

    // Enable LPUART, Transmitter and Receiver
    LPUART1->CR1 |= (USART_CR1_UE | USART_CR1_TE | USART_CR1_RE);
 800029e:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <LPUART1_init+0x98>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4a07      	ldr	r2, [pc, #28]	; (80002c0 <LPUART1_init+0x98>)
 80002a4:	f043 030d 	orr.w	r3, r3, #13
 80002a8:	6013      	str	r3, [r2, #0]
}
 80002aa:	bf00      	nop
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr
 80002b4:	40007000 	.word	0x40007000
 80002b8:	40021000 	.word	0x40021000
 80002bc:	48001800 	.word	0x48001800
 80002c0:	40008000 	.word	0x40008000
 80002c4:	0002b671 	.word	0x0002b671

080002c8 <UART_print>:

// Function to print a string via LPUART1
void UART_print(const char *str) {
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
    while (*str) {
 80002d0:	e015      	b.n	80002fe <UART_print+0x36>
        // Wait for Transmit Data Register Empty
        while (!(LPUART1->ISR & USART_ISR_TXE));
 80002d2:	bf00      	nop
 80002d4:	4b0f      	ldr	r3, [pc, #60]	; (8000314 <UART_print+0x4c>)
 80002d6:	69db      	ldr	r3, [r3, #28]
 80002d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d0f9      	beq.n	80002d4 <UART_print+0xc>

        // Write data to TDR
        LPUART1->TDR = *str;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	781a      	ldrb	r2, [r3, #0]
 80002e4:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <UART_print+0x4c>)
 80002e6:	b292      	uxth	r2, r2
 80002e8:	851a      	strh	r2, [r3, #40]	; 0x28

        // Wait for Transmission Complete
        while (!(LPUART1->ISR & USART_ISR_TC));
 80002ea:	bf00      	nop
 80002ec:	4b09      	ldr	r3, [pc, #36]	; (8000314 <UART_print+0x4c>)
 80002ee:	69db      	ldr	r3, [r3, #28]
 80002f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d0f9      	beq.n	80002ec <UART_print+0x24>

        str++;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	3301      	adds	r3, #1
 80002fc:	607b      	str	r3, [r7, #4]
    while (*str) {
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d1e5      	bne.n	80002d2 <UART_print+0xa>
    }
}
 8000306:	bf00      	nop
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr
 8000314:	40008000 	.word	0x40008000

08000318 <UART_ESC_Code>:

// Function to send escape codes via USART
void UART_ESC_Code(const char *str) {
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
    UART_print("\033[");  // ESC [
 8000320:	4804      	ldr	r0, [pc, #16]	; (8000334 <UART_ESC_Code+0x1c>)
 8000322:	f7ff ffd1 	bl	80002c8 <UART_print>
    UART_print(str);
 8000326:	6878      	ldr	r0, [r7, #4]
 8000328:	f7ff ffce 	bl	80002c8 <UART_print>
}
 800032c:	bf00      	nop
 800032e:	3708      	adds	r7, #8
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	0800166c 	.word	0x0800166c

08000338 <LPUART1_IRQHandler>:

// LPUART1 Interrupt Service Routine
void LPUART1_IRQHandler(void) {
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
    // Check if data is available to read
    if (LPUART1->ISR & USART_ISR_RXNE) {
 800033e:	4b19      	ldr	r3, [pc, #100]	; (80003a4 <LPUART1_IRQHandler+0x6c>)
 8000340:	69db      	ldr	r3, [r3, #28]
 8000342:	f003 0320 	and.w	r3, r3, #32
 8000346:	2b00      	cmp	r3, #0
 8000348:	d027      	beq.n	800039a <LPUART1_IRQHandler+0x62>
        // Read received data
        char received_char = LPUART1->RDR;
 800034a:	4b16      	ldr	r3, [pc, #88]	; (80003a4 <LPUART1_IRQHandler+0x6c>)
 800034c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800034e:	b29b      	uxth	r3, r3
 8000350:	71fb      	strb	r3, [r7, #7]

        // Move cursor to the right position for echoing
		//UART_ESC_Code("7C");  // Move cursor 7 spaces to the right

        // Check for special characters for color change
        if (received_char == 'R') {
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	2b52      	cmp	r3, #82	; 0x52
 8000356:	d103      	bne.n	8000360 <LPUART1_IRQHandler+0x28>
            UART_ESC_Code("31m");  // Set text color to red
 8000358:	4813      	ldr	r0, [pc, #76]	; (80003a8 <LPUART1_IRQHandler+0x70>)
 800035a:	f7ff ffdd 	bl	8000318 <UART_ESC_Code>

        // Move cursor back to the original position
        //UART_ESC_Code("0k");
		//UART_ESC_Code("7D");  // Move cursor 7 spaces to the left
    }
}
 800035e:	e01c      	b.n	800039a <LPUART1_IRQHandler+0x62>
        } else if (received_char == 'B') {
 8000360:	79fb      	ldrb	r3, [r7, #7]
 8000362:	2b42      	cmp	r3, #66	; 0x42
 8000364:	d103      	bne.n	800036e <LPUART1_IRQHandler+0x36>
            UART_ESC_Code("34m");  // Set text color to blue
 8000366:	4811      	ldr	r0, [pc, #68]	; (80003ac <LPUART1_IRQHandler+0x74>)
 8000368:	f7ff ffd6 	bl	8000318 <UART_ESC_Code>
}
 800036c:	e015      	b.n	800039a <LPUART1_IRQHandler+0x62>
        } else if (received_char == 'G') {
 800036e:	79fb      	ldrb	r3, [r7, #7]
 8000370:	2b47      	cmp	r3, #71	; 0x47
 8000372:	d103      	bne.n	800037c <LPUART1_IRQHandler+0x44>
            UART_ESC_Code("32m");  // Set text color to green
 8000374:	480e      	ldr	r0, [pc, #56]	; (80003b0 <LPUART1_IRQHandler+0x78>)
 8000376:	f7ff ffcf 	bl	8000318 <UART_ESC_Code>
}
 800037a:	e00e      	b.n	800039a <LPUART1_IRQHandler+0x62>
        } else if (received_char == 'W') {
 800037c:	79fb      	ldrb	r3, [r7, #7]
 800037e:	2b57      	cmp	r3, #87	; 0x57
 8000380:	d103      	bne.n	800038a <LPUART1_IRQHandler+0x52>
            UART_ESC_Code("37m");  // Set text color to white
 8000382:	480c      	ldr	r0, [pc, #48]	; (80003b4 <LPUART1_IRQHandler+0x7c>)
 8000384:	f7ff ffc8 	bl	8000318 <UART_ESC_Code>
}
 8000388:	e007      	b.n	800039a <LPUART1_IRQHandler+0x62>
            char str[2] = {received_char, '\0'};
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	713b      	strb	r3, [r7, #4]
 800038e:	2300      	movs	r3, #0
 8000390:	717b      	strb	r3, [r7, #5]
            UART_print(str);
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	4618      	mov	r0, r3
 8000396:	f7ff ff97 	bl	80002c8 <UART_print>
}
 800039a:	bf00      	nop
 800039c:	3708      	adds	r7, #8
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	40008000 	.word	0x40008000
 80003a8:	08001670 	.word	0x08001670
 80003ac:	08001674 	.word	0x08001674
 80003b0:	08001678 	.word	0x08001678
 80003b4:	0800167c 	.word	0x0800167c

080003b8 <main>:

int main() {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
    // Initialize LPUART1
	HAL_Init();
 80003bc:	f000 f939 	bl	8000632 <HAL_Init>
    SystemClock_Config();
 80003c0:	f000 f846 	bl	8000450 <SystemClock_Config>
	LPUART1_init();
 80003c4:	f7ff ff30 	bl	8000228 <LPUART1_init>

	 // Enable LPUART1 RX interrupt
	LPUART1->CR1 |= USART_CR1_RXNEIE;
 80003c8:	4b15      	ldr	r3, [pc, #84]	; (8000420 <main+0x68>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a14      	ldr	r2, [pc, #80]	; (8000420 <main+0x68>)
 80003ce:	f043 0320 	orr.w	r3, r3, #32
 80003d2:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(LPUART1_IRQn);
 80003d4:	2046      	movs	r0, #70	; 0x46
 80003d6:	f7ff ff09 	bl	80001ec <__NVIC_EnableIRQ>


	// Clear the screen
	UART_ESC_Code("2J");
 80003da:	4812      	ldr	r0, [pc, #72]	; (8000424 <main+0x6c>)
 80003dc:	f7ff ff9c 	bl	8000318 <UART_ESC_Code>

	// Move the cursor down 3 lines and to the right 5 spaces
	UART_ESC_Code("3B");  // Move down 3 lines
 80003e0:	4811      	ldr	r0, [pc, #68]	; (8000428 <main+0x70>)
 80003e2:	f7ff ff99 	bl	8000318 <UART_ESC_Code>
	UART_ESC_Code("5C");  // Move right 5 spaces
 80003e6:	4811      	ldr	r0, [pc, #68]	; (800042c <main+0x74>)
 80003e8:	f7ff ff96 	bl	8000318 <UART_ESC_Code>

	// Print text
	UART_print("All good students read the");
 80003ec:	4810      	ldr	r0, [pc, #64]	; (8000430 <main+0x78>)
 80003ee:	f7ff ff6b 	bl	80002c8 <UART_print>

	// Move the cursor down 1 line and to the left 21 spaces
	UART_ESC_Code("1B");  // Move down 1 line
 80003f2:	4810      	ldr	r0, [pc, #64]	; (8000434 <main+0x7c>)
 80003f4:	f7ff ff90 	bl	8000318 <UART_ESC_Code>
	UART_ESC_Code("21D"); // Move left 21 spaces
 80003f8:	480f      	ldr	r0, [pc, #60]	; (8000438 <main+0x80>)
 80003fa:	f7ff ff8d 	bl	8000318 <UART_ESC_Code>

	// Change the text to blinking mode
	UART_ESC_Code("5m");
 80003fe:	480f      	ldr	r0, [pc, #60]	; (800043c <main+0x84>)
 8000400:	f7ff ff8a 	bl	8000318 <UART_ESC_Code>

	// Print text
	UART_print("Reference Manual");
 8000404:	480e      	ldr	r0, [pc, #56]	; (8000440 <main+0x88>)
 8000406:	f7ff ff5f 	bl	80002c8 <UART_print>

	// Move cursor back to the top left position
	UART_ESC_Code("H");
 800040a:	480e      	ldr	r0, [pc, #56]	; (8000444 <main+0x8c>)
 800040c:	f7ff ff84 	bl	8000318 <UART_ESC_Code>

	// Remove character attributes (disable blinking text)
	UART_ESC_Code("0m");
 8000410:	480d      	ldr	r0, [pc, #52]	; (8000448 <main+0x90>)
 8000412:	f7ff ff81 	bl	8000318 <UART_ESC_Code>

	// Print text
	UART_print("Input: ");
 8000416:	480d      	ldr	r0, [pc, #52]	; (800044c <main+0x94>)
 8000418:	f7ff ff56 	bl	80002c8 <UART_print>
    // Main loop
    while (1) {
 800041c:	e7fe      	b.n	800041c <main+0x64>
 800041e:	bf00      	nop
 8000420:	40008000 	.word	0x40008000
 8000424:	08001680 	.word	0x08001680
 8000428:	08001684 	.word	0x08001684
 800042c:	08001688 	.word	0x08001688
 8000430:	0800168c 	.word	0x0800168c
 8000434:	080016a8 	.word	0x080016a8
 8000438:	080016ac 	.word	0x080016ac
 800043c:	080016b0 	.word	0x080016b0
 8000440:	080016b4 	.word	0x080016b4
 8000444:	080016c8 	.word	0x080016c8
 8000448:	080016cc 	.word	0x080016cc
 800044c:	080016d0 	.word	0x080016d0

08000450 <SystemClock_Config>:

    }
}

void SystemClock_Config(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b096      	sub	sp, #88	; 0x58
 8000454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000456:	f107 0314 	add.w	r3, r7, #20
 800045a:	2244      	movs	r2, #68	; 0x44
 800045c:	2100      	movs	r1, #0
 800045e:	4618      	mov	r0, r3
 8000460:	f001 f8cc 	bl	80015fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000464:	463b      	mov	r3, r7
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	609a      	str	r2, [r3, #8]
 800046e:	60da      	str	r2, [r3, #12]
 8000470:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000472:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000476:	f000 fa55 	bl	8000924 <HAL_PWREx_ControlVoltageScaling>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000480:	f000 f848 	bl	8000514 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000484:	f000 fa30 	bl	80008e8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000488:	4b21      	ldr	r3, [pc, #132]	; (8000510 <SystemClock_Config+0xc0>)
 800048a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800048e:	4a20      	ldr	r2, [pc, #128]	; (8000510 <SystemClock_Config+0xc0>)
 8000490:	f023 0318 	bic.w	r3, r3, #24
 8000494:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000498:	2314      	movs	r3, #20
 800049a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800049c:	2301      	movs	r3, #1
 800049e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004a0:	2301      	movs	r3, #1
 80004a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80004a4:	2300      	movs	r3, #0
 80004a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80004a8:	2360      	movs	r3, #96	; 0x60
 80004aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ac:	2302      	movs	r3, #2
 80004ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80004b0:	2301      	movs	r3, #1
 80004b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80004b4:	2301      	movs	r3, #1
 80004b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80004b8:	2328      	movs	r3, #40	; 0x28
 80004ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004bc:	2302      	movs	r3, #2
 80004be:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004c0:	2302      	movs	r3, #2
 80004c2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004c4:	2302      	movs	r3, #2
 80004c6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c8:	f107 0314 	add.w	r3, r7, #20
 80004cc:	4618      	mov	r0, r3
 80004ce:	f000 fa7f 	bl	80009d0 <HAL_RCC_OscConfig>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80004d8:	f000 f81c 	bl	8000514 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004dc:	230f      	movs	r3, #15
 80004de:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004e0:	2303      	movs	r3, #3
 80004e2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004e4:	2300      	movs	r3, #0
 80004e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004e8:	2300      	movs	r3, #0
 80004ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ec:	2300      	movs	r3, #0
 80004ee:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004f0:	463b      	mov	r3, r7
 80004f2:	2104      	movs	r1, #4
 80004f4:	4618      	mov	r0, r3
 80004f6:	f000 fe85 	bl	8001204 <HAL_RCC_ClockConfig>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000500:	f000 f808 	bl	8000514 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000504:	f001 f86a 	bl	80015dc <HAL_RCCEx_EnableMSIPLLMode>
}
 8000508:	bf00      	nop
 800050a:	3758      	adds	r7, #88	; 0x58
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40021000 	.word	0x40021000

08000514 <Error_Handler>:

void Error_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000518:	b672      	cpsid	i
}
 800051a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800051c:	e7fe      	b.n	800051c <Error_Handler+0x8>
	...

08000520 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000526:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <HAL_MspInit+0x44>)
 8000528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800052a:	4a0e      	ldr	r2, [pc, #56]	; (8000564 <HAL_MspInit+0x44>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6613      	str	r3, [r2, #96]	; 0x60
 8000532:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <HAL_MspInit+0x44>)
 8000534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <HAL_MspInit+0x44>)
 8000540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000542:	4a08      	ldr	r2, [pc, #32]	; (8000564 <HAL_MspInit+0x44>)
 8000544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000548:	6593      	str	r3, [r2, #88]	; 0x58
 800054a:	4b06      	ldr	r3, [pc, #24]	; (8000564 <HAL_MspInit+0x44>)
 800054c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800054e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000552:	603b      	str	r3, [r7, #0]
 8000554:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000556:	bf00      	nop
 8000558:	370c      	adds	r7, #12
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	40021000 	.word	0x40021000

08000568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800056c:	e7fe      	b.n	800056c <NMI_Handler+0x4>

0800056e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800056e:	b480      	push	{r7}
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000572:	e7fe      	b.n	8000572 <HardFault_Handler+0x4>

08000574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000578:	e7fe      	b.n	8000578 <MemManage_Handler+0x4>

0800057a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800057a:	b480      	push	{r7}
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800057e:	e7fe      	b.n	800057e <BusFault_Handler+0x4>

08000580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000584:	e7fe      	b.n	8000584 <UsageFault_Handler+0x4>

08000586 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800058a:	bf00      	nop
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr

08000594 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr

080005b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b4:	f000 f892 	bl	80006dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}

080005bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <SystemInit+0x20>)
 80005c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005c6:	4a05      	ldr	r2, [pc, #20]	; (80005dc <SystemInit+0x20>)
 80005c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000618 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005e4:	f7ff ffea 	bl	80005bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e8:	480c      	ldr	r0, [pc, #48]	; (800061c <LoopForever+0x6>)
  ldr r1, =_edata
 80005ea:	490d      	ldr	r1, [pc, #52]	; (8000620 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005ec:	4a0d      	ldr	r2, [pc, #52]	; (8000624 <LoopForever+0xe>)
  movs r3, #0
 80005ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f0:	e002      	b.n	80005f8 <LoopCopyDataInit>

080005f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f6:	3304      	adds	r3, #4

080005f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005fc:	d3f9      	bcc.n	80005f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fe:	4a0a      	ldr	r2, [pc, #40]	; (8000628 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000600:	4c0a      	ldr	r4, [pc, #40]	; (800062c <LoopForever+0x16>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000604:	e001      	b.n	800060a <LoopFillZerobss>

08000606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000608:	3204      	adds	r2, #4

0800060a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800060c:	d3fb      	bcc.n	8000606 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800060e:	f000 fffd 	bl	800160c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000612:	f7ff fed1 	bl	80003b8 <main>

08000616 <LoopForever>:

LoopForever:
    b LoopForever
 8000616:	e7fe      	b.n	8000616 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000618:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800061c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000620:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000624:	08001720 	.word	0x08001720
  ldr r2, =_sbss
 8000628:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800062c:	2000002c 	.word	0x2000002c

08000630 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000630:	e7fe      	b.n	8000630 <ADC1_2_IRQHandler>

08000632 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	b082      	sub	sp, #8
 8000636:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000638:	2300      	movs	r3, #0
 800063a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800063c:	2003      	movs	r0, #3
 800063e:	f000 f91f 	bl	8000880 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000642:	2000      	movs	r0, #0
 8000644:	f000 f80e 	bl	8000664 <HAL_InitTick>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d002      	beq.n	8000654 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800064e:	2301      	movs	r3, #1
 8000650:	71fb      	strb	r3, [r7, #7]
 8000652:	e001      	b.n	8000658 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000654:	f7ff ff64 	bl	8000520 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000658:	79fb      	ldrb	r3, [r7, #7]
}
 800065a:	4618      	mov	r0, r3
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800066c:	2300      	movs	r3, #0
 800066e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000670:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <HAL_InitTick+0x6c>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d023      	beq.n	80006c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000678:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <HAL_InitTick+0x70>)
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <HAL_InitTick+0x6c>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	4619      	mov	r1, r3
 8000682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000686:	fbb3 f3f1 	udiv	r3, r3, r1
 800068a:	fbb2 f3f3 	udiv	r3, r2, r3
 800068e:	4618      	mov	r0, r3
 8000690:	f000 f91d 	bl	80008ce <HAL_SYSTICK_Config>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d10f      	bne.n	80006ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2b0f      	cmp	r3, #15
 800069e:	d809      	bhi.n	80006b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006a0:	2200      	movs	r2, #0
 80006a2:	6879      	ldr	r1, [r7, #4]
 80006a4:	f04f 30ff 	mov.w	r0, #4294967295
 80006a8:	f000 f8f5 	bl	8000896 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006ac:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <HAL_InitTick+0x74>)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6013      	str	r3, [r2, #0]
 80006b2:	e007      	b.n	80006c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80006b4:	2301      	movs	r3, #1
 80006b6:	73fb      	strb	r3, [r7, #15]
 80006b8:	e004      	b.n	80006c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006ba:	2301      	movs	r3, #1
 80006bc:	73fb      	strb	r3, [r7, #15]
 80006be:	e001      	b.n	80006c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006c0:	2301      	movs	r3, #1
 80006c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000008 	.word	0x20000008
 80006d4:	20000000 	.word	0x20000000
 80006d8:	20000004 	.word	0x20000004

080006dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <HAL_IncTick+0x20>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	461a      	mov	r2, r3
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <HAL_IncTick+0x24>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4413      	add	r3, r2
 80006ec:	4a04      	ldr	r2, [pc, #16]	; (8000700 <HAL_IncTick+0x24>)
 80006ee:	6013      	str	r3, [r2, #0]
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	20000008 	.word	0x20000008
 8000700:	20000028 	.word	0x20000028

08000704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  return uwTick;
 8000708:	4b03      	ldr	r3, [pc, #12]	; (8000718 <HAL_GetTick+0x14>)
 800070a:	681b      	ldr	r3, [r3, #0]
}
 800070c:	4618      	mov	r0, r3
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	20000028 	.word	0x20000028

0800071c <__NVIC_SetPriorityGrouping>:
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <__NVIC_SetPriorityGrouping+0x44>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000738:	4013      	ands	r3, r2
 800073a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000744:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800074c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800074e:	4a04      	ldr	r2, [pc, #16]	; (8000760 <__NVIC_SetPriorityGrouping+0x44>)
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	60d3      	str	r3, [r2, #12]
}
 8000754:	bf00      	nop
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <__NVIC_GetPriorityGrouping>:
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <__NVIC_GetPriorityGrouping+0x18>)
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	0a1b      	lsrs	r3, r3, #8
 800076e:	f003 0307 	and.w	r3, r3, #7
}
 8000772:	4618      	mov	r0, r3
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	6039      	str	r1, [r7, #0]
 800078a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800078c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000790:	2b00      	cmp	r3, #0
 8000792:	db0a      	blt.n	80007aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	b2da      	uxtb	r2, r3
 8000798:	490c      	ldr	r1, [pc, #48]	; (80007cc <__NVIC_SetPriority+0x4c>)
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	0112      	lsls	r2, r2, #4
 80007a0:	b2d2      	uxtb	r2, r2
 80007a2:	440b      	add	r3, r1
 80007a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a8:	e00a      	b.n	80007c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4908      	ldr	r1, [pc, #32]	; (80007d0 <__NVIC_SetPriority+0x50>)
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	f003 030f 	and.w	r3, r3, #15
 80007b6:	3b04      	subs	r3, #4
 80007b8:	0112      	lsls	r2, r2, #4
 80007ba:	b2d2      	uxtb	r2, r2
 80007bc:	440b      	add	r3, r1
 80007be:	761a      	strb	r2, [r3, #24]
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	e000e100 	.word	0xe000e100
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b089      	sub	sp, #36	; 0x24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	f003 0307 	and.w	r3, r3, #7
 80007e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e8:	69fb      	ldr	r3, [r7, #28]
 80007ea:	f1c3 0307 	rsb	r3, r3, #7
 80007ee:	2b04      	cmp	r3, #4
 80007f0:	bf28      	it	cs
 80007f2:	2304      	movcs	r3, #4
 80007f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	3304      	adds	r3, #4
 80007fa:	2b06      	cmp	r3, #6
 80007fc:	d902      	bls.n	8000804 <NVIC_EncodePriority+0x30>
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	3b03      	subs	r3, #3
 8000802:	e000      	b.n	8000806 <NVIC_EncodePriority+0x32>
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000808:	f04f 32ff 	mov.w	r2, #4294967295
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	fa02 f303 	lsl.w	r3, r2, r3
 8000812:	43da      	mvns	r2, r3
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	401a      	ands	r2, r3
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800081c:	f04f 31ff 	mov.w	r1, #4294967295
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	fa01 f303 	lsl.w	r3, r1, r3
 8000826:	43d9      	mvns	r1, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800082c:	4313      	orrs	r3, r2
         );
}
 800082e:	4618      	mov	r0, r3
 8000830:	3724      	adds	r7, #36	; 0x24
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
	...

0800083c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3b01      	subs	r3, #1
 8000848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800084c:	d301      	bcc.n	8000852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800084e:	2301      	movs	r3, #1
 8000850:	e00f      	b.n	8000872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000852:	4a0a      	ldr	r2, [pc, #40]	; (800087c <SysTick_Config+0x40>)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	3b01      	subs	r3, #1
 8000858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800085a:	210f      	movs	r1, #15
 800085c:	f04f 30ff 	mov.w	r0, #4294967295
 8000860:	f7ff ff8e 	bl	8000780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <SysTick_Config+0x40>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800086a:	4b04      	ldr	r3, [pc, #16]	; (800087c <SysTick_Config+0x40>)
 800086c:	2207      	movs	r2, #7
 800086e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000870:	2300      	movs	r3, #0
}
 8000872:	4618      	mov	r0, r3
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	e000e010 	.word	0xe000e010

08000880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f7ff ff47 	bl	800071c <__NVIC_SetPriorityGrouping>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b086      	sub	sp, #24
 800089a:	af00      	add	r7, sp, #0
 800089c:	4603      	mov	r3, r0
 800089e:	60b9      	str	r1, [r7, #8]
 80008a0:	607a      	str	r2, [r7, #4]
 80008a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008a8:	f7ff ff5c 	bl	8000764 <__NVIC_GetPriorityGrouping>
 80008ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	68b9      	ldr	r1, [r7, #8]
 80008b2:	6978      	ldr	r0, [r7, #20]
 80008b4:	f7ff ff8e 	bl	80007d4 <NVIC_EncodePriority>
 80008b8:	4602      	mov	r2, r0
 80008ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008be:	4611      	mov	r1, r2
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff ff5d 	bl	8000780 <__NVIC_SetPriority>
}
 80008c6:	bf00      	nop
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff ffb0 	bl	800083c <SysTick_Config>
 80008dc:	4603      	mov	r3, r0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a04      	ldr	r2, [pc, #16]	; (8000904 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80008f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008f6:	6013      	str	r3, [r2, #0]
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	40007000 	.word	0x40007000

08000908 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800090c:	4b04      	ldr	r3, [pc, #16]	; (8000920 <HAL_PWREx_GetVoltageRange+0x18>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000914:	4618      	mov	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40007000 	.word	0x40007000

08000924 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000932:	d130      	bne.n	8000996 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000934:	4b23      	ldr	r3, [pc, #140]	; (80009c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800093c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000940:	d038      	beq.n	80009b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000942:	4b20      	ldr	r3, [pc, #128]	; (80009c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800094a:	4a1e      	ldr	r2, [pc, #120]	; (80009c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800094c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000950:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000952:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2232      	movs	r2, #50	; 0x32
 8000958:	fb02 f303 	mul.w	r3, r2, r3
 800095c:	4a1b      	ldr	r2, [pc, #108]	; (80009cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800095e:	fba2 2303 	umull	r2, r3, r2, r3
 8000962:	0c9b      	lsrs	r3, r3, #18
 8000964:	3301      	adds	r3, #1
 8000966:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000968:	e002      	b.n	8000970 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	3b01      	subs	r3, #1
 800096e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000972:	695b      	ldr	r3, [r3, #20]
 8000974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800097c:	d102      	bne.n	8000984 <HAL_PWREx_ControlVoltageScaling+0x60>
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d1f2      	bne.n	800096a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000986:	695b      	ldr	r3, [r3, #20]
 8000988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800098c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000990:	d110      	bne.n	80009b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000992:	2303      	movs	r3, #3
 8000994:	e00f      	b.n	80009b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800099e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009a2:	d007      	beq.n	80009b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80009a4:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80009ac:	4a05      	ldr	r2, [pc, #20]	; (80009c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80009ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3714      	adds	r7, #20
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40007000 	.word	0x40007000
 80009c8:	20000000 	.word	0x20000000
 80009cc:	431bde83 	.word	0x431bde83

080009d0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b088      	sub	sp, #32
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d102      	bne.n	80009e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	f000 bc08 	b.w	80011f4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80009e4:	4b96      	ldr	r3, [pc, #600]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	f003 030c 	and.w	r3, r3, #12
 80009ec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80009ee:	4b94      	ldr	r3, [pc, #592]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 80009f0:	68db      	ldr	r3, [r3, #12]
 80009f2:	f003 0303 	and.w	r3, r3, #3
 80009f6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f003 0310 	and.w	r3, r3, #16
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	f000 80e4 	beq.w	8000bce <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000a06:	69bb      	ldr	r3, [r7, #24]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d007      	beq.n	8000a1c <HAL_RCC_OscConfig+0x4c>
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	2b0c      	cmp	r3, #12
 8000a10:	f040 808b 	bne.w	8000b2a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	f040 8087 	bne.w	8000b2a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000a1c:	4b88      	ldr	r3, [pc, #544]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f003 0302 	and.w	r3, r3, #2
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d005      	beq.n	8000a34 <HAL_RCC_OscConfig+0x64>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d101      	bne.n	8000a34 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000a30:	2301      	movs	r3, #1
 8000a32:	e3df      	b.n	80011f4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6a1a      	ldr	r2, [r3, #32]
 8000a38:	4b81      	ldr	r3, [pc, #516]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f003 0308 	and.w	r3, r3, #8
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d004      	beq.n	8000a4e <HAL_RCC_OscConfig+0x7e>
 8000a44:	4b7e      	ldr	r3, [pc, #504]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a4c:	e005      	b.n	8000a5a <HAL_RCC_OscConfig+0x8a>
 8000a4e:	4b7c      	ldr	r3, [pc, #496]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 8000a50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000a54:	091b      	lsrs	r3, r3, #4
 8000a56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d223      	bcs.n	8000aa6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6a1b      	ldr	r3, [r3, #32]
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 fd5a 	bl	800151c <RCC_SetFlashLatencyFromMSIRange>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e3c0      	b.n	80011f4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a72:	4b73      	ldr	r3, [pc, #460]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a72      	ldr	r2, [pc, #456]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 8000a78:	f043 0308 	orr.w	r3, r3, #8
 8000a7c:	6013      	str	r3, [r2, #0]
 8000a7e:	4b70      	ldr	r3, [pc, #448]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6a1b      	ldr	r3, [r3, #32]
 8000a8a:	496d      	ldr	r1, [pc, #436]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a90:	4b6b      	ldr	r3, [pc, #428]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	69db      	ldr	r3, [r3, #28]
 8000a9c:	021b      	lsls	r3, r3, #8
 8000a9e:	4968      	ldr	r1, [pc, #416]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	604b      	str	r3, [r1, #4]
 8000aa4:	e025      	b.n	8000af2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000aa6:	4b66      	ldr	r3, [pc, #408]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a65      	ldr	r2, [pc, #404]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 8000aac:	f043 0308 	orr.w	r3, r3, #8
 8000ab0:	6013      	str	r3, [r2, #0]
 8000ab2:	4b63      	ldr	r3, [pc, #396]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6a1b      	ldr	r3, [r3, #32]
 8000abe:	4960      	ldr	r1, [pc, #384]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ac4:	4b5e      	ldr	r3, [pc, #376]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	69db      	ldr	r3, [r3, #28]
 8000ad0:	021b      	lsls	r3, r3, #8
 8000ad2:	495b      	ldr	r1, [pc, #364]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d109      	bne.n	8000af2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6a1b      	ldr	r3, [r3, #32]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 fd1a 	bl	800151c <RCC_SetFlashLatencyFromMSIRange>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e380      	b.n	80011f4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000af2:	f000 fc87 	bl	8001404 <HAL_RCC_GetSysClockFreq>
 8000af6:	4602      	mov	r2, r0
 8000af8:	4b51      	ldr	r3, [pc, #324]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	091b      	lsrs	r3, r3, #4
 8000afe:	f003 030f 	and.w	r3, r3, #15
 8000b02:	4950      	ldr	r1, [pc, #320]	; (8000c44 <HAL_RCC_OscConfig+0x274>)
 8000b04:	5ccb      	ldrb	r3, [r1, r3]
 8000b06:	f003 031f 	and.w	r3, r3, #31
 8000b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b0e:	4a4e      	ldr	r2, [pc, #312]	; (8000c48 <HAL_RCC_OscConfig+0x278>)
 8000b10:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000b12:	4b4e      	ldr	r3, [pc, #312]	; (8000c4c <HAL_RCC_OscConfig+0x27c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff fda4 	bl	8000664 <HAL_InitTick>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d052      	beq.n	8000bcc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
 8000b28:	e364      	b.n	80011f4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	699b      	ldr	r3, [r3, #24]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d032      	beq.n	8000b98 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000b32:	4b43      	ldr	r3, [pc, #268]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a42      	ldr	r2, [pc, #264]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000b3e:	f7ff fde1 	bl	8000704 <HAL_GetTick>
 8000b42:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000b44:	e008      	b.n	8000b58 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b46:	f7ff fddd 	bl	8000704 <HAL_GetTick>
 8000b4a:	4602      	mov	r2, r0
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	1ad3      	subs	r3, r2, r3
 8000b50:	2b02      	cmp	r3, #2
 8000b52:	d901      	bls.n	8000b58 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000b54:	2303      	movs	r3, #3
 8000b56:	e34d      	b.n	80011f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000b58:	4b39      	ldr	r3, [pc, #228]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f003 0302 	and.w	r3, r3, #2
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d0f0      	beq.n	8000b46 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b64:	4b36      	ldr	r3, [pc, #216]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a35      	ldr	r2, [pc, #212]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 8000b6a:	f043 0308 	orr.w	r3, r3, #8
 8000b6e:	6013      	str	r3, [r2, #0]
 8000b70:	4b33      	ldr	r3, [pc, #204]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6a1b      	ldr	r3, [r3, #32]
 8000b7c:	4930      	ldr	r1, [pc, #192]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b82:	4b2f      	ldr	r3, [pc, #188]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	021b      	lsls	r3, r3, #8
 8000b90:	492b      	ldr	r1, [pc, #172]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 8000b92:	4313      	orrs	r3, r2
 8000b94:	604b      	str	r3, [r1, #4]
 8000b96:	e01a      	b.n	8000bce <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000b98:	4b29      	ldr	r3, [pc, #164]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a28      	ldr	r2, [pc, #160]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 8000b9e:	f023 0301 	bic.w	r3, r3, #1
 8000ba2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ba4:	f7ff fdae 	bl	8000704 <HAL_GetTick>
 8000ba8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000baa:	e008      	b.n	8000bbe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000bac:	f7ff fdaa 	bl	8000704 <HAL_GetTick>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	d901      	bls.n	8000bbe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	e31a      	b.n	80011f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000bbe:	4b20      	ldr	r3, [pc, #128]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d1f0      	bne.n	8000bac <HAL_RCC_OscConfig+0x1dc>
 8000bca:	e000      	b.n	8000bce <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000bcc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d073      	beq.n	8000cc2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	2b08      	cmp	r3, #8
 8000bde:	d005      	beq.n	8000bec <HAL_RCC_OscConfig+0x21c>
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	2b0c      	cmp	r3, #12
 8000be4:	d10e      	bne.n	8000c04 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	2b03      	cmp	r3, #3
 8000bea:	d10b      	bne.n	8000c04 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d063      	beq.n	8000cc0 <HAL_RCC_OscConfig+0x2f0>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d15f      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	e2f7      	b.n	80011f4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c0c:	d106      	bne.n	8000c1c <HAL_RCC_OscConfig+0x24c>
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 8000c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c18:	6013      	str	r3, [r2, #0]
 8000c1a:	e025      	b.n	8000c68 <HAL_RCC_OscConfig+0x298>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c24:	d114      	bne.n	8000c50 <HAL_RCC_OscConfig+0x280>
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 8000c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c30:	6013      	str	r3, [r2, #0]
 8000c32:	4b03      	ldr	r3, [pc, #12]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a02      	ldr	r2, [pc, #8]	; (8000c40 <HAL_RCC_OscConfig+0x270>)
 8000c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c3c:	6013      	str	r3, [r2, #0]
 8000c3e:	e013      	b.n	8000c68 <HAL_RCC_OscConfig+0x298>
 8000c40:	40021000 	.word	0x40021000
 8000c44:	080016d8 	.word	0x080016d8
 8000c48:	20000000 	.word	0x20000000
 8000c4c:	20000004 	.word	0x20000004
 8000c50:	4ba0      	ldr	r3, [pc, #640]	; (8000ed4 <HAL_RCC_OscConfig+0x504>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a9f      	ldr	r2, [pc, #636]	; (8000ed4 <HAL_RCC_OscConfig+0x504>)
 8000c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c5a:	6013      	str	r3, [r2, #0]
 8000c5c:	4b9d      	ldr	r3, [pc, #628]	; (8000ed4 <HAL_RCC_OscConfig+0x504>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a9c      	ldr	r2, [pc, #624]	; (8000ed4 <HAL_RCC_OscConfig+0x504>)
 8000c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d013      	beq.n	8000c98 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c70:	f7ff fd48 	bl	8000704 <HAL_GetTick>
 8000c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c76:	e008      	b.n	8000c8a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c78:	f7ff fd44 	bl	8000704 <HAL_GetTick>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	2b64      	cmp	r3, #100	; 0x64
 8000c84:	d901      	bls.n	8000c8a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000c86:	2303      	movs	r3, #3
 8000c88:	e2b4      	b.n	80011f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c8a:	4b92      	ldr	r3, [pc, #584]	; (8000ed4 <HAL_RCC_OscConfig+0x504>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d0f0      	beq.n	8000c78 <HAL_RCC_OscConfig+0x2a8>
 8000c96:	e014      	b.n	8000cc2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c98:	f7ff fd34 	bl	8000704 <HAL_GetTick>
 8000c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c9e:	e008      	b.n	8000cb2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ca0:	f7ff fd30 	bl	8000704 <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	2b64      	cmp	r3, #100	; 0x64
 8000cac:	d901      	bls.n	8000cb2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	e2a0      	b.n	80011f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000cb2:	4b88      	ldr	r3, [pc, #544]	; (8000ed4 <HAL_RCC_OscConfig+0x504>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d1f0      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x2d0>
 8000cbe:	e000      	b.n	8000cc2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d060      	beq.n	8000d90 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	2b04      	cmp	r3, #4
 8000cd2:	d005      	beq.n	8000ce0 <HAL_RCC_OscConfig+0x310>
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	2b0c      	cmp	r3, #12
 8000cd8:	d119      	bne.n	8000d0e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d116      	bne.n	8000d0e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ce0:	4b7c      	ldr	r3, [pc, #496]	; (8000ed4 <HAL_RCC_OscConfig+0x504>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d005      	beq.n	8000cf8 <HAL_RCC_OscConfig+0x328>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d101      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	e27d      	b.n	80011f4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cf8:	4b76      	ldr	r3, [pc, #472]	; (8000ed4 <HAL_RCC_OscConfig+0x504>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	691b      	ldr	r3, [r3, #16]
 8000d04:	061b      	lsls	r3, r3, #24
 8000d06:	4973      	ldr	r1, [pc, #460]	; (8000ed4 <HAL_RCC_OscConfig+0x504>)
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d0c:	e040      	b.n	8000d90 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d023      	beq.n	8000d5e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d16:	4b6f      	ldr	r3, [pc, #444]	; (8000ed4 <HAL_RCC_OscConfig+0x504>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a6e      	ldr	r2, [pc, #440]	; (8000ed4 <HAL_RCC_OscConfig+0x504>)
 8000d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d22:	f7ff fcef 	bl	8000704 <HAL_GetTick>
 8000d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d28:	e008      	b.n	8000d3c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d2a:	f7ff fceb 	bl	8000704 <HAL_GetTick>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d901      	bls.n	8000d3c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	e25b      	b.n	80011f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d3c:	4b65      	ldr	r3, [pc, #404]	; (8000ed4 <HAL_RCC_OscConfig+0x504>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d0f0      	beq.n	8000d2a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d48:	4b62      	ldr	r3, [pc, #392]	; (8000ed4 <HAL_RCC_OscConfig+0x504>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	691b      	ldr	r3, [r3, #16]
 8000d54:	061b      	lsls	r3, r3, #24
 8000d56:	495f      	ldr	r1, [pc, #380]	; (8000ed4 <HAL_RCC_OscConfig+0x504>)
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	604b      	str	r3, [r1, #4]
 8000d5c:	e018      	b.n	8000d90 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d5e:	4b5d      	ldr	r3, [pc, #372]	; (8000ed4 <HAL_RCC_OscConfig+0x504>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a5c      	ldr	r2, [pc, #368]	; (8000ed4 <HAL_RCC_OscConfig+0x504>)
 8000d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d6a:	f7ff fccb 	bl	8000704 <HAL_GetTick>
 8000d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d70:	e008      	b.n	8000d84 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d72:	f7ff fcc7 	bl	8000704 <HAL_GetTick>
 8000d76:	4602      	mov	r2, r0
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d901      	bls.n	8000d84 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000d80:	2303      	movs	r3, #3
 8000d82:	e237      	b.n	80011f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d84:	4b53      	ldr	r3, [pc, #332]	; (8000ed4 <HAL_RCC_OscConfig+0x504>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d1f0      	bne.n	8000d72 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f003 0308 	and.w	r3, r3, #8
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d03c      	beq.n	8000e16 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	695b      	ldr	r3, [r3, #20]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d01c      	beq.n	8000dde <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000da4:	4b4b      	ldr	r3, [pc, #300]	; (8000ed4 <HAL_RCC_OscConfig+0x504>)
 8000da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000daa:	4a4a      	ldr	r2, [pc, #296]	; (8000ed4 <HAL_RCC_OscConfig+0x504>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000db4:	f7ff fca6 	bl	8000704 <HAL_GetTick>
 8000db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000dba:	e008      	b.n	8000dce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dbc:	f7ff fca2 	bl	8000704 <HAL_GetTick>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d901      	bls.n	8000dce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e212      	b.n	80011f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000dce:	4b41      	ldr	r3, [pc, #260]	; (8000ed4 <HAL_RCC_OscConfig+0x504>)
 8000dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000dd4:	f003 0302 	and.w	r3, r3, #2
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d0ef      	beq.n	8000dbc <HAL_RCC_OscConfig+0x3ec>
 8000ddc:	e01b      	b.n	8000e16 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dde:	4b3d      	ldr	r3, [pc, #244]	; (8000ed4 <HAL_RCC_OscConfig+0x504>)
 8000de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000de4:	4a3b      	ldr	r2, [pc, #236]	; (8000ed4 <HAL_RCC_OscConfig+0x504>)
 8000de6:	f023 0301 	bic.w	r3, r3, #1
 8000dea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dee:	f7ff fc89 	bl	8000704 <HAL_GetTick>
 8000df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000df4:	e008      	b.n	8000e08 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000df6:	f7ff fc85 	bl	8000704 <HAL_GetTick>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d901      	bls.n	8000e08 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000e04:	2303      	movs	r3, #3
 8000e06:	e1f5      	b.n	80011f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000e08:	4b32      	ldr	r3, [pc, #200]	; (8000ed4 <HAL_RCC_OscConfig+0x504>)
 8000e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1ef      	bne.n	8000df6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 0304 	and.w	r3, r3, #4
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f000 80a6 	beq.w	8000f70 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e24:	2300      	movs	r3, #0
 8000e26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000e28:	4b2a      	ldr	r3, [pc, #168]	; (8000ed4 <HAL_RCC_OscConfig+0x504>)
 8000e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d10d      	bne.n	8000e50 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e34:	4b27      	ldr	r3, [pc, #156]	; (8000ed4 <HAL_RCC_OscConfig+0x504>)
 8000e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e38:	4a26      	ldr	r2, [pc, #152]	; (8000ed4 <HAL_RCC_OscConfig+0x504>)
 8000e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e3e:	6593      	str	r3, [r2, #88]	; 0x58
 8000e40:	4b24      	ldr	r3, [pc, #144]	; (8000ed4 <HAL_RCC_OscConfig+0x504>)
 8000e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e50:	4b21      	ldr	r3, [pc, #132]	; (8000ed8 <HAL_RCC_OscConfig+0x508>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d118      	bne.n	8000e8e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000e5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <HAL_RCC_OscConfig+0x508>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a1d      	ldr	r2, [pc, #116]	; (8000ed8 <HAL_RCC_OscConfig+0x508>)
 8000e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e68:	f7ff fc4c 	bl	8000704 <HAL_GetTick>
 8000e6c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e6e:	e008      	b.n	8000e82 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e70:	f7ff fc48 	bl	8000704 <HAL_GetTick>
 8000e74:	4602      	mov	r2, r0
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d901      	bls.n	8000e82 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e1b8      	b.n	80011f4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <HAL_RCC_OscConfig+0x508>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d0f0      	beq.n	8000e70 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d108      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x4d8>
 8000e96:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <HAL_RCC_OscConfig+0x504>)
 8000e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <HAL_RCC_OscConfig+0x504>)
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000ea6:	e029      	b.n	8000efc <HAL_RCC_OscConfig+0x52c>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	2b05      	cmp	r3, #5
 8000eae:	d115      	bne.n	8000edc <HAL_RCC_OscConfig+0x50c>
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_RCC_OscConfig+0x504>)
 8000eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000eb6:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <HAL_RCC_OscConfig+0x504>)
 8000eb8:	f043 0304 	orr.w	r3, r3, #4
 8000ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <HAL_RCC_OscConfig+0x504>)
 8000ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ec6:	4a03      	ldr	r2, [pc, #12]	; (8000ed4 <HAL_RCC_OscConfig+0x504>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000ed0:	e014      	b.n	8000efc <HAL_RCC_OscConfig+0x52c>
 8000ed2:	bf00      	nop
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40007000 	.word	0x40007000
 8000edc:	4b9d      	ldr	r3, [pc, #628]	; (8001154 <HAL_RCC_OscConfig+0x784>)
 8000ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ee2:	4a9c      	ldr	r2, [pc, #624]	; (8001154 <HAL_RCC_OscConfig+0x784>)
 8000ee4:	f023 0301 	bic.w	r3, r3, #1
 8000ee8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000eec:	4b99      	ldr	r3, [pc, #612]	; (8001154 <HAL_RCC_OscConfig+0x784>)
 8000eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ef2:	4a98      	ldr	r2, [pc, #608]	; (8001154 <HAL_RCC_OscConfig+0x784>)
 8000ef4:	f023 0304 	bic.w	r3, r3, #4
 8000ef8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d016      	beq.n	8000f32 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f04:	f7ff fbfe 	bl	8000704 <HAL_GetTick>
 8000f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000f0a:	e00a      	b.n	8000f22 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f0c:	f7ff fbfa 	bl	8000704 <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d901      	bls.n	8000f22 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e168      	b.n	80011f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000f22:	4b8c      	ldr	r3, [pc, #560]	; (8001154 <HAL_RCC_OscConfig+0x784>)
 8000f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f28:	f003 0302 	and.w	r3, r3, #2
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d0ed      	beq.n	8000f0c <HAL_RCC_OscConfig+0x53c>
 8000f30:	e015      	b.n	8000f5e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f32:	f7ff fbe7 	bl	8000704 <HAL_GetTick>
 8000f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000f38:	e00a      	b.n	8000f50 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f3a:	f7ff fbe3 	bl	8000704 <HAL_GetTick>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d901      	bls.n	8000f50 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e151      	b.n	80011f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000f50:	4b80      	ldr	r3, [pc, #512]	; (8001154 <HAL_RCC_OscConfig+0x784>)
 8000f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1ed      	bne.n	8000f3a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f5e:	7ffb      	ldrb	r3, [r7, #31]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d105      	bne.n	8000f70 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f64:	4b7b      	ldr	r3, [pc, #492]	; (8001154 <HAL_RCC_OscConfig+0x784>)
 8000f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f68:	4a7a      	ldr	r2, [pc, #488]	; (8001154 <HAL_RCC_OscConfig+0x784>)
 8000f6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f6e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 0320 	and.w	r3, r3, #32
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d03c      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d01c      	beq.n	8000fbe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000f84:	4b73      	ldr	r3, [pc, #460]	; (8001154 <HAL_RCC_OscConfig+0x784>)
 8000f86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f8a:	4a72      	ldr	r2, [pc, #456]	; (8001154 <HAL_RCC_OscConfig+0x784>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f94:	f7ff fbb6 	bl	8000704 <HAL_GetTick>
 8000f98:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000f9a:	e008      	b.n	8000fae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000f9c:	f7ff fbb2 	bl	8000704 <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d901      	bls.n	8000fae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e122      	b.n	80011f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000fae:	4b69      	ldr	r3, [pc, #420]	; (8001154 <HAL_RCC_OscConfig+0x784>)
 8000fb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d0ef      	beq.n	8000f9c <HAL_RCC_OscConfig+0x5cc>
 8000fbc:	e01b      	b.n	8000ff6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000fbe:	4b65      	ldr	r3, [pc, #404]	; (8001154 <HAL_RCC_OscConfig+0x784>)
 8000fc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000fc4:	4a63      	ldr	r2, [pc, #396]	; (8001154 <HAL_RCC_OscConfig+0x784>)
 8000fc6:	f023 0301 	bic.w	r3, r3, #1
 8000fca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fce:	f7ff fb99 	bl	8000704 <HAL_GetTick>
 8000fd2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000fd4:	e008      	b.n	8000fe8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000fd6:	f7ff fb95 	bl	8000704 <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d901      	bls.n	8000fe8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e105      	b.n	80011f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000fe8:	4b5a      	ldr	r3, [pc, #360]	; (8001154 <HAL_RCC_OscConfig+0x784>)
 8000fea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d1ef      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f000 80f9 	beq.w	80011f2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001004:	2b02      	cmp	r3, #2
 8001006:	f040 80cf 	bne.w	80011a8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800100a:	4b52      	ldr	r3, [pc, #328]	; (8001154 <HAL_RCC_OscConfig+0x784>)
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	f003 0203 	and.w	r2, r3, #3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800101a:	429a      	cmp	r2, r3
 800101c:	d12c      	bne.n	8001078 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001028:	3b01      	subs	r3, #1
 800102a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800102c:	429a      	cmp	r2, r3
 800102e:	d123      	bne.n	8001078 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800103a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800103c:	429a      	cmp	r2, r3
 800103e:	d11b      	bne.n	8001078 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800104a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800104c:	429a      	cmp	r2, r3
 800104e:	d113      	bne.n	8001078 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800105a:	085b      	lsrs	r3, r3, #1
 800105c:	3b01      	subs	r3, #1
 800105e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001060:	429a      	cmp	r2, r3
 8001062:	d109      	bne.n	8001078 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	085b      	lsrs	r3, r3, #1
 8001070:	3b01      	subs	r3, #1
 8001072:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001074:	429a      	cmp	r2, r3
 8001076:	d071      	beq.n	800115c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	2b0c      	cmp	r3, #12
 800107c:	d068      	beq.n	8001150 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800107e:	4b35      	ldr	r3, [pc, #212]	; (8001154 <HAL_RCC_OscConfig+0x784>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d105      	bne.n	8001096 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800108a:	4b32      	ldr	r3, [pc, #200]	; (8001154 <HAL_RCC_OscConfig+0x784>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e0ac      	b.n	80011f4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800109a:	4b2e      	ldr	r3, [pc, #184]	; (8001154 <HAL_RCC_OscConfig+0x784>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a2d      	ldr	r2, [pc, #180]	; (8001154 <HAL_RCC_OscConfig+0x784>)
 80010a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80010a4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80010a6:	f7ff fb2d 	bl	8000704 <HAL_GetTick>
 80010aa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80010ac:	e008      	b.n	80010c0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ae:	f7ff fb29 	bl	8000704 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d901      	bls.n	80010c0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e099      	b.n	80011f4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80010c0:	4b24      	ldr	r3, [pc, #144]	; (8001154 <HAL_RCC_OscConfig+0x784>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d1f0      	bne.n	80010ae <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010cc:	4b21      	ldr	r3, [pc, #132]	; (8001154 <HAL_RCC_OscConfig+0x784>)
 80010ce:	68da      	ldr	r2, [r3, #12]
 80010d0:	4b21      	ldr	r3, [pc, #132]	; (8001158 <HAL_RCC_OscConfig+0x788>)
 80010d2:	4013      	ands	r3, r2
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80010dc:	3a01      	subs	r2, #1
 80010de:	0112      	lsls	r2, r2, #4
 80010e0:	4311      	orrs	r1, r2
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80010e6:	0212      	lsls	r2, r2, #8
 80010e8:	4311      	orrs	r1, r2
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80010ee:	0852      	lsrs	r2, r2, #1
 80010f0:	3a01      	subs	r2, #1
 80010f2:	0552      	lsls	r2, r2, #21
 80010f4:	4311      	orrs	r1, r2
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80010fa:	0852      	lsrs	r2, r2, #1
 80010fc:	3a01      	subs	r2, #1
 80010fe:	0652      	lsls	r2, r2, #25
 8001100:	4311      	orrs	r1, r2
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001106:	06d2      	lsls	r2, r2, #27
 8001108:	430a      	orrs	r2, r1
 800110a:	4912      	ldr	r1, [pc, #72]	; (8001154 <HAL_RCC_OscConfig+0x784>)
 800110c:	4313      	orrs	r3, r2
 800110e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001110:	4b10      	ldr	r3, [pc, #64]	; (8001154 <HAL_RCC_OscConfig+0x784>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a0f      	ldr	r2, [pc, #60]	; (8001154 <HAL_RCC_OscConfig+0x784>)
 8001116:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800111a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800111c:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <HAL_RCC_OscConfig+0x784>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	4a0c      	ldr	r2, [pc, #48]	; (8001154 <HAL_RCC_OscConfig+0x784>)
 8001122:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001126:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001128:	f7ff faec 	bl	8000704 <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800112e:	e008      	b.n	8001142 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001130:	f7ff fae8 	bl	8000704 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e058      	b.n	80011f4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001142:	4b04      	ldr	r3, [pc, #16]	; (8001154 <HAL_RCC_OscConfig+0x784>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d0f0      	beq.n	8001130 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800114e:	e050      	b.n	80011f2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e04f      	b.n	80011f4 <HAL_RCC_OscConfig+0x824>
 8001154:	40021000 	.word	0x40021000
 8001158:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800115c:	4b27      	ldr	r3, [pc, #156]	; (80011fc <HAL_RCC_OscConfig+0x82c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d144      	bne.n	80011f2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001168:	4b24      	ldr	r3, [pc, #144]	; (80011fc <HAL_RCC_OscConfig+0x82c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a23      	ldr	r2, [pc, #140]	; (80011fc <HAL_RCC_OscConfig+0x82c>)
 800116e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001172:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001174:	4b21      	ldr	r3, [pc, #132]	; (80011fc <HAL_RCC_OscConfig+0x82c>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	4a20      	ldr	r2, [pc, #128]	; (80011fc <HAL_RCC_OscConfig+0x82c>)
 800117a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800117e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001180:	f7ff fac0 	bl	8000704 <HAL_GetTick>
 8001184:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001188:	f7ff fabc 	bl	8000704 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e02c      	b.n	80011f4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <HAL_RCC_OscConfig+0x82c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d0f0      	beq.n	8001188 <HAL_RCC_OscConfig+0x7b8>
 80011a6:	e024      	b.n	80011f2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	2b0c      	cmp	r3, #12
 80011ac:	d01f      	beq.n	80011ee <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ae:	4b13      	ldr	r3, [pc, #76]	; (80011fc <HAL_RCC_OscConfig+0x82c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a12      	ldr	r2, [pc, #72]	; (80011fc <HAL_RCC_OscConfig+0x82c>)
 80011b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ba:	f7ff faa3 	bl	8000704 <HAL_GetTick>
 80011be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011c0:	e008      	b.n	80011d4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011c2:	f7ff fa9f 	bl	8000704 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e00f      	b.n	80011f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011d4:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HAL_RCC_OscConfig+0x82c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1f0      	bne.n	80011c2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_RCC_OscConfig+0x82c>)
 80011e2:	68da      	ldr	r2, [r3, #12]
 80011e4:	4905      	ldr	r1, [pc, #20]	; (80011fc <HAL_RCC_OscConfig+0x82c>)
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_RCC_OscConfig+0x830>)
 80011e8:	4013      	ands	r3, r2
 80011ea:	60cb      	str	r3, [r1, #12]
 80011ec:	e001      	b.n	80011f2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80011f2:	2300      	movs	r3, #0
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3720      	adds	r7, #32
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40021000 	.word	0x40021000
 8001200:	feeefffc 	.word	0xfeeefffc

08001204 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d101      	bne.n	8001218 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e0e7      	b.n	80013e8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001218:	4b75      	ldr	r3, [pc, #468]	; (80013f0 <HAL_RCC_ClockConfig+0x1ec>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0307 	and.w	r3, r3, #7
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	429a      	cmp	r2, r3
 8001224:	d910      	bls.n	8001248 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001226:	4b72      	ldr	r3, [pc, #456]	; (80013f0 <HAL_RCC_ClockConfig+0x1ec>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f023 0207 	bic.w	r2, r3, #7
 800122e:	4970      	ldr	r1, [pc, #448]	; (80013f0 <HAL_RCC_ClockConfig+0x1ec>)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	4313      	orrs	r3, r2
 8001234:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001236:	4b6e      	ldr	r3, [pc, #440]	; (80013f0 <HAL_RCC_ClockConfig+0x1ec>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	429a      	cmp	r2, r3
 8001242:	d001      	beq.n	8001248 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e0cf      	b.n	80013e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d010      	beq.n	8001276 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	4b66      	ldr	r3, [pc, #408]	; (80013f4 <HAL_RCC_ClockConfig+0x1f0>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001260:	429a      	cmp	r2, r3
 8001262:	d908      	bls.n	8001276 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001264:	4b63      	ldr	r3, [pc, #396]	; (80013f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	4960      	ldr	r1, [pc, #384]	; (80013f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001272:	4313      	orrs	r3, r2
 8001274:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	2b00      	cmp	r3, #0
 8001280:	d04c      	beq.n	800131c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b03      	cmp	r3, #3
 8001288:	d107      	bne.n	800129a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800128a:	4b5a      	ldr	r3, [pc, #360]	; (80013f4 <HAL_RCC_ClockConfig+0x1f0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d121      	bne.n	80012da <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e0a6      	b.n	80013e8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d107      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012a2:	4b54      	ldr	r3, [pc, #336]	; (80013f4 <HAL_RCC_ClockConfig+0x1f0>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d115      	bne.n	80012da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e09a      	b.n	80013e8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d107      	bne.n	80012ca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012ba:	4b4e      	ldr	r3, [pc, #312]	; (80013f4 <HAL_RCC_ClockConfig+0x1f0>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d109      	bne.n	80012da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e08e      	b.n	80013e8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012ca:	4b4a      	ldr	r3, [pc, #296]	; (80013f4 <HAL_RCC_ClockConfig+0x1f0>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d101      	bne.n	80012da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e086      	b.n	80013e8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80012da:	4b46      	ldr	r3, [pc, #280]	; (80013f4 <HAL_RCC_ClockConfig+0x1f0>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f023 0203 	bic.w	r2, r3, #3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	4943      	ldr	r1, [pc, #268]	; (80013f4 <HAL_RCC_ClockConfig+0x1f0>)
 80012e8:	4313      	orrs	r3, r2
 80012ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80012ec:	f7ff fa0a 	bl	8000704 <HAL_GetTick>
 80012f0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012f2:	e00a      	b.n	800130a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012f4:	f7ff fa06 	bl	8000704 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001302:	4293      	cmp	r3, r2
 8001304:	d901      	bls.n	800130a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e06e      	b.n	80013e8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800130a:	4b3a      	ldr	r3, [pc, #232]	; (80013f4 <HAL_RCC_ClockConfig+0x1f0>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 020c 	and.w	r2, r3, #12
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	429a      	cmp	r2, r3
 800131a:	d1eb      	bne.n	80012f4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d010      	beq.n	800134a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689a      	ldr	r2, [r3, #8]
 800132c:	4b31      	ldr	r3, [pc, #196]	; (80013f4 <HAL_RCC_ClockConfig+0x1f0>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001334:	429a      	cmp	r2, r3
 8001336:	d208      	bcs.n	800134a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001338:	4b2e      	ldr	r3, [pc, #184]	; (80013f4 <HAL_RCC_ClockConfig+0x1f0>)
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	492b      	ldr	r1, [pc, #172]	; (80013f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001346:	4313      	orrs	r3, r2
 8001348:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800134a:	4b29      	ldr	r3, [pc, #164]	; (80013f0 <HAL_RCC_ClockConfig+0x1ec>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	429a      	cmp	r2, r3
 8001356:	d210      	bcs.n	800137a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001358:	4b25      	ldr	r3, [pc, #148]	; (80013f0 <HAL_RCC_ClockConfig+0x1ec>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f023 0207 	bic.w	r2, r3, #7
 8001360:	4923      	ldr	r1, [pc, #140]	; (80013f0 <HAL_RCC_ClockConfig+0x1ec>)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	4313      	orrs	r3, r2
 8001366:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001368:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <HAL_RCC_ClockConfig+0x1ec>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0307 	and.w	r3, r3, #7
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	429a      	cmp	r2, r3
 8001374:	d001      	beq.n	800137a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e036      	b.n	80013e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	2b00      	cmp	r3, #0
 8001384:	d008      	beq.n	8001398 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001386:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	4918      	ldr	r1, [pc, #96]	; (80013f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001394:	4313      	orrs	r3, r2
 8001396:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0308 	and.w	r3, r3, #8
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d009      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013a4:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <HAL_RCC_ClockConfig+0x1f0>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	4910      	ldr	r1, [pc, #64]	; (80013f4 <HAL_RCC_ClockConfig+0x1f0>)
 80013b4:	4313      	orrs	r3, r2
 80013b6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013b8:	f000 f824 	bl	8001404 <HAL_RCC_GetSysClockFreq>
 80013bc:	4602      	mov	r2, r0
 80013be:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <HAL_RCC_ClockConfig+0x1f0>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	091b      	lsrs	r3, r3, #4
 80013c4:	f003 030f 	and.w	r3, r3, #15
 80013c8:	490b      	ldr	r1, [pc, #44]	; (80013f8 <HAL_RCC_ClockConfig+0x1f4>)
 80013ca:	5ccb      	ldrb	r3, [r1, r3]
 80013cc:	f003 031f 	and.w	r3, r3, #31
 80013d0:	fa22 f303 	lsr.w	r3, r2, r3
 80013d4:	4a09      	ldr	r2, [pc, #36]	; (80013fc <HAL_RCC_ClockConfig+0x1f8>)
 80013d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <HAL_RCC_ClockConfig+0x1fc>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f941 	bl	8000664 <HAL_InitTick>
 80013e2:	4603      	mov	r3, r0
 80013e4:	72fb      	strb	r3, [r7, #11]

  return status;
 80013e6:	7afb      	ldrb	r3, [r7, #11]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40022000 	.word	0x40022000
 80013f4:	40021000 	.word	0x40021000
 80013f8:	080016d8 	.word	0x080016d8
 80013fc:	20000000 	.word	0x20000000
 8001400:	20000004 	.word	0x20000004

08001404 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001404:	b480      	push	{r7}
 8001406:	b089      	sub	sp, #36	; 0x24
 8001408:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
 800140e:	2300      	movs	r3, #0
 8001410:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001412:	4b3e      	ldr	r3, [pc, #248]	; (800150c <HAL_RCC_GetSysClockFreq+0x108>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 030c 	and.w	r3, r3, #12
 800141a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800141c:	4b3b      	ldr	r3, [pc, #236]	; (800150c <HAL_RCC_GetSysClockFreq+0x108>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d005      	beq.n	8001438 <HAL_RCC_GetSysClockFreq+0x34>
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	2b0c      	cmp	r3, #12
 8001430:	d121      	bne.n	8001476 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d11e      	bne.n	8001476 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001438:	4b34      	ldr	r3, [pc, #208]	; (800150c <HAL_RCC_GetSysClockFreq+0x108>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0308 	and.w	r3, r3, #8
 8001440:	2b00      	cmp	r3, #0
 8001442:	d107      	bne.n	8001454 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001444:	4b31      	ldr	r3, [pc, #196]	; (800150c <HAL_RCC_GetSysClockFreq+0x108>)
 8001446:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800144a:	0a1b      	lsrs	r3, r3, #8
 800144c:	f003 030f 	and.w	r3, r3, #15
 8001450:	61fb      	str	r3, [r7, #28]
 8001452:	e005      	b.n	8001460 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001454:	4b2d      	ldr	r3, [pc, #180]	; (800150c <HAL_RCC_GetSysClockFreq+0x108>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	091b      	lsrs	r3, r3, #4
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001460:	4a2b      	ldr	r2, [pc, #172]	; (8001510 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001468:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d10d      	bne.n	800148c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001474:	e00a      	b.n	800148c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	2b04      	cmp	r3, #4
 800147a:	d102      	bne.n	8001482 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800147c:	4b25      	ldr	r3, [pc, #148]	; (8001514 <HAL_RCC_GetSysClockFreq+0x110>)
 800147e:	61bb      	str	r3, [r7, #24]
 8001480:	e004      	b.n	800148c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	2b08      	cmp	r3, #8
 8001486:	d101      	bne.n	800148c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001488:	4b23      	ldr	r3, [pc, #140]	; (8001518 <HAL_RCC_GetSysClockFreq+0x114>)
 800148a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	2b0c      	cmp	r3, #12
 8001490:	d134      	bne.n	80014fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001492:	4b1e      	ldr	r3, [pc, #120]	; (800150c <HAL_RCC_GetSysClockFreq+0x108>)
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d003      	beq.n	80014aa <HAL_RCC_GetSysClockFreq+0xa6>
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	2b03      	cmp	r3, #3
 80014a6:	d003      	beq.n	80014b0 <HAL_RCC_GetSysClockFreq+0xac>
 80014a8:	e005      	b.n	80014b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80014aa:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <HAL_RCC_GetSysClockFreq+0x110>)
 80014ac:	617b      	str	r3, [r7, #20]
      break;
 80014ae:	e005      	b.n	80014bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80014b0:	4b19      	ldr	r3, [pc, #100]	; (8001518 <HAL_RCC_GetSysClockFreq+0x114>)
 80014b2:	617b      	str	r3, [r7, #20]
      break;
 80014b4:	e002      	b.n	80014bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	617b      	str	r3, [r7, #20]
      break;
 80014ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80014bc:	4b13      	ldr	r3, [pc, #76]	; (800150c <HAL_RCC_GetSysClockFreq+0x108>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	091b      	lsrs	r3, r3, #4
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	3301      	adds	r3, #1
 80014c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <HAL_RCC_GetSysClockFreq+0x108>)
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	0a1b      	lsrs	r3, r3, #8
 80014d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014d4:	697a      	ldr	r2, [r7, #20]
 80014d6:	fb03 f202 	mul.w	r2, r3, r2
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80014e2:	4b0a      	ldr	r3, [pc, #40]	; (800150c <HAL_RCC_GetSysClockFreq+0x108>)
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	0e5b      	lsrs	r3, r3, #25
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	3301      	adds	r3, #1
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80014fc:	69bb      	ldr	r3, [r7, #24]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3724      	adds	r7, #36	; 0x24
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40021000 	.word	0x40021000
 8001510:	080016e8 	.word	0x080016e8
 8001514:	00f42400 	.word	0x00f42400
 8001518:	007a1200 	.word	0x007a1200

0800151c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001524:	2300      	movs	r3, #0
 8001526:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001528:	4b2a      	ldr	r3, [pc, #168]	; (80015d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800152a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001534:	f7ff f9e8 	bl	8000908 <HAL_PWREx_GetVoltageRange>
 8001538:	6178      	str	r0, [r7, #20]
 800153a:	e014      	b.n	8001566 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800153c:	4b25      	ldr	r3, [pc, #148]	; (80015d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800153e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001540:	4a24      	ldr	r2, [pc, #144]	; (80015d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001546:	6593      	str	r3, [r2, #88]	; 0x58
 8001548:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800154a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001554:	f7ff f9d8 	bl	8000908 <HAL_PWREx_GetVoltageRange>
 8001558:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800155a:	4b1e      	ldr	r3, [pc, #120]	; (80015d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800155c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155e:	4a1d      	ldr	r2, [pc, #116]	; (80015d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001564:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800156c:	d10b      	bne.n	8001586 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b80      	cmp	r3, #128	; 0x80
 8001572:	d919      	bls.n	80015a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2ba0      	cmp	r3, #160	; 0xa0
 8001578:	d902      	bls.n	8001580 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800157a:	2302      	movs	r3, #2
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	e013      	b.n	80015a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001580:	2301      	movs	r3, #1
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	e010      	b.n	80015a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b80      	cmp	r3, #128	; 0x80
 800158a:	d902      	bls.n	8001592 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800158c:	2303      	movs	r3, #3
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	e00a      	b.n	80015a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b80      	cmp	r3, #128	; 0x80
 8001596:	d102      	bne.n	800159e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001598:	2302      	movs	r3, #2
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	e004      	b.n	80015a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b70      	cmp	r3, #112	; 0x70
 80015a2:	d101      	bne.n	80015a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80015a4:	2301      	movs	r3, #1
 80015a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f023 0207 	bic.w	r2, r3, #7
 80015b0:	4909      	ldr	r1, [pc, #36]	; (80015d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80015b8:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d001      	beq.n	80015ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e000      	b.n	80015cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40022000 	.word	0x40022000

080015dc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80015e0:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80015e6:	f043 0304 	orr.w	r3, r3, #4
 80015ea:	6013      	str	r3, [r2, #0]
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000

080015fc <memset>:
 80015fc:	4402      	add	r2, r0
 80015fe:	4603      	mov	r3, r0
 8001600:	4293      	cmp	r3, r2
 8001602:	d100      	bne.n	8001606 <memset+0xa>
 8001604:	4770      	bx	lr
 8001606:	f803 1b01 	strb.w	r1, [r3], #1
 800160a:	e7f9      	b.n	8001600 <memset+0x4>

0800160c <__libc_init_array>:
 800160c:	b570      	push	{r4, r5, r6, lr}
 800160e:	4d0d      	ldr	r5, [pc, #52]	; (8001644 <__libc_init_array+0x38>)
 8001610:	4c0d      	ldr	r4, [pc, #52]	; (8001648 <__libc_init_array+0x3c>)
 8001612:	1b64      	subs	r4, r4, r5
 8001614:	10a4      	asrs	r4, r4, #2
 8001616:	2600      	movs	r6, #0
 8001618:	42a6      	cmp	r6, r4
 800161a:	d109      	bne.n	8001630 <__libc_init_array+0x24>
 800161c:	4d0b      	ldr	r5, [pc, #44]	; (800164c <__libc_init_array+0x40>)
 800161e:	4c0c      	ldr	r4, [pc, #48]	; (8001650 <__libc_init_array+0x44>)
 8001620:	f000 f818 	bl	8001654 <_init>
 8001624:	1b64      	subs	r4, r4, r5
 8001626:	10a4      	asrs	r4, r4, #2
 8001628:	2600      	movs	r6, #0
 800162a:	42a6      	cmp	r6, r4
 800162c:	d105      	bne.n	800163a <__libc_init_array+0x2e>
 800162e:	bd70      	pop	{r4, r5, r6, pc}
 8001630:	f855 3b04 	ldr.w	r3, [r5], #4
 8001634:	4798      	blx	r3
 8001636:	3601      	adds	r6, #1
 8001638:	e7ee      	b.n	8001618 <__libc_init_array+0xc>
 800163a:	f855 3b04 	ldr.w	r3, [r5], #4
 800163e:	4798      	blx	r3
 8001640:	3601      	adds	r6, #1
 8001642:	e7f2      	b.n	800162a <__libc_init_array+0x1e>
 8001644:	08001718 	.word	0x08001718
 8001648:	08001718 	.word	0x08001718
 800164c:	08001718 	.word	0x08001718
 8001650:	0800171c 	.word	0x0800171c

08001654 <_init>:
 8001654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001656:	bf00      	nop
 8001658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800165a:	bc08      	pop	{r3}
 800165c:	469e      	mov	lr, r3
 800165e:	4770      	bx	lr

08001660 <_fini>:
 8001660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001662:	bf00      	nop
 8001664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001666:	bc08      	pop	{r3}
 8001668:	469e      	mov	lr, r3
 800166a:	4770      	bx	lr
